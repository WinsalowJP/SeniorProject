#include "imu.h"
#include "stm32wbxx_hal_i2c.h"
// bring in the I2C1 handle defined elsewhere
extern I2C_HandleTypeDef hi2c1;

static void _delay_ms(uint32_t ms) { HAL_Delay(ms); }

int BNO055_Init(void)
{
    uint8_t cmd;

    // 1) go to CONFIG mode
    cmd = OPERATION_MODE_CONFIG;
    _delay_ms(100);
    if (HAL_I2C_Mem_Write(&hi2c1, BNO055_ADDR, BNO055_OPR_MODE,
                          I2C_MEMADD_SIZE_8BIT, &cmd, 1, HAL_MAX_DELAY) != HAL_OK)
        return -1;

    // 2) POWER NORMAL
    cmd = POWER_MODE_NORMAL;
    _delay_ms(10);
    if (HAL_I2C_Mem_Write(&hi2c1, BNO055_ADDR, BNO055_PWR_MODE,
                          I2C_MEMADD_SIZE_8BIT, &cmd, 1, HAL_MAX_DELAY) != HAL_OK)
        return -1;

    // 3) back to NDOF fusion
    return BNO055_SetMode(OPERATION_MODE_NDOF);
}

int BNO055_SetMode(uint8_t mode)
{
    _delay_ms(50);
    if (HAL_I2C_Mem_Write(&hi2c1, BNO055_ADDR, BNO055_OPR_MODE,
                          I2C_MEMADD_SIZE_8BIT, &mode, 1, HAL_MAX_DELAY) != HAL_OK)
        return -1;
    _delay_ms(500);
    return 0;
}

int BNO055_GetCalibrationStatus(uint8_t *sys, uint8_t *gyro,
                                uint8_t *accel, uint8_t *mag)
{
    uint8_t calib;
    if (HAL_I2C_Mem_Read(&hi2c1, BNO055_ADDR, BNO055_CALIB_STAT,
                         I2C_MEMADD_SIZE_8BIT, &calib, 1, HAL_MAX_DELAY) != HAL_OK)
        return -1;

    *sys   = (calib >> 6) & 0x03;
    *gyro  = (calib >> 4) & 0x03;
    *accel = (calib >> 2) & 0x03;
    *mag   =  calib       & 0x03;
    return 0;
}

int BNO055_GetEuler(int16_t *heading, int16_t *roll, int16_t *pitch)
{
    uint8_t buf[6];
    if (HAL_I2C_Mem_Read(&hi2c1, BNO055_ADDR, BNO055_EULER_H,
                         I2C_MEMADD_SIZE_8BIT, buf, 6, HAL_MAX_DELAY) != HAL_OK)
        return -1;

    *heading = (int16_t)(buf[0] | (buf[1] << 8));
    *roll    = (int16_t)(buf[2] | (buf[3] << 8));
    *pitch   = (int16_t)(buf[4] | (buf[5] << 8));
    return 0;
}
