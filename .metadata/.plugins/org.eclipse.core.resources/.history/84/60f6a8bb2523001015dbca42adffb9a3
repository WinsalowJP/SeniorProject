#ifndef __IMU_H
#define __IMU_H

#include "stm32l4xx_hal.h"
#include <stdint.h>

// BNO055 I²C address (7-bit <<1 for HAL)
#define BNO055_ADDR       (0x28 << 1)

// Register offsets
#define BNO055_OPR_MODE   0x3D
#define BNO055_PWR_MODE   0x3E
#define BNO055_CALIB_STAT 0x35
#define BNO055_EULER_H    0x1A

// Modes
#define OPERATION_MODE_CONFIG 0x00
#define OPERATION_MODE_NDOF   0x0C
#define POWER_MODE_NORMAL     0x00

// Initialize the sensor over I2C1; returns 0 on OK, –1 on error
int  BNO055_Init(void);

// Switch operating mode; returns 0 on OK, –1 on error
int  BNO055_SetMode(uint8_t mode);

// Read calibration status nibbles into the four pointers; returns 0 on OK, –1 on error
int  BNO055_GetCalibrationStatus(uint8_t *sys, uint8_t *gyro, uint8_t *accel, uint8_t *mag);

// Read raw Euler H/R/P (in 1/16° units) into the three pointers; 0 on OK, –1 on error
int  BNO055_GetEuler(int16_t *heading, int16_t *roll, int16_t *pitch);

#endif // __IMU_H
