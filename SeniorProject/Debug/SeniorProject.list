
SeniorProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000890c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08008a50  08008a50  00009a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008f24  08008f24  00009f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008f2c  08008f2c  00009f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008f30  08008f30  00009f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f0  20000008  08008f34  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000364  200001f8  08009124  0000a1f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000055c  08009124  0000a55c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000a1f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017734  00000000  00000000  0000a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002da8  00000000  00000000  0002195c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001890  00000000  00000000  00024708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012ce  00000000  00000000  00025f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002499c  00000000  00000000  00027266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016e63  00000000  00000000  0004bc02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ea36f  00000000  00000000  00062a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0014cdd4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000078b4  00000000  00000000  0014ce18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001546cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f8 	.word	0x200001f8
 800015c:	00000000 	.word	0x00000000
 8000160:	08008a34 	.word	0x08008a34

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001fc 	.word	0x200001fc
 800017c:	08008a34 	.word	0x08008a34

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b988 	b.w	8000e80 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	468e      	mov	lr, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	4688      	mov	r8, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14a      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	d962      	bls.n	8000c64 <__udivmoddi4+0xdc>
 8000b9e:	fab2 f682 	clz	r6, r2
 8000ba2:	b14e      	cbz	r6, 8000bb8 <__udivmoddi4+0x30>
 8000ba4:	f1c6 0320 	rsb	r3, r6, #32
 8000ba8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bac:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb0:	40b7      	lsls	r7, r6
 8000bb2:	ea43 0808 	orr.w	r8, r3, r8
 8000bb6:	40b4      	lsls	r4, r6
 8000bb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bc4:	0c23      	lsrs	r3, r4, #16
 8000bc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bce:	fb01 f20c 	mul.w	r2, r1, ip
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0x62>
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bdc:	f080 80ea 	bcs.w	8000db4 <__udivmoddi4+0x22c>
 8000be0:	429a      	cmp	r2, r3
 8000be2:	f240 80e7 	bls.w	8000db4 <__udivmoddi4+0x22c>
 8000be6:	3902      	subs	r1, #2
 8000be8:	443b      	add	r3, r7
 8000bea:	1a9a      	subs	r2, r3, r2
 8000bec:	b2a3      	uxth	r3, r4
 8000bee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfe:	459c      	cmp	ip, r3
 8000c00:	d909      	bls.n	8000c16 <__udivmoddi4+0x8e>
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c08:	f080 80d6 	bcs.w	8000db8 <__udivmoddi4+0x230>
 8000c0c:	459c      	cmp	ip, r3
 8000c0e:	f240 80d3 	bls.w	8000db8 <__udivmoddi4+0x230>
 8000c12:	443b      	add	r3, r7
 8000c14:	3802      	subs	r0, #2
 8000c16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c1a:	eba3 030c 	sub.w	r3, r3, ip
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11d      	cbz	r5, 8000c2a <__udivmoddi4+0xa2>
 8000c22:	40f3      	lsrs	r3, r6
 8000c24:	2200      	movs	r2, #0
 8000c26:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d905      	bls.n	8000c3e <__udivmoddi4+0xb6>
 8000c32:	b10d      	cbz	r5, 8000c38 <__udivmoddi4+0xb0>
 8000c34:	e9c5 0100 	strd	r0, r1, [r5]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e7f5      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c3e:	fab3 f183 	clz	r1, r3
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d146      	bne.n	8000cd4 <__udivmoddi4+0x14c>
 8000c46:	4573      	cmp	r3, lr
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xc8>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 8105 	bhi.w	8000e5a <__udivmoddi4+0x2d2>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	4690      	mov	r8, r2
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0e5      	beq.n	8000c2a <__udivmoddi4+0xa2>
 8000c5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000c62:	e7e2      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	f000 8090 	beq.w	8000d8a <__udivmoddi4+0x202>
 8000c6a:	fab2 f682 	clz	r6, r2
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	f040 80a4 	bne.w	8000dbc <__udivmoddi4+0x234>
 8000c74:	1a8a      	subs	r2, r1, r2
 8000c76:	0c03      	lsrs	r3, r0, #16
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	b280      	uxth	r0, r0
 8000c7e:	b2bc      	uxth	r4, r7
 8000c80:	2101      	movs	r1, #1
 8000c82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x11e>
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x11c>
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	f200 80e0 	bhi.w	8000e64 <__udivmoddi4+0x2dc>
 8000ca4:	46c4      	mov	ip, r8
 8000ca6:	1a9b      	subs	r3, r3, r2
 8000ca8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cb0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cb4:	fb02 f404 	mul.w	r4, r2, r4
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x144>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x142>
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	f200 80ca 	bhi.w	8000e5e <__udivmoddi4+0x2d6>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0x98>
 8000cd4:	f1c1 0620 	rsb	r6, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 f706 	lsr.w	r7, r2, r6
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	fa0e f401 	lsl.w	r4, lr, r1
 8000ce4:	fa20 f306 	lsr.w	r3, r0, r6
 8000ce8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	fa1f fc87 	uxth.w	ip, r7
 8000cfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000cfe:	0c1c      	lsrs	r4, r3, #16
 8000d00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x1a0>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d1a:	f080 809c 	bcs.w	8000e56 <__udivmoddi4+0x2ce>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8099 	bls.w	8000e56 <__udivmoddi4+0x2ce>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	fa1f fe83 	uxth.w	lr, r3
 8000d30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d34:	fb09 4413 	mls	r4, r9, r3, r4
 8000d38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d40:	45a4      	cmp	ip, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x1ce>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d4a:	f080 8082 	bcs.w	8000e52 <__udivmoddi4+0x2ca>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	d97f      	bls.n	8000e52 <__udivmoddi4+0x2ca>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d5a:	eba4 040c 	sub.w	r4, r4, ip
 8000d5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d62:	4564      	cmp	r4, ip
 8000d64:	4673      	mov	r3, lr
 8000d66:	46e1      	mov	r9, ip
 8000d68:	d362      	bcc.n	8000e30 <__udivmoddi4+0x2a8>
 8000d6a:	d05f      	beq.n	8000e2c <__udivmoddi4+0x2a4>
 8000d6c:	b15d      	cbz	r5, 8000d86 <__udivmoddi4+0x1fe>
 8000d6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000d72:	eb64 0409 	sbc.w	r4, r4, r9
 8000d76:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d7e:	431e      	orrs	r6, r3
 8000d80:	40cc      	lsrs	r4, r1
 8000d82:	e9c5 6400 	strd	r6, r4, [r5]
 8000d86:	2100      	movs	r1, #0
 8000d88:	e74f      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000d8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d8e:	0c01      	lsrs	r1, r0, #16
 8000d90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d94:	b280      	uxth	r0, r0
 8000d96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4638      	mov	r0, r7
 8000d9e:	463c      	mov	r4, r7
 8000da0:	46b8      	mov	r8, r7
 8000da2:	46be      	mov	lr, r7
 8000da4:	2620      	movs	r6, #32
 8000da6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000daa:	eba2 0208 	sub.w	r2, r2, r8
 8000dae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000db2:	e766      	b.n	8000c82 <__udivmoddi4+0xfa>
 8000db4:	4601      	mov	r1, r0
 8000db6:	e718      	b.n	8000bea <__udivmoddi4+0x62>
 8000db8:	4610      	mov	r0, r2
 8000dba:	e72c      	b.n	8000c16 <__udivmoddi4+0x8e>
 8000dbc:	f1c6 0220 	rsb	r2, r6, #32
 8000dc0:	fa2e f302 	lsr.w	r3, lr, r2
 8000dc4:	40b7      	lsls	r7, r6
 8000dc6:	40b1      	lsls	r1, r6
 8000dc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dd6:	b2bc      	uxth	r4, r7
 8000dd8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ddc:	0c11      	lsrs	r1, r2, #16
 8000dde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de2:	fb08 f904 	mul.w	r9, r8, r4
 8000de6:	40b0      	lsls	r0, r6
 8000de8:	4589      	cmp	r9, r1
 8000dea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dee:	b280      	uxth	r0, r0
 8000df0:	d93e      	bls.n	8000e70 <__udivmoddi4+0x2e8>
 8000df2:	1879      	adds	r1, r7, r1
 8000df4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000df8:	d201      	bcs.n	8000dfe <__udivmoddi4+0x276>
 8000dfa:	4589      	cmp	r9, r1
 8000dfc:	d81f      	bhi.n	8000e3e <__udivmoddi4+0x2b6>
 8000dfe:	eba1 0109 	sub.w	r1, r1, r9
 8000e02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e06:	fb09 f804 	mul.w	r8, r9, r4
 8000e0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e0e:	b292      	uxth	r2, r2
 8000e10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e14:	4542      	cmp	r2, r8
 8000e16:	d229      	bcs.n	8000e6c <__udivmoddi4+0x2e4>
 8000e18:	18ba      	adds	r2, r7, r2
 8000e1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e1e:	d2c4      	bcs.n	8000daa <__udivmoddi4+0x222>
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d2c2      	bcs.n	8000daa <__udivmoddi4+0x222>
 8000e24:	f1a9 0102 	sub.w	r1, r9, #2
 8000e28:	443a      	add	r2, r7
 8000e2a:	e7be      	b.n	8000daa <__udivmoddi4+0x222>
 8000e2c:	45f0      	cmp	r8, lr
 8000e2e:	d29d      	bcs.n	8000d6c <__udivmoddi4+0x1e4>
 8000e30:	ebbe 0302 	subs.w	r3, lr, r2
 8000e34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e38:	3801      	subs	r0, #1
 8000e3a:	46e1      	mov	r9, ip
 8000e3c:	e796      	b.n	8000d6c <__udivmoddi4+0x1e4>
 8000e3e:	eba7 0909 	sub.w	r9, r7, r9
 8000e42:	4449      	add	r1, r9
 8000e44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4c:	fb09 f804 	mul.w	r8, r9, r4
 8000e50:	e7db      	b.n	8000e0a <__udivmoddi4+0x282>
 8000e52:	4673      	mov	r3, lr
 8000e54:	e77f      	b.n	8000d56 <__udivmoddi4+0x1ce>
 8000e56:	4650      	mov	r0, sl
 8000e58:	e766      	b.n	8000d28 <__udivmoddi4+0x1a0>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e6fd      	b.n	8000c5a <__udivmoddi4+0xd2>
 8000e5e:	443b      	add	r3, r7
 8000e60:	3a02      	subs	r2, #2
 8000e62:	e733      	b.n	8000ccc <__udivmoddi4+0x144>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	443b      	add	r3, r7
 8000e6a:	e71c      	b.n	8000ca6 <__udivmoddi4+0x11e>
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	e79c      	b.n	8000daa <__udivmoddi4+0x222>
 8000e70:	eba1 0109 	sub.w	r1, r1, r9
 8000e74:	46c4      	mov	ip, r8
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fb09 f804 	mul.w	r8, r9, r4
 8000e7e:	e7c4      	b.n	8000e0a <__udivmoddi4+0x282>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <read_adc_value>:

    return temperature;
}

uint32_t read_adc_value(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]

    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 8000ec2:	480d      	ldr	r0, [pc, #52]	@ (8000ef8 <read_adc_value+0x40>)
 8000ec4:	f001 fa68 	bl	8002398 <HAL_ADC_Start>

    // Wait for conversion completion (timeout in milliseconds)
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8000ec8:	210a      	movs	r1, #10
 8000eca:	480b      	ldr	r0, [pc, #44]	@ (8000ef8 <read_adc_value+0x40>)
 8000ecc:	f001 faeb 	bl	80024a6 <HAL_ADC_PollForConversion>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d104      	bne.n	8000ee0 <read_adc_value+0x28>
    {
        // Retrieve ADC conversion result
        adcValue = HAL_ADC_GetValue(&hadc1);
 8000ed6:	4808      	ldr	r0, [pc, #32]	@ (8000ef8 <read_adc_value+0x40>)
 8000ed8:	f001 fb72 	bl	80025c0 <HAL_ADC_GetValue>
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	e002      	b.n	8000ee6 <read_adc_value+0x2e>
    }
    else
    {
        // Optional: handle error
        printf("ADC conversion error!\r\n");
 8000ee0:	4806      	ldr	r0, [pc, #24]	@ (8000efc <read_adc_value+0x44>)
 8000ee2:	f005 fe35 	bl	8006b50 <puts>
    }

    // Stop ADC (optional for single conversion mode)
    HAL_ADC_Stop(&hadc1);
 8000ee6:	4804      	ldr	r0, [pc, #16]	@ (8000ef8 <read_adc_value+0x40>)
 8000ee8:	f001 faaa 	bl	8002440 <HAL_ADC_Stop>

    return adcValue;
 8000eec:	687b      	ldr	r3, [r7, #4]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000224 	.word	0x20000224
 8000efc:	08008a64 	.word	0x08008a64

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f06:	f000 fe3b 	bl	8001b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 f863 	bl	8000fd4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f0e:	f000 f8b9 	bl	8001084 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f12:	f000 f9c7 	bl	80012a4 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000f16:	f000 f937 	bl	8001188 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8000f1a:	f000 f975 	bl	8001208 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000f1e:	f000 f8cf 	bl	80010c0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8000f22:	2000      	movs	r0, #0
 8000f24:	f000 fcd4 	bl	80018d0 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f000 fcd1 	bl	80018d0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f000 fcce 	bl	80018d0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000f34:	2101      	movs	r1, #1
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 fd04 	bl	8001944 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f000 fd00 	bl	8001944 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000f44:	2101      	movs	r1, #1
 8000f46:	2002      	movs	r0, #2
 8000f48:	f000 fcfc 	bl	8001944 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc4 <main+0xc4>)
 8000f4e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f52:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <main+0xc4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <main+0xc4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000f60:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <main+0xc4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000f66:	4b17      	ldr	r3, [pc, #92]	@ (8000fc4 <main+0xc4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000f6c:	4915      	ldr	r1, [pc, #84]	@ (8000fc4 <main+0xc4>)
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 fd58 	bl	8001a24 <BSP_COM_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <main+0x7e>
  {
    Error_Handler();
 8000f7a:	f000 f9bb 	bl	80012f4 <Error_Handler>
//          float tempF = tempC * 9.0f / 5.0f + 32.0f;
//          printf("\033[2J\033[H");
//          printf("Temperature: %.3f °C / %.3f °F\r\n", tempC, tempF);
//      }

      uint32_t adcVal = read_adc_value();
 8000f7e:	f7ff ff9b 	bl	8000eb8 <read_adc_value>
 8000f82:	6078      	str	r0, [r7, #4]
      // Convert ADC value to a voltage (for a 12-bit ADC with 3.3V reference)
      float voltage = (adcVal / 4095.0f) * 5.0f;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f8e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000fc8 <main+0xc8>
 8000f92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f96:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f9e:	edc7 7a00 	vstr	s15, [r7]
      // Clear console, then print ADC raw value and converted voltage.
      printf("\033[2J\033[H");
 8000fa2:	480a      	ldr	r0, [pc, #40]	@ (8000fcc <main+0xcc>)
 8000fa4:	f005 fd6c 	bl	8006a80 <iprintf>
      printf("ADC Value: %lu, Voltage: %.2f V\r\n", adcVal, voltage);
 8000fa8:	6838      	ldr	r0, [r7, #0]
 8000faa:	f7ff faa5 	bl	80004f8 <__aeabi_f2d>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4806      	ldr	r0, [pc, #24]	@ (8000fd0 <main+0xd0>)
 8000fb6:	f005 fd63 	bl	8006a80 <iprintf>

      HAL_Delay(10); // Delay 1 second between readings
 8000fba:	200a      	movs	r0, #10
 8000fbc:	f000 fe66 	bl	8001c8c <HAL_Delay>
  {
 8000fc0:	bf00      	nop
 8000fc2:	e7dc      	b.n	8000f7e <main+0x7e>
 8000fc4:	20000214 	.word	0x20000214
 8000fc8:	457ff000 	.word	0x457ff000
 8000fcc:	08008a7c 	.word	0x08008a7c
 8000fd0:	08008a84 	.word	0x08008a84

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b09a      	sub	sp, #104	@ 0x68
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	2248      	movs	r2, #72	@ 0x48
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f005 fe94 	bl	8006d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]
 8000ff6:	615a      	str	r2, [r3, #20]
 8000ff8:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <SystemClock_Config+0xac>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001002:	4a1f      	ldr	r2, [pc, #124]	@ (8001080 <SystemClock_Config+0xac>)
 8001004:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <SystemClock_Config+0xac>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001016:	2322      	movs	r3, #34	@ 0x22
 8001018:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800101a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800101e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001020:	2301      	movs	r3, #1
 8001022:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001024:	2340      	movs	r3, #64	@ 0x40
 8001026:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001028:	2300      	movs	r3, #0
 800102a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800102c:	23a0      	movs	r3, #160	@ 0xa0
 800102e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001030:	2300      	movs	r3, #0
 8001032:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001034:	f107 0320 	add.w	r3, r7, #32
 8001038:	4618      	mov	r0, r3
 800103a:	f002 ff89 	bl	8003f50 <HAL_RCC_OscConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001044:	f000 f956 	bl	80012f4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001048:	236f      	movs	r3, #111	@ 0x6f
 800104a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2101      	movs	r1, #1
 8001068:	4618      	mov	r0, r3
 800106a:	f003 fae5 	bl	8004638 <HAL_RCC_ClockConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001074:	f000 f93e 	bl	80012f4 <Error_Handler>
  }
}
 8001078:	bf00      	nop
 800107a:	3768      	adds	r7, #104	@ 0x68
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	58000400 	.word	0x58000400

08001084 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b094      	sub	sp, #80	@ 0x50
 8001088:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800108a:	463b      	mov	r3, r7
 800108c:	2250      	movs	r2, #80	@ 0x50
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f005 fe3d 	bl	8006d10 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001096:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800109a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800109c:	2300      	movs	r3, #0
 800109e:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a4:	463b      	mov	r3, r7
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 ff03 	bl	8004eb2 <HAL_RCCEx_PeriphCLKConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80010b2:	f000 f91f 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80010b6:	bf00      	nop
 80010b8:	3750      	adds	r7, #80	@ 0x50
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
 80010d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010d6:	4b29      	ldr	r3, [pc, #164]	@ (800117c <MX_ADC1_Init+0xbc>)
 80010d8:	4a29      	ldr	r2, [pc, #164]	@ (8001180 <MX_ADC1_Init+0xc0>)
 80010da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010dc:	4b27      	ldr	r3, [pc, #156]	@ (800117c <MX_ADC1_Init+0xbc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e2:	4b26      	ldr	r3, [pc, #152]	@ (800117c <MX_ADC1_Init+0xbc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e8:	4b24      	ldr	r3, [pc, #144]	@ (800117c <MX_ADC1_Init+0xbc>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ee:	4b23      	ldr	r3, [pc, #140]	@ (800117c <MX_ADC1_Init+0xbc>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f4:	4b21      	ldr	r3, [pc, #132]	@ (800117c <MX_ADC1_Init+0xbc>)
 80010f6:	2204      	movs	r2, #4
 80010f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010fa:	4b20      	ldr	r3, [pc, #128]	@ (800117c <MX_ADC1_Init+0xbc>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001100:	4b1e      	ldr	r3, [pc, #120]	@ (800117c <MX_ADC1_Init+0xbc>)
 8001102:	2200      	movs	r2, #0
 8001104:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001106:	4b1d      	ldr	r3, [pc, #116]	@ (800117c <MX_ADC1_Init+0xbc>)
 8001108:	2201      	movs	r2, #1
 800110a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800110c:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <MX_ADC1_Init+0xbc>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001114:	4b19      	ldr	r3, [pc, #100]	@ (800117c <MX_ADC1_Init+0xbc>)
 8001116:	2200      	movs	r2, #0
 8001118:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111a:	4b18      	ldr	r3, [pc, #96]	@ (800117c <MX_ADC1_Init+0xbc>)
 800111c:	2200      	movs	r2, #0
 800111e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001120:	4b16      	ldr	r3, [pc, #88]	@ (800117c <MX_ADC1_Init+0xbc>)
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <MX_ADC1_Init+0xbc>)
 800112a:	2200      	movs	r2, #0
 800112c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800112e:	4b13      	ldr	r3, [pc, #76]	@ (800117c <MX_ADC1_Init+0xbc>)
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001136:	4811      	ldr	r0, [pc, #68]	@ (800117c <MX_ADC1_Init+0xbc>)
 8001138:	f000 ffe2 	bl	8002100 <HAL_ADC_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001142:	f000 f8d7 	bl	80012f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001146:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <MX_ADC1_Init+0xc4>)
 8001148:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800114a:	2306      	movs	r3, #6
 800114c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001152:	237f      	movs	r3, #127	@ 0x7f
 8001154:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001156:	2304      	movs	r3, #4
 8001158:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	4806      	ldr	r0, [pc, #24]	@ (800117c <MX_ADC1_Init+0xbc>)
 8001164:	f001 fa3a 	bl	80025dc <HAL_ADC_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800116e:	f000 f8c1 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000224 	.word	0x20000224
 8001180:	50040000 	.word	0x50040000
 8001184:	14f00020 	.word	0x14f00020

08001188 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800118c:	4b1b      	ldr	r3, [pc, #108]	@ (80011fc <MX_I2C3_Init+0x74>)
 800118e:	4a1c      	ldr	r2, [pc, #112]	@ (8001200 <MX_I2C3_Init+0x78>)
 8001190:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B07CB4;
 8001192:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <MX_I2C3_Init+0x74>)
 8001194:	4a1b      	ldr	r2, [pc, #108]	@ (8001204 <MX_I2C3_Init+0x7c>)
 8001196:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001198:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <MX_I2C3_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800119e:	4b17      	ldr	r3, [pc, #92]	@ (80011fc <MX_I2C3_Init+0x74>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a4:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <MX_I2C3_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80011aa:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <MX_I2C3_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <MX_I2C3_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <MX_I2C3_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <MX_I2C3_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011c2:	480e      	ldr	r0, [pc, #56]	@ (80011fc <MX_I2C3_Init+0x74>)
 80011c4:	f002 f9fe 	bl	80035c4 <HAL_I2C_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80011ce:	f000 f891 	bl	80012f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011d2:	2100      	movs	r1, #0
 80011d4:	4809      	ldr	r0, [pc, #36]	@ (80011fc <MX_I2C3_Init+0x74>)
 80011d6:	f002 fa90 	bl	80036fa <HAL_I2CEx_ConfigAnalogFilter>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80011e0:	f000 f888 	bl	80012f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80011e4:	2100      	movs	r1, #0
 80011e6:	4805      	ldr	r0, [pc, #20]	@ (80011fc <MX_I2C3_Init+0x74>)
 80011e8:	f002 fad2 	bl	8003790 <HAL_I2CEx_ConfigDigitalFilter>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80011f2:	f000 f87f 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000288 	.word	0x20000288
 8001200:	40005c00 	.word	0x40005c00
 8001204:	00b07cb4 	.word	0x00b07cb4

08001208 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800120c:	4b23      	ldr	r3, [pc, #140]	@ (800129c <MX_LPUART1_UART_Init+0x94>)
 800120e:	4a24      	ldr	r2, [pc, #144]	@ (80012a0 <MX_LPUART1_UART_Init+0x98>)
 8001210:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001212:	4b22      	ldr	r3, [pc, #136]	@ (800129c <MX_LPUART1_UART_Init+0x94>)
 8001214:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001218:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800121a:	4b20      	ldr	r3, [pc, #128]	@ (800129c <MX_LPUART1_UART_Init+0x94>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001220:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <MX_LPUART1_UART_Init+0x94>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001226:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <MX_LPUART1_UART_Init+0x94>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <MX_LPUART1_UART_Init+0x94>)
 800122e:	220c      	movs	r2, #12
 8001230:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001232:	4b1a      	ldr	r3, [pc, #104]	@ (800129c <MX_LPUART1_UART_Init+0x94>)
 8001234:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001238:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800123a:	4b18      	ldr	r3, [pc, #96]	@ (800129c <MX_LPUART1_UART_Init+0x94>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001240:	4b16      	ldr	r3, [pc, #88]	@ (800129c <MX_LPUART1_UART_Init+0x94>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <MX_LPUART1_UART_Init+0x94>)
 8001248:	2200      	movs	r2, #0
 800124a:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800124c:	4b13      	ldr	r3, [pc, #76]	@ (800129c <MX_LPUART1_UART_Init+0x94>)
 800124e:	2200      	movs	r2, #0
 8001250:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001252:	4812      	ldr	r0, [pc, #72]	@ (800129c <MX_LPUART1_UART_Init+0x94>)
 8001254:	f004 f8d4 	bl	8005400 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 800125e:	f000 f849 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001262:	2100      	movs	r1, #0
 8001264:	480d      	ldr	r0, [pc, #52]	@ (800129c <MX_LPUART1_UART_Init+0x94>)
 8001266:	f004 fe29 	bl	8005ebc <HAL_UARTEx_SetTxFifoThreshold>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001270:	f000 f840 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001274:	2100      	movs	r1, #0
 8001276:	4809      	ldr	r0, [pc, #36]	@ (800129c <MX_LPUART1_UART_Init+0x94>)
 8001278:	f004 fe5e 	bl	8005f38 <HAL_UARTEx_SetRxFifoThreshold>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001282:	f000 f837 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	@ (800129c <MX_LPUART1_UART_Init+0x94>)
 8001288:	f004 fddf 	bl	8005e4a <HAL_UARTEx_DisableFifoMode>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001292:	f000 f82f 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200002dc 	.word	0x200002dc
 80012a0:	40008000 	.word	0x40008000

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b8:	2004      	movs	r0, #4
 80012ba:	f7ff fde3 	bl	8000e84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2001      	movs	r0, #1
 80012c0:	f7ff fde0 	bl	8000e84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c4:	2002      	movs	r0, #2
 80012c6:	f7ff fddd 	bl	8000e84 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80012ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80012ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80012dc:	230a      	movs	r3, #10
 80012de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e8:	f001 ffe4 	bl	80032b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <Error_Handler+0x8>

08001300 <LL_AHB2_GRP1_EnableClock>:
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800130c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800130e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4313      	orrs	r3, r2
 8001316:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800131c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4013      	ands	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001324:	68fb      	ldr	r3, [r7, #12]
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001332:	b480      	push	{r7}
 8001334:	b085      	sub	sp, #20
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800133a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800133e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001340:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4313      	orrs	r3, r2
 8001348:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800134a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800134e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4013      	ands	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800136c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001370:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001372:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4313      	orrs	r3, r2
 800137a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800137c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001380:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001388:	68fb      	ldr	r3, [r7, #12]
}
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b09c      	sub	sp, #112	@ 0x70
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2250      	movs	r2, #80	@ 0x50
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f005 fca3 	bl	8006d10 <memset>
  if(hadc->Instance==ADC1)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a15      	ldr	r2, [pc, #84]	@ (8001424 <HAL_ADC_MspInit+0x80>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d123      	bne.n	800141c <HAL_ADC_MspInit+0x78>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013d8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80013da:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80013de:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 fd64 	bl	8004eb2 <HAL_RCCEx_PeriphCLKConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80013f0:	f7ff ff80 	bl	80012f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013f4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013f8:	f7ff ff82 	bl	8001300 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	2001      	movs	r0, #1
 80013fe:	f7ff ff7f 	bl	8001300 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001402:	2301      	movs	r3, #1
 8001404:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001406:	2303      	movs	r3, #3
 8001408:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001412:	4619      	mov	r1, r3
 8001414:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001418:	f001 ff4c 	bl	80032b4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800141c:	bf00      	nop
 800141e:	3770      	adds	r7, #112	@ 0x70
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	50040000 	.word	0x50040000

08001428 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b09c      	sub	sp, #112	@ 0x70
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2250      	movs	r2, #80	@ 0x50
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f005 fc61 	bl	8006d10 <memset>
  if(hi2c->Instance==I2C3)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a16      	ldr	r2, [pc, #88]	@ (80014ac <HAL_I2C_MspInit+0x84>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d125      	bne.n	80014a4 <HAL_I2C_MspInit+0x7c>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001458:	2308      	movs	r3, #8
 800145a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800145c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001460:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fd23 	bl	8004eb2 <HAL_RCCEx_PeriphCLKConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001472:	f7ff ff3f 	bl	80012f4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001476:	2004      	movs	r0, #4
 8001478:	f7ff ff42 	bl	8001300 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800147c:	2303      	movs	r3, #3
 800147e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001480:	2312      	movs	r3, #18
 8001482:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001488:	2302      	movs	r3, #2
 800148a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800148c:	2304      	movs	r3, #4
 800148e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001490:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	@ (80014b0 <HAL_I2C_MspInit+0x88>)
 8001498:	f001 ff0c 	bl	80032b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800149c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80014a0:	f7ff ff47 	bl	8001332 <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80014a4:	bf00      	nop
 80014a6:	3770      	adds	r7, #112	@ 0x70
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40005c00 	.word	0x40005c00
 80014b0:	48000800 	.word	0x48000800

080014b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b09c      	sub	sp, #112	@ 0x70
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	2250      	movs	r2, #80	@ 0x50
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f005 fc1b 	bl	8006d10 <memset>
  if(huart->Instance==LPUART1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a20      	ldr	r2, [pc, #128]	@ (8001560 <HAL_UART_MspInit+0xac>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d138      	bne.n	8001556 <HAL_UART_MspInit+0xa2>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80014e4:	2302      	movs	r3, #2
 80014e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	4618      	mov	r0, r3
 80014f2:	f003 fcde 	bl	8004eb2 <HAL_RCCEx_PeriphCLKConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014fc:	f7ff fefa 	bl	80012f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001500:	2001      	movs	r0, #1
 8001502:	f7ff ff2f 	bl	8001364 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2001      	movs	r0, #1
 8001508:	f7ff fefa 	bl	8001300 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150c:	2002      	movs	r0, #2
 800150e:	f7ff fef7 	bl	8001300 <LL_AHB2_GRP1_EnableClock>
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PA6     ------> LPUART1_CTS
    PB12     ------> LPUART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 8001512:	234c      	movs	r3, #76	@ 0x4c
 8001514:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001522:	2308      	movs	r3, #8
 8001524:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800152a:	4619      	mov	r1, r3
 800152c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001530:	f001 fec0 	bl	80032b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001534:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001538:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001546:	2308      	movs	r3, #8
 8001548:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800154e:	4619      	mov	r1, r3
 8001550:	4804      	ldr	r0, [pc, #16]	@ (8001564 <HAL_UART_MspInit+0xb0>)
 8001552:	f001 feaf 	bl	80032b4 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001556:	bf00      	nop
 8001558:	3770      	adds	r7, #112	@ 0x70
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40008000 	.word	0x40008000
 8001564:	48000400 	.word	0x48000400

08001568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <NMI_Handler+0x4>

08001570 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <HardFault_Handler+0x4>

08001578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <MemManage_Handler+0x4>

08001580 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <BusFault_Handler+0x4>

08001588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <UsageFault_Handler+0x4>

08001590 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015be:	f000 fb39 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  return 1;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <_kill>:

int _kill(int pid, int sig)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015e0:	f005 fbe8 	bl	8006db4 <__errno>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2216      	movs	r2, #22
 80015e8:	601a      	str	r2, [r3, #0]
  return -1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_exit>:

void _exit (int status)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015fe:	f04f 31ff 	mov.w	r1, #4294967295
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ffe7 	bl	80015d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <_exit+0x12>

0800160c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	e00a      	b.n	8001634 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800161e:	f3af 8000 	nop.w
 8001622:	4601      	mov	r1, r0
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	60ba      	str	r2, [r7, #8]
 800162a:	b2ca      	uxtb	r2, r1
 800162c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3301      	adds	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	429a      	cmp	r2, r3
 800163a:	dbf0      	blt.n	800161e <_read+0x12>
  }

  return len;
 800163c:	687b      	ldr	r3, [r7, #4]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b086      	sub	sp, #24
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	e009      	b.n	800166c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	60ba      	str	r2, [r7, #8]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f000 fa41 	bl	8001ae8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	429a      	cmp	r2, r3
 8001672:	dbf1      	blt.n	8001658 <_write+0x12>
  }
  return len;
 8001674:	687b      	ldr	r3, [r7, #4]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_close>:

int _close(int file)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016a6:	605a      	str	r2, [r3, #4]
  return 0;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <_isatty>:

int _isatty(int file)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f0:	4a14      	ldr	r2, [pc, #80]	@ (8001744 <_sbrk+0x5c>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <_sbrk+0x60>)
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016fc:	4b13      	ldr	r3, [pc, #76]	@ (800174c <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001704:	4b11      	ldr	r3, [pc, #68]	@ (800174c <_sbrk+0x64>)
 8001706:	4a12      	ldr	r2, [pc, #72]	@ (8001750 <_sbrk+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170a:	4b10      	ldr	r3, [pc, #64]	@ (800174c <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	429a      	cmp	r2, r3
 8001716:	d207      	bcs.n	8001728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001718:	f005 fb4c 	bl	8006db4 <__errno>
 800171c:	4603      	mov	r3, r0
 800171e:	220c      	movs	r2, #12
 8001720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	e009      	b.n	800173c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001728:	4b08      	ldr	r3, [pc, #32]	@ (800174c <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172e:	4b07      	ldr	r3, [pc, #28]	@ (800174c <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	4a05      	ldr	r2, [pc, #20]	@ (800174c <_sbrk+0x64>)
 8001738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20030000 	.word	0x20030000
 8001748:	00000400 	.word	0x00000400
 800174c:	20000370 	.word	0x20000370
 8001750:	20000560 	.word	0x20000560

08001754 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001758:	4b24      	ldr	r3, [pc, #144]	@ (80017ec <SystemInit+0x98>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800175e:	4a23      	ldr	r2, [pc, #140]	@ (80017ec <SystemInit+0x98>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800177c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001780:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800178c:	4b18      	ldr	r3, [pc, #96]	@ (80017f0 <SystemInit+0x9c>)
 800178e:	4013      	ands	r3, r2
 8001790:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001792:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800179a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800179e:	f023 0305 	bic.w	r3, r3, #5
 80017a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80017ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017be:	4a0d      	ldr	r2, [pc, #52]	@ (80017f4 <SystemInit+0xa0>)
 80017c0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80017c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017c6:	4a0b      	ldr	r2, [pc, #44]	@ (80017f4 <SystemInit+0xa0>)
 80017c8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00
 80017f0:	faf6fefb 	.word	0xfaf6fefb
 80017f4:	22041000 	.word	0x22041000

080017f8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80017f8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fc:	3304      	adds	r3, #4

080017fe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001800:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001802:	d3f9      	bcc.n	80017f8 <CopyDataInit>
  bx lr
 8001804:	4770      	bx	lr

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001806:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001808:	3004      	adds	r0, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800180a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>
  bx lr
 800180e:	4770      	bx	lr

08001810 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001810:	480c      	ldr	r0, [pc, #48]	@ (8001844 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001812:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001814:	f7ff ff9e 	bl	8001754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001818:	480b      	ldr	r0, [pc, #44]	@ (8001848 <LoopForever+0x6>)
 800181a:	490c      	ldr	r1, [pc, #48]	@ (800184c <LoopForever+0xa>)
 800181c:	4a0c      	ldr	r2, [pc, #48]	@ (8001850 <LoopForever+0xe>)
 800181e:	2300      	movs	r3, #0
 8001820:	f7ff ffed 	bl	80017fe <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001824:	480b      	ldr	r0, [pc, #44]	@ (8001854 <LoopForever+0x12>)
 8001826:	490c      	ldr	r1, [pc, #48]	@ (8001858 <LoopForever+0x16>)
 8001828:	4a0c      	ldr	r2, [pc, #48]	@ (800185c <LoopForever+0x1a>)
 800182a:	2300      	movs	r3, #0
 800182c:	f7ff ffe7 	bl	80017fe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001830:	480b      	ldr	r0, [pc, #44]	@ (8001860 <LoopForever+0x1e>)
 8001832:	490c      	ldr	r1, [pc, #48]	@ (8001864 <LoopForever+0x22>)
 8001834:	2300      	movs	r3, #0
 8001836:	f7ff ffe8 	bl	800180a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800183a:	f005 fac1 	bl	8006dc0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800183e:	f7ff fb5f 	bl	8000f00 <main>

08001842 <LoopForever>:

LoopForever:
  b LoopForever
 8001842:	e7fe      	b.n	8001842 <LoopForever>
  ldr   r0, =_estack
 8001844:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001848:	20000008 	.word	0x20000008
 800184c:	200001f8 	.word	0x200001f8
 8001850:	08008f34 	.word	0x08008f34
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001854:	20030000 	.word	0x20030000
 8001858:	20030000 	.word	0x20030000
 800185c:	08009124 	.word	0x08009124
  INIT_BSS _sbss, _ebss
 8001860:	200001f8 	.word	0x200001f8
 8001864:	2000055c 	.word	0x2000055c

08001868 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC1_IRQHandler>

0800186a <LL_AHB2_GRP1_EnableClock>:
{
 800186a:	b480      	push	{r7}
 800186c:	b085      	sub	sp, #20
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001876:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001878:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4313      	orrs	r3, r2
 8001880:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001886:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4013      	ands	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80018a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018c0:	68fb      	ldr	r3, [r7, #12]
}
 80018c2:	bf00      	nop
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80018ea:	2002      	movs	r0, #2
 80018ec:	f7ff ffbd 	bl	800186a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	4a12      	ldr	r2, [pc, #72]	@ (800193c <BSP_LED_Init+0x6c>)
 80018f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018f8:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	4a0d      	ldr	r2, [pc, #52]	@ (8001940 <BSP_LED_Init+0x70>)
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	f107 020c 	add.w	r2, r7, #12
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f001 fccd 	bl	80032b4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	4a08      	ldr	r2, [pc, #32]	@ (8001940 <BSP_LED_Init+0x70>)
 800191e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	4a05      	ldr	r2, [pc, #20]	@ (800193c <BSP_LED_Init+0x6c>)
 8001926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800192a:	2200      	movs	r2, #0
 800192c:	4619      	mov	r1, r3
 800192e:	f001 fe31 	bl	8003594 <HAL_GPIO_WritePin>
}
 8001932:	bf00      	nop
 8001934:	3720      	adds	r7, #32
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	08008b74 	.word	0x08008b74
 8001940:	2000000c 	.word	0x2000000c

08001944 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	460a      	mov	r2, r1
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	4613      	mov	r3, r2
 8001952:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d103      	bne.n	8001972 <BSP_PB_Init+0x2e>
 800196a:	2004      	movs	r0, #4
 800196c:	f7ff ff7d 	bl	800186a <LL_AHB2_GRP1_EnableClock>
 8001970:	e00c      	b.n	800198c <BSP_PB_Init+0x48>
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d103      	bne.n	8001980 <BSP_PB_Init+0x3c>
 8001978:	2008      	movs	r0, #8
 800197a:	f7ff ff76 	bl	800186a <LL_AHB2_GRP1_EnableClock>
 800197e:	e005      	b.n	800198c <BSP_PB_Init+0x48>
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d102      	bne.n	800198c <BSP_PB_Init+0x48>
 8001986:	2008      	movs	r0, #8
 8001988:	f7ff ff6f 	bl	800186a <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800198c:	79bb      	ldrb	r3, [r7, #6]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d117      	bne.n	80019c2 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4a20      	ldr	r2, [pc, #128]	@ (8001a18 <BSP_PB_Init+0xd4>)
 8001996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800199a:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 800199c:	2300      	movs	r3, #0
 800199e:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80019a0:	2301      	movs	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a4:	2302      	movs	r3, #2
 80019a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	4a1c      	ldr	r2, [pc, #112]	@ (8001a1c <BSP_PB_Init+0xd8>)
 80019ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b0:	f107 020c 	add.w	r2, r7, #12
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f001 fc7c 	bl	80032b4 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 80019bc:	2001      	movs	r0, #1
 80019be:	f000 f965 	bl	8001c8c <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80019c2:	79bb      	ldrb	r3, [r7, #6]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d123      	bne.n	8001a10 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	4a13      	ldr	r2, [pc, #76]	@ (8001a18 <BSP_PB_Init+0xd4>)
 80019cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019d0:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 80019d6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019da:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	4a0f      	ldr	r2, [pc, #60]	@ (8001a1c <BSP_PB_Init+0xd8>)
 80019e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e4:	f107 020c 	add.w	r2, r7, #12
 80019e8:	4611      	mov	r1, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f001 fc62 	bl	80032b4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001a20 <BSP_PB_Init+0xdc>)
 80019f4:	5cd3      	ldrb	r3, [r2, r3]
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	2200      	movs	r2, #0
 80019fa:	210f      	movs	r1, #15
 80019fc:	4618      	mov	r0, r3
 80019fe:	f001 fc24 	bl	800324a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	4a06      	ldr	r2, [pc, #24]	@ (8001a20 <BSP_PB_Init+0xdc>)
 8001a06:	5cd3      	ldrb	r3, [r2, r3]
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f001 fc37 	bl	800327e <HAL_NVIC_EnableIRQ>
  }
}
 8001a10:	bf00      	nop
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	08008b7c 	.word	0x08008b7c
 8001a1c:	20000018 	.word	0x20000018
 8001a20:	08008b84 	.word	0x08008b84

08001a24 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d903      	bls.n	8001a42 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a3a:	f06f 0301 	mvn.w	r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	e018      	b.n	8001a74 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	2294      	movs	r2, #148	@ 0x94
 8001a46:	fb02 f303 	mul.w	r3, r2, r3
 8001a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a80 <BSP_COM_Init+0x5c>)
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 f866 	bl	8001b20 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	2294      	movs	r2, #148	@ 0x94
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	4a08      	ldr	r2, [pc, #32]	@ (8001a80 <BSP_COM_Init+0x5c>)
 8001a5e:	4413      	add	r3, r2
 8001a60:	6839      	ldr	r1, [r7, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f80e 	bl	8001a84 <MX_LPUART1_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001a6e:	f06f 0303 	mvn.w	r3, #3
 8001a72:	e000      	b.n	8001a76 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001a74:	68fb      	ldr	r3, [r7, #12]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000374 	.word	0x20000374

08001a84 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <MX_LPUART1_Init+0x60>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	220c      	movs	r2, #12
 8001aa2:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	895b      	ldrh	r3, [r3, #10]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	891b      	ldrh	r3, [r3, #8]
 8001aba:	461a      	mov	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	899b      	ldrh	r3, [r3, #12]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ad0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f003 fc94 	bl	8005400 <HAL_UART_Init>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000024 	.word	0x20000024

08001ae8 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001af0:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <__io_putchar+0x30>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	2394      	movs	r3, #148	@ 0x94
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	4a07      	ldr	r2, [pc, #28]	@ (8001b1c <__io_putchar+0x34>)
 8001afe:	1898      	adds	r0, r3, r2
 8001b00:	1d39      	adds	r1, r7, #4
 8001b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b06:	2201      	movs	r2, #1
 8001b08:	f003 fcca 	bl	80054a0 <HAL_UART_Transmit>
  return ch;
 8001b0c:	687b      	ldr	r3, [r7, #4]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000408 	.word	0x20000408
 8001b1c:	20000374 	.word	0x20000374

08001b20 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001b28:	2002      	movs	r0, #2
 8001b2a:	f7ff fe9e 	bl	800186a <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8001b2e:	2002      	movs	r0, #2
 8001b30:	f7ff fe9b 	bl	800186a <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001b34:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001b38:	f7ff feb0 	bl	800189c <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001b3c:	2340      	movs	r3, #64	@ 0x40
 8001b3e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001b4c:	2307      	movs	r3, #7
 8001b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	4619      	mov	r1, r3
 8001b56:	4809      	ldr	r0, [pc, #36]	@ (8001b7c <COM1_MspInit+0x5c>)
 8001b58:	f001 fbac 	bl	80032b4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001b5c:	2380      	movs	r3, #128	@ 0x80
 8001b5e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001b64:	2307      	movs	r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4803      	ldr	r0, [pc, #12]	@ (8001b7c <COM1_MspInit+0x5c>)
 8001b70:	f001 fba0 	bl	80032b4 <HAL_GPIO_Init>
}
 8001b74:	bf00      	nop
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	48000400 	.word	0x48000400

08001b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <HAL_Init+0x3c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001bbc <HAL_Init+0x3c>)
 8001b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b96:	2003      	movs	r0, #3
 8001b98:	f001 fb4c 	bl	8003234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f000 f80f 	bl	8001bc0 <HAL_InitTick>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	71fb      	strb	r3, [r7, #7]
 8001bac:	e001      	b.n	8001bb2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bae:	f7ff fbf2 	bl	8001396 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	58004000 	.word	0x58004000

08001bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001bcc:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <HAL_InitTick+0x6c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d024      	beq.n	8001c1e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bd4:	f002 fedc 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <HAL_InitTick+0x6c>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	4619      	mov	r1, r3
 8001be0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001be4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bec:	4618      	mov	r0, r3
 8001bee:	f001 fb54 	bl	800329a <HAL_SYSTICK_Config>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10f      	bne.n	8001c18 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b0f      	cmp	r3, #15
 8001bfc:	d809      	bhi.n	8001c12 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	f04f 30ff 	mov.w	r0, #4294967295
 8001c06:	f001 fb20 	bl	800324a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c0a:	4a09      	ldr	r2, [pc, #36]	@ (8001c30 <HAL_InitTick+0x70>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	e007      	b.n	8001c22 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	e004      	b.n	8001c22 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e001      	b.n	8001c22 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	2000002c 	.word	0x2000002c
 8001c30:	20000028 	.word	0x20000028

08001c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	2000002c 	.word	0x2000002c
 8001c58:	2000040c 	.word	0x2000040c

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	2000040c 	.word	0x2000040c

08001c74 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001c78:	4b03      	ldr	r3, [pc, #12]	@ (8001c88 <HAL_GetTickPrio+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000028 	.word	0x20000028

08001c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff ffe2 	bl	8001c5c <HAL_GetTick>
 8001c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca4:	d005      	beq.n	8001cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <HAL_Delay+0x44>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cb2:	bf00      	nop
 8001cb4:	f7ff ffd2 	bl	8001c5c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d8f7      	bhi.n	8001cb4 <HAL_Delay+0x28>
  {
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	2000002c 	.word	0x2000002c

08001cd4 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	609a      	str	r2, [r3, #8]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3360      	adds	r3, #96	@ 0x60
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <LL_ADC_SetOffset+0x44>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d74:	bf00      	nop
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	03fff000 	.word	0x03fff000

08001d84 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3360      	adds	r3, #96	@ 0x60
 8001d92:	461a      	mov	r2, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3360      	adds	r3, #96	@ 0x60
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dda:	bf00      	nop
 8001ddc:	371c      	adds	r7, #28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001dfe:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3330      	adds	r3, #48	@ 0x30
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	4413      	add	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 031f 	and.w	r3, r3, #31
 8001e36:	211f      	movs	r1, #31
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	401a      	ands	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	0e9b      	lsrs	r3, r3, #26
 8001e44:	f003 011f 	and.w	r1, r3, #31
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	431a      	orrs	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001e58:	bf00      	nop
 8001e5a:	371c      	adds	r7, #28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	3314      	adds	r3, #20
 8001e74:	461a      	mov	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	0e5b      	lsrs	r3, r3, #25
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	4413      	add	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	0d1b      	lsrs	r3, r3, #20
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	2107      	movs	r1, #7
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	401a      	ands	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	0d1b      	lsrs	r3, r3, #20
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001eae:	bf00      	nop
 8001eb0:	371c      	adds	r7, #28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0318 	and.w	r3, r3, #24
 8001ede:	4908      	ldr	r1, [pc, #32]	@ (8001f00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ee0:	40d9      	lsrs	r1, r3
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	400b      	ands	r3, r1
 8001ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eea:	431a      	orrs	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	0007ffff 	.word	0x0007ffff

08001f04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6093      	str	r3, [r2, #8]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f3c:	d101      	bne.n	8001f42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f64:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f8c:	d101      	bne.n	8001f92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fb4:	f043 0201 	orr.w	r2, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fdc:	f043 0202 	orr.w	r2, r3, #2
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <LL_ADC_IsEnabled+0x18>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <LL_ADC_IsEnabled+0x1a>
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b02      	cmp	r3, #2
 8002028:	d101      	bne.n	800202e <LL_ADC_IsDisableOngoing+0x18>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <LL_ADC_IsDisableOngoing+0x1a>
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800204c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002050:	f043 0204 	orr.w	r2, r3, #4
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002074:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002078:	f043 0210 	orr.w	r2, r3, #16
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b04      	cmp	r3, #4
 800209e:	d101      	bne.n	80020a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020c6:	f043 0220 	orr.w	r2, r3, #32
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d101      	bne.n	80020f2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800210c:	2300      	movs	r3, #0
 800210e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e12e      	b.n	800237c <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff f939 	bl	80013a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff feef 	bl	8001f28 <LL_ADC_IsDeepPowerDownEnabled>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fed5 	bl	8001f04 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ff0a 	bl	8001f78 <LL_ADC_IsInternalRegulatorEnabled>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d115      	bne.n	8002196 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff feee 	bl	8001f50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002174:	4b83      	ldr	r3, [pc, #524]	@ (8002384 <HAL_ADC_Init+0x284>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	099b      	lsrs	r3, r3, #6
 800217a:	4a83      	ldr	r2, [pc, #524]	@ (8002388 <HAL_ADC_Init+0x288>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	099b      	lsrs	r3, r3, #6
 8002182:	3301      	adds	r3, #1
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002188:	e002      	b.n	8002190 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3b01      	subs	r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f9      	bne.n	800218a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff feec 	bl	8001f78 <LL_ADC_IsInternalRegulatorEnabled>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10d      	bne.n	80021c2 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021aa:	f043 0210 	orr.w	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff60 	bl	800208c <LL_ADC_REG_IsConversionOngoing>
 80021cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 80c7 	bne.w	800236a <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 80c3 	bne.w	800236a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021ec:	f043 0202 	orr.w	r2, r3, #2
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fef9 	bl	8001ff0 <LL_ADC_IsEnabled>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10b      	bne.n	800221c <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002204:	4861      	ldr	r0, [pc, #388]	@ (800238c <HAL_ADC_Init+0x28c>)
 8002206:	f7ff fef3 	bl	8001ff0 <LL_ADC_IsEnabled>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d105      	bne.n	800221c <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4619      	mov	r1, r3
 8002216:	485e      	ldr	r0, [pc, #376]	@ (8002390 <HAL_ADC_Init+0x290>)
 8002218:	f7ff fd5c 	bl	8001cd4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7e5b      	ldrb	r3, [r3, #25]
 8002220:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002226:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800222c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002232:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800223a:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 800223c:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3020 	ldrb.w	r3, [r3, #32]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d106      	bne.n	800225c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	3b01      	subs	r3, #1
 8002254:	045b      	lsls	r3, r3, #17
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002260:	2b00      	cmp	r3, #0
 8002262:	d009      	beq.n	8002278 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002268:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002270:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	4b45      	ldr	r3, [pc, #276]	@ (8002394 <HAL_ADC_Init+0x294>)
 8002280:	4013      	ands	r3, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6812      	ldr	r2, [r2, #0]
 8002286:	69b9      	ldr	r1, [r7, #24]
 8002288:	430b      	orrs	r3, r1
 800228a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fefb 	bl	800208c <LL_ADC_REG_IsConversionOngoing>
 8002296:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff1c 	bl	80020da <LL_ADC_INJ_IsConversionOngoing>
 80022a2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d13d      	bne.n	8002326 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d13a      	bne.n	8002326 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022b4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022bc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022cc:	f023 0302 	bic.w	r3, r3, #2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	69b9      	ldr	r1, [r7, #24]
 80022d6:	430b      	orrs	r3, r1
 80022d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d118      	bne.n	8002316 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80022ee:	f023 0304 	bic.w	r3, r3, #4
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022fa:	4311      	orrs	r1, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002300:	4311      	orrs	r1, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002306:	430a      	orrs	r2, r1
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	611a      	str	r2, [r3, #16]
 8002314:	e007      	b.n	8002326 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0201 	bic.w	r2, r2, #1
 8002324:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d10c      	bne.n	8002348 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002334:	f023 010f 	bic.w	r1, r3, #15
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	1e5a      	subs	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	631a      	str	r2, [r3, #48]	@ 0x30
 8002346:	e007      	b.n	8002358 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 020f 	bic.w	r2, r2, #15
 8002356:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235c:	f023 0303 	bic.w	r3, r3, #3
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	655a      	str	r2, [r3, #84]	@ 0x54
 8002368:	e007      	b.n	800237a <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236e:	f043 0210 	orr.w	r2, r3, #16
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800237a:	7ffb      	ldrb	r3, [r7, #31]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000008 	.word	0x20000008
 8002388:	053e2d63 	.word	0x053e2d63
 800238c:	50040000 	.word	0x50040000
 8002390:	50040300 	.word	0x50040300
 8002394:	fff0c007 	.word	0xfff0c007

08002398 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fe71 	bl	800208c <LL_ADC_REG_IsConversionOngoing>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d140      	bne.n	8002432 <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_ADC_Start+0x26>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e03c      	b.n	8002438 <HAL_ADC_Start+0xa0>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 fd8a 	bl	8002ee0 <ADC_Enable>
 80023cc:	4603      	mov	r3, r0
 80023ce:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d128      	bne.n	8002428 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023f6:	d106      	bne.n	8002406 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fc:	f023 0206 	bic.w	r2, r3, #6
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	659a      	str	r2, [r3, #88]	@ 0x58
 8002404:	e002      	b.n	800240c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	221c      	movs	r2, #28
 8002412:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fe0b 	bl	800203c <LL_ADC_REG_StartConversion>
 8002426:	e006      	b.n	8002436 <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002430:	e001      	b.n	8002436 <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002432:	2302      	movs	r3, #2
 8002434:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002436:	7bfb      	ldrb	r3, [r7, #15]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_ADC_Stop+0x16>
 8002452:	2302      	movs	r3, #2
 8002454:	e023      	b.n	800249e <HAL_ADC_Stop+0x5e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800245e:	2103      	movs	r1, #3
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fc81 	bl	8002d68 <ADC_ConversionStop>
 8002466:	4603      	mov	r3, r0
 8002468:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d111      	bne.n	8002494 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 fdaf 	bl	8002fd4 <ADC_Disable>
 8002476:	4603      	mov	r3, r0
 8002478:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d109      	bne.n	8002494 <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002484:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	655a      	str	r2, [r3, #84]	@ 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800249c:	7bfb      	ldrb	r3, [r7, #15]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d102      	bne.n	80024be <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80024b8:	2308      	movs	r3, #8
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	e010      	b.n	80024e0 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d007      	beq.n	80024dc <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d0:	f043 0220 	orr.w	r2, r3, #32
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	655a      	str	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e06d      	b.n	80025b8 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80024dc:	2304      	movs	r3, #4
 80024de:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80024e0:	f7ff fbbc 	bl	8001c5c <HAL_GetTick>
 80024e4:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024e6:	e021      	b.n	800252c <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ee:	d01d      	beq.n	800252c <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80024f0:	f7ff fbb4 	bl	8001c5c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d302      	bcc.n	8002506 <HAL_ADC_PollForConversion+0x60>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d112      	bne.n	800252c <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10b      	bne.n	800252c <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002518:	f043 0204 	orr.w	r2, r3, #4
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e045      	b.n	80025b8 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0d6      	beq.n	80024e8 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fc4b 	bl	8001de6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d01c      	beq.n	8002590 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	7e5b      	ldrb	r3, [r3, #25]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d118      	bne.n	8002590 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b08      	cmp	r3, #8
 800256a:	d111      	bne.n	8002590 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002570:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d105      	bne.n	8002590 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b08      	cmp	r3, #8
 8002594:	d104      	bne.n	80025a0 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2208      	movs	r2, #8
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	e00a      	b.n	80025b6 <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d103      	bne.n	80025b6 <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	220c      	movs	r2, #12
 80025b4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b0b6      	sub	sp, #216	@ 0xd8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x22>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e39f      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x762>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fd3e 	bl	800208c <LL_ADC_REG_IsConversionOngoing>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	f040 8384 	bne.w	8002d20 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6859      	ldr	r1, [r3, #4]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	f7ff fbf1 	bl	8001e0c <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fd2c 	bl	800208c <LL_ADC_REG_IsConversionOngoing>
 8002634:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fd4c 	bl	80020da <LL_ADC_INJ_IsConversionOngoing>
 8002642:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002646:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800264a:	2b00      	cmp	r3, #0
 800264c:	f040 81a6 	bne.w	800299c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002650:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002654:	2b00      	cmp	r3, #0
 8002656:	f040 81a1 	bne.w	800299c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	461a      	mov	r2, r3
 8002668:	f7ff fbfc 	bl	8001e64 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	08db      	lsrs	r3, r3, #3
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b04      	cmp	r3, #4
 800268c:	d00a      	beq.n	80026a4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6919      	ldr	r1, [r3, #16]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800269e:	f7ff fb4d 	bl	8001d3c <LL_ADC_SetOffset>
 80026a2:	e17b      	b.n	800299c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2100      	movs	r1, #0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fb6a 	bl	8001d84 <LL_ADC_GetOffsetChannel>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10a      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0xf4>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fb5f 	bl	8001d84 <LL_ADC_GetOffsetChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	f003 021f 	and.w	r2, r3, #31
 80026ce:	e01e      	b.n	800270e <HAL_ADC_ConfigChannel+0x132>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fb54 	bl	8001d84 <LL_ADC_GetOffsetChannel>
 80026dc:	4603      	mov	r3, r0
 80026de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80026fe:	2320      	movs	r3, #32
 8002700:	e004      	b.n	800270c <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8002702:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x14a>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	0e9b      	lsrs	r3, r3, #26
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	e018      	b.n	8002758 <HAL_ADC_ConfigChannel+0x17c>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800273a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800273e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002742:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800274a:	2320      	movs	r3, #32
 800274c:	e004      	b.n	8002758 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800274e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	429a      	cmp	r2, r3
 800275a:	d106      	bne.n	800276a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2200      	movs	r2, #0
 8002762:	2100      	movs	r1, #0
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fb23 	bl	8001db0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2101      	movs	r1, #1
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fb07 	bl	8001d84 <LL_ADC_GetOffsetChannel>
 8002776:	4603      	mov	r3, r0
 8002778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10a      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x1ba>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2101      	movs	r1, #1
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fafc 	bl	8001d84 <LL_ADC_GetOffsetChannel>
 800278c:	4603      	mov	r3, r0
 800278e:	0e9b      	lsrs	r3, r3, #26
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	e01e      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x1f8>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2101      	movs	r1, #1
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff faf1 	bl	8001d84 <LL_ADC_GetOffsetChannel>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80027b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80027bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80027c4:	2320      	movs	r3, #32
 80027c6:	e004      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80027c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x210>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0e9b      	lsrs	r3, r3, #26
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	e018      	b.n	800281e <HAL_ADC_ConfigChannel+0x242>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002800:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002804:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002808:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002810:	2320      	movs	r3, #32
 8002812:	e004      	b.n	800281e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002814:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002818:	fab3 f383 	clz	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	429a      	cmp	r2, r3
 8002820:	d106      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2200      	movs	r2, #0
 8002828:	2101      	movs	r1, #1
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fac0 	bl	8001db0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2102      	movs	r1, #2
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff faa4 	bl	8001d84 <LL_ADC_GetOffsetChannel>
 800283c:	4603      	mov	r3, r0
 800283e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10a      	bne.n	800285c <HAL_ADC_ConfigChannel+0x280>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2102      	movs	r1, #2
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fa99 	bl	8001d84 <LL_ADC_GetOffsetChannel>
 8002852:	4603      	mov	r3, r0
 8002854:	0e9b      	lsrs	r3, r3, #26
 8002856:	f003 021f 	and.w	r2, r3, #31
 800285a:	e01e      	b.n	800289a <HAL_ADC_ConfigChannel+0x2be>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2102      	movs	r1, #2
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fa8e 	bl	8001d84 <LL_ADC_GetOffsetChannel>
 8002868:	4603      	mov	r3, r0
 800286a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800287a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800287e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002882:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800288a:	2320      	movs	r3, #32
 800288c:	e004      	b.n	8002898 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800288e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
 8002898:	461a      	mov	r2, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d105      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x2d6>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	0e9b      	lsrs	r3, r3, #26
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	e016      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x304>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80028c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80028ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80028d2:	2320      	movs	r3, #32
 80028d4:	e004      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80028d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d106      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2200      	movs	r2, #0
 80028ea:	2102      	movs	r1, #2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fa5f 	bl	8001db0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2103      	movs	r1, #3
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fa43 	bl	8001d84 <LL_ADC_GetOffsetChannel>
 80028fe:	4603      	mov	r3, r0
 8002900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <HAL_ADC_ConfigChannel+0x342>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2103      	movs	r1, #3
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fa38 	bl	8001d84 <LL_ADC_GetOffsetChannel>
 8002914:	4603      	mov	r3, r0
 8002916:	0e9b      	lsrs	r3, r3, #26
 8002918:	f003 021f 	and.w	r2, r3, #31
 800291c:	e017      	b.n	800294e <HAL_ADC_ConfigChannel+0x372>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2103      	movs	r1, #3
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fa2d 	bl	8001d84 <LL_ADC_GetOffsetChannel>
 800292a:	4603      	mov	r3, r0
 800292c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002938:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800293a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002940:	2320      	movs	r3, #32
 8002942:	e003      	b.n	800294c <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002944:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002956:	2b00      	cmp	r3, #0
 8002958:	d105      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x38a>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	0e9b      	lsrs	r3, r3, #26
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	e011      	b.n	800298a <HAL_ADC_ConfigChannel+0x3ae>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002974:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002976:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002978:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800297e:	2320      	movs	r3, #32
 8002980:	e003      	b.n	800298a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002982:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002984:	fab3 f383 	clz	r3, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	429a      	cmp	r2, r3
 800298c:	d106      	bne.n	800299c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2200      	movs	r2, #0
 8002994:	2103      	movs	r1, #3
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fa0a 	bl	8001db0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fb25 	bl	8001ff0 <LL_ADC_IsEnabled>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f040 81c2 	bne.w	8002d32 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6819      	ldr	r1, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f7ff fa7e 	bl	8001ebc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a8e      	ldr	r2, [pc, #568]	@ (8002c00 <HAL_ADC_ConfigChannel+0x624>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	f040 8130 	bne.w	8002c2c <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10b      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x418>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	0e9b      	lsrs	r3, r3, #26
 80029e2:	3301      	adds	r3, #1
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	2b09      	cmp	r3, #9
 80029ea:	bf94      	ite	ls
 80029ec:	2301      	movls	r3, #1
 80029ee:	2300      	movhi	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e019      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x44c>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002a02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a04:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002a06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	e003      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002a10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	3301      	adds	r3, #1
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	2b09      	cmp	r3, #9
 8002a20:	bf94      	ite	ls
 8002a22:	2301      	movls	r3, #1
 8002a24:	2300      	movhi	r3, #0
 8002a26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d079      	beq.n	8002b20 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d107      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x46c>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	0e9b      	lsrs	r3, r3, #26
 8002a3e:	3301      	adds	r3, #1
 8002a40:	069b      	lsls	r3, r3, #26
 8002a42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a46:	e015      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x498>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a58:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002a60:	2320      	movs	r3, #32
 8002a62:	e003      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	069b      	lsls	r3, r3, #26
 8002a70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x4b8>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0e9b      	lsrs	r3, r3, #26
 8002a86:	3301      	adds	r3, #1
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	e017      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x4e8>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002aa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002aac:	2320      	movs	r3, #32
 8002aae:	e003      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002ab0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f003 031f 	and.w	r3, r3, #31
 8002abe:	2101      	movs	r1, #1
 8002ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac4:	ea42 0103 	orr.w	r1, r2, r3
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x50e>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	0e9b      	lsrs	r3, r3, #26
 8002ada:	3301      	adds	r3, #1
 8002adc:	f003 021f 	and.w	r2, r3, #31
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4413      	add	r3, r2
 8002ae6:	051b      	lsls	r3, r3, #20
 8002ae8:	e018      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x540>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002b02:	2320      	movs	r3, #32
 8002b04:	e003      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b08:	fab3 f383 	clz	r3, r3
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f003 021f 	and.w	r2, r3, #31
 8002b14:	4613      	mov	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4413      	add	r3, r2
 8002b1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	e080      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d107      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x560>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	0e9b      	lsrs	r3, r3, #26
 8002b32:	3301      	adds	r3, #1
 8002b34:	069b      	lsls	r3, r3, #26
 8002b36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b3a:	e015      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x58c>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002b54:	2320      	movs	r3, #32
 8002b56:	e003      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	069b      	lsls	r3, r3, #26
 8002b64:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d109      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x5ac>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	0e9b      	lsrs	r3, r3, #26
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	2101      	movs	r1, #1
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	e017      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x5dc>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	61fb      	str	r3, [r7, #28]
  return result;
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002ba0:	2320      	movs	r3, #32
 8002ba2:	e003      	b.n	8002bac <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	3301      	adds	r3, #1
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb8:	ea42 0103 	orr.w	r1, r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10d      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x608>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0e9b      	lsrs	r3, r3, #26
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	3b1e      	subs	r3, #30
 8002bdc:	051b      	lsls	r3, r3, #20
 8002bde:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002be2:	e01d      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x644>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	613b      	str	r3, [r7, #16]
  return result;
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d103      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002bfc:	2320      	movs	r3, #32
 8002bfe:	e005      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x630>
 8002c00:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	f003 021f 	and.w	r2, r3, #31
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	3b1e      	subs	r3, #30
 8002c1a:	051b      	lsls	r3, r3, #20
 8002c1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c20:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c26:	4619      	mov	r1, r3
 8002c28:	f7ff f91c 	bl	8001e64 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b45      	ldr	r3, [pc, #276]	@ (8002d48 <HAL_ADC_ConfigChannel+0x76c>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d07c      	beq.n	8002d32 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c38:	4844      	ldr	r0, [pc, #272]	@ (8002d4c <HAL_ADC_ConfigChannel+0x770>)
 8002c3a:	f7ff f871 	bl	8001d20 <LL_ADC_GetCommonPathInternalCh>
 8002c3e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c42:	4843      	ldr	r0, [pc, #268]	@ (8002d50 <HAL_ADC_ConfigChannel+0x774>)
 8002c44:	f7ff f9d4 	bl	8001ff0 <LL_ADC_IsEnabled>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d15e      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a40      	ldr	r2, [pc, #256]	@ (8002d54 <HAL_ADC_ConfigChannel+0x778>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d127      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x6cc>
 8002c58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d121      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a39      	ldr	r2, [pc, #228]	@ (8002d50 <HAL_ADC_ConfigChannel+0x774>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d161      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c76:	4619      	mov	r1, r3
 8002c78:	4834      	ldr	r0, [pc, #208]	@ (8002d4c <HAL_ADC_ConfigChannel+0x770>)
 8002c7a:	f7ff f83e 	bl	8001cfa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c7e:	4b36      	ldr	r3, [pc, #216]	@ (8002d58 <HAL_ADC_ConfigChannel+0x77c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	099b      	lsrs	r3, r3, #6
 8002c84:	4a35      	ldr	r2, [pc, #212]	@ (8002d5c <HAL_ADC_ConfigChannel+0x780>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	099b      	lsrs	r3, r3, #6
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002c98:	e002      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f9      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ca6:	e044      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a2c      	ldr	r2, [pc, #176]	@ (8002d60 <HAL_ADC_ConfigChannel+0x784>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d113      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x6fe>
 8002cb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10d      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a23      	ldr	r2, [pc, #140]	@ (8002d50 <HAL_ADC_ConfigChannel+0x774>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d134      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002cc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ccc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	481e      	ldr	r0, [pc, #120]	@ (8002d4c <HAL_ADC_ConfigChannel+0x770>)
 8002cd4:	f7ff f811 	bl	8001cfa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cd8:	e02b      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a21      	ldr	r2, [pc, #132]	@ (8002d64 <HAL_ADC_ConfigChannel+0x788>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d126      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x756>
 8002ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ce8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d120      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a16      	ldr	r2, [pc, #88]	@ (8002d50 <HAL_ADC_ConfigChannel+0x774>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d11b      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002cfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cfe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d02:	4619      	mov	r1, r3
 8002d04:	4811      	ldr	r0, [pc, #68]	@ (8002d4c <HAL_ADC_ConfigChannel+0x770>)
 8002d06:	f7fe fff8 	bl	8001cfa <LL_ADC_SetCommonPathInternalCh>
 8002d0a:	e012      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002d1e:	e008      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d24:	f043 0220 	orr.w	r2, r3, #32
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002d3a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	37d8      	adds	r7, #216	@ 0xd8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	80080000 	.word	0x80080000
 8002d4c:	50040300 	.word	0x50040300
 8002d50:	50040000 	.word	0x50040000
 8002d54:	c7520000 	.word	0xc7520000
 8002d58:	20000008 	.word	0x20000008
 8002d5c:	053e2d63 	.word	0x053e2d63
 8002d60:	cb840000 	.word	0xcb840000
 8002d64:	80000001 	.word	0x80000001

08002d68 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff f984 	bl	800208c <LL_ADC_REG_IsConversionOngoing>
 8002d84:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff f9a5 	bl	80020da <LL_ADC_INJ_IsConversionOngoing>
 8002d90:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d103      	bne.n	8002da0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 8098 	beq.w	8002ed0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d02a      	beq.n	8002e04 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7e5b      	ldrb	r3, [r3, #25]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d126      	bne.n	8002e04 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7e1b      	ldrb	r3, [r3, #24]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d122      	bne.n	8002e04 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002dc2:	e014      	b.n	8002dee <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	4a45      	ldr	r2, [pc, #276]	@ (8002edc <ADC_ConversionStop+0x174>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d90d      	bls.n	8002de8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd0:	f043 0210 	orr.w	r2, r3, #16
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ddc:	f043 0201 	orr.w	r2, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e074      	b.n	8002ed2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	3301      	adds	r3, #1
 8002dec:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df8:	2b40      	cmp	r3, #64	@ 0x40
 8002dfa:	d1e3      	bne.n	8002dc4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2240      	movs	r2, #64	@ 0x40
 8002e02:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d014      	beq.n	8002e34 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff f93c 	bl	800208c <LL_ADC_REG_IsConversionOngoing>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00c      	beq.n	8002e34 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff f8f9 	bl	8002016 <LL_ADC_IsDisableOngoing>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d104      	bne.n	8002e34 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff f918 	bl	8002064 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d014      	beq.n	8002e64 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff f94b 	bl	80020da <LL_ADC_INJ_IsConversionOngoing>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00c      	beq.n	8002e64 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff f8e1 	bl	8002016 <LL_ADC_IsDisableOngoing>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d104      	bne.n	8002e64 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff f927 	bl	80020b2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d005      	beq.n	8002e76 <ADC_ConversionStop+0x10e>
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d105      	bne.n	8002e7c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002e70:	230c      	movs	r3, #12
 8002e72:	617b      	str	r3, [r7, #20]
        break;
 8002e74:	e005      	b.n	8002e82 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002e76:	2308      	movs	r3, #8
 8002e78:	617b      	str	r3, [r7, #20]
        break;
 8002e7a:	e002      	b.n	8002e82 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	617b      	str	r3, [r7, #20]
        break;
 8002e80:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002e82:	f7fe feeb 	bl	8001c5c <HAL_GetTick>
 8002e86:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e88:	e01b      	b.n	8002ec2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e8a:	f7fe fee7 	bl	8001c5c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	d914      	bls.n	8002ec2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00d      	beq.n	8002ec2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eaa:	f043 0210 	orr.w	r2, r3, #16
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb6:	f043 0201 	orr.w	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e007      	b.n	8002ed2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1dc      	bne.n	8002e8a <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3720      	adds	r7, #32
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	a33fffff 	.word	0xa33fffff

08002ee0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff f87d 	bl	8001ff0 <LL_ADC_IsEnabled>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d15e      	bne.n	8002fba <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	4b30      	ldr	r3, [pc, #192]	@ (8002fc4 <ADC_Enable+0xe4>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00d      	beq.n	8002f26 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0e:	f043 0210 	orr.w	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1a:	f043 0201 	orr.w	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e04a      	b.n	8002fbc <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff f838 	bl	8001fa0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f30:	4825      	ldr	r0, [pc, #148]	@ (8002fc8 <ADC_Enable+0xe8>)
 8002f32:	f7fe fef5 	bl	8001d20 <LL_ADC_GetCommonPathInternalCh>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00f      	beq.n	8002f60 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f40:	4b22      	ldr	r3, [pc, #136]	@ (8002fcc <ADC_Enable+0xec>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	099b      	lsrs	r3, r3, #6
 8002f46:	4a22      	ldr	r2, [pc, #136]	@ (8002fd0 <ADC_Enable+0xf0>)
 8002f48:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4c:	099b      	lsrs	r3, r3, #6
 8002f4e:	3301      	adds	r3, #1
 8002f50:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f52:	e002      	b.n	8002f5a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f9      	bne.n	8002f54 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002f60:	f7fe fe7c 	bl	8001c5c <HAL_GetTick>
 8002f64:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f66:	e021      	b.n	8002fac <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff f83f 	bl	8001ff0 <LL_ADC_IsEnabled>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d104      	bne.n	8002f82 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff f80f 	bl	8001fa0 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f82:	f7fe fe6b 	bl	8001c5c <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d90d      	bls.n	8002fac <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f94:	f043 0210 	orr.w	r2, r3, #16
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa0:	f043 0201 	orr.w	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e007      	b.n	8002fbc <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d1d6      	bne.n	8002f68 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	8000003f 	.word	0x8000003f
 8002fc8:	50040300 	.word	0x50040300
 8002fcc:	20000008 	.word	0x20000008
 8002fd0:	053e2d63 	.word	0x053e2d63

08002fd4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff f818 	bl	8002016 <LL_ADC_IsDisableOngoing>
 8002fe6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fe ffff 	bl	8001ff0 <LL_ADC_IsEnabled>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d047      	beq.n	8003088 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d144      	bne.n	8003088 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 030d 	and.w	r3, r3, #13
 8003008:	2b01      	cmp	r3, #1
 800300a:	d10c      	bne.n	8003026 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f7fe ffd9 	bl	8001fc8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2203      	movs	r2, #3
 800301c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800301e:	f7fe fe1d 	bl	8001c5c <HAL_GetTick>
 8003022:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003024:	e029      	b.n	800307a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302a:	f043 0210 	orr.w	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003036:	f043 0201 	orr.w	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e023      	b.n	800308a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003042:	f7fe fe0b 	bl	8001c5c <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d914      	bls.n	800307a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00d      	beq.n	800307a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003062:	f043 0210 	orr.w	r2, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306e:	f043 0201 	orr.w	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e007      	b.n	800308a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1dc      	bne.n	8003042 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a4:	4b0c      	ldr	r3, [pc, #48]	@ (80030d8 <__NVIC_SetPriorityGrouping+0x44>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030b0:	4013      	ands	r3, r2
 80030b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030c6:	4a04      	ldr	r2, [pc, #16]	@ (80030d8 <__NVIC_SetPriorityGrouping+0x44>)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	60d3      	str	r3, [r2, #12]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e0:	4b04      	ldr	r3, [pc, #16]	@ (80030f4 <__NVIC_GetPriorityGrouping+0x18>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	0a1b      	lsrs	r3, r3, #8
 80030e6:	f003 0307 	and.w	r3, r3, #7
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	2b00      	cmp	r3, #0
 8003108:	db0b      	blt.n	8003122 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	f003 021f 	and.w	r2, r3, #31
 8003110:	4907      	ldr	r1, [pc, #28]	@ (8003130 <__NVIC_EnableIRQ+0x38>)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	2001      	movs	r0, #1
 800311a:	fa00 f202 	lsl.w	r2, r0, r2
 800311e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e000e100 	.word	0xe000e100

08003134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003144:	2b00      	cmp	r3, #0
 8003146:	db0a      	blt.n	800315e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	490c      	ldr	r1, [pc, #48]	@ (8003180 <__NVIC_SetPriority+0x4c>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	0112      	lsls	r2, r2, #4
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	440b      	add	r3, r1
 8003158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800315c:	e00a      	b.n	8003174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	4908      	ldr	r1, [pc, #32]	@ (8003184 <__NVIC_SetPriority+0x50>)
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	3b04      	subs	r3, #4
 800316c:	0112      	lsls	r2, r2, #4
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	440b      	add	r3, r1
 8003172:	761a      	strb	r2, [r3, #24]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	e000e100 	.word	0xe000e100
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003188:	b480      	push	{r7}
 800318a:	b089      	sub	sp, #36	@ 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f1c3 0307 	rsb	r3, r3, #7
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	bf28      	it	cs
 80031a6:	2304      	movcs	r3, #4
 80031a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2b06      	cmp	r3, #6
 80031b0:	d902      	bls.n	80031b8 <NVIC_EncodePriority+0x30>
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3b03      	subs	r3, #3
 80031b6:	e000      	b.n	80031ba <NVIC_EncodePriority+0x32>
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	f04f 32ff 	mov.w	r2, #4294967295
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43da      	mvns	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	401a      	ands	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d0:	f04f 31ff 	mov.w	r1, #4294967295
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	43d9      	mvns	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e0:	4313      	orrs	r3, r2
         );
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3724      	adds	r7, #36	@ 0x24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003200:	d301      	bcc.n	8003206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003202:	2301      	movs	r3, #1
 8003204:	e00f      	b.n	8003226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003206:	4a0a      	ldr	r2, [pc, #40]	@ (8003230 <SysTick_Config+0x40>)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3b01      	subs	r3, #1
 800320c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800320e:	210f      	movs	r1, #15
 8003210:	f04f 30ff 	mov.w	r0, #4294967295
 8003214:	f7ff ff8e 	bl	8003134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003218:	4b05      	ldr	r3, [pc, #20]	@ (8003230 <SysTick_Config+0x40>)
 800321a:	2200      	movs	r2, #0
 800321c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800321e:	4b04      	ldr	r3, [pc, #16]	@ (8003230 <SysTick_Config+0x40>)
 8003220:	2207      	movs	r2, #7
 8003222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	e000e010 	.word	0xe000e010

08003234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff ff29 	bl	8003094 <__NVIC_SetPriorityGrouping>
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b086      	sub	sp, #24
 800324e:	af00      	add	r7, sp, #0
 8003250:	4603      	mov	r3, r0
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
 8003256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003258:	f7ff ff40 	bl	80030dc <__NVIC_GetPriorityGrouping>
 800325c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	6978      	ldr	r0, [r7, #20]
 8003264:	f7ff ff90 	bl	8003188 <NVIC_EncodePriority>
 8003268:	4602      	mov	r2, r0
 800326a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff5f 	bl	8003134 <__NVIC_SetPriority>
}
 8003276:	bf00      	nop
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	4603      	mov	r3, r0
 8003286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff33 	bl	80030f8 <__NVIC_EnableIRQ>
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff ffa4 	bl	80031f0 <SysTick_Config>
 80032a8:	4603      	mov	r3, r0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032c2:	e14c      	b.n	800355e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	2101      	movs	r1, #1
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	fa01 f303 	lsl.w	r3, r1, r3
 80032d0:	4013      	ands	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 813e 	beq.w	8003558 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0303 	and.w	r3, r3, #3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d005      	beq.n	80032f4 <HAL_GPIO_Init+0x40>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d130      	bne.n	8003356 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800332a:	2201      	movs	r2, #1
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	091b      	lsrs	r3, r3, #4
 8003340:	f003 0201 	and.w	r2, r3, #1
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b03      	cmp	r3, #3
 8003360:	d017      	beq.n	8003392 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	2203      	movs	r2, #3
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4013      	ands	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d123      	bne.n	80033e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	08da      	lsrs	r2, r3, #3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3208      	adds	r2, #8
 80033a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	220f      	movs	r2, #15
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4013      	ands	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	08da      	lsrs	r2, r3, #3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3208      	adds	r2, #8
 80033e0:	6939      	ldr	r1, [r7, #16]
 80033e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	2203      	movs	r2, #3
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0203 	and.w	r2, r3, #3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8098 	beq.w	8003558 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003428:	4a54      	ldr	r2, [pc, #336]	@ (800357c <HAL_GPIO_Init+0x2c8>)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	089b      	lsrs	r3, r3, #2
 800342e:	3302      	adds	r3, #2
 8003430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003434:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	220f      	movs	r2, #15
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003452:	d019      	beq.n	8003488 <HAL_GPIO_Init+0x1d4>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a4a      	ldr	r2, [pc, #296]	@ (8003580 <HAL_GPIO_Init+0x2cc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d013      	beq.n	8003484 <HAL_GPIO_Init+0x1d0>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a49      	ldr	r2, [pc, #292]	@ (8003584 <HAL_GPIO_Init+0x2d0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00d      	beq.n	8003480 <HAL_GPIO_Init+0x1cc>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a48      	ldr	r2, [pc, #288]	@ (8003588 <HAL_GPIO_Init+0x2d4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d007      	beq.n	800347c <HAL_GPIO_Init+0x1c8>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a47      	ldr	r2, [pc, #284]	@ (800358c <HAL_GPIO_Init+0x2d8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_GPIO_Init+0x1c4>
 8003474:	2304      	movs	r3, #4
 8003476:	e008      	b.n	800348a <HAL_GPIO_Init+0x1d6>
 8003478:	2307      	movs	r3, #7
 800347a:	e006      	b.n	800348a <HAL_GPIO_Init+0x1d6>
 800347c:	2303      	movs	r3, #3
 800347e:	e004      	b.n	800348a <HAL_GPIO_Init+0x1d6>
 8003480:	2302      	movs	r3, #2
 8003482:	e002      	b.n	800348a <HAL_GPIO_Init+0x1d6>
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <HAL_GPIO_Init+0x1d6>
 8003488:	2300      	movs	r3, #0
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	f002 0203 	and.w	r2, r2, #3
 8003490:	0092      	lsls	r2, r2, #2
 8003492:	4093      	lsls	r3, r2
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800349a:	4938      	ldr	r1, [pc, #224]	@ (800357c <HAL_GPIO_Init+0x2c8>)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	3302      	adds	r3, #2
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034a8:	4b39      	ldr	r3, [pc, #228]	@ (8003590 <HAL_GPIO_Init+0x2dc>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	43db      	mvns	r3, r3
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4013      	ands	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034cc:	4a30      	ldr	r2, [pc, #192]	@ (8003590 <HAL_GPIO_Init+0x2dc>)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003590 <HAL_GPIO_Init+0x2dc>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	43db      	mvns	r3, r3
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4013      	ands	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034f6:	4a26      	ldr	r2, [pc, #152]	@ (8003590 <HAL_GPIO_Init+0x2dc>)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034fc:	4b24      	ldr	r3, [pc, #144]	@ (8003590 <HAL_GPIO_Init+0x2dc>)
 80034fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	43db      	mvns	r3, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003522:	4a1b      	ldr	r2, [pc, #108]	@ (8003590 <HAL_GPIO_Init+0x2dc>)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800352a:	4b19      	ldr	r3, [pc, #100]	@ (8003590 <HAL_GPIO_Init+0x2dc>)
 800352c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	43db      	mvns	r3, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003550:	4a0f      	ldr	r2, [pc, #60]	@ (8003590 <HAL_GPIO_Init+0x2dc>)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	3301      	adds	r3, #1
 800355c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	f47f aeab 	bne.w	80032c4 <HAL_GPIO_Init+0x10>
  }
}
 800356e:	bf00      	nop
 8003570:	bf00      	nop
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	40010000 	.word	0x40010000
 8003580:	48000400 	.word	0x48000400
 8003584:	48000800 	.word	0x48000800
 8003588:	48000c00 	.word	0x48000c00
 800358c:	48001000 	.word	0x48001000
 8003590:	58000800 	.word	0x58000800

08003594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]
 80035a0:	4613      	mov	r3, r2
 80035a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035a4:	787b      	ldrb	r3, [r7, #1]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035aa:	887a      	ldrh	r2, [r7, #2]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035b0:	e002      	b.n	80035b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035b2:	887a      	ldrh	r2, [r7, #2]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e08d      	b.n	80036f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fd ff1c 	bl	8001428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2224      	movs	r2, #36	@ 0x24
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003614:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003624:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d107      	bne.n	800363e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	e006      	b.n	800364c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800364a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d108      	bne.n	8003666 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003662:	605a      	str	r2, [r3, #4]
 8003664:	e007      	b.n	8003676 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003674:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003684:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003688:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003698:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69d9      	ldr	r1, [r3, #28]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1a      	ldr	r2, [r3, #32]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b20      	cmp	r3, #32
 800370e:	d138      	bne.n	8003782 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800371a:	2302      	movs	r3, #2
 800371c:	e032      	b.n	8003784 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2224      	movs	r2, #36	@ 0x24
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0201 	bic.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800374c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6819      	ldr	r1, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	e000      	b.n	8003784 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003782:	2302      	movs	r3, #2
  }
}
 8003784:	4618      	mov	r0, r3
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d139      	bne.n	800381a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e033      	b.n	800381c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2224      	movs	r2, #36	@ 0x24
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0201 	orr.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	e000      	b.n	800381c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800381a:	2302      	movs	r3, #2
  }
}
 800381c:	4618      	mov	r0, r3
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800382c:	4b05      	ldr	r3, [pc, #20]	@ (8003844 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a04      	ldr	r2, [pc, #16]	@ (8003844 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003836:	6013      	str	r3, [r2, #0]
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	58000400 	.word	0x58000400

08003848 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800384c:	4b04      	ldr	r3, [pc, #16]	@ (8003860 <HAL_PWREx_GetVoltageRange+0x18>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003854:	4618      	mov	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	58000400 	.word	0x58000400

08003864 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003872:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003876:	d101      	bne.n	800387c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003878:	2301      	movs	r3, #1
 800387a:	e000      	b.n	800387e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800388c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003896:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800389a:	6013      	str	r3, [r2, #0]
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80038a6:	b480      	push	{r7}
 80038a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80038aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
}
 80038ba:	bf00      	nop
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80038c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038d6:	d101      	bne.n	80038dc <LL_RCC_HSE_IsReady+0x18>
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <LL_RCC_HSE_IsReady+0x1a>
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80038ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038fa:	6013      	str	r3, [r2, #0]
}
 80038fc:	bf00      	nop
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003906:	b480      	push	{r7}
 8003908:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800390a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003918:	6013      	str	r3, [r2, #0]
}
 800391a:	bf00      	nop
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003936:	d101      	bne.n	800393c <LL_RCC_HSI_IsReady+0x18>
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <LL_RCC_HSI_IsReady+0x1a>
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	061b      	lsls	r3, r3, #24
 800395e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003962:	4313      	orrs	r3, r2
 8003964:	604b      	str	r3, [r1, #4]
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003972:	b480      	push	{r7}
 8003974:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800397a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800397e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800398a:	bf00      	nop
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800399c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039a4:	f023 0301 	bic.w	r3, r3, #1
 80039a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80039ac:	bf00      	nop
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80039b6:	b480      	push	{r7}
 80039b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80039ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d101      	bne.n	80039ce <LL_RCC_HSI48_IsReady+0x18>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <LL_RCC_HSI48_IsReady+0x1a>
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80039da:	b480      	push	{r7}
 80039dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80039de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80039f2:	bf00      	nop
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a2e:	f043 0304 	orr.w	r3, r3, #4
 8003a32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003a36:	bf00      	nop
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a50:	f023 0304 	bic.w	r3, r3, #4
 8003a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d101      	bne.n	8003a7a <LL_RCC_LSE_IsReady+0x18>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e000      	b.n	8003a7c <LL_RCC_LSE_IsReady+0x1a>
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003a86:	b480      	push	{r7}
 8003a88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003a8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003a9e:	bf00      	nop
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003aac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ab4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ab8:	f023 0301 	bic.w	r3, r3, #1
 8003abc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003aca:	b480      	push	{r7}
 8003acc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003ace:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d101      	bne.n	8003ae2 <LL_RCC_LSI1_IsReady+0x18>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <LL_RCC_LSI1_IsReady+0x1a>
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003aee:	b480      	push	{r7}
 8003af0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003af2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003afa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003afe:	f043 0304 	orr.w	r3, r3, #4
 8003b02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003b06:	bf00      	nop
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b20:	f023 0304 	bic.w	r3, r3, #4
 8003b24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d101      	bne.n	8003b4a <LL_RCC_LSI2_IsReady+0x18>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <LL_RCC_LSI2_IsReady+0x1a>
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b66:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	6013      	str	r3, [r2, #0]
}
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003ba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	6013      	str	r3, [r2, #0]
}
 8003bb6:	bf00      	nop
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d101      	bne.n	8003bd6 <LL_RCC_MSI_IsReady+0x16>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <LL_RCC_MSI_IsReady+0x18>
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c1a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2bb0      	cmp	r3, #176	@ 0xb0
 8003c20:	d901      	bls.n	8003c26 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003c22:	23b0      	movs	r3, #176	@ 0xb0
 8003c24:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003c26:	687b      	ldr	r3, [r7, #4]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003c3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	604b      	str	r3, [r1, #4]
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003c66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f023 0203 	bic.w	r2, r3, #3
 8003c70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003c86:	b480      	push	{r7}
 8003c88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003c8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 030c 	and.w	r3, r3, #12
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003cce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003cd6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cfe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003d02:	f023 020f 	bic.w	r2, r3, #15
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	091b      	lsrs	r3, r3, #4
 8003d0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	608b      	str	r3, [r1, #8]
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	608b      	str	r3, [r1, #8]
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003d74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d90:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003de2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003de6:	6013      	str	r3, [r2, #0]
}
 8003de8:	bf00      	nop
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003df2:	b480      	push	{r7}
 8003df4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e04:	6013      	str	r3, [r2, #0]
}
 8003e06:	bf00      	nop
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e22:	d101      	bne.n	8003e28 <LL_RCC_PLL_IsReady+0x18>
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <LL_RCC_PLL_IsReady+0x1a>
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	0a1b      	lsrs	r3, r3, #8
 8003e40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003e52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003e66:	b480      	push	{r7}
 8003e68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f003 0303 	and.w	r3, r3, #3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003e96:	b480      	push	{r7}
 8003e98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003e9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea8:	d101      	bne.n	8003eae <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ece:	d101      	bne.n	8003ed4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ee8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef4:	d101      	bne.n	8003efa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003f06:	b480      	push	{r7}
 8003f08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f18:	d101      	bne.n	8003f1e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f3c:	d101      	bne.n	8003f42 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
	...

08003f50 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b08d      	sub	sp, #52	@ 0x34
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e363      	b.n	800462a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 808d 	beq.w	800408a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f70:	f7ff fe89 	bl	8003c86 <LL_RCC_GetSysClkSource>
 8003f74:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f76:	f7ff ff82 	bl	8003e7e <LL_RCC_PLL_GetMainSource>
 8003f7a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <HAL_RCC_OscConfig+0x3e>
 8003f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f84:	2b0c      	cmp	r3, #12
 8003f86:	d147      	bne.n	8004018 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d144      	bne.n	8004018 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e347      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003f9e:	f7ff fe34 	bl	8003c0a <LL_RCC_MSI_GetRange>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	429c      	cmp	r4, r3
 8003fa6:	d914      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fd2f 	bl	8004a10 <RCC_SetFlashLatencyFromMSIRange>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e336      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fe0e 	bl	8003be2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff fe32 	bl	8003c34 <LL_RCC_MSI_SetCalibTrimming>
 8003fd0:	e013      	b.n	8003ffa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff fe03 	bl	8003be2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff fe27 	bl	8003c34 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fd10 	bl	8004a10 <RCC_SetFlashLatencyFromMSIRange>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e317      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003ffa:	f000 fcc9 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 8003ffe:	4603      	mov	r3, r0
 8004000:	4aa4      	ldr	r2, [pc, #656]	@ (8004294 <HAL_RCC_OscConfig+0x344>)
 8004002:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004004:	4ba4      	ldr	r3, [pc, #656]	@ (8004298 <HAL_RCC_OscConfig+0x348>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f7fd fdd9 	bl	8001bc0 <HAL_InitTick>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d039      	beq.n	8004088 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e308      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d01e      	beq.n	800405e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004020:	f7ff fdb0 	bl	8003b84 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004024:	f7fd fe1a 	bl	8001c5c <HAL_GetTick>
 8004028:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800402c:	f7fd fe16 	bl	8001c5c <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e2f5      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800403e:	f7ff fdbf 	bl	8003bc0 <LL_RCC_MSI_IsReady>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0f1      	beq.n	800402c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff fdc8 	bl	8003be2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fdec 	bl	8003c34 <LL_RCC_MSI_SetCalibTrimming>
 800405c:	e015      	b.n	800408a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800405e:	f7ff fda0 	bl	8003ba2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004062:	f7fd fdfb 	bl	8001c5c <HAL_GetTick>
 8004066:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800406a:	f7fd fdf7 	bl	8001c5c <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e2d6      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800407c:	f7ff fda0 	bl	8003bc0 <LL_RCC_MSI_IsReady>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f1      	bne.n	800406a <HAL_RCC_OscConfig+0x11a>
 8004086:	e000      	b.n	800408a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004088:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d047      	beq.n	8004126 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004096:	f7ff fdf6 	bl	8003c86 <LL_RCC_GetSysClkSource>
 800409a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800409c:	f7ff feef 	bl	8003e7e <LL_RCC_PLL_GetMainSource>
 80040a0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d005      	beq.n	80040b4 <HAL_RCC_OscConfig+0x164>
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	2b0c      	cmp	r3, #12
 80040ac:	d108      	bne.n	80040c0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d105      	bne.n	80040c0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d134      	bne.n	8004126 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e2b4      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040c8:	d102      	bne.n	80040d0 <HAL_RCC_OscConfig+0x180>
 80040ca:	f7ff fbdd 	bl	8003888 <LL_RCC_HSE_Enable>
 80040ce:	e001      	b.n	80040d4 <HAL_RCC_OscConfig+0x184>
 80040d0:	f7ff fbe9 	bl	80038a6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d012      	beq.n	8004102 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fd fdbe 	bl	8001c5c <HAL_GetTick>
 80040e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e4:	f7fd fdba 	bl	8001c5c <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	@ 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e299      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80040f6:	f7ff fbe5 	bl	80038c4 <LL_RCC_HSE_IsReady>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f1      	beq.n	80040e4 <HAL_RCC_OscConfig+0x194>
 8004100:	e011      	b.n	8004126 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004102:	f7fd fdab 	bl	8001c5c <HAL_GetTick>
 8004106:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800410a:	f7fd fda7 	bl	8001c5c <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b64      	cmp	r3, #100	@ 0x64
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e286      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800411c:	f7ff fbd2 	bl	80038c4 <LL_RCC_HSE_IsReady>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f1      	bne.n	800410a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d04c      	beq.n	80041cc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004132:	f7ff fda8 	bl	8003c86 <LL_RCC_GetSysClkSource>
 8004136:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004138:	f7ff fea1 	bl	8003e7e <LL_RCC_PLL_GetMainSource>
 800413c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b04      	cmp	r3, #4
 8004142:	d005      	beq.n	8004150 <HAL_RCC_OscConfig+0x200>
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b0c      	cmp	r3, #12
 8004148:	d10e      	bne.n	8004168 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d10b      	bne.n	8004168 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e266      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff fbf1 	bl	8003948 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004166:	e031      	b.n	80041cc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d019      	beq.n	80041a4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004170:	f7ff fbba 	bl	80038e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fd fd72 	bl	8001c5c <HAL_GetTick>
 8004178:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417c:	f7fd fd6e 	bl	8001c5c <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e24d      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800418e:	f7ff fbc9 	bl	8003924 <LL_RCC_HSI_IsReady>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f1      	beq.n	800417c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff fbd3 	bl	8003948 <LL_RCC_HSI_SetCalibTrimming>
 80041a2:	e013      	b.n	80041cc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041a4:	f7ff fbaf 	bl	8003906 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fd fd58 	bl	8001c5c <HAL_GetTick>
 80041ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b0:	f7fd fd54 	bl	8001c5c <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e233      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80041c2:	f7ff fbaf 	bl	8003924 <LL_RCC_HSI_IsReady>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f1      	bne.n	80041b0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d106      	bne.n	80041e6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80a3 	beq.w	800432c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d076      	beq.n	80042dc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d046      	beq.n	8004288 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80041fa:	f7ff fc66 	bl	8003aca <LL_RCC_LSI1_IsReady>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d113      	bne.n	800422c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004204:	f7ff fc3f 	bl	8003a86 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004208:	f7fd fd28 	bl	8001c5c <HAL_GetTick>
 800420c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004210:	f7fd fd24 	bl	8001c5c <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e203      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004222:	f7ff fc52 	bl	8003aca <LL_RCC_LSI1_IsReady>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f1      	beq.n	8004210 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800422c:	f7ff fc5f 	bl	8003aee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fd fd14 	bl	8001c5c <HAL_GetTick>
 8004234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004238:	f7fd fd10 	bl	8001c5c <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b03      	cmp	r3, #3
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e1ef      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800424a:	f7ff fc72 	bl	8003b32 <LL_RCC_LSI2_IsReady>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f1      	beq.n	8004238 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fc7c 	bl	8003b56 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800425e:	f7ff fc23 	bl	8003aa8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004262:	f7fd fcfb 	bl	8001c5c <HAL_GetTick>
 8004266:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800426a:	f7fd fcf7 	bl	8001c5c <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e1d6      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800427c:	f7ff fc25 	bl	8003aca <LL_RCC_LSI1_IsReady>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f1      	bne.n	800426a <HAL_RCC_OscConfig+0x31a>
 8004286:	e051      	b.n	800432c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004288:	f7ff fbfd 	bl	8003a86 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fd fce6 	bl	8001c5c <HAL_GetTick>
 8004290:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004292:	e00c      	b.n	80042ae <HAL_RCC_OscConfig+0x35e>
 8004294:	20000008 	.word	0x20000008
 8004298:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800429c:	f7fd fcde 	bl	8001c5c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e1bd      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80042ae:	f7ff fc0c 	bl	8003aca <LL_RCC_LSI1_IsReady>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0f1      	beq.n	800429c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80042b8:	f7ff fc2a 	bl	8003b10 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80042be:	f7fd fccd 	bl	8001c5c <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e1ac      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80042d0:	f7ff fc2f 	bl	8003b32 <LL_RCC_LSI2_IsReady>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f1      	bne.n	80042be <HAL_RCC_OscConfig+0x36e>
 80042da:	e027      	b.n	800432c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80042dc:	f7ff fc18 	bl	8003b10 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e0:	f7fd fcbc 	bl	8001c5c <HAL_GetTick>
 80042e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80042e8:	f7fd fcb8 	bl	8001c5c <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e197      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80042fa:	f7ff fc1a 	bl	8003b32 <LL_RCC_LSI2_IsReady>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1f1      	bne.n	80042e8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004304:	f7ff fbd0 	bl	8003aa8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004308:	f7fd fca8 	bl	8001c5c <HAL_GetTick>
 800430c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004310:	f7fd fca4 	bl	8001c5c <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e183      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004322:	f7ff fbd2 	bl	8003aca <LL_RCC_LSI1_IsReady>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1f1      	bne.n	8004310 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d05b      	beq.n	80043f0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004338:	4ba7      	ldr	r3, [pc, #668]	@ (80045d8 <HAL_RCC_OscConfig+0x688>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d114      	bne.n	800436e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004344:	f7ff fa70 	bl	8003828 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004348:	f7fd fc88 	bl	8001c5c <HAL_GetTick>
 800434c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004350:	f7fd fc84 	bl	8001c5c <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e163      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004362:	4b9d      	ldr	r3, [pc, #628]	@ (80045d8 <HAL_RCC_OscConfig+0x688>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d102      	bne.n	800437c <HAL_RCC_OscConfig+0x42c>
 8004376:	f7ff fb30 	bl	80039da <LL_RCC_LSE_Enable>
 800437a:	e00c      	b.n	8004396 <HAL_RCC_OscConfig+0x446>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b05      	cmp	r3, #5
 8004382:	d104      	bne.n	800438e <HAL_RCC_OscConfig+0x43e>
 8004384:	f7ff fb4b 	bl	8003a1e <LL_RCC_LSE_EnableBypass>
 8004388:	f7ff fb27 	bl	80039da <LL_RCC_LSE_Enable>
 800438c:	e003      	b.n	8004396 <HAL_RCC_OscConfig+0x446>
 800438e:	f7ff fb35 	bl	80039fc <LL_RCC_LSE_Disable>
 8004392:	f7ff fb55 	bl	8003a40 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d014      	beq.n	80043c8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439e:	f7fd fc5d 	bl	8001c5c <HAL_GetTick>
 80043a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80043a4:	e00a      	b.n	80043bc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a6:	f7fd fc59 	bl	8001c5c <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e136      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80043bc:	f7ff fb51 	bl	8003a62 <LL_RCC_LSE_IsReady>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0ef      	beq.n	80043a6 <HAL_RCC_OscConfig+0x456>
 80043c6:	e013      	b.n	80043f0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c8:	f7fd fc48 	bl	8001c5c <HAL_GetTick>
 80043cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80043ce:	e00a      	b.n	80043e6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d0:	f7fd fc44 	bl	8001c5c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e121      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80043e6:	f7ff fb3c 	bl	8003a62 <LL_RCC_LSE_IsReady>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1ef      	bne.n	80043d0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d02c      	beq.n	8004456 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	d014      	beq.n	800442e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004404:	f7ff fab5 	bl	8003972 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004408:	f7fd fc28 	bl	8001c5c <HAL_GetTick>
 800440c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004410:	f7fd fc24 	bl	8001c5c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e103      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004422:	f7ff fac8 	bl	80039b6 <LL_RCC_HSI48_IsReady>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f1      	beq.n	8004410 <HAL_RCC_OscConfig+0x4c0>
 800442c:	e013      	b.n	8004456 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800442e:	f7ff fab1 	bl	8003994 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004432:	f7fd fc13 	bl	8001c5c <HAL_GetTick>
 8004436:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800443a:	f7fd fc0f 	bl	8001c5c <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e0ee      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800444c:	f7ff fab3 	bl	80039b6 <LL_RCC_HSI48_IsReady>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f1      	bne.n	800443a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 80e4 	beq.w	8004628 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004460:	f7ff fc11 	bl	8003c86 <LL_RCC_GetSysClkSource>
 8004464:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004466:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004472:	2b02      	cmp	r3, #2
 8004474:	f040 80b4 	bne.w	80045e0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 0203 	and.w	r2, r3, #3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004482:	429a      	cmp	r2, r3
 8004484:	d123      	bne.n	80044ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d11c      	bne.n	80044ce <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d114      	bne.n	80044ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d10d      	bne.n	80044ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d106      	bne.n	80044ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d05d      	beq.n	800458a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b0c      	cmp	r3, #12
 80044d2:	d058      	beq.n	8004586 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e0a1      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044e6:	f7ff fc84 	bl	8003df2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044ea:	f7fd fbb7 	bl	8001c5c <HAL_GetTick>
 80044ee:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f2:	f7fd fbb3 	bl	8001c5c <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e092      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1ef      	bne.n	80044f2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	4b30      	ldr	r3, [pc, #192]	@ (80045dc <HAL_RCC_OscConfig+0x68c>)
 800451a:	4013      	ands	r3, r2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004524:	4311      	orrs	r1, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800452a:	0212      	lsls	r2, r2, #8
 800452c:	4311      	orrs	r1, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004532:	4311      	orrs	r1, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004538:	4311      	orrs	r1, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800453e:	430a      	orrs	r2, r1
 8004540:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004544:	4313      	orrs	r3, r2
 8004546:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004548:	f7ff fc44 	bl	8003dd4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800454c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800455a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800455c:	f7fd fb7e 	bl	8001c5c <HAL_GetTick>
 8004560:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004564:	f7fd fb7a 	bl	8001c5c <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e059      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0ef      	beq.n	8004564 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004584:	e050      	b.n	8004628 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e04f      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d147      	bne.n	8004628 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004598:	f7ff fc1c 	bl	8003dd4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800459c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045ac:	f7fd fb56 	bl	8001c5c <HAL_GetTick>
 80045b0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b4:	f7fd fb52 	bl	8001c5c <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e031      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0ef      	beq.n	80045b4 <HAL_RCC_OscConfig+0x664>
 80045d4:	e028      	b.n	8004628 <HAL_RCC_OscConfig+0x6d8>
 80045d6:	bf00      	nop
 80045d8:	58000400 	.word	0x58000400
 80045dc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2b0c      	cmp	r3, #12
 80045e4:	d01e      	beq.n	8004624 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e6:	f7ff fc04 	bl	8003df2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7fd fb37 	bl	8001c5c <HAL_GetTick>
 80045ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f2:	f7fd fb33 	bl	8001c5c <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e012      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1ef      	bne.n	80045f2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800461c:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <HAL_RCC_OscConfig+0x6e4>)
 800461e:	4013      	ands	r3, r2
 8004620:	60cb      	str	r3, [r1, #12]
 8004622:	e001      	b.n	8004628 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3734      	adds	r7, #52	@ 0x34
 800462e:	46bd      	mov	sp, r7
 8004630:	bd90      	pop	{r4, r7, pc}
 8004632:	bf00      	nop
 8004634:	eefefffc 	.word	0xeefefffc

08004638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e12d      	b.n	80048a8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800464c:	4b98      	ldr	r3, [pc, #608]	@ (80048b0 <HAL_RCC_ClockConfig+0x278>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d91b      	bls.n	8004692 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465a:	4b95      	ldr	r3, [pc, #596]	@ (80048b0 <HAL_RCC_ClockConfig+0x278>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f023 0207 	bic.w	r2, r3, #7
 8004662:	4993      	ldr	r1, [pc, #588]	@ (80048b0 <HAL_RCC_ClockConfig+0x278>)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	4313      	orrs	r3, r2
 8004668:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800466a:	f7fd faf7 	bl	8001c5c <HAL_GetTick>
 800466e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004670:	e008      	b.n	8004684 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004672:	f7fd faf3 	bl	8001c5c <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e111      	b.n	80048a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004684:	4b8a      	ldr	r3, [pc, #552]	@ (80048b0 <HAL_RCC_ClockConfig+0x278>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d1ef      	bne.n	8004672 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d016      	beq.n	80046cc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff fafb 	bl	8003c9e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80046a8:	f7fd fad8 	bl	8001c5c <HAL_GetTick>
 80046ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80046b0:	f7fd fad4 	bl	8001c5c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e0f2      	b.n	80048a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80046c2:	f7ff fbe8 	bl	8003e96 <LL_RCC_IsActiveFlag_HPRE>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f1      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d016      	beq.n	8004706 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff faf2 	bl	8003cc6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80046e2:	f7fd fabb 	bl	8001c5c <HAL_GetTick>
 80046e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80046ea:	f7fd fab7 	bl	8001c5c <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e0d5      	b.n	80048a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80046fc:	f7ff fbdd 	bl	8003eba <LL_RCC_IsActiveFlag_C2HPRE>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f1      	beq.n	80046ea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d016      	beq.n	8004740 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff faeb 	bl	8003cf2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800471c:	f7fd fa9e 	bl	8001c5c <HAL_GetTick>
 8004720:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004722:	e008      	b.n	8004736 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004724:	f7fd fa9a 	bl	8001c5c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e0b8      	b.n	80048a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004736:	f7ff fbd3 	bl	8003ee0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f1      	beq.n	8004724 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d016      	beq.n	800477a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff fae5 	bl	8003d20 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004756:	f7fd fa81 	bl	8001c5c <HAL_GetTick>
 800475a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800475c:	e008      	b.n	8004770 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800475e:	f7fd fa7d 	bl	8001c5c <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e09b      	b.n	80048a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004770:	f7ff fbc9 	bl	8003f06 <LL_RCC_IsActiveFlag_PPRE1>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f1      	beq.n	800475e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b00      	cmp	r3, #0
 8004784:	d017      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fadb 	bl	8003d48 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004792:	f7fd fa63 	bl	8001c5c <HAL_GetTick>
 8004796:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004798:	e008      	b.n	80047ac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800479a:	f7fd fa5f 	bl	8001c5c <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e07d      	b.n	80048a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80047ac:	f7ff fbbd 	bl	8003f2a <LL_RCC_IsActiveFlag_PPRE2>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f1      	beq.n	800479a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d043      	beq.n	800484a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d106      	bne.n	80047d8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80047ca:	f7ff f87b 	bl	80038c4 <LL_RCC_HSE_IsReady>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d11e      	bne.n	8004812 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e067      	b.n	80048a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d106      	bne.n	80047ee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80047e0:	f7ff fb16 	bl	8003e10 <LL_RCC_PLL_IsReady>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d113      	bne.n	8004812 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e05c      	b.n	80048a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80047f6:	f7ff f9e3 	bl	8003bc0 <LL_RCC_MSI_IsReady>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d108      	bne.n	8004812 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e051      	b.n	80048a8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004804:	f7ff f88e 	bl	8003924 <LL_RCC_HSI_IsReady>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e04a      	b.n	80048a8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff fa21 	bl	8003c5e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481c:	f7fd fa1e 	bl	8001c5c <HAL_GetTick>
 8004820:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004822:	e00a      	b.n	800483a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004824:	f7fd fa1a 	bl	8001c5c <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e036      	b.n	80048a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483a:	f7ff fa24 	bl	8003c86 <LL_RCC_GetSysClkSource>
 800483e:	4602      	mov	r2, r0
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	429a      	cmp	r2, r3
 8004848:	d1ec      	bne.n	8004824 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800484a:	4b19      	ldr	r3, [pc, #100]	@ (80048b0 <HAL_RCC_ClockConfig+0x278>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d21b      	bcs.n	8004890 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004858:	4b15      	ldr	r3, [pc, #84]	@ (80048b0 <HAL_RCC_ClockConfig+0x278>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f023 0207 	bic.w	r2, r3, #7
 8004860:	4913      	ldr	r1, [pc, #76]	@ (80048b0 <HAL_RCC_ClockConfig+0x278>)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	4313      	orrs	r3, r2
 8004866:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004868:	f7fd f9f8 	bl	8001c5c <HAL_GetTick>
 800486c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	e008      	b.n	8004882 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004870:	f7fd f9f4 	bl	8001c5c <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e012      	b.n	80048a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004882:	4b0b      	ldr	r3, [pc, #44]	@ (80048b0 <HAL_RCC_ClockConfig+0x278>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d1ef      	bne.n	8004870 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004890:	f000 f87e 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 8004894:	4603      	mov	r3, r0
 8004896:	4a07      	ldr	r2, [pc, #28]	@ (80048b4 <HAL_RCC_ClockConfig+0x27c>)
 8004898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800489a:	f7fd f9eb 	bl	8001c74 <HAL_GetTickPrio>
 800489e:	4603      	mov	r3, r0
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fd f98d 	bl	8001bc0 <HAL_InitTick>
 80048a6:	4603      	mov	r3, r0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	58004000 	.word	0x58004000
 80048b4:	20000008 	.word	0x20000008

080048b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b8:	b590      	push	{r4, r7, lr}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048be:	f7ff f9e2 	bl	8003c86 <LL_RCC_GetSysClkSource>
 80048c2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10a      	bne.n	80048e0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80048ca:	f7ff f99e 	bl	8003c0a <LL_RCC_MSI_GetRange>
 80048ce:	4603      	mov	r3, r0
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004984 <HAL_RCC_GetSysClockFreq+0xcc>)
 80048d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	e04b      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d102      	bne.n	80048ec <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048e6:	4b28      	ldr	r3, [pc, #160]	@ (8004988 <HAL_RCC_GetSysClockFreq+0xd0>)
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	e045      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d10a      	bne.n	8004908 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80048f2:	f7fe ffb7 	bl	8003864 <LL_RCC_HSE_IsEnabledDiv2>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d102      	bne.n	8004902 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80048fc:	4b22      	ldr	r3, [pc, #136]	@ (8004988 <HAL_RCC_GetSysClockFreq+0xd0>)
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	e03a      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004902:	4b22      	ldr	r3, [pc, #136]	@ (800498c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	e037      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004908:	f7ff fab9 	bl	8003e7e <LL_RCC_PLL_GetMainSource>
 800490c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b02      	cmp	r3, #2
 8004912:	d003      	beq.n	800491c <HAL_RCC_GetSysClockFreq+0x64>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b03      	cmp	r3, #3
 8004918:	d003      	beq.n	8004922 <HAL_RCC_GetSysClockFreq+0x6a>
 800491a:	e00d      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800491c:	4b1a      	ldr	r3, [pc, #104]	@ (8004988 <HAL_RCC_GetSysClockFreq+0xd0>)
 800491e:	60bb      	str	r3, [r7, #8]
        break;
 8004920:	e015      	b.n	800494e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004922:	f7fe ff9f 	bl	8003864 <LL_RCC_HSE_IsEnabledDiv2>
 8004926:	4603      	mov	r3, r0
 8004928:	2b01      	cmp	r3, #1
 800492a:	d102      	bne.n	8004932 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800492c:	4b16      	ldr	r3, [pc, #88]	@ (8004988 <HAL_RCC_GetSysClockFreq+0xd0>)
 800492e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004930:	e00d      	b.n	800494e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004932:	4b16      	ldr	r3, [pc, #88]	@ (800498c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004934:	60bb      	str	r3, [r7, #8]
        break;
 8004936:	e00a      	b.n	800494e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004938:	f7ff f967 	bl	8003c0a <LL_RCC_MSI_GetRange>
 800493c:	4603      	mov	r3, r0
 800493e:	091b      	lsrs	r3, r3, #4
 8004940:	f003 030f 	and.w	r3, r3, #15
 8004944:	4a0f      	ldr	r2, [pc, #60]	@ (8004984 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800494a:	60bb      	str	r3, [r7, #8]
        break;
 800494c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800494e:	f7ff fa71 	bl	8003e34 <LL_RCC_PLL_GetN>
 8004952:	4602      	mov	r2, r0
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	fb03 f402 	mul.w	r4, r3, r2
 800495a:	f7ff fa84 	bl	8003e66 <LL_RCC_PLL_GetDivider>
 800495e:	4603      	mov	r3, r0
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	3301      	adds	r3, #1
 8004964:	fbb4 f4f3 	udiv	r4, r4, r3
 8004968:	f7ff fa71 	bl	8003e4e <LL_RCC_PLL_GetR>
 800496c:	4603      	mov	r3, r0
 800496e:	0f5b      	lsrs	r3, r3, #29
 8004970:	3301      	adds	r3, #1
 8004972:	fbb4 f3f3 	udiv	r3, r4, r3
 8004976:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004978:	68fb      	ldr	r3, [r7, #12]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	bd90      	pop	{r4, r7, pc}
 8004982:	bf00      	nop
 8004984:	08008b34 	.word	0x08008b34
 8004988:	00f42400 	.word	0x00f42400
 800498c:	01e84800 	.word	0x01e84800

08004990 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004990:	b598      	push	{r3, r4, r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004994:	f7ff ff90 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8004998:	4604      	mov	r4, r0
 800499a:	f7ff f9e9 	bl	8003d70 <LL_RCC_GetAHBPrescaler>
 800499e:	4603      	mov	r3, r0
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	4a03      	ldr	r2, [pc, #12]	@ (80049b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80049a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	bd98      	pop	{r3, r4, r7, pc}
 80049b4:	08008ad4 	.word	0x08008ad4

080049b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049b8:	b598      	push	{r3, r4, r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80049bc:	f7ff ffe8 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049c0:	4604      	mov	r4, r0
 80049c2:	f7ff f9ef 	bl	8003da4 <LL_RCC_GetAPB1Prescaler>
 80049c6:	4603      	mov	r3, r0
 80049c8:	0a1b      	lsrs	r3, r3, #8
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	4a04      	ldr	r2, [pc, #16]	@ (80049e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80049dc:	4618      	mov	r0, r3
 80049de:	bd98      	pop	{r3, r4, r7, pc}
 80049e0:	08008b14 	.word	0x08008b14

080049e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049e4:	b598      	push	{r3, r4, r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80049e8:	f7ff ffd2 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049ec:	4604      	mov	r4, r0
 80049ee:	f7ff f9e5 	bl	8003dbc <LL_RCC_GetAPB2Prescaler>
 80049f2:	4603      	mov	r3, r0
 80049f4:	0adb      	lsrs	r3, r3, #11
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	4a04      	ldr	r2, [pc, #16]	@ (8004a0c <HAL_RCC_GetPCLK2Freq+0x28>)
 80049fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a00:	f003 031f 	and.w	r3, r3, #31
 8004a04:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	bd98      	pop	{r3, r4, r7, pc}
 8004a0c:	08008b14 	.word	0x08008b14

08004a10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004a10:	b590      	push	{r4, r7, lr}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2bb0      	cmp	r3, #176	@ 0xb0
 8004a1c:	d903      	bls.n	8004a26 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004a1e:	4b15      	ldr	r3, [pc, #84]	@ (8004a74 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	e007      	b.n	8004a36 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	4a11      	ldr	r2, [pc, #68]	@ (8004a74 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a34:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004a36:	f7ff f9a7 	bl	8003d88 <LL_RCC_GetAHB4Prescaler>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	091b      	lsrs	r3, r3, #4
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	4a0d      	ldr	r2, [pc, #52]	@ (8004a78 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4a0a      	ldr	r2, [pc, #40]	@ (8004a7c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004a54:	fba2 2303 	umull	r2, r3, r2, r3
 8004a58:	0c9c      	lsrs	r4, r3, #18
 8004a5a:	f7fe fef5 	bl	8003848 <HAL_PWREx_GetVoltageRange>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	4619      	mov	r1, r3
 8004a62:	4620      	mov	r0, r4
 8004a64:	f000 f80c 	bl	8004a80 <RCC_SetFlashLatency>
 8004a68:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd90      	pop	{r4, r7, pc}
 8004a72:	bf00      	nop
 8004a74:	08008b34 	.word	0x08008b34
 8004a78:	08008ad4 	.word	0x08008ad4
 8004a7c:	431bde83 	.word	0x431bde83

08004a80 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004a80:	b590      	push	{r4, r7, lr}
 8004a82:	b093      	sub	sp, #76	@ 0x4c
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004a8a:	4b37      	ldr	r3, [pc, #220]	@ (8004b68 <RCC_SetFlashLatency+0xe8>)
 8004a8c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8004a90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004a96:	4a35      	ldr	r2, [pc, #212]	@ (8004b6c <RCC_SetFlashLatency+0xec>)
 8004a98:	f107 031c 	add.w	r3, r7, #28
 8004a9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004aa2:	4b33      	ldr	r3, [pc, #204]	@ (8004b70 <RCC_SetFlashLatency+0xf0>)
 8004aa4:	f107 040c 	add.w	r4, r7, #12
 8004aa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004aaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004aae:	2300      	movs	r3, #0
 8004ab0:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ab8:	d11a      	bne.n	8004af0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004aba:	2300      	movs	r3, #0
 8004abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004abe:	e013      	b.n	8004ae8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	3348      	adds	r3, #72	@ 0x48
 8004ac6:	443b      	add	r3, r7
 8004ac8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d807      	bhi.n	8004ae2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	3348      	adds	r3, #72	@ 0x48
 8004ad8:	443b      	add	r3, r7
 8004ada:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004ade:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004ae0:	e020      	b.n	8004b24 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	d9e8      	bls.n	8004ac0 <RCC_SetFlashLatency+0x40>
 8004aee:	e019      	b.n	8004b24 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004af0:	2300      	movs	r3, #0
 8004af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004af4:	e013      	b.n	8004b1e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	3348      	adds	r3, #72	@ 0x48
 8004afc:	443b      	add	r3, r7
 8004afe:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d807      	bhi.n	8004b18 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	3348      	adds	r3, #72	@ 0x48
 8004b0e:	443b      	add	r3, r7
 8004b10:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004b14:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004b16:	e005      	b.n	8004b24 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d9e8      	bls.n	8004af6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004b24:	4b13      	ldr	r3, [pc, #76]	@ (8004b74 <RCC_SetFlashLatency+0xf4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f023 0207 	bic.w	r2, r3, #7
 8004b2c:	4911      	ldr	r1, [pc, #68]	@ (8004b74 <RCC_SetFlashLatency+0xf4>)
 8004b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b30:	4313      	orrs	r3, r2
 8004b32:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b34:	f7fd f892 	bl	8001c5c <HAL_GetTick>
 8004b38:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004b3a:	e008      	b.n	8004b4e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b3c:	f7fd f88e 	bl	8001c5c <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e007      	b.n	8004b5e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004b4e:	4b09      	ldr	r3, [pc, #36]	@ (8004b74 <RCC_SetFlashLatency+0xf4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d1ef      	bne.n	8004b3c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	374c      	adds	r7, #76	@ 0x4c
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd90      	pop	{r4, r7, pc}
 8004b66:	bf00      	nop
 8004b68:	08008aa8 	.word	0x08008aa8
 8004b6c:	08008ab8 	.word	0x08008ab8
 8004b70:	08008ac4 	.word	0x08008ac4
 8004b74:	58004000 	.word	0x58004000

08004b78 <LL_RCC_LSE_IsEnabled>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <LL_RCC_LSE_IsEnabled+0x18>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <LL_RCC_LSE_IsEnabled+0x1a>
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <LL_RCC_LSE_IsReady>:
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d101      	bne.n	8004bb4 <LL_RCC_LSE_IsReady+0x18>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e000      	b.n	8004bb6 <LL_RCC_LSE_IsReady+0x1a>
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <LL_RCC_SetRFWKPClockSource>:
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bd0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <LL_RCC_SetSMPSClockSource>:
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	f023 0203 	bic.w	r2, r3, #3
 8004bfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <LL_RCC_SetSMPSPrescaler>:
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c22:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <LL_RCC_SetUSARTClockSource>:
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4c:	f023 0203 	bic.w	r2, r3, #3
 8004c50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <LL_RCC_SetLPUARTClockSource>:
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c78:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <LL_RCC_SetI2CClockSource>:
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ca0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	091b      	lsrs	r3, r3, #4
 8004ca8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004cac:	43db      	mvns	r3, r3
 8004cae:	401a      	ands	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004cb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <LL_RCC_SetLPTIMClockSource>:
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cda:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	0c1b      	lsrs	r3, r3, #16
 8004ce2:	041b      	lsls	r3, r3, #16
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	401a      	ands	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <LL_RCC_SetSAIClockSource>:
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004d0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <LL_RCC_SetRNGClockSource>:
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d3e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004d42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <LL_RCC_SetCLK48ClockSource>:
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <LL_RCC_SetUSBClockSource>:
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff ffe3 	bl	8004d5a <LL_RCC_SetCLK48ClockSource>
}
 8004d94:	bf00      	nop
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <LL_RCC_SetADCClockSource>:
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004da4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dac:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004db0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <LL_RCC_SetRTCClockSource>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004dd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ddc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <LL_RCC_GetRTCClockSource>:
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <LL_RCC_ForceBackupDomainReset>:
{
 8004e0e:	b480      	push	{r7}
 8004e10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004e26:	bf00      	nop
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004e34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004e48:	bf00      	nop
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <LL_RCC_PLLSAI1_Enable>:
{
 8004e52:	b480      	push	{r7}
 8004e54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004e56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e64:	6013      	str	r3, [r2, #0]
}
 8004e66:	bf00      	nop
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <LL_RCC_PLLSAI1_Disable>:
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e82:	6013      	str	r3, [r2, #0]
}
 8004e84:	bf00      	nop
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <LL_RCC_PLLSAI1_IsReady>:
{
 8004e8e:	b480      	push	{r7}
 8004e90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ea0:	d101      	bne.n	8004ea6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b088      	sub	sp, #32
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004eba:	2300      	movs	r3, #0
 8004ebc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d034      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ed6:	d021      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004ed8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004edc:	d81b      	bhi.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ede:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ee2:	d01d      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004ee4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ee8:	d815      	bhi.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00b      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004eee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ef2:	d110      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f02:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f04:	e00d      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3304      	adds	r3, #4
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 f947 	bl	800519e <RCCEx_PLLSAI1_ConfigNP>
 8004f10:	4603      	mov	r3, r0
 8004f12:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f14:	e005      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	77fb      	strb	r3, [r7, #31]
        break;
 8004f1a:	e002      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004f1c:	bf00      	nop
 8004f1e:	e000      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f22:	7ffb      	ldrb	r3, [r7, #31]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d105      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff fee8 	bl	8004d02 <LL_RCC_SetSAIClockSource>
 8004f32:	e001      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f34:	7ffb      	ldrb	r3, [r7, #31]
 8004f36:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d046      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004f44:	f7ff ff56 	bl	8004df4 <LL_RCC_GetRTCClockSource>
 8004f48:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d03c      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004f54:	f7fe fc68 	bl	8003828 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d105      	bne.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff ff30 	bl	8004dc8 <LL_RCC_SetRTCClockSource>
 8004f68:	e02e      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004f6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f72:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004f74:	f7ff ff4b 	bl	8004e0e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004f78:	f7ff ff5a 	bl	8004e30 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004f8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004f94:	f7ff fdf0 	bl	8004b78 <LL_RCC_LSE_IsEnabled>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d114      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f9e:	f7fc fe5d 	bl	8001c5c <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004fa4:	e00b      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa6:	f7fc fe59 	bl	8001c5c <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d902      	bls.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	77fb      	strb	r3, [r7, #31]
              break;
 8004fbc:	e004      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004fbe:	f7ff fded 	bl	8004b9c <LL_RCC_LSE_IsReady>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d1ee      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004fc8:	7ffb      	ldrb	r3, [r7, #31]
 8004fca:	77bb      	strb	r3, [r7, #30]
 8004fcc:	e001      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fce:	7ffb      	ldrb	r3, [r7, #31]
 8004fd0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d004      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fe2a 	bl	8004c3c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d004      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff fe35 	bl	8004c68 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0310 	and.w	r3, r3, #16
 8005006:	2b00      	cmp	r3, #0
 8005008:	d004      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff fe5d 	bl	8004cce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	d004      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff fe52 	bl	8004cce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	d004      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff fe2a 	bl	8004c94 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b00      	cmp	r3, #0
 800504a:	d004      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff fe1f 	bl	8004c94 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d022      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff fe8d 	bl	8004d86 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005070:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005074:	d107      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005076:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005080:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005084:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800508a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800508e:	d10b      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3304      	adds	r3, #4
 8005094:	4618      	mov	r0, r3
 8005096:	f000 f8dd 	bl	8005254 <RCCEx_PLLSAI1_ConfigNQ>
 800509a:	4603      	mov	r3, r0
 800509c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800509e:	7ffb      	ldrb	r3, [r7, #31]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80050a4:	7ffb      	ldrb	r3, [r7, #31]
 80050a6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d02b      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050bc:	d008      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050c6:	d003      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d105      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fe2a 	bl	8004d2e <LL_RCC_SetRNGClockSource>
 80050da:	e00a      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	2000      	movs	r0, #0
 80050e8:	f7ff fe21 	bl	8004d2e <LL_RCC_SetRNGClockSource>
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f7ff fe34 	bl	8004d5a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80050fa:	d107      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80050fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005106:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800510a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005114:	2b00      	cmp	r3, #0
 8005116:	d022      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff fe3d 	bl	8004d9c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005126:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800512a:	d107      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800512c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005136:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800513a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005140:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005144:	d10b      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	3304      	adds	r3, #4
 800514a:	4618      	mov	r0, r3
 800514c:	f000 f8dd 	bl	800530a <RCCEx_PLLSAI1_ConfigNR>
 8005150:	4603      	mov	r3, r0
 8005152:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005154:	7ffb      	ldrb	r3, [r7, #31]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800515a:	7ffb      	ldrb	r3, [r7, #31]
 800515c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d004      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff fd26 	bl	8004bc0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff fd45 	bl	8004c14 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff fd2c 	bl	8004bec <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005194:	7fbb      	ldrb	r3, [r7, #30]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3720      	adds	r7, #32
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80051aa:	f7ff fe61 	bl	8004e70 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80051ae:	f7fc fd55 	bl	8001c5c <HAL_GetTick>
 80051b2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80051b4:	e009      	b.n	80051ca <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051b6:	f7fc fd51 	bl	8001c5c <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d902      	bls.n	80051ca <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	73fb      	strb	r3, [r7, #15]
      break;
 80051c8:	e004      	b.n	80051d4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80051ca:	f7ff fe60 	bl	8004e8e <LL_RCC_PLLSAI1_IsReady>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1f0      	bne.n	80051b6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d137      	bne.n	800524a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80051da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	021b      	lsls	r3, r3, #8
 80051ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051ee:	4313      	orrs	r3, r2
 80051f0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80051f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005204:	4313      	orrs	r3, r2
 8005206:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005208:	f7ff fe23 	bl	8004e52 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520c:	f7fc fd26 	bl	8001c5c <HAL_GetTick>
 8005210:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005212:	e009      	b.n	8005228 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005214:	f7fc fd22 	bl	8001c5c <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d902      	bls.n	8005228 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	73fb      	strb	r3, [r7, #15]
        break;
 8005226:	e004      	b.n	8005232 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005228:	f7ff fe31 	bl	8004e8e <LL_RCC_PLLSAI1_IsReady>
 800522c:	4603      	mov	r3, r0
 800522e:	2b01      	cmp	r3, #1
 8005230:	d1f0      	bne.n	8005214 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d108      	bne.n	800524a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005246:	4313      	orrs	r3, r2
 8005248:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800524a:	7bfb      	ldrb	r3, [r7, #15]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005260:	f7ff fe06 	bl	8004e70 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005264:	f7fc fcfa 	bl	8001c5c <HAL_GetTick>
 8005268:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800526a:	e009      	b.n	8005280 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800526c:	f7fc fcf6 	bl	8001c5c <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d902      	bls.n	8005280 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	73fb      	strb	r3, [r7, #15]
      break;
 800527e:	e004      	b.n	800528a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005280:	f7ff fe05 	bl	8004e8e <LL_RCC_PLLSAI1_IsReady>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f0      	bne.n	800526c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d137      	bne.n	8005300 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052a4:	4313      	orrs	r3, r2
 80052a6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80052a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052ba:	4313      	orrs	r3, r2
 80052bc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80052be:	f7ff fdc8 	bl	8004e52 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c2:	f7fc fccb 	bl	8001c5c <HAL_GetTick>
 80052c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80052c8:	e009      	b.n	80052de <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052ca:	f7fc fcc7 	bl	8001c5c <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d902      	bls.n	80052de <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	73fb      	strb	r3, [r7, #15]
        break;
 80052dc:	e004      	b.n	80052e8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80052de:	f7ff fdd6 	bl	8004e8e <LL_RCC_PLLSAI1_IsReady>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d1f0      	bne.n	80052ca <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d108      	bne.n	8005300 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80052ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052fc:	4313      	orrs	r3, r2
 80052fe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005300:	7bfb      	ldrb	r3, [r7, #15]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005316:	f7ff fdab 	bl	8004e70 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800531a:	f7fc fc9f 	bl	8001c5c <HAL_GetTick>
 800531e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005320:	e009      	b.n	8005336 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005322:	f7fc fc9b 	bl	8001c5c <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d902      	bls.n	8005336 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	73fb      	strb	r3, [r7, #15]
      break;
 8005334:	e004      	b.n	8005340 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005336:	f7ff fdaa 	bl	8004e8e <LL_RCC_PLLSAI1_IsReady>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1f0      	bne.n	8005322 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005340:	7bfb      	ldrb	r3, [r7, #15]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d137      	bne.n	80053b6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800535a:	4313      	orrs	r3, r2
 800535c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800535e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005370:	4313      	orrs	r3, r2
 8005372:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005374:	f7ff fd6d 	bl	8004e52 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005378:	f7fc fc70 	bl	8001c5c <HAL_GetTick>
 800537c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800537e:	e009      	b.n	8005394 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005380:	f7fc fc6c 	bl	8001c5c <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d902      	bls.n	8005394 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	73fb      	strb	r3, [r7, #15]
        break;
 8005392:	e004      	b.n	800539e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005394:	f7ff fd7b 	bl	8004e8e <LL_RCC_PLLSAI1_IsReady>
 8005398:	4603      	mov	r3, r0
 800539a:	2b01      	cmp	r3, #1
 800539c:	d1f0      	bne.n	8005380 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d108      	bne.n	80053b6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80053a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053b2:	4313      	orrs	r3, r2
 80053b4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <LL_RCC_GetUSARTClockSource>:
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80053c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4013      	ands	r3, r2
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <LL_RCC_GetLPUARTClockSource>:
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80053e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4013      	ands	r3, r2
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e042      	b.n	8005498 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fc f845 	bl	80014b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2224      	movs	r2, #36	@ 0x24
 800542e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0201 	bic.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fade 	bl	8005a0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f8b3 	bl	80055bc <UART_SetConfig>
 8005456:	4603      	mov	r3, r0
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e01b      	b.n	8005498 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800546e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800547e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 0201 	orr.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fb5d 	bl	8005b50 <UART_CheckIdleState>
 8005496:	4603      	mov	r3, r0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08a      	sub	sp, #40	@ 0x28
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	4613      	mov	r3, r2
 80054ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	d17b      	bne.n	80055b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <HAL_UART_Transmit+0x26>
 80054c0:	88fb      	ldrh	r3, [r7, #6]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e074      	b.n	80055b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2221      	movs	r2, #33	@ 0x21
 80054d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054da:	f7fc fbbf 	bl	8001c5c <HAL_GetTick>
 80054de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	88fa      	ldrh	r2, [r7, #6]
 80054e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	88fa      	ldrh	r2, [r7, #6]
 80054ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054f8:	d108      	bne.n	800550c <HAL_UART_Transmit+0x6c>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d104      	bne.n	800550c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	e003      	b.n	8005514 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005510:	2300      	movs	r3, #0
 8005512:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005514:	e030      	b.n	8005578 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2200      	movs	r2, #0
 800551e:	2180      	movs	r1, #128	@ 0x80
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 fbbf 	bl	8005ca4 <UART_WaitOnFlagUntilTimeout>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d005      	beq.n	8005538 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2220      	movs	r2, #32
 8005530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e03d      	b.n	80055b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10b      	bne.n	8005556 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800554c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	3302      	adds	r3, #2
 8005552:	61bb      	str	r3, [r7, #24]
 8005554:	e007      	b.n	8005566 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	781a      	ldrb	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	3301      	adds	r3, #1
 8005564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1c8      	bne.n	8005516 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2200      	movs	r2, #0
 800558c:	2140      	movs	r1, #64	@ 0x40
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 fb88 	bl	8005ca4 <UART_WaitOnFlagUntilTimeout>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d005      	beq.n	80055a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e006      	b.n	80055b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e000      	b.n	80055b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80055b2:	2302      	movs	r3, #2
  }
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3720      	adds	r7, #32
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c0:	b08c      	sub	sp, #48	@ 0x30
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	431a      	orrs	r2, r3
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	431a      	orrs	r2, r3
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	4baf      	ldr	r3, [pc, #700]	@ (80058a8 <UART_SetConfig+0x2ec>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	6812      	ldr	r2, [r2, #0]
 80055f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055f4:	430b      	orrs	r3, r1
 80055f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4aa4      	ldr	r2, [pc, #656]	@ (80058ac <UART_SetConfig+0x2f0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d004      	beq.n	8005628 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005624:	4313      	orrs	r3, r2
 8005626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005632:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800563c:	430b      	orrs	r3, r1
 800563e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005646:	f023 010f 	bic.w	r1, r3, #15
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a95      	ldr	r2, [pc, #596]	@ (80058b0 <UART_SetConfig+0x2f4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d125      	bne.n	80056ac <UART_SetConfig+0xf0>
 8005660:	2003      	movs	r0, #3
 8005662:	f7ff fead 	bl	80053c0 <LL_RCC_GetUSARTClockSource>
 8005666:	4603      	mov	r3, r0
 8005668:	2b03      	cmp	r3, #3
 800566a:	d81b      	bhi.n	80056a4 <UART_SetConfig+0xe8>
 800566c:	a201      	add	r2, pc, #4	@ (adr r2, 8005674 <UART_SetConfig+0xb8>)
 800566e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005672:	bf00      	nop
 8005674:	08005685 	.word	0x08005685
 8005678:	08005695 	.word	0x08005695
 800567c:	0800568d 	.word	0x0800568d
 8005680:	0800569d 	.word	0x0800569d
 8005684:	2301      	movs	r3, #1
 8005686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800568a:	e042      	b.n	8005712 <UART_SetConfig+0x156>
 800568c:	2302      	movs	r3, #2
 800568e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005692:	e03e      	b.n	8005712 <UART_SetConfig+0x156>
 8005694:	2304      	movs	r3, #4
 8005696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800569a:	e03a      	b.n	8005712 <UART_SetConfig+0x156>
 800569c:	2308      	movs	r3, #8
 800569e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056a2:	e036      	b.n	8005712 <UART_SetConfig+0x156>
 80056a4:	2310      	movs	r3, #16
 80056a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056aa:	e032      	b.n	8005712 <UART_SetConfig+0x156>
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a7e      	ldr	r2, [pc, #504]	@ (80058ac <UART_SetConfig+0x2f0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d12a      	bne.n	800570c <UART_SetConfig+0x150>
 80056b6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80056ba:	f7ff fe91 	bl	80053e0 <LL_RCC_GetLPUARTClockSource>
 80056be:	4603      	mov	r3, r0
 80056c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056c4:	d01a      	beq.n	80056fc <UART_SetConfig+0x140>
 80056c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056ca:	d81b      	bhi.n	8005704 <UART_SetConfig+0x148>
 80056cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056d0:	d00c      	beq.n	80056ec <UART_SetConfig+0x130>
 80056d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056d6:	d815      	bhi.n	8005704 <UART_SetConfig+0x148>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <UART_SetConfig+0x128>
 80056dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056e0:	d008      	beq.n	80056f4 <UART_SetConfig+0x138>
 80056e2:	e00f      	b.n	8005704 <UART_SetConfig+0x148>
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ea:	e012      	b.n	8005712 <UART_SetConfig+0x156>
 80056ec:	2302      	movs	r3, #2
 80056ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056f2:	e00e      	b.n	8005712 <UART_SetConfig+0x156>
 80056f4:	2304      	movs	r3, #4
 80056f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056fa:	e00a      	b.n	8005712 <UART_SetConfig+0x156>
 80056fc:	2308      	movs	r3, #8
 80056fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005702:	e006      	b.n	8005712 <UART_SetConfig+0x156>
 8005704:	2310      	movs	r3, #16
 8005706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800570a:	e002      	b.n	8005712 <UART_SetConfig+0x156>
 800570c:	2310      	movs	r3, #16
 800570e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a65      	ldr	r2, [pc, #404]	@ (80058ac <UART_SetConfig+0x2f0>)
 8005718:	4293      	cmp	r3, r2
 800571a:	f040 8097 	bne.w	800584c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800571e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005722:	2b08      	cmp	r3, #8
 8005724:	d823      	bhi.n	800576e <UART_SetConfig+0x1b2>
 8005726:	a201      	add	r2, pc, #4	@ (adr r2, 800572c <UART_SetConfig+0x170>)
 8005728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572c:	08005751 	.word	0x08005751
 8005730:	0800576f 	.word	0x0800576f
 8005734:	08005759 	.word	0x08005759
 8005738:	0800576f 	.word	0x0800576f
 800573c:	0800575f 	.word	0x0800575f
 8005740:	0800576f 	.word	0x0800576f
 8005744:	0800576f 	.word	0x0800576f
 8005748:	0800576f 	.word	0x0800576f
 800574c:	08005767 	.word	0x08005767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005750:	f7ff f932 	bl	80049b8 <HAL_RCC_GetPCLK1Freq>
 8005754:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005756:	e010      	b.n	800577a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005758:	4b56      	ldr	r3, [pc, #344]	@ (80058b4 <UART_SetConfig+0x2f8>)
 800575a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800575c:	e00d      	b.n	800577a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800575e:	f7ff f8ab 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8005762:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005764:	e009      	b.n	800577a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800576a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800576c:	e005      	b.n	800577a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005778:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 812b 	beq.w	80059d8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005786:	4a4c      	ldr	r2, [pc, #304]	@ (80058b8 <UART_SetConfig+0x2fc>)
 8005788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800578c:	461a      	mov	r2, r3
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	fbb3 f3f2 	udiv	r3, r3, r2
 8005794:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	4613      	mov	r3, r2
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	4413      	add	r3, r2
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d305      	bcc.n	80057b2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d903      	bls.n	80057ba <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057b8:	e10e      	b.n	80059d8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057bc:	2200      	movs	r2, #0
 80057be:	60bb      	str	r3, [r7, #8]
 80057c0:	60fa      	str	r2, [r7, #12]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c6:	4a3c      	ldr	r2, [pc, #240]	@ (80058b8 <UART_SetConfig+0x2fc>)
 80057c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2200      	movs	r2, #0
 80057d0:	603b      	str	r3, [r7, #0]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057dc:	f7fb f9bc 	bl	8000b58 <__aeabi_uldivmod>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4610      	mov	r0, r2
 80057e6:	4619      	mov	r1, r3
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	020b      	lsls	r3, r1, #8
 80057f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057f6:	0202      	lsls	r2, r0, #8
 80057f8:	6979      	ldr	r1, [r7, #20]
 80057fa:	6849      	ldr	r1, [r1, #4]
 80057fc:	0849      	lsrs	r1, r1, #1
 80057fe:	2000      	movs	r0, #0
 8005800:	460c      	mov	r4, r1
 8005802:	4605      	mov	r5, r0
 8005804:	eb12 0804 	adds.w	r8, r2, r4
 8005808:	eb43 0905 	adc.w	r9, r3, r5
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	469a      	mov	sl, r3
 8005814:	4693      	mov	fp, r2
 8005816:	4652      	mov	r2, sl
 8005818:	465b      	mov	r3, fp
 800581a:	4640      	mov	r0, r8
 800581c:	4649      	mov	r1, r9
 800581e:	f7fb f99b 	bl	8000b58 <__aeabi_uldivmod>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4613      	mov	r3, r2
 8005828:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005830:	d308      	bcc.n	8005844 <UART_SetConfig+0x288>
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005838:	d204      	bcs.n	8005844 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6a3a      	ldr	r2, [r7, #32]
 8005840:	60da      	str	r2, [r3, #12]
 8005842:	e0c9      	b.n	80059d8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800584a:	e0c5      	b.n	80059d8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005854:	d16d      	bne.n	8005932 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005856:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800585a:	3b01      	subs	r3, #1
 800585c:	2b07      	cmp	r3, #7
 800585e:	d82d      	bhi.n	80058bc <UART_SetConfig+0x300>
 8005860:	a201      	add	r2, pc, #4	@ (adr r2, 8005868 <UART_SetConfig+0x2ac>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	08005889 	.word	0x08005889
 800586c:	08005891 	.word	0x08005891
 8005870:	080058bd 	.word	0x080058bd
 8005874:	08005897 	.word	0x08005897
 8005878:	080058bd 	.word	0x080058bd
 800587c:	080058bd 	.word	0x080058bd
 8005880:	080058bd 	.word	0x080058bd
 8005884:	0800589f 	.word	0x0800589f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005888:	f7ff f8ac 	bl	80049e4 <HAL_RCC_GetPCLK2Freq>
 800588c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800588e:	e01b      	b.n	80058c8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005890:	4b08      	ldr	r3, [pc, #32]	@ (80058b4 <UART_SetConfig+0x2f8>)
 8005892:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005894:	e018      	b.n	80058c8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005896:	f7ff f80f 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 800589a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800589c:	e014      	b.n	80058c8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800589e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058a4:	e010      	b.n	80058c8 <UART_SetConfig+0x30c>
 80058a6:	bf00      	nop
 80058a8:	cfff69f3 	.word	0xcfff69f3
 80058ac:	40008000 	.word	0x40008000
 80058b0:	40013800 	.word	0x40013800
 80058b4:	00f42400 	.word	0x00f42400
 80058b8:	08008b88 	.word	0x08008b88
      default:
        pclk = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 8084 	beq.w	80059d8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d4:	4a4b      	ldr	r2, [pc, #300]	@ (8005a04 <UART_SetConfig+0x448>)
 80058d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058da:	461a      	mov	r2, r3
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	fbb3 f3f2 	udiv	r3, r3, r2
 80058e2:	005a      	lsls	r2, r3, #1
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	085b      	lsrs	r3, r3, #1
 80058ea:	441a      	add	r2, r3
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	2b0f      	cmp	r3, #15
 80058fa:	d916      	bls.n	800592a <UART_SetConfig+0x36e>
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005902:	d212      	bcs.n	800592a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	b29b      	uxth	r3, r3
 8005908:	f023 030f 	bic.w	r3, r3, #15
 800590c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	085b      	lsrs	r3, r3, #1
 8005912:	b29b      	uxth	r3, r3
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	b29a      	uxth	r2, r3
 800591a:	8bfb      	ldrh	r3, [r7, #30]
 800591c:	4313      	orrs	r3, r2
 800591e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	8bfa      	ldrh	r2, [r7, #30]
 8005926:	60da      	str	r2, [r3, #12]
 8005928:	e056      	b.n	80059d8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005930:	e052      	b.n	80059d8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005932:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005936:	3b01      	subs	r3, #1
 8005938:	2b07      	cmp	r3, #7
 800593a:	d822      	bhi.n	8005982 <UART_SetConfig+0x3c6>
 800593c:	a201      	add	r2, pc, #4	@ (adr r2, 8005944 <UART_SetConfig+0x388>)
 800593e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005942:	bf00      	nop
 8005944:	08005965 	.word	0x08005965
 8005948:	0800596d 	.word	0x0800596d
 800594c:	08005983 	.word	0x08005983
 8005950:	08005973 	.word	0x08005973
 8005954:	08005983 	.word	0x08005983
 8005958:	08005983 	.word	0x08005983
 800595c:	08005983 	.word	0x08005983
 8005960:	0800597b 	.word	0x0800597b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005964:	f7ff f83e 	bl	80049e4 <HAL_RCC_GetPCLK2Freq>
 8005968:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800596a:	e010      	b.n	800598e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800596c:	4b26      	ldr	r3, [pc, #152]	@ (8005a08 <UART_SetConfig+0x44c>)
 800596e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005970:	e00d      	b.n	800598e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005972:	f7fe ffa1 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8005976:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005978:	e009      	b.n	800598e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800597a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800597e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005980:	e005      	b.n	800598e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800598c:	bf00      	nop
    }

    if (pclk != 0U)
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	2b00      	cmp	r3, #0
 8005992:	d021      	beq.n	80059d8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005998:	4a1a      	ldr	r2, [pc, #104]	@ (8005a04 <UART_SetConfig+0x448>)
 800599a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800599e:	461a      	mov	r2, r3
 80059a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	441a      	add	r2, r3
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	2b0f      	cmp	r3, #15
 80059bc:	d909      	bls.n	80059d2 <UART_SetConfig+0x416>
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059c4:	d205      	bcs.n	80059d2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60da      	str	r2, [r3, #12]
 80059d0:	e002      	b.n	80059d8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2201      	movs	r2, #1
 80059dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2200      	movs	r2, #0
 80059ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2200      	movs	r2, #0
 80059f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80059f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3730      	adds	r7, #48	@ 0x30
 80059fc:	46bd      	mov	sp, r7
 80059fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a02:	bf00      	nop
 8005a04:	08008b88 	.word	0x08008b88
 8005a08:	00f42400 	.word	0x00f42400

08005a0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7e:	f003 0304 	and.w	r3, r3, #4
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa0:	f003 0310 	and.w	r3, r3, #16
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00a      	beq.n	8005abe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac2:	f003 0320 	and.w	r3, r3, #32
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01a      	beq.n	8005b22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b0a:	d10a      	bne.n	8005b22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	605a      	str	r2, [r3, #4]
  }
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b098      	sub	sp, #96	@ 0x60
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b60:	f7fc f87c 	bl	8001c5c <HAL_GetTick>
 8005b64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0308 	and.w	r3, r3, #8
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	d12f      	bne.n	8005bd4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f88e 	bl	8005ca4 <UART_WaitOnFlagUntilTimeout>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d022      	beq.n	8005bd4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ba2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bac:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e6      	bne.n	8005b8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e063      	b.n	8005c9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d149      	bne.n	8005c76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005be2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bea:	2200      	movs	r2, #0
 8005bec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f857 	bl	8005ca4 <UART_WaitOnFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d03c      	beq.n	8005c76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	e853 3f00 	ldrex	r3, [r3]
 8005c08:	623b      	str	r3, [r7, #32]
   return(result);
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e6      	bne.n	8005bfc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3308      	adds	r3, #8
 8005c34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f023 0301 	bic.w	r3, r3, #1
 8005c44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c4e:	61fa      	str	r2, [r7, #28]
 8005c50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	69b9      	ldr	r1, [r7, #24]
 8005c54:	69fa      	ldr	r2, [r7, #28]
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	617b      	str	r3, [r7, #20]
   return(result);
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1e5      	bne.n	8005c2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e012      	b.n	8005c9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3758      	adds	r7, #88	@ 0x58
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	603b      	str	r3, [r7, #0]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb4:	e04f      	b.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbc:	d04b      	beq.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cbe:	f7fb ffcd 	bl	8001c5c <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d302      	bcc.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e04e      	b.n	8005d76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0304 	and.w	r3, r3, #4
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d037      	beq.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2b80      	cmp	r3, #128	@ 0x80
 8005cea:	d034      	beq.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b40      	cmp	r3, #64	@ 0x40
 8005cf0:	d031      	beq.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	f003 0308 	and.w	r3, r3, #8
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d110      	bne.n	8005d22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2208      	movs	r2, #8
 8005d06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f838 	bl	8005d7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2208      	movs	r2, #8
 8005d12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e029      	b.n	8005d76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d30:	d111      	bne.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 f81e 	bl	8005d7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e00f      	b.n	8005d76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69da      	ldr	r2, [r3, #28]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	bf0c      	ite	eq
 8005d66:	2301      	moveq	r3, #1
 8005d68:	2300      	movne	r3, #0
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	79fb      	ldrb	r3, [r7, #7]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d0a0      	beq.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b095      	sub	sp, #84	@ 0x54
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005da4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005da6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005daa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dac:	e841 2300 	strex	r3, r2, [r1]
 8005db0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e6      	bne.n	8005d86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	e853 3f00 	ldrex	r3, [r3]
 8005dc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dce:	f023 0301 	bic.w	r3, r3, #1
 8005dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3308      	adds	r3, #8
 8005dda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ddc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005de2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e3      	bne.n	8005db8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d118      	bne.n	8005e2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	f023 0310 	bic.w	r3, r3, #16
 8005e0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e16:	61bb      	str	r3, [r7, #24]
 8005e18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1a:	6979      	ldr	r1, [r7, #20]
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	613b      	str	r3, [r7, #16]
   return(result);
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e6      	bne.n	8005df8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005e3e:	bf00      	nop
 8005e40:	3754      	adds	r7, #84	@ 0x54
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b085      	sub	sp, #20
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d101      	bne.n	8005e60 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e027      	b.n	8005eb0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2224      	movs	r2, #36	@ 0x24
 8005e6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0201 	bic.w	r2, r2, #1
 8005e86:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e02d      	b.n	8005f30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2224      	movs	r2, #36	@ 0x24
 8005ee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0201 	bic.w	r2, r2, #1
 8005efa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f84f 	bl	8005fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e02d      	b.n	8005fac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2224      	movs	r2, #36	@ 0x24
 8005f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0201 	bic.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f811 	bl	8005fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d108      	bne.n	8005fd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fd4:	e031      	b.n	800603a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fd6:	2308      	movs	r3, #8
 8005fd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fda:	2308      	movs	r3, #8
 8005fdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	0e5b      	lsrs	r3, r3, #25
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	0f5b      	lsrs	r3, r3, #29
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ffe:	7bbb      	ldrb	r3, [r7, #14]
 8006000:	7b3a      	ldrb	r2, [r7, #12]
 8006002:	4911      	ldr	r1, [pc, #68]	@ (8006048 <UARTEx_SetNbDataToProcess+0x94>)
 8006004:	5c8a      	ldrb	r2, [r1, r2]
 8006006:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800600a:	7b3a      	ldrb	r2, [r7, #12]
 800600c:	490f      	ldr	r1, [pc, #60]	@ (800604c <UARTEx_SetNbDataToProcess+0x98>)
 800600e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006010:	fb93 f3f2 	sdiv	r3, r3, r2
 8006014:	b29a      	uxth	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	7b7a      	ldrb	r2, [r7, #13]
 8006020:	4909      	ldr	r1, [pc, #36]	@ (8006048 <UARTEx_SetNbDataToProcess+0x94>)
 8006022:	5c8a      	ldrb	r2, [r1, r2]
 8006024:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006028:	7b7a      	ldrb	r2, [r7, #13]
 800602a:	4908      	ldr	r1, [pc, #32]	@ (800604c <UARTEx_SetNbDataToProcess+0x98>)
 800602c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800602e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006032:	b29a      	uxth	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800603a:	bf00      	nop
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	08008ba0 	.word	0x08008ba0
 800604c:	08008ba8 	.word	0x08008ba8

08006050 <__cvt>:
 8006050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006054:	ec57 6b10 	vmov	r6, r7, d0
 8006058:	2f00      	cmp	r7, #0
 800605a:	460c      	mov	r4, r1
 800605c:	4619      	mov	r1, r3
 800605e:	463b      	mov	r3, r7
 8006060:	bfbb      	ittet	lt
 8006062:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006066:	461f      	movlt	r7, r3
 8006068:	2300      	movge	r3, #0
 800606a:	232d      	movlt	r3, #45	@ 0x2d
 800606c:	700b      	strb	r3, [r1, #0]
 800606e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006070:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006074:	4691      	mov	r9, r2
 8006076:	f023 0820 	bic.w	r8, r3, #32
 800607a:	bfbc      	itt	lt
 800607c:	4632      	movlt	r2, r6
 800607e:	4616      	movlt	r6, r2
 8006080:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006084:	d005      	beq.n	8006092 <__cvt+0x42>
 8006086:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800608a:	d100      	bne.n	800608e <__cvt+0x3e>
 800608c:	3401      	adds	r4, #1
 800608e:	2102      	movs	r1, #2
 8006090:	e000      	b.n	8006094 <__cvt+0x44>
 8006092:	2103      	movs	r1, #3
 8006094:	ab03      	add	r3, sp, #12
 8006096:	9301      	str	r3, [sp, #4]
 8006098:	ab02      	add	r3, sp, #8
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	ec47 6b10 	vmov	d0, r6, r7
 80060a0:	4653      	mov	r3, sl
 80060a2:	4622      	mov	r2, r4
 80060a4:	f000 ff3c 	bl	8006f20 <_dtoa_r>
 80060a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80060ac:	4605      	mov	r5, r0
 80060ae:	d119      	bne.n	80060e4 <__cvt+0x94>
 80060b0:	f019 0f01 	tst.w	r9, #1
 80060b4:	d00e      	beq.n	80060d4 <__cvt+0x84>
 80060b6:	eb00 0904 	add.w	r9, r0, r4
 80060ba:	2200      	movs	r2, #0
 80060bc:	2300      	movs	r3, #0
 80060be:	4630      	mov	r0, r6
 80060c0:	4639      	mov	r1, r7
 80060c2:	f7fa fcd9 	bl	8000a78 <__aeabi_dcmpeq>
 80060c6:	b108      	cbz	r0, 80060cc <__cvt+0x7c>
 80060c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80060cc:	2230      	movs	r2, #48	@ 0x30
 80060ce:	9b03      	ldr	r3, [sp, #12]
 80060d0:	454b      	cmp	r3, r9
 80060d2:	d31e      	bcc.n	8006112 <__cvt+0xc2>
 80060d4:	9b03      	ldr	r3, [sp, #12]
 80060d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060d8:	1b5b      	subs	r3, r3, r5
 80060da:	4628      	mov	r0, r5
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	b004      	add	sp, #16
 80060e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80060e8:	eb00 0904 	add.w	r9, r0, r4
 80060ec:	d1e5      	bne.n	80060ba <__cvt+0x6a>
 80060ee:	7803      	ldrb	r3, [r0, #0]
 80060f0:	2b30      	cmp	r3, #48	@ 0x30
 80060f2:	d10a      	bne.n	800610a <__cvt+0xba>
 80060f4:	2200      	movs	r2, #0
 80060f6:	2300      	movs	r3, #0
 80060f8:	4630      	mov	r0, r6
 80060fa:	4639      	mov	r1, r7
 80060fc:	f7fa fcbc 	bl	8000a78 <__aeabi_dcmpeq>
 8006100:	b918      	cbnz	r0, 800610a <__cvt+0xba>
 8006102:	f1c4 0401 	rsb	r4, r4, #1
 8006106:	f8ca 4000 	str.w	r4, [sl]
 800610a:	f8da 3000 	ldr.w	r3, [sl]
 800610e:	4499      	add	r9, r3
 8006110:	e7d3      	b.n	80060ba <__cvt+0x6a>
 8006112:	1c59      	adds	r1, r3, #1
 8006114:	9103      	str	r1, [sp, #12]
 8006116:	701a      	strb	r2, [r3, #0]
 8006118:	e7d9      	b.n	80060ce <__cvt+0x7e>

0800611a <__exponent>:
 800611a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800611c:	2900      	cmp	r1, #0
 800611e:	bfba      	itte	lt
 8006120:	4249      	neglt	r1, r1
 8006122:	232d      	movlt	r3, #45	@ 0x2d
 8006124:	232b      	movge	r3, #43	@ 0x2b
 8006126:	2909      	cmp	r1, #9
 8006128:	7002      	strb	r2, [r0, #0]
 800612a:	7043      	strb	r3, [r0, #1]
 800612c:	dd29      	ble.n	8006182 <__exponent+0x68>
 800612e:	f10d 0307 	add.w	r3, sp, #7
 8006132:	461d      	mov	r5, r3
 8006134:	270a      	movs	r7, #10
 8006136:	461a      	mov	r2, r3
 8006138:	fbb1 f6f7 	udiv	r6, r1, r7
 800613c:	fb07 1416 	mls	r4, r7, r6, r1
 8006140:	3430      	adds	r4, #48	@ 0x30
 8006142:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006146:	460c      	mov	r4, r1
 8006148:	2c63      	cmp	r4, #99	@ 0x63
 800614a:	f103 33ff 	add.w	r3, r3, #4294967295
 800614e:	4631      	mov	r1, r6
 8006150:	dcf1      	bgt.n	8006136 <__exponent+0x1c>
 8006152:	3130      	adds	r1, #48	@ 0x30
 8006154:	1e94      	subs	r4, r2, #2
 8006156:	f803 1c01 	strb.w	r1, [r3, #-1]
 800615a:	1c41      	adds	r1, r0, #1
 800615c:	4623      	mov	r3, r4
 800615e:	42ab      	cmp	r3, r5
 8006160:	d30a      	bcc.n	8006178 <__exponent+0x5e>
 8006162:	f10d 0309 	add.w	r3, sp, #9
 8006166:	1a9b      	subs	r3, r3, r2
 8006168:	42ac      	cmp	r4, r5
 800616a:	bf88      	it	hi
 800616c:	2300      	movhi	r3, #0
 800616e:	3302      	adds	r3, #2
 8006170:	4403      	add	r3, r0
 8006172:	1a18      	subs	r0, r3, r0
 8006174:	b003      	add	sp, #12
 8006176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006178:	f813 6b01 	ldrb.w	r6, [r3], #1
 800617c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006180:	e7ed      	b.n	800615e <__exponent+0x44>
 8006182:	2330      	movs	r3, #48	@ 0x30
 8006184:	3130      	adds	r1, #48	@ 0x30
 8006186:	7083      	strb	r3, [r0, #2]
 8006188:	70c1      	strb	r1, [r0, #3]
 800618a:	1d03      	adds	r3, r0, #4
 800618c:	e7f1      	b.n	8006172 <__exponent+0x58>
	...

08006190 <_printf_float>:
 8006190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006194:	b08d      	sub	sp, #52	@ 0x34
 8006196:	460c      	mov	r4, r1
 8006198:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800619c:	4616      	mov	r6, r2
 800619e:	461f      	mov	r7, r3
 80061a0:	4605      	mov	r5, r0
 80061a2:	f000 fdbd 	bl	8006d20 <_localeconv_r>
 80061a6:	6803      	ldr	r3, [r0, #0]
 80061a8:	9304      	str	r3, [sp, #16]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fa f838 	bl	8000220 <strlen>
 80061b0:	2300      	movs	r3, #0
 80061b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80061b4:	f8d8 3000 	ldr.w	r3, [r8]
 80061b8:	9005      	str	r0, [sp, #20]
 80061ba:	3307      	adds	r3, #7
 80061bc:	f023 0307 	bic.w	r3, r3, #7
 80061c0:	f103 0208 	add.w	r2, r3, #8
 80061c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80061c8:	f8d4 b000 	ldr.w	fp, [r4]
 80061cc:	f8c8 2000 	str.w	r2, [r8]
 80061d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80061d8:	9307      	str	r3, [sp, #28]
 80061da:	f8cd 8018 	str.w	r8, [sp, #24]
 80061de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80061e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061e6:	4b9c      	ldr	r3, [pc, #624]	@ (8006458 <_printf_float+0x2c8>)
 80061e8:	f04f 32ff 	mov.w	r2, #4294967295
 80061ec:	f7fa fc76 	bl	8000adc <__aeabi_dcmpun>
 80061f0:	bb70      	cbnz	r0, 8006250 <_printf_float+0xc0>
 80061f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061f6:	4b98      	ldr	r3, [pc, #608]	@ (8006458 <_printf_float+0x2c8>)
 80061f8:	f04f 32ff 	mov.w	r2, #4294967295
 80061fc:	f7fa fc50 	bl	8000aa0 <__aeabi_dcmple>
 8006200:	bb30      	cbnz	r0, 8006250 <_printf_float+0xc0>
 8006202:	2200      	movs	r2, #0
 8006204:	2300      	movs	r3, #0
 8006206:	4640      	mov	r0, r8
 8006208:	4649      	mov	r1, r9
 800620a:	f7fa fc3f 	bl	8000a8c <__aeabi_dcmplt>
 800620e:	b110      	cbz	r0, 8006216 <_printf_float+0x86>
 8006210:	232d      	movs	r3, #45	@ 0x2d
 8006212:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006216:	4a91      	ldr	r2, [pc, #580]	@ (800645c <_printf_float+0x2cc>)
 8006218:	4b91      	ldr	r3, [pc, #580]	@ (8006460 <_printf_float+0x2d0>)
 800621a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800621e:	bf8c      	ite	hi
 8006220:	4690      	movhi	r8, r2
 8006222:	4698      	movls	r8, r3
 8006224:	2303      	movs	r3, #3
 8006226:	6123      	str	r3, [r4, #16]
 8006228:	f02b 0304 	bic.w	r3, fp, #4
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	f04f 0900 	mov.w	r9, #0
 8006232:	9700      	str	r7, [sp, #0]
 8006234:	4633      	mov	r3, r6
 8006236:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006238:	4621      	mov	r1, r4
 800623a:	4628      	mov	r0, r5
 800623c:	f000 f9d2 	bl	80065e4 <_printf_common>
 8006240:	3001      	adds	r0, #1
 8006242:	f040 808d 	bne.w	8006360 <_printf_float+0x1d0>
 8006246:	f04f 30ff 	mov.w	r0, #4294967295
 800624a:	b00d      	add	sp, #52	@ 0x34
 800624c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006250:	4642      	mov	r2, r8
 8006252:	464b      	mov	r3, r9
 8006254:	4640      	mov	r0, r8
 8006256:	4649      	mov	r1, r9
 8006258:	f7fa fc40 	bl	8000adc <__aeabi_dcmpun>
 800625c:	b140      	cbz	r0, 8006270 <_printf_float+0xe0>
 800625e:	464b      	mov	r3, r9
 8006260:	2b00      	cmp	r3, #0
 8006262:	bfbc      	itt	lt
 8006264:	232d      	movlt	r3, #45	@ 0x2d
 8006266:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800626a:	4a7e      	ldr	r2, [pc, #504]	@ (8006464 <_printf_float+0x2d4>)
 800626c:	4b7e      	ldr	r3, [pc, #504]	@ (8006468 <_printf_float+0x2d8>)
 800626e:	e7d4      	b.n	800621a <_printf_float+0x8a>
 8006270:	6863      	ldr	r3, [r4, #4]
 8006272:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006276:	9206      	str	r2, [sp, #24]
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	d13b      	bne.n	80062f4 <_printf_float+0x164>
 800627c:	2306      	movs	r3, #6
 800627e:	6063      	str	r3, [r4, #4]
 8006280:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006284:	2300      	movs	r3, #0
 8006286:	6022      	str	r2, [r4, #0]
 8006288:	9303      	str	r3, [sp, #12]
 800628a:	ab0a      	add	r3, sp, #40	@ 0x28
 800628c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006290:	ab09      	add	r3, sp, #36	@ 0x24
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	6861      	ldr	r1, [r4, #4]
 8006296:	ec49 8b10 	vmov	d0, r8, r9
 800629a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800629e:	4628      	mov	r0, r5
 80062a0:	f7ff fed6 	bl	8006050 <__cvt>
 80062a4:	9b06      	ldr	r3, [sp, #24]
 80062a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80062a8:	2b47      	cmp	r3, #71	@ 0x47
 80062aa:	4680      	mov	r8, r0
 80062ac:	d129      	bne.n	8006302 <_printf_float+0x172>
 80062ae:	1cc8      	adds	r0, r1, #3
 80062b0:	db02      	blt.n	80062b8 <_printf_float+0x128>
 80062b2:	6863      	ldr	r3, [r4, #4]
 80062b4:	4299      	cmp	r1, r3
 80062b6:	dd41      	ble.n	800633c <_printf_float+0x1ac>
 80062b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80062bc:	fa5f fa8a 	uxtb.w	sl, sl
 80062c0:	3901      	subs	r1, #1
 80062c2:	4652      	mov	r2, sl
 80062c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80062c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80062ca:	f7ff ff26 	bl	800611a <__exponent>
 80062ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062d0:	1813      	adds	r3, r2, r0
 80062d2:	2a01      	cmp	r2, #1
 80062d4:	4681      	mov	r9, r0
 80062d6:	6123      	str	r3, [r4, #16]
 80062d8:	dc02      	bgt.n	80062e0 <_printf_float+0x150>
 80062da:	6822      	ldr	r2, [r4, #0]
 80062dc:	07d2      	lsls	r2, r2, #31
 80062de:	d501      	bpl.n	80062e4 <_printf_float+0x154>
 80062e0:	3301      	adds	r3, #1
 80062e2:	6123      	str	r3, [r4, #16]
 80062e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0a2      	beq.n	8006232 <_printf_float+0xa2>
 80062ec:	232d      	movs	r3, #45	@ 0x2d
 80062ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062f2:	e79e      	b.n	8006232 <_printf_float+0xa2>
 80062f4:	9a06      	ldr	r2, [sp, #24]
 80062f6:	2a47      	cmp	r2, #71	@ 0x47
 80062f8:	d1c2      	bne.n	8006280 <_printf_float+0xf0>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1c0      	bne.n	8006280 <_printf_float+0xf0>
 80062fe:	2301      	movs	r3, #1
 8006300:	e7bd      	b.n	800627e <_printf_float+0xee>
 8006302:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006306:	d9db      	bls.n	80062c0 <_printf_float+0x130>
 8006308:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800630c:	d118      	bne.n	8006340 <_printf_float+0x1b0>
 800630e:	2900      	cmp	r1, #0
 8006310:	6863      	ldr	r3, [r4, #4]
 8006312:	dd0b      	ble.n	800632c <_printf_float+0x19c>
 8006314:	6121      	str	r1, [r4, #16]
 8006316:	b913      	cbnz	r3, 800631e <_printf_float+0x18e>
 8006318:	6822      	ldr	r2, [r4, #0]
 800631a:	07d0      	lsls	r0, r2, #31
 800631c:	d502      	bpl.n	8006324 <_printf_float+0x194>
 800631e:	3301      	adds	r3, #1
 8006320:	440b      	add	r3, r1
 8006322:	6123      	str	r3, [r4, #16]
 8006324:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006326:	f04f 0900 	mov.w	r9, #0
 800632a:	e7db      	b.n	80062e4 <_printf_float+0x154>
 800632c:	b913      	cbnz	r3, 8006334 <_printf_float+0x1a4>
 800632e:	6822      	ldr	r2, [r4, #0]
 8006330:	07d2      	lsls	r2, r2, #31
 8006332:	d501      	bpl.n	8006338 <_printf_float+0x1a8>
 8006334:	3302      	adds	r3, #2
 8006336:	e7f4      	b.n	8006322 <_printf_float+0x192>
 8006338:	2301      	movs	r3, #1
 800633a:	e7f2      	b.n	8006322 <_printf_float+0x192>
 800633c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006340:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006342:	4299      	cmp	r1, r3
 8006344:	db05      	blt.n	8006352 <_printf_float+0x1c2>
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	6121      	str	r1, [r4, #16]
 800634a:	07d8      	lsls	r0, r3, #31
 800634c:	d5ea      	bpl.n	8006324 <_printf_float+0x194>
 800634e:	1c4b      	adds	r3, r1, #1
 8006350:	e7e7      	b.n	8006322 <_printf_float+0x192>
 8006352:	2900      	cmp	r1, #0
 8006354:	bfd4      	ite	le
 8006356:	f1c1 0202 	rsble	r2, r1, #2
 800635a:	2201      	movgt	r2, #1
 800635c:	4413      	add	r3, r2
 800635e:	e7e0      	b.n	8006322 <_printf_float+0x192>
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	055a      	lsls	r2, r3, #21
 8006364:	d407      	bmi.n	8006376 <_printf_float+0x1e6>
 8006366:	6923      	ldr	r3, [r4, #16]
 8006368:	4642      	mov	r2, r8
 800636a:	4631      	mov	r1, r6
 800636c:	4628      	mov	r0, r5
 800636e:	47b8      	blx	r7
 8006370:	3001      	adds	r0, #1
 8006372:	d12b      	bne.n	80063cc <_printf_float+0x23c>
 8006374:	e767      	b.n	8006246 <_printf_float+0xb6>
 8006376:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800637a:	f240 80dd 	bls.w	8006538 <_printf_float+0x3a8>
 800637e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006382:	2200      	movs	r2, #0
 8006384:	2300      	movs	r3, #0
 8006386:	f7fa fb77 	bl	8000a78 <__aeabi_dcmpeq>
 800638a:	2800      	cmp	r0, #0
 800638c:	d033      	beq.n	80063f6 <_printf_float+0x266>
 800638e:	4a37      	ldr	r2, [pc, #220]	@ (800646c <_printf_float+0x2dc>)
 8006390:	2301      	movs	r3, #1
 8006392:	4631      	mov	r1, r6
 8006394:	4628      	mov	r0, r5
 8006396:	47b8      	blx	r7
 8006398:	3001      	adds	r0, #1
 800639a:	f43f af54 	beq.w	8006246 <_printf_float+0xb6>
 800639e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80063a2:	4543      	cmp	r3, r8
 80063a4:	db02      	blt.n	80063ac <_printf_float+0x21c>
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	07d8      	lsls	r0, r3, #31
 80063aa:	d50f      	bpl.n	80063cc <_printf_float+0x23c>
 80063ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063b0:	4631      	mov	r1, r6
 80063b2:	4628      	mov	r0, r5
 80063b4:	47b8      	blx	r7
 80063b6:	3001      	adds	r0, #1
 80063b8:	f43f af45 	beq.w	8006246 <_printf_float+0xb6>
 80063bc:	f04f 0900 	mov.w	r9, #0
 80063c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80063c4:	f104 0a1a 	add.w	sl, r4, #26
 80063c8:	45c8      	cmp	r8, r9
 80063ca:	dc09      	bgt.n	80063e0 <_printf_float+0x250>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	079b      	lsls	r3, r3, #30
 80063d0:	f100 8103 	bmi.w	80065da <_printf_float+0x44a>
 80063d4:	68e0      	ldr	r0, [r4, #12]
 80063d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063d8:	4298      	cmp	r0, r3
 80063da:	bfb8      	it	lt
 80063dc:	4618      	movlt	r0, r3
 80063de:	e734      	b.n	800624a <_printf_float+0xba>
 80063e0:	2301      	movs	r3, #1
 80063e2:	4652      	mov	r2, sl
 80063e4:	4631      	mov	r1, r6
 80063e6:	4628      	mov	r0, r5
 80063e8:	47b8      	blx	r7
 80063ea:	3001      	adds	r0, #1
 80063ec:	f43f af2b 	beq.w	8006246 <_printf_float+0xb6>
 80063f0:	f109 0901 	add.w	r9, r9, #1
 80063f4:	e7e8      	b.n	80063c8 <_printf_float+0x238>
 80063f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	dc39      	bgt.n	8006470 <_printf_float+0x2e0>
 80063fc:	4a1b      	ldr	r2, [pc, #108]	@ (800646c <_printf_float+0x2dc>)
 80063fe:	2301      	movs	r3, #1
 8006400:	4631      	mov	r1, r6
 8006402:	4628      	mov	r0, r5
 8006404:	47b8      	blx	r7
 8006406:	3001      	adds	r0, #1
 8006408:	f43f af1d 	beq.w	8006246 <_printf_float+0xb6>
 800640c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006410:	ea59 0303 	orrs.w	r3, r9, r3
 8006414:	d102      	bne.n	800641c <_printf_float+0x28c>
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	07d9      	lsls	r1, r3, #31
 800641a:	d5d7      	bpl.n	80063cc <_printf_float+0x23c>
 800641c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006420:	4631      	mov	r1, r6
 8006422:	4628      	mov	r0, r5
 8006424:	47b8      	blx	r7
 8006426:	3001      	adds	r0, #1
 8006428:	f43f af0d 	beq.w	8006246 <_printf_float+0xb6>
 800642c:	f04f 0a00 	mov.w	sl, #0
 8006430:	f104 0b1a 	add.w	fp, r4, #26
 8006434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006436:	425b      	negs	r3, r3
 8006438:	4553      	cmp	r3, sl
 800643a:	dc01      	bgt.n	8006440 <_printf_float+0x2b0>
 800643c:	464b      	mov	r3, r9
 800643e:	e793      	b.n	8006368 <_printf_float+0x1d8>
 8006440:	2301      	movs	r3, #1
 8006442:	465a      	mov	r2, fp
 8006444:	4631      	mov	r1, r6
 8006446:	4628      	mov	r0, r5
 8006448:	47b8      	blx	r7
 800644a:	3001      	adds	r0, #1
 800644c:	f43f aefb 	beq.w	8006246 <_printf_float+0xb6>
 8006450:	f10a 0a01 	add.w	sl, sl, #1
 8006454:	e7ee      	b.n	8006434 <_printf_float+0x2a4>
 8006456:	bf00      	nop
 8006458:	7fefffff 	.word	0x7fefffff
 800645c:	08008bb4 	.word	0x08008bb4
 8006460:	08008bb0 	.word	0x08008bb0
 8006464:	08008bbc 	.word	0x08008bbc
 8006468:	08008bb8 	.word	0x08008bb8
 800646c:	08008bc0 	.word	0x08008bc0
 8006470:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006472:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006476:	4553      	cmp	r3, sl
 8006478:	bfa8      	it	ge
 800647a:	4653      	movge	r3, sl
 800647c:	2b00      	cmp	r3, #0
 800647e:	4699      	mov	r9, r3
 8006480:	dc36      	bgt.n	80064f0 <_printf_float+0x360>
 8006482:	f04f 0b00 	mov.w	fp, #0
 8006486:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800648a:	f104 021a 	add.w	r2, r4, #26
 800648e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006490:	9306      	str	r3, [sp, #24]
 8006492:	eba3 0309 	sub.w	r3, r3, r9
 8006496:	455b      	cmp	r3, fp
 8006498:	dc31      	bgt.n	80064fe <_printf_float+0x36e>
 800649a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800649c:	459a      	cmp	sl, r3
 800649e:	dc3a      	bgt.n	8006516 <_printf_float+0x386>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	07da      	lsls	r2, r3, #31
 80064a4:	d437      	bmi.n	8006516 <_printf_float+0x386>
 80064a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a8:	ebaa 0903 	sub.w	r9, sl, r3
 80064ac:	9b06      	ldr	r3, [sp, #24]
 80064ae:	ebaa 0303 	sub.w	r3, sl, r3
 80064b2:	4599      	cmp	r9, r3
 80064b4:	bfa8      	it	ge
 80064b6:	4699      	movge	r9, r3
 80064b8:	f1b9 0f00 	cmp.w	r9, #0
 80064bc:	dc33      	bgt.n	8006526 <_printf_float+0x396>
 80064be:	f04f 0800 	mov.w	r8, #0
 80064c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064c6:	f104 0b1a 	add.w	fp, r4, #26
 80064ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064cc:	ebaa 0303 	sub.w	r3, sl, r3
 80064d0:	eba3 0309 	sub.w	r3, r3, r9
 80064d4:	4543      	cmp	r3, r8
 80064d6:	f77f af79 	ble.w	80063cc <_printf_float+0x23c>
 80064da:	2301      	movs	r3, #1
 80064dc:	465a      	mov	r2, fp
 80064de:	4631      	mov	r1, r6
 80064e0:	4628      	mov	r0, r5
 80064e2:	47b8      	blx	r7
 80064e4:	3001      	adds	r0, #1
 80064e6:	f43f aeae 	beq.w	8006246 <_printf_float+0xb6>
 80064ea:	f108 0801 	add.w	r8, r8, #1
 80064ee:	e7ec      	b.n	80064ca <_printf_float+0x33a>
 80064f0:	4642      	mov	r2, r8
 80064f2:	4631      	mov	r1, r6
 80064f4:	4628      	mov	r0, r5
 80064f6:	47b8      	blx	r7
 80064f8:	3001      	adds	r0, #1
 80064fa:	d1c2      	bne.n	8006482 <_printf_float+0x2f2>
 80064fc:	e6a3      	b.n	8006246 <_printf_float+0xb6>
 80064fe:	2301      	movs	r3, #1
 8006500:	4631      	mov	r1, r6
 8006502:	4628      	mov	r0, r5
 8006504:	9206      	str	r2, [sp, #24]
 8006506:	47b8      	blx	r7
 8006508:	3001      	adds	r0, #1
 800650a:	f43f ae9c 	beq.w	8006246 <_printf_float+0xb6>
 800650e:	9a06      	ldr	r2, [sp, #24]
 8006510:	f10b 0b01 	add.w	fp, fp, #1
 8006514:	e7bb      	b.n	800648e <_printf_float+0x2fe>
 8006516:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800651a:	4631      	mov	r1, r6
 800651c:	4628      	mov	r0, r5
 800651e:	47b8      	blx	r7
 8006520:	3001      	adds	r0, #1
 8006522:	d1c0      	bne.n	80064a6 <_printf_float+0x316>
 8006524:	e68f      	b.n	8006246 <_printf_float+0xb6>
 8006526:	9a06      	ldr	r2, [sp, #24]
 8006528:	464b      	mov	r3, r9
 800652a:	4442      	add	r2, r8
 800652c:	4631      	mov	r1, r6
 800652e:	4628      	mov	r0, r5
 8006530:	47b8      	blx	r7
 8006532:	3001      	adds	r0, #1
 8006534:	d1c3      	bne.n	80064be <_printf_float+0x32e>
 8006536:	e686      	b.n	8006246 <_printf_float+0xb6>
 8006538:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800653c:	f1ba 0f01 	cmp.w	sl, #1
 8006540:	dc01      	bgt.n	8006546 <_printf_float+0x3b6>
 8006542:	07db      	lsls	r3, r3, #31
 8006544:	d536      	bpl.n	80065b4 <_printf_float+0x424>
 8006546:	2301      	movs	r3, #1
 8006548:	4642      	mov	r2, r8
 800654a:	4631      	mov	r1, r6
 800654c:	4628      	mov	r0, r5
 800654e:	47b8      	blx	r7
 8006550:	3001      	adds	r0, #1
 8006552:	f43f ae78 	beq.w	8006246 <_printf_float+0xb6>
 8006556:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800655a:	4631      	mov	r1, r6
 800655c:	4628      	mov	r0, r5
 800655e:	47b8      	blx	r7
 8006560:	3001      	adds	r0, #1
 8006562:	f43f ae70 	beq.w	8006246 <_printf_float+0xb6>
 8006566:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800656a:	2200      	movs	r2, #0
 800656c:	2300      	movs	r3, #0
 800656e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006572:	f7fa fa81 	bl	8000a78 <__aeabi_dcmpeq>
 8006576:	b9c0      	cbnz	r0, 80065aa <_printf_float+0x41a>
 8006578:	4653      	mov	r3, sl
 800657a:	f108 0201 	add.w	r2, r8, #1
 800657e:	4631      	mov	r1, r6
 8006580:	4628      	mov	r0, r5
 8006582:	47b8      	blx	r7
 8006584:	3001      	adds	r0, #1
 8006586:	d10c      	bne.n	80065a2 <_printf_float+0x412>
 8006588:	e65d      	b.n	8006246 <_printf_float+0xb6>
 800658a:	2301      	movs	r3, #1
 800658c:	465a      	mov	r2, fp
 800658e:	4631      	mov	r1, r6
 8006590:	4628      	mov	r0, r5
 8006592:	47b8      	blx	r7
 8006594:	3001      	adds	r0, #1
 8006596:	f43f ae56 	beq.w	8006246 <_printf_float+0xb6>
 800659a:	f108 0801 	add.w	r8, r8, #1
 800659e:	45d0      	cmp	r8, sl
 80065a0:	dbf3      	blt.n	800658a <_printf_float+0x3fa>
 80065a2:	464b      	mov	r3, r9
 80065a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80065a8:	e6df      	b.n	800636a <_printf_float+0x1da>
 80065aa:	f04f 0800 	mov.w	r8, #0
 80065ae:	f104 0b1a 	add.w	fp, r4, #26
 80065b2:	e7f4      	b.n	800659e <_printf_float+0x40e>
 80065b4:	2301      	movs	r3, #1
 80065b6:	4642      	mov	r2, r8
 80065b8:	e7e1      	b.n	800657e <_printf_float+0x3ee>
 80065ba:	2301      	movs	r3, #1
 80065bc:	464a      	mov	r2, r9
 80065be:	4631      	mov	r1, r6
 80065c0:	4628      	mov	r0, r5
 80065c2:	47b8      	blx	r7
 80065c4:	3001      	adds	r0, #1
 80065c6:	f43f ae3e 	beq.w	8006246 <_printf_float+0xb6>
 80065ca:	f108 0801 	add.w	r8, r8, #1
 80065ce:	68e3      	ldr	r3, [r4, #12]
 80065d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065d2:	1a5b      	subs	r3, r3, r1
 80065d4:	4543      	cmp	r3, r8
 80065d6:	dcf0      	bgt.n	80065ba <_printf_float+0x42a>
 80065d8:	e6fc      	b.n	80063d4 <_printf_float+0x244>
 80065da:	f04f 0800 	mov.w	r8, #0
 80065de:	f104 0919 	add.w	r9, r4, #25
 80065e2:	e7f4      	b.n	80065ce <_printf_float+0x43e>

080065e4 <_printf_common>:
 80065e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065e8:	4616      	mov	r6, r2
 80065ea:	4698      	mov	r8, r3
 80065ec:	688a      	ldr	r2, [r1, #8]
 80065ee:	690b      	ldr	r3, [r1, #16]
 80065f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065f4:	4293      	cmp	r3, r2
 80065f6:	bfb8      	it	lt
 80065f8:	4613      	movlt	r3, r2
 80065fa:	6033      	str	r3, [r6, #0]
 80065fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006600:	4607      	mov	r7, r0
 8006602:	460c      	mov	r4, r1
 8006604:	b10a      	cbz	r2, 800660a <_printf_common+0x26>
 8006606:	3301      	adds	r3, #1
 8006608:	6033      	str	r3, [r6, #0]
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	0699      	lsls	r1, r3, #26
 800660e:	bf42      	ittt	mi
 8006610:	6833      	ldrmi	r3, [r6, #0]
 8006612:	3302      	addmi	r3, #2
 8006614:	6033      	strmi	r3, [r6, #0]
 8006616:	6825      	ldr	r5, [r4, #0]
 8006618:	f015 0506 	ands.w	r5, r5, #6
 800661c:	d106      	bne.n	800662c <_printf_common+0x48>
 800661e:	f104 0a19 	add.w	sl, r4, #25
 8006622:	68e3      	ldr	r3, [r4, #12]
 8006624:	6832      	ldr	r2, [r6, #0]
 8006626:	1a9b      	subs	r3, r3, r2
 8006628:	42ab      	cmp	r3, r5
 800662a:	dc26      	bgt.n	800667a <_printf_common+0x96>
 800662c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006630:	6822      	ldr	r2, [r4, #0]
 8006632:	3b00      	subs	r3, #0
 8006634:	bf18      	it	ne
 8006636:	2301      	movne	r3, #1
 8006638:	0692      	lsls	r2, r2, #26
 800663a:	d42b      	bmi.n	8006694 <_printf_common+0xb0>
 800663c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006640:	4641      	mov	r1, r8
 8006642:	4638      	mov	r0, r7
 8006644:	47c8      	blx	r9
 8006646:	3001      	adds	r0, #1
 8006648:	d01e      	beq.n	8006688 <_printf_common+0xa4>
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	6922      	ldr	r2, [r4, #16]
 800664e:	f003 0306 	and.w	r3, r3, #6
 8006652:	2b04      	cmp	r3, #4
 8006654:	bf02      	ittt	eq
 8006656:	68e5      	ldreq	r5, [r4, #12]
 8006658:	6833      	ldreq	r3, [r6, #0]
 800665a:	1aed      	subeq	r5, r5, r3
 800665c:	68a3      	ldr	r3, [r4, #8]
 800665e:	bf0c      	ite	eq
 8006660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006664:	2500      	movne	r5, #0
 8006666:	4293      	cmp	r3, r2
 8006668:	bfc4      	itt	gt
 800666a:	1a9b      	subgt	r3, r3, r2
 800666c:	18ed      	addgt	r5, r5, r3
 800666e:	2600      	movs	r6, #0
 8006670:	341a      	adds	r4, #26
 8006672:	42b5      	cmp	r5, r6
 8006674:	d11a      	bne.n	80066ac <_printf_common+0xc8>
 8006676:	2000      	movs	r0, #0
 8006678:	e008      	b.n	800668c <_printf_common+0xa8>
 800667a:	2301      	movs	r3, #1
 800667c:	4652      	mov	r2, sl
 800667e:	4641      	mov	r1, r8
 8006680:	4638      	mov	r0, r7
 8006682:	47c8      	blx	r9
 8006684:	3001      	adds	r0, #1
 8006686:	d103      	bne.n	8006690 <_printf_common+0xac>
 8006688:	f04f 30ff 	mov.w	r0, #4294967295
 800668c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006690:	3501      	adds	r5, #1
 8006692:	e7c6      	b.n	8006622 <_printf_common+0x3e>
 8006694:	18e1      	adds	r1, r4, r3
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	2030      	movs	r0, #48	@ 0x30
 800669a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800669e:	4422      	add	r2, r4
 80066a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066a8:	3302      	adds	r3, #2
 80066aa:	e7c7      	b.n	800663c <_printf_common+0x58>
 80066ac:	2301      	movs	r3, #1
 80066ae:	4622      	mov	r2, r4
 80066b0:	4641      	mov	r1, r8
 80066b2:	4638      	mov	r0, r7
 80066b4:	47c8      	blx	r9
 80066b6:	3001      	adds	r0, #1
 80066b8:	d0e6      	beq.n	8006688 <_printf_common+0xa4>
 80066ba:	3601      	adds	r6, #1
 80066bc:	e7d9      	b.n	8006672 <_printf_common+0x8e>
	...

080066c0 <_printf_i>:
 80066c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066c4:	7e0f      	ldrb	r7, [r1, #24]
 80066c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066c8:	2f78      	cmp	r7, #120	@ 0x78
 80066ca:	4691      	mov	r9, r2
 80066cc:	4680      	mov	r8, r0
 80066ce:	460c      	mov	r4, r1
 80066d0:	469a      	mov	sl, r3
 80066d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066d6:	d807      	bhi.n	80066e8 <_printf_i+0x28>
 80066d8:	2f62      	cmp	r7, #98	@ 0x62
 80066da:	d80a      	bhi.n	80066f2 <_printf_i+0x32>
 80066dc:	2f00      	cmp	r7, #0
 80066de:	f000 80d1 	beq.w	8006884 <_printf_i+0x1c4>
 80066e2:	2f58      	cmp	r7, #88	@ 0x58
 80066e4:	f000 80b8 	beq.w	8006858 <_printf_i+0x198>
 80066e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066f0:	e03a      	b.n	8006768 <_printf_i+0xa8>
 80066f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066f6:	2b15      	cmp	r3, #21
 80066f8:	d8f6      	bhi.n	80066e8 <_printf_i+0x28>
 80066fa:	a101      	add	r1, pc, #4	@ (adr r1, 8006700 <_printf_i+0x40>)
 80066fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006700:	08006759 	.word	0x08006759
 8006704:	0800676d 	.word	0x0800676d
 8006708:	080066e9 	.word	0x080066e9
 800670c:	080066e9 	.word	0x080066e9
 8006710:	080066e9 	.word	0x080066e9
 8006714:	080066e9 	.word	0x080066e9
 8006718:	0800676d 	.word	0x0800676d
 800671c:	080066e9 	.word	0x080066e9
 8006720:	080066e9 	.word	0x080066e9
 8006724:	080066e9 	.word	0x080066e9
 8006728:	080066e9 	.word	0x080066e9
 800672c:	0800686b 	.word	0x0800686b
 8006730:	08006797 	.word	0x08006797
 8006734:	08006825 	.word	0x08006825
 8006738:	080066e9 	.word	0x080066e9
 800673c:	080066e9 	.word	0x080066e9
 8006740:	0800688d 	.word	0x0800688d
 8006744:	080066e9 	.word	0x080066e9
 8006748:	08006797 	.word	0x08006797
 800674c:	080066e9 	.word	0x080066e9
 8006750:	080066e9 	.word	0x080066e9
 8006754:	0800682d 	.word	0x0800682d
 8006758:	6833      	ldr	r3, [r6, #0]
 800675a:	1d1a      	adds	r2, r3, #4
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6032      	str	r2, [r6, #0]
 8006760:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006764:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006768:	2301      	movs	r3, #1
 800676a:	e09c      	b.n	80068a6 <_printf_i+0x1e6>
 800676c:	6833      	ldr	r3, [r6, #0]
 800676e:	6820      	ldr	r0, [r4, #0]
 8006770:	1d19      	adds	r1, r3, #4
 8006772:	6031      	str	r1, [r6, #0]
 8006774:	0606      	lsls	r6, r0, #24
 8006776:	d501      	bpl.n	800677c <_printf_i+0xbc>
 8006778:	681d      	ldr	r5, [r3, #0]
 800677a:	e003      	b.n	8006784 <_printf_i+0xc4>
 800677c:	0645      	lsls	r5, r0, #25
 800677e:	d5fb      	bpl.n	8006778 <_printf_i+0xb8>
 8006780:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006784:	2d00      	cmp	r5, #0
 8006786:	da03      	bge.n	8006790 <_printf_i+0xd0>
 8006788:	232d      	movs	r3, #45	@ 0x2d
 800678a:	426d      	negs	r5, r5
 800678c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006790:	4858      	ldr	r0, [pc, #352]	@ (80068f4 <_printf_i+0x234>)
 8006792:	230a      	movs	r3, #10
 8006794:	e011      	b.n	80067ba <_printf_i+0xfa>
 8006796:	6821      	ldr	r1, [r4, #0]
 8006798:	6833      	ldr	r3, [r6, #0]
 800679a:	0608      	lsls	r0, r1, #24
 800679c:	f853 5b04 	ldr.w	r5, [r3], #4
 80067a0:	d402      	bmi.n	80067a8 <_printf_i+0xe8>
 80067a2:	0649      	lsls	r1, r1, #25
 80067a4:	bf48      	it	mi
 80067a6:	b2ad      	uxthmi	r5, r5
 80067a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80067aa:	4852      	ldr	r0, [pc, #328]	@ (80068f4 <_printf_i+0x234>)
 80067ac:	6033      	str	r3, [r6, #0]
 80067ae:	bf14      	ite	ne
 80067b0:	230a      	movne	r3, #10
 80067b2:	2308      	moveq	r3, #8
 80067b4:	2100      	movs	r1, #0
 80067b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067ba:	6866      	ldr	r6, [r4, #4]
 80067bc:	60a6      	str	r6, [r4, #8]
 80067be:	2e00      	cmp	r6, #0
 80067c0:	db05      	blt.n	80067ce <_printf_i+0x10e>
 80067c2:	6821      	ldr	r1, [r4, #0]
 80067c4:	432e      	orrs	r6, r5
 80067c6:	f021 0104 	bic.w	r1, r1, #4
 80067ca:	6021      	str	r1, [r4, #0]
 80067cc:	d04b      	beq.n	8006866 <_printf_i+0x1a6>
 80067ce:	4616      	mov	r6, r2
 80067d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80067d4:	fb03 5711 	mls	r7, r3, r1, r5
 80067d8:	5dc7      	ldrb	r7, [r0, r7]
 80067da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067de:	462f      	mov	r7, r5
 80067e0:	42bb      	cmp	r3, r7
 80067e2:	460d      	mov	r5, r1
 80067e4:	d9f4      	bls.n	80067d0 <_printf_i+0x110>
 80067e6:	2b08      	cmp	r3, #8
 80067e8:	d10b      	bne.n	8006802 <_printf_i+0x142>
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	07df      	lsls	r7, r3, #31
 80067ee:	d508      	bpl.n	8006802 <_printf_i+0x142>
 80067f0:	6923      	ldr	r3, [r4, #16]
 80067f2:	6861      	ldr	r1, [r4, #4]
 80067f4:	4299      	cmp	r1, r3
 80067f6:	bfde      	ittt	le
 80067f8:	2330      	movle	r3, #48	@ 0x30
 80067fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006802:	1b92      	subs	r2, r2, r6
 8006804:	6122      	str	r2, [r4, #16]
 8006806:	f8cd a000 	str.w	sl, [sp]
 800680a:	464b      	mov	r3, r9
 800680c:	aa03      	add	r2, sp, #12
 800680e:	4621      	mov	r1, r4
 8006810:	4640      	mov	r0, r8
 8006812:	f7ff fee7 	bl	80065e4 <_printf_common>
 8006816:	3001      	adds	r0, #1
 8006818:	d14a      	bne.n	80068b0 <_printf_i+0x1f0>
 800681a:	f04f 30ff 	mov.w	r0, #4294967295
 800681e:	b004      	add	sp, #16
 8006820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	f043 0320 	orr.w	r3, r3, #32
 800682a:	6023      	str	r3, [r4, #0]
 800682c:	4832      	ldr	r0, [pc, #200]	@ (80068f8 <_printf_i+0x238>)
 800682e:	2778      	movs	r7, #120	@ 0x78
 8006830:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006834:	6823      	ldr	r3, [r4, #0]
 8006836:	6831      	ldr	r1, [r6, #0]
 8006838:	061f      	lsls	r7, r3, #24
 800683a:	f851 5b04 	ldr.w	r5, [r1], #4
 800683e:	d402      	bmi.n	8006846 <_printf_i+0x186>
 8006840:	065f      	lsls	r7, r3, #25
 8006842:	bf48      	it	mi
 8006844:	b2ad      	uxthmi	r5, r5
 8006846:	6031      	str	r1, [r6, #0]
 8006848:	07d9      	lsls	r1, r3, #31
 800684a:	bf44      	itt	mi
 800684c:	f043 0320 	orrmi.w	r3, r3, #32
 8006850:	6023      	strmi	r3, [r4, #0]
 8006852:	b11d      	cbz	r5, 800685c <_printf_i+0x19c>
 8006854:	2310      	movs	r3, #16
 8006856:	e7ad      	b.n	80067b4 <_printf_i+0xf4>
 8006858:	4826      	ldr	r0, [pc, #152]	@ (80068f4 <_printf_i+0x234>)
 800685a:	e7e9      	b.n	8006830 <_printf_i+0x170>
 800685c:	6823      	ldr	r3, [r4, #0]
 800685e:	f023 0320 	bic.w	r3, r3, #32
 8006862:	6023      	str	r3, [r4, #0]
 8006864:	e7f6      	b.n	8006854 <_printf_i+0x194>
 8006866:	4616      	mov	r6, r2
 8006868:	e7bd      	b.n	80067e6 <_printf_i+0x126>
 800686a:	6833      	ldr	r3, [r6, #0]
 800686c:	6825      	ldr	r5, [r4, #0]
 800686e:	6961      	ldr	r1, [r4, #20]
 8006870:	1d18      	adds	r0, r3, #4
 8006872:	6030      	str	r0, [r6, #0]
 8006874:	062e      	lsls	r6, r5, #24
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	d501      	bpl.n	800687e <_printf_i+0x1be>
 800687a:	6019      	str	r1, [r3, #0]
 800687c:	e002      	b.n	8006884 <_printf_i+0x1c4>
 800687e:	0668      	lsls	r0, r5, #25
 8006880:	d5fb      	bpl.n	800687a <_printf_i+0x1ba>
 8006882:	8019      	strh	r1, [r3, #0]
 8006884:	2300      	movs	r3, #0
 8006886:	6123      	str	r3, [r4, #16]
 8006888:	4616      	mov	r6, r2
 800688a:	e7bc      	b.n	8006806 <_printf_i+0x146>
 800688c:	6833      	ldr	r3, [r6, #0]
 800688e:	1d1a      	adds	r2, r3, #4
 8006890:	6032      	str	r2, [r6, #0]
 8006892:	681e      	ldr	r6, [r3, #0]
 8006894:	6862      	ldr	r2, [r4, #4]
 8006896:	2100      	movs	r1, #0
 8006898:	4630      	mov	r0, r6
 800689a:	f7f9 fc71 	bl	8000180 <memchr>
 800689e:	b108      	cbz	r0, 80068a4 <_printf_i+0x1e4>
 80068a0:	1b80      	subs	r0, r0, r6
 80068a2:	6060      	str	r0, [r4, #4]
 80068a4:	6863      	ldr	r3, [r4, #4]
 80068a6:	6123      	str	r3, [r4, #16]
 80068a8:	2300      	movs	r3, #0
 80068aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068ae:	e7aa      	b.n	8006806 <_printf_i+0x146>
 80068b0:	6923      	ldr	r3, [r4, #16]
 80068b2:	4632      	mov	r2, r6
 80068b4:	4649      	mov	r1, r9
 80068b6:	4640      	mov	r0, r8
 80068b8:	47d0      	blx	sl
 80068ba:	3001      	adds	r0, #1
 80068bc:	d0ad      	beq.n	800681a <_printf_i+0x15a>
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	079b      	lsls	r3, r3, #30
 80068c2:	d413      	bmi.n	80068ec <_printf_i+0x22c>
 80068c4:	68e0      	ldr	r0, [r4, #12]
 80068c6:	9b03      	ldr	r3, [sp, #12]
 80068c8:	4298      	cmp	r0, r3
 80068ca:	bfb8      	it	lt
 80068cc:	4618      	movlt	r0, r3
 80068ce:	e7a6      	b.n	800681e <_printf_i+0x15e>
 80068d0:	2301      	movs	r3, #1
 80068d2:	4632      	mov	r2, r6
 80068d4:	4649      	mov	r1, r9
 80068d6:	4640      	mov	r0, r8
 80068d8:	47d0      	blx	sl
 80068da:	3001      	adds	r0, #1
 80068dc:	d09d      	beq.n	800681a <_printf_i+0x15a>
 80068de:	3501      	adds	r5, #1
 80068e0:	68e3      	ldr	r3, [r4, #12]
 80068e2:	9903      	ldr	r1, [sp, #12]
 80068e4:	1a5b      	subs	r3, r3, r1
 80068e6:	42ab      	cmp	r3, r5
 80068e8:	dcf2      	bgt.n	80068d0 <_printf_i+0x210>
 80068ea:	e7eb      	b.n	80068c4 <_printf_i+0x204>
 80068ec:	2500      	movs	r5, #0
 80068ee:	f104 0619 	add.w	r6, r4, #25
 80068f2:	e7f5      	b.n	80068e0 <_printf_i+0x220>
 80068f4:	08008bc2 	.word	0x08008bc2
 80068f8:	08008bd3 	.word	0x08008bd3

080068fc <std>:
 80068fc:	2300      	movs	r3, #0
 80068fe:	b510      	push	{r4, lr}
 8006900:	4604      	mov	r4, r0
 8006902:	e9c0 3300 	strd	r3, r3, [r0]
 8006906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800690a:	6083      	str	r3, [r0, #8]
 800690c:	8181      	strh	r1, [r0, #12]
 800690e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006910:	81c2      	strh	r2, [r0, #14]
 8006912:	6183      	str	r3, [r0, #24]
 8006914:	4619      	mov	r1, r3
 8006916:	2208      	movs	r2, #8
 8006918:	305c      	adds	r0, #92	@ 0x5c
 800691a:	f000 f9f9 	bl	8006d10 <memset>
 800691e:	4b0d      	ldr	r3, [pc, #52]	@ (8006954 <std+0x58>)
 8006920:	6263      	str	r3, [r4, #36]	@ 0x24
 8006922:	4b0d      	ldr	r3, [pc, #52]	@ (8006958 <std+0x5c>)
 8006924:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006926:	4b0d      	ldr	r3, [pc, #52]	@ (800695c <std+0x60>)
 8006928:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800692a:	4b0d      	ldr	r3, [pc, #52]	@ (8006960 <std+0x64>)
 800692c:	6323      	str	r3, [r4, #48]	@ 0x30
 800692e:	4b0d      	ldr	r3, [pc, #52]	@ (8006964 <std+0x68>)
 8006930:	6224      	str	r4, [r4, #32]
 8006932:	429c      	cmp	r4, r3
 8006934:	d006      	beq.n	8006944 <std+0x48>
 8006936:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800693a:	4294      	cmp	r4, r2
 800693c:	d002      	beq.n	8006944 <std+0x48>
 800693e:	33d0      	adds	r3, #208	@ 0xd0
 8006940:	429c      	cmp	r4, r3
 8006942:	d105      	bne.n	8006950 <std+0x54>
 8006944:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800694c:	f000 ba5c 	b.w	8006e08 <__retarget_lock_init_recursive>
 8006950:	bd10      	pop	{r4, pc}
 8006952:	bf00      	nop
 8006954:	08006b61 	.word	0x08006b61
 8006958:	08006b83 	.word	0x08006b83
 800695c:	08006bbb 	.word	0x08006bbb
 8006960:	08006bdf 	.word	0x08006bdf
 8006964:	20000410 	.word	0x20000410

08006968 <stdio_exit_handler>:
 8006968:	4a02      	ldr	r2, [pc, #8]	@ (8006974 <stdio_exit_handler+0xc>)
 800696a:	4903      	ldr	r1, [pc, #12]	@ (8006978 <stdio_exit_handler+0x10>)
 800696c:	4803      	ldr	r0, [pc, #12]	@ (800697c <stdio_exit_handler+0x14>)
 800696e:	f000 b869 	b.w	8006a44 <_fwalk_sglue>
 8006972:	bf00      	nop
 8006974:	20000030 	.word	0x20000030
 8006978:	08008741 	.word	0x08008741
 800697c:	20000040 	.word	0x20000040

08006980 <cleanup_stdio>:
 8006980:	6841      	ldr	r1, [r0, #4]
 8006982:	4b0c      	ldr	r3, [pc, #48]	@ (80069b4 <cleanup_stdio+0x34>)
 8006984:	4299      	cmp	r1, r3
 8006986:	b510      	push	{r4, lr}
 8006988:	4604      	mov	r4, r0
 800698a:	d001      	beq.n	8006990 <cleanup_stdio+0x10>
 800698c:	f001 fed8 	bl	8008740 <_fflush_r>
 8006990:	68a1      	ldr	r1, [r4, #8]
 8006992:	4b09      	ldr	r3, [pc, #36]	@ (80069b8 <cleanup_stdio+0x38>)
 8006994:	4299      	cmp	r1, r3
 8006996:	d002      	beq.n	800699e <cleanup_stdio+0x1e>
 8006998:	4620      	mov	r0, r4
 800699a:	f001 fed1 	bl	8008740 <_fflush_r>
 800699e:	68e1      	ldr	r1, [r4, #12]
 80069a0:	4b06      	ldr	r3, [pc, #24]	@ (80069bc <cleanup_stdio+0x3c>)
 80069a2:	4299      	cmp	r1, r3
 80069a4:	d004      	beq.n	80069b0 <cleanup_stdio+0x30>
 80069a6:	4620      	mov	r0, r4
 80069a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069ac:	f001 bec8 	b.w	8008740 <_fflush_r>
 80069b0:	bd10      	pop	{r4, pc}
 80069b2:	bf00      	nop
 80069b4:	20000410 	.word	0x20000410
 80069b8:	20000478 	.word	0x20000478
 80069bc:	200004e0 	.word	0x200004e0

080069c0 <global_stdio_init.part.0>:
 80069c0:	b510      	push	{r4, lr}
 80069c2:	4b0b      	ldr	r3, [pc, #44]	@ (80069f0 <global_stdio_init.part.0+0x30>)
 80069c4:	4c0b      	ldr	r4, [pc, #44]	@ (80069f4 <global_stdio_init.part.0+0x34>)
 80069c6:	4a0c      	ldr	r2, [pc, #48]	@ (80069f8 <global_stdio_init.part.0+0x38>)
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	4620      	mov	r0, r4
 80069cc:	2200      	movs	r2, #0
 80069ce:	2104      	movs	r1, #4
 80069d0:	f7ff ff94 	bl	80068fc <std>
 80069d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80069d8:	2201      	movs	r2, #1
 80069da:	2109      	movs	r1, #9
 80069dc:	f7ff ff8e 	bl	80068fc <std>
 80069e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80069e4:	2202      	movs	r2, #2
 80069e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069ea:	2112      	movs	r1, #18
 80069ec:	f7ff bf86 	b.w	80068fc <std>
 80069f0:	20000548 	.word	0x20000548
 80069f4:	20000410 	.word	0x20000410
 80069f8:	08006969 	.word	0x08006969

080069fc <__sfp_lock_acquire>:
 80069fc:	4801      	ldr	r0, [pc, #4]	@ (8006a04 <__sfp_lock_acquire+0x8>)
 80069fe:	f000 ba04 	b.w	8006e0a <__retarget_lock_acquire_recursive>
 8006a02:	bf00      	nop
 8006a04:	20000551 	.word	0x20000551

08006a08 <__sfp_lock_release>:
 8006a08:	4801      	ldr	r0, [pc, #4]	@ (8006a10 <__sfp_lock_release+0x8>)
 8006a0a:	f000 b9ff 	b.w	8006e0c <__retarget_lock_release_recursive>
 8006a0e:	bf00      	nop
 8006a10:	20000551 	.word	0x20000551

08006a14 <__sinit>:
 8006a14:	b510      	push	{r4, lr}
 8006a16:	4604      	mov	r4, r0
 8006a18:	f7ff fff0 	bl	80069fc <__sfp_lock_acquire>
 8006a1c:	6a23      	ldr	r3, [r4, #32]
 8006a1e:	b11b      	cbz	r3, 8006a28 <__sinit+0x14>
 8006a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a24:	f7ff bff0 	b.w	8006a08 <__sfp_lock_release>
 8006a28:	4b04      	ldr	r3, [pc, #16]	@ (8006a3c <__sinit+0x28>)
 8006a2a:	6223      	str	r3, [r4, #32]
 8006a2c:	4b04      	ldr	r3, [pc, #16]	@ (8006a40 <__sinit+0x2c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1f5      	bne.n	8006a20 <__sinit+0xc>
 8006a34:	f7ff ffc4 	bl	80069c0 <global_stdio_init.part.0>
 8006a38:	e7f2      	b.n	8006a20 <__sinit+0xc>
 8006a3a:	bf00      	nop
 8006a3c:	08006981 	.word	0x08006981
 8006a40:	20000548 	.word	0x20000548

08006a44 <_fwalk_sglue>:
 8006a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a48:	4607      	mov	r7, r0
 8006a4a:	4688      	mov	r8, r1
 8006a4c:	4614      	mov	r4, r2
 8006a4e:	2600      	movs	r6, #0
 8006a50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a54:	f1b9 0901 	subs.w	r9, r9, #1
 8006a58:	d505      	bpl.n	8006a66 <_fwalk_sglue+0x22>
 8006a5a:	6824      	ldr	r4, [r4, #0]
 8006a5c:	2c00      	cmp	r4, #0
 8006a5e:	d1f7      	bne.n	8006a50 <_fwalk_sglue+0xc>
 8006a60:	4630      	mov	r0, r6
 8006a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a66:	89ab      	ldrh	r3, [r5, #12]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d907      	bls.n	8006a7c <_fwalk_sglue+0x38>
 8006a6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a70:	3301      	adds	r3, #1
 8006a72:	d003      	beq.n	8006a7c <_fwalk_sglue+0x38>
 8006a74:	4629      	mov	r1, r5
 8006a76:	4638      	mov	r0, r7
 8006a78:	47c0      	blx	r8
 8006a7a:	4306      	orrs	r6, r0
 8006a7c:	3568      	adds	r5, #104	@ 0x68
 8006a7e:	e7e9      	b.n	8006a54 <_fwalk_sglue+0x10>

08006a80 <iprintf>:
 8006a80:	b40f      	push	{r0, r1, r2, r3}
 8006a82:	b507      	push	{r0, r1, r2, lr}
 8006a84:	4906      	ldr	r1, [pc, #24]	@ (8006aa0 <iprintf+0x20>)
 8006a86:	ab04      	add	r3, sp, #16
 8006a88:	6808      	ldr	r0, [r1, #0]
 8006a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a8e:	6881      	ldr	r1, [r0, #8]
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	f001 fcb9 	bl	8008408 <_vfiprintf_r>
 8006a96:	b003      	add	sp, #12
 8006a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a9c:	b004      	add	sp, #16
 8006a9e:	4770      	bx	lr
 8006aa0:	2000003c 	.word	0x2000003c

08006aa4 <_puts_r>:
 8006aa4:	6a03      	ldr	r3, [r0, #32]
 8006aa6:	b570      	push	{r4, r5, r6, lr}
 8006aa8:	6884      	ldr	r4, [r0, #8]
 8006aaa:	4605      	mov	r5, r0
 8006aac:	460e      	mov	r6, r1
 8006aae:	b90b      	cbnz	r3, 8006ab4 <_puts_r+0x10>
 8006ab0:	f7ff ffb0 	bl	8006a14 <__sinit>
 8006ab4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ab6:	07db      	lsls	r3, r3, #31
 8006ab8:	d405      	bmi.n	8006ac6 <_puts_r+0x22>
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	0598      	lsls	r0, r3, #22
 8006abe:	d402      	bmi.n	8006ac6 <_puts_r+0x22>
 8006ac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ac2:	f000 f9a2 	bl	8006e0a <__retarget_lock_acquire_recursive>
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	0719      	lsls	r1, r3, #28
 8006aca:	d502      	bpl.n	8006ad2 <_puts_r+0x2e>
 8006acc:	6923      	ldr	r3, [r4, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d135      	bne.n	8006b3e <_puts_r+0x9a>
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	f000 f8c5 	bl	8006c64 <__swsetup_r>
 8006ada:	b380      	cbz	r0, 8006b3e <_puts_r+0x9a>
 8006adc:	f04f 35ff 	mov.w	r5, #4294967295
 8006ae0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ae2:	07da      	lsls	r2, r3, #31
 8006ae4:	d405      	bmi.n	8006af2 <_puts_r+0x4e>
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	059b      	lsls	r3, r3, #22
 8006aea:	d402      	bmi.n	8006af2 <_puts_r+0x4e>
 8006aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006aee:	f000 f98d 	bl	8006e0c <__retarget_lock_release_recursive>
 8006af2:	4628      	mov	r0, r5
 8006af4:	bd70      	pop	{r4, r5, r6, pc}
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	da04      	bge.n	8006b04 <_puts_r+0x60>
 8006afa:	69a2      	ldr	r2, [r4, #24]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	dc17      	bgt.n	8006b30 <_puts_r+0x8c>
 8006b00:	290a      	cmp	r1, #10
 8006b02:	d015      	beq.n	8006b30 <_puts_r+0x8c>
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	6022      	str	r2, [r4, #0]
 8006b0a:	7019      	strb	r1, [r3, #0]
 8006b0c:	68a3      	ldr	r3, [r4, #8]
 8006b0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b12:	3b01      	subs	r3, #1
 8006b14:	60a3      	str	r3, [r4, #8]
 8006b16:	2900      	cmp	r1, #0
 8006b18:	d1ed      	bne.n	8006af6 <_puts_r+0x52>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	da11      	bge.n	8006b42 <_puts_r+0x9e>
 8006b1e:	4622      	mov	r2, r4
 8006b20:	210a      	movs	r1, #10
 8006b22:	4628      	mov	r0, r5
 8006b24:	f000 f85f 	bl	8006be6 <__swbuf_r>
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d0d7      	beq.n	8006adc <_puts_r+0x38>
 8006b2c:	250a      	movs	r5, #10
 8006b2e:	e7d7      	b.n	8006ae0 <_puts_r+0x3c>
 8006b30:	4622      	mov	r2, r4
 8006b32:	4628      	mov	r0, r5
 8006b34:	f000 f857 	bl	8006be6 <__swbuf_r>
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d1e7      	bne.n	8006b0c <_puts_r+0x68>
 8006b3c:	e7ce      	b.n	8006adc <_puts_r+0x38>
 8006b3e:	3e01      	subs	r6, #1
 8006b40:	e7e4      	b.n	8006b0c <_puts_r+0x68>
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	6022      	str	r2, [r4, #0]
 8006b48:	220a      	movs	r2, #10
 8006b4a:	701a      	strb	r2, [r3, #0]
 8006b4c:	e7ee      	b.n	8006b2c <_puts_r+0x88>
	...

08006b50 <puts>:
 8006b50:	4b02      	ldr	r3, [pc, #8]	@ (8006b5c <puts+0xc>)
 8006b52:	4601      	mov	r1, r0
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	f7ff bfa5 	b.w	8006aa4 <_puts_r>
 8006b5a:	bf00      	nop
 8006b5c:	2000003c 	.word	0x2000003c

08006b60 <__sread>:
 8006b60:	b510      	push	{r4, lr}
 8006b62:	460c      	mov	r4, r1
 8006b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b68:	f000 f900 	bl	8006d6c <_read_r>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	bfab      	itete	ge
 8006b70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b72:	89a3      	ldrhlt	r3, [r4, #12]
 8006b74:	181b      	addge	r3, r3, r0
 8006b76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b7a:	bfac      	ite	ge
 8006b7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b7e:	81a3      	strhlt	r3, [r4, #12]
 8006b80:	bd10      	pop	{r4, pc}

08006b82 <__swrite>:
 8006b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b86:	461f      	mov	r7, r3
 8006b88:	898b      	ldrh	r3, [r1, #12]
 8006b8a:	05db      	lsls	r3, r3, #23
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	460c      	mov	r4, r1
 8006b90:	4616      	mov	r6, r2
 8006b92:	d505      	bpl.n	8006ba0 <__swrite+0x1e>
 8006b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b98:	2302      	movs	r3, #2
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f000 f8d4 	bl	8006d48 <_lseek_r>
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ba6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006baa:	81a3      	strh	r3, [r4, #12]
 8006bac:	4632      	mov	r2, r6
 8006bae:	463b      	mov	r3, r7
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb6:	f000 b8eb 	b.w	8006d90 <_write_r>

08006bba <__sseek>:
 8006bba:	b510      	push	{r4, lr}
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc2:	f000 f8c1 	bl	8006d48 <_lseek_r>
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	bf15      	itete	ne
 8006bcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006bce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006bd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006bd6:	81a3      	strheq	r3, [r4, #12]
 8006bd8:	bf18      	it	ne
 8006bda:	81a3      	strhne	r3, [r4, #12]
 8006bdc:	bd10      	pop	{r4, pc}

08006bde <__sclose>:
 8006bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be2:	f000 b8a1 	b.w	8006d28 <_close_r>

08006be6 <__swbuf_r>:
 8006be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be8:	460e      	mov	r6, r1
 8006bea:	4614      	mov	r4, r2
 8006bec:	4605      	mov	r5, r0
 8006bee:	b118      	cbz	r0, 8006bf8 <__swbuf_r+0x12>
 8006bf0:	6a03      	ldr	r3, [r0, #32]
 8006bf2:	b90b      	cbnz	r3, 8006bf8 <__swbuf_r+0x12>
 8006bf4:	f7ff ff0e 	bl	8006a14 <__sinit>
 8006bf8:	69a3      	ldr	r3, [r4, #24]
 8006bfa:	60a3      	str	r3, [r4, #8]
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	071a      	lsls	r2, r3, #28
 8006c00:	d501      	bpl.n	8006c06 <__swbuf_r+0x20>
 8006c02:	6923      	ldr	r3, [r4, #16]
 8006c04:	b943      	cbnz	r3, 8006c18 <__swbuf_r+0x32>
 8006c06:	4621      	mov	r1, r4
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f000 f82b 	bl	8006c64 <__swsetup_r>
 8006c0e:	b118      	cbz	r0, 8006c18 <__swbuf_r+0x32>
 8006c10:	f04f 37ff 	mov.w	r7, #4294967295
 8006c14:	4638      	mov	r0, r7
 8006c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	6922      	ldr	r2, [r4, #16]
 8006c1c:	1a98      	subs	r0, r3, r2
 8006c1e:	6963      	ldr	r3, [r4, #20]
 8006c20:	b2f6      	uxtb	r6, r6
 8006c22:	4283      	cmp	r3, r0
 8006c24:	4637      	mov	r7, r6
 8006c26:	dc05      	bgt.n	8006c34 <__swbuf_r+0x4e>
 8006c28:	4621      	mov	r1, r4
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f001 fd88 	bl	8008740 <_fflush_r>
 8006c30:	2800      	cmp	r0, #0
 8006c32:	d1ed      	bne.n	8006c10 <__swbuf_r+0x2a>
 8006c34:	68a3      	ldr	r3, [r4, #8]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	60a3      	str	r3, [r4, #8]
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	6022      	str	r2, [r4, #0]
 8006c40:	701e      	strb	r6, [r3, #0]
 8006c42:	6962      	ldr	r2, [r4, #20]
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d004      	beq.n	8006c54 <__swbuf_r+0x6e>
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	07db      	lsls	r3, r3, #31
 8006c4e:	d5e1      	bpl.n	8006c14 <__swbuf_r+0x2e>
 8006c50:	2e0a      	cmp	r6, #10
 8006c52:	d1df      	bne.n	8006c14 <__swbuf_r+0x2e>
 8006c54:	4621      	mov	r1, r4
 8006c56:	4628      	mov	r0, r5
 8006c58:	f001 fd72 	bl	8008740 <_fflush_r>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	d0d9      	beq.n	8006c14 <__swbuf_r+0x2e>
 8006c60:	e7d6      	b.n	8006c10 <__swbuf_r+0x2a>
	...

08006c64 <__swsetup_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	4b29      	ldr	r3, [pc, #164]	@ (8006d0c <__swsetup_r+0xa8>)
 8006c68:	4605      	mov	r5, r0
 8006c6a:	6818      	ldr	r0, [r3, #0]
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	b118      	cbz	r0, 8006c78 <__swsetup_r+0x14>
 8006c70:	6a03      	ldr	r3, [r0, #32]
 8006c72:	b90b      	cbnz	r3, 8006c78 <__swsetup_r+0x14>
 8006c74:	f7ff fece 	bl	8006a14 <__sinit>
 8006c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c7c:	0719      	lsls	r1, r3, #28
 8006c7e:	d422      	bmi.n	8006cc6 <__swsetup_r+0x62>
 8006c80:	06da      	lsls	r2, r3, #27
 8006c82:	d407      	bmi.n	8006c94 <__swsetup_r+0x30>
 8006c84:	2209      	movs	r2, #9
 8006c86:	602a      	str	r2, [r5, #0]
 8006c88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c8c:	81a3      	strh	r3, [r4, #12]
 8006c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c92:	e033      	b.n	8006cfc <__swsetup_r+0x98>
 8006c94:	0758      	lsls	r0, r3, #29
 8006c96:	d512      	bpl.n	8006cbe <__swsetup_r+0x5a>
 8006c98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c9a:	b141      	cbz	r1, 8006cae <__swsetup_r+0x4a>
 8006c9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ca0:	4299      	cmp	r1, r3
 8006ca2:	d002      	beq.n	8006caa <__swsetup_r+0x46>
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	f000 ff0b 	bl	8007ac0 <_free_r>
 8006caa:	2300      	movs	r3, #0
 8006cac:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cae:	89a3      	ldrh	r3, [r4, #12]
 8006cb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006cb4:	81a3      	strh	r3, [r4, #12]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	6063      	str	r3, [r4, #4]
 8006cba:	6923      	ldr	r3, [r4, #16]
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	89a3      	ldrh	r3, [r4, #12]
 8006cc0:	f043 0308 	orr.w	r3, r3, #8
 8006cc4:	81a3      	strh	r3, [r4, #12]
 8006cc6:	6923      	ldr	r3, [r4, #16]
 8006cc8:	b94b      	cbnz	r3, 8006cde <__swsetup_r+0x7a>
 8006cca:	89a3      	ldrh	r3, [r4, #12]
 8006ccc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006cd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cd4:	d003      	beq.n	8006cde <__swsetup_r+0x7a>
 8006cd6:	4621      	mov	r1, r4
 8006cd8:	4628      	mov	r0, r5
 8006cda:	f001 fd7f 	bl	80087dc <__smakebuf_r>
 8006cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ce2:	f013 0201 	ands.w	r2, r3, #1
 8006ce6:	d00a      	beq.n	8006cfe <__swsetup_r+0x9a>
 8006ce8:	2200      	movs	r2, #0
 8006cea:	60a2      	str	r2, [r4, #8]
 8006cec:	6962      	ldr	r2, [r4, #20]
 8006cee:	4252      	negs	r2, r2
 8006cf0:	61a2      	str	r2, [r4, #24]
 8006cf2:	6922      	ldr	r2, [r4, #16]
 8006cf4:	b942      	cbnz	r2, 8006d08 <__swsetup_r+0xa4>
 8006cf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006cfa:	d1c5      	bne.n	8006c88 <__swsetup_r+0x24>
 8006cfc:	bd38      	pop	{r3, r4, r5, pc}
 8006cfe:	0799      	lsls	r1, r3, #30
 8006d00:	bf58      	it	pl
 8006d02:	6962      	ldrpl	r2, [r4, #20]
 8006d04:	60a2      	str	r2, [r4, #8]
 8006d06:	e7f4      	b.n	8006cf2 <__swsetup_r+0x8e>
 8006d08:	2000      	movs	r0, #0
 8006d0a:	e7f7      	b.n	8006cfc <__swsetup_r+0x98>
 8006d0c:	2000003c 	.word	0x2000003c

08006d10 <memset>:
 8006d10:	4402      	add	r2, r0
 8006d12:	4603      	mov	r3, r0
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d100      	bne.n	8006d1a <memset+0xa>
 8006d18:	4770      	bx	lr
 8006d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d1e:	e7f9      	b.n	8006d14 <memset+0x4>

08006d20 <_localeconv_r>:
 8006d20:	4800      	ldr	r0, [pc, #0]	@ (8006d24 <_localeconv_r+0x4>)
 8006d22:	4770      	bx	lr
 8006d24:	2000017c 	.word	0x2000017c

08006d28 <_close_r>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	4d06      	ldr	r5, [pc, #24]	@ (8006d44 <_close_r+0x1c>)
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	4604      	mov	r4, r0
 8006d30:	4608      	mov	r0, r1
 8006d32:	602b      	str	r3, [r5, #0]
 8006d34:	f7fa fca3 	bl	800167e <_close>
 8006d38:	1c43      	adds	r3, r0, #1
 8006d3a:	d102      	bne.n	8006d42 <_close_r+0x1a>
 8006d3c:	682b      	ldr	r3, [r5, #0]
 8006d3e:	b103      	cbz	r3, 8006d42 <_close_r+0x1a>
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	bd38      	pop	{r3, r4, r5, pc}
 8006d44:	2000054c 	.word	0x2000054c

08006d48 <_lseek_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	4d07      	ldr	r5, [pc, #28]	@ (8006d68 <_lseek_r+0x20>)
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	4608      	mov	r0, r1
 8006d50:	4611      	mov	r1, r2
 8006d52:	2200      	movs	r2, #0
 8006d54:	602a      	str	r2, [r5, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	f7fa fcb8 	bl	80016cc <_lseek>
 8006d5c:	1c43      	adds	r3, r0, #1
 8006d5e:	d102      	bne.n	8006d66 <_lseek_r+0x1e>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	b103      	cbz	r3, 8006d66 <_lseek_r+0x1e>
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	bd38      	pop	{r3, r4, r5, pc}
 8006d68:	2000054c 	.word	0x2000054c

08006d6c <_read_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	4d07      	ldr	r5, [pc, #28]	@ (8006d8c <_read_r+0x20>)
 8006d70:	4604      	mov	r4, r0
 8006d72:	4608      	mov	r0, r1
 8006d74:	4611      	mov	r1, r2
 8006d76:	2200      	movs	r2, #0
 8006d78:	602a      	str	r2, [r5, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	f7fa fc46 	bl	800160c <_read>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d102      	bne.n	8006d8a <_read_r+0x1e>
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	b103      	cbz	r3, 8006d8a <_read_r+0x1e>
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	bd38      	pop	{r3, r4, r5, pc}
 8006d8c:	2000054c 	.word	0x2000054c

08006d90 <_write_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	4d07      	ldr	r5, [pc, #28]	@ (8006db0 <_write_r+0x20>)
 8006d94:	4604      	mov	r4, r0
 8006d96:	4608      	mov	r0, r1
 8006d98:	4611      	mov	r1, r2
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	602a      	str	r2, [r5, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f7fa fc51 	bl	8001646 <_write>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d102      	bne.n	8006dae <_write_r+0x1e>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	b103      	cbz	r3, 8006dae <_write_r+0x1e>
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	2000054c 	.word	0x2000054c

08006db4 <__errno>:
 8006db4:	4b01      	ldr	r3, [pc, #4]	@ (8006dbc <__errno+0x8>)
 8006db6:	6818      	ldr	r0, [r3, #0]
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	2000003c 	.word	0x2000003c

08006dc0 <__libc_init_array>:
 8006dc0:	b570      	push	{r4, r5, r6, lr}
 8006dc2:	4d0d      	ldr	r5, [pc, #52]	@ (8006df8 <__libc_init_array+0x38>)
 8006dc4:	4c0d      	ldr	r4, [pc, #52]	@ (8006dfc <__libc_init_array+0x3c>)
 8006dc6:	1b64      	subs	r4, r4, r5
 8006dc8:	10a4      	asrs	r4, r4, #2
 8006dca:	2600      	movs	r6, #0
 8006dcc:	42a6      	cmp	r6, r4
 8006dce:	d109      	bne.n	8006de4 <__libc_init_array+0x24>
 8006dd0:	4d0b      	ldr	r5, [pc, #44]	@ (8006e00 <__libc_init_array+0x40>)
 8006dd2:	4c0c      	ldr	r4, [pc, #48]	@ (8006e04 <__libc_init_array+0x44>)
 8006dd4:	f001 fe2e 	bl	8008a34 <_init>
 8006dd8:	1b64      	subs	r4, r4, r5
 8006dda:	10a4      	asrs	r4, r4, #2
 8006ddc:	2600      	movs	r6, #0
 8006dde:	42a6      	cmp	r6, r4
 8006de0:	d105      	bne.n	8006dee <__libc_init_array+0x2e>
 8006de2:	bd70      	pop	{r4, r5, r6, pc}
 8006de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de8:	4798      	blx	r3
 8006dea:	3601      	adds	r6, #1
 8006dec:	e7ee      	b.n	8006dcc <__libc_init_array+0xc>
 8006dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006df2:	4798      	blx	r3
 8006df4:	3601      	adds	r6, #1
 8006df6:	e7f2      	b.n	8006dde <__libc_init_array+0x1e>
 8006df8:	08008f2c 	.word	0x08008f2c
 8006dfc:	08008f2c 	.word	0x08008f2c
 8006e00:	08008f2c 	.word	0x08008f2c
 8006e04:	08008f30 	.word	0x08008f30

08006e08 <__retarget_lock_init_recursive>:
 8006e08:	4770      	bx	lr

08006e0a <__retarget_lock_acquire_recursive>:
 8006e0a:	4770      	bx	lr

08006e0c <__retarget_lock_release_recursive>:
 8006e0c:	4770      	bx	lr

08006e0e <quorem>:
 8006e0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e12:	6903      	ldr	r3, [r0, #16]
 8006e14:	690c      	ldr	r4, [r1, #16]
 8006e16:	42a3      	cmp	r3, r4
 8006e18:	4607      	mov	r7, r0
 8006e1a:	db7e      	blt.n	8006f1a <quorem+0x10c>
 8006e1c:	3c01      	subs	r4, #1
 8006e1e:	f101 0814 	add.w	r8, r1, #20
 8006e22:	00a3      	lsls	r3, r4, #2
 8006e24:	f100 0514 	add.w	r5, r0, #20
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e2e:	9301      	str	r3, [sp, #4]
 8006e30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e40:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e44:	d32e      	bcc.n	8006ea4 <quorem+0x96>
 8006e46:	f04f 0a00 	mov.w	sl, #0
 8006e4a:	46c4      	mov	ip, r8
 8006e4c:	46ae      	mov	lr, r5
 8006e4e:	46d3      	mov	fp, sl
 8006e50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e54:	b298      	uxth	r0, r3
 8006e56:	fb06 a000 	mla	r0, r6, r0, sl
 8006e5a:	0c02      	lsrs	r2, r0, #16
 8006e5c:	0c1b      	lsrs	r3, r3, #16
 8006e5e:	fb06 2303 	mla	r3, r6, r3, r2
 8006e62:	f8de 2000 	ldr.w	r2, [lr]
 8006e66:	b280      	uxth	r0, r0
 8006e68:	b292      	uxth	r2, r2
 8006e6a:	1a12      	subs	r2, r2, r0
 8006e6c:	445a      	add	r2, fp
 8006e6e:	f8de 0000 	ldr.w	r0, [lr]
 8006e72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006e7c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006e80:	b292      	uxth	r2, r2
 8006e82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006e86:	45e1      	cmp	r9, ip
 8006e88:	f84e 2b04 	str.w	r2, [lr], #4
 8006e8c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006e90:	d2de      	bcs.n	8006e50 <quorem+0x42>
 8006e92:	9b00      	ldr	r3, [sp, #0]
 8006e94:	58eb      	ldr	r3, [r5, r3]
 8006e96:	b92b      	cbnz	r3, 8006ea4 <quorem+0x96>
 8006e98:	9b01      	ldr	r3, [sp, #4]
 8006e9a:	3b04      	subs	r3, #4
 8006e9c:	429d      	cmp	r5, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	d32f      	bcc.n	8006f02 <quorem+0xf4>
 8006ea2:	613c      	str	r4, [r7, #16]
 8006ea4:	4638      	mov	r0, r7
 8006ea6:	f001 f97d 	bl	80081a4 <__mcmp>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	db25      	blt.n	8006efa <quorem+0xec>
 8006eae:	4629      	mov	r1, r5
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	f858 2b04 	ldr.w	r2, [r8], #4
 8006eb6:	f8d1 c000 	ldr.w	ip, [r1]
 8006eba:	fa1f fe82 	uxth.w	lr, r2
 8006ebe:	fa1f f38c 	uxth.w	r3, ip
 8006ec2:	eba3 030e 	sub.w	r3, r3, lr
 8006ec6:	4403      	add	r3, r0
 8006ec8:	0c12      	lsrs	r2, r2, #16
 8006eca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006ece:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ed8:	45c1      	cmp	r9, r8
 8006eda:	f841 3b04 	str.w	r3, [r1], #4
 8006ede:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ee2:	d2e6      	bcs.n	8006eb2 <quorem+0xa4>
 8006ee4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ee8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006eec:	b922      	cbnz	r2, 8006ef8 <quorem+0xea>
 8006eee:	3b04      	subs	r3, #4
 8006ef0:	429d      	cmp	r5, r3
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	d30b      	bcc.n	8006f0e <quorem+0x100>
 8006ef6:	613c      	str	r4, [r7, #16]
 8006ef8:	3601      	adds	r6, #1
 8006efa:	4630      	mov	r0, r6
 8006efc:	b003      	add	sp, #12
 8006efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f02:	6812      	ldr	r2, [r2, #0]
 8006f04:	3b04      	subs	r3, #4
 8006f06:	2a00      	cmp	r2, #0
 8006f08:	d1cb      	bne.n	8006ea2 <quorem+0x94>
 8006f0a:	3c01      	subs	r4, #1
 8006f0c:	e7c6      	b.n	8006e9c <quorem+0x8e>
 8006f0e:	6812      	ldr	r2, [r2, #0]
 8006f10:	3b04      	subs	r3, #4
 8006f12:	2a00      	cmp	r2, #0
 8006f14:	d1ef      	bne.n	8006ef6 <quorem+0xe8>
 8006f16:	3c01      	subs	r4, #1
 8006f18:	e7ea      	b.n	8006ef0 <quorem+0xe2>
 8006f1a:	2000      	movs	r0, #0
 8006f1c:	e7ee      	b.n	8006efc <quorem+0xee>
	...

08006f20 <_dtoa_r>:
 8006f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f24:	69c7      	ldr	r7, [r0, #28]
 8006f26:	b097      	sub	sp, #92	@ 0x5c
 8006f28:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006f2c:	ec55 4b10 	vmov	r4, r5, d0
 8006f30:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006f32:	9107      	str	r1, [sp, #28]
 8006f34:	4681      	mov	r9, r0
 8006f36:	920c      	str	r2, [sp, #48]	@ 0x30
 8006f38:	9311      	str	r3, [sp, #68]	@ 0x44
 8006f3a:	b97f      	cbnz	r7, 8006f5c <_dtoa_r+0x3c>
 8006f3c:	2010      	movs	r0, #16
 8006f3e:	f000 fe09 	bl	8007b54 <malloc>
 8006f42:	4602      	mov	r2, r0
 8006f44:	f8c9 001c 	str.w	r0, [r9, #28]
 8006f48:	b920      	cbnz	r0, 8006f54 <_dtoa_r+0x34>
 8006f4a:	4ba9      	ldr	r3, [pc, #676]	@ (80071f0 <_dtoa_r+0x2d0>)
 8006f4c:	21ef      	movs	r1, #239	@ 0xef
 8006f4e:	48a9      	ldr	r0, [pc, #676]	@ (80071f4 <_dtoa_r+0x2d4>)
 8006f50:	f001 fcc0 	bl	80088d4 <__assert_func>
 8006f54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006f58:	6007      	str	r7, [r0, #0]
 8006f5a:	60c7      	str	r7, [r0, #12]
 8006f5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006f60:	6819      	ldr	r1, [r3, #0]
 8006f62:	b159      	cbz	r1, 8006f7c <_dtoa_r+0x5c>
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	604a      	str	r2, [r1, #4]
 8006f68:	2301      	movs	r3, #1
 8006f6a:	4093      	lsls	r3, r2
 8006f6c:	608b      	str	r3, [r1, #8]
 8006f6e:	4648      	mov	r0, r9
 8006f70:	f000 fee6 	bl	8007d40 <_Bfree>
 8006f74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	1e2b      	subs	r3, r5, #0
 8006f7e:	bfb9      	ittee	lt
 8006f80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006f84:	9305      	strlt	r3, [sp, #20]
 8006f86:	2300      	movge	r3, #0
 8006f88:	6033      	strge	r3, [r6, #0]
 8006f8a:	9f05      	ldr	r7, [sp, #20]
 8006f8c:	4b9a      	ldr	r3, [pc, #616]	@ (80071f8 <_dtoa_r+0x2d8>)
 8006f8e:	bfbc      	itt	lt
 8006f90:	2201      	movlt	r2, #1
 8006f92:	6032      	strlt	r2, [r6, #0]
 8006f94:	43bb      	bics	r3, r7
 8006f96:	d112      	bne.n	8006fbe <_dtoa_r+0x9e>
 8006f98:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006f9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006fa4:	4323      	orrs	r3, r4
 8006fa6:	f000 855a 	beq.w	8007a5e <_dtoa_r+0xb3e>
 8006faa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006fac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800720c <_dtoa_r+0x2ec>
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 855c 	beq.w	8007a6e <_dtoa_r+0xb4e>
 8006fb6:	f10a 0303 	add.w	r3, sl, #3
 8006fba:	f000 bd56 	b.w	8007a6a <_dtoa_r+0xb4a>
 8006fbe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	ec51 0b17 	vmov	r0, r1, d7
 8006fc8:	2300      	movs	r3, #0
 8006fca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006fce:	f7f9 fd53 	bl	8000a78 <__aeabi_dcmpeq>
 8006fd2:	4680      	mov	r8, r0
 8006fd4:	b158      	cbz	r0, 8006fee <_dtoa_r+0xce>
 8006fd6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006fd8:	2301      	movs	r3, #1
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006fde:	b113      	cbz	r3, 8006fe6 <_dtoa_r+0xc6>
 8006fe0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006fe2:	4b86      	ldr	r3, [pc, #536]	@ (80071fc <_dtoa_r+0x2dc>)
 8006fe4:	6013      	str	r3, [r2, #0]
 8006fe6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007210 <_dtoa_r+0x2f0>
 8006fea:	f000 bd40 	b.w	8007a6e <_dtoa_r+0xb4e>
 8006fee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006ff2:	aa14      	add	r2, sp, #80	@ 0x50
 8006ff4:	a915      	add	r1, sp, #84	@ 0x54
 8006ff6:	4648      	mov	r0, r9
 8006ff8:	f001 f984 	bl	8008304 <__d2b>
 8006ffc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007000:	9002      	str	r0, [sp, #8]
 8007002:	2e00      	cmp	r6, #0
 8007004:	d078      	beq.n	80070f8 <_dtoa_r+0x1d8>
 8007006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007008:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800700c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007010:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007014:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007018:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800701c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007020:	4619      	mov	r1, r3
 8007022:	2200      	movs	r2, #0
 8007024:	4b76      	ldr	r3, [pc, #472]	@ (8007200 <_dtoa_r+0x2e0>)
 8007026:	f7f9 f907 	bl	8000238 <__aeabi_dsub>
 800702a:	a36b      	add	r3, pc, #428	@ (adr r3, 80071d8 <_dtoa_r+0x2b8>)
 800702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007030:	f7f9 faba 	bl	80005a8 <__aeabi_dmul>
 8007034:	a36a      	add	r3, pc, #424	@ (adr r3, 80071e0 <_dtoa_r+0x2c0>)
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	f7f9 f8ff 	bl	800023c <__adddf3>
 800703e:	4604      	mov	r4, r0
 8007040:	4630      	mov	r0, r6
 8007042:	460d      	mov	r5, r1
 8007044:	f7f9 fa46 	bl	80004d4 <__aeabi_i2d>
 8007048:	a367      	add	r3, pc, #412	@ (adr r3, 80071e8 <_dtoa_r+0x2c8>)
 800704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704e:	f7f9 faab 	bl	80005a8 <__aeabi_dmul>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	4620      	mov	r0, r4
 8007058:	4629      	mov	r1, r5
 800705a:	f7f9 f8ef 	bl	800023c <__adddf3>
 800705e:	4604      	mov	r4, r0
 8007060:	460d      	mov	r5, r1
 8007062:	f7f9 fd51 	bl	8000b08 <__aeabi_d2iz>
 8007066:	2200      	movs	r2, #0
 8007068:	4607      	mov	r7, r0
 800706a:	2300      	movs	r3, #0
 800706c:	4620      	mov	r0, r4
 800706e:	4629      	mov	r1, r5
 8007070:	f7f9 fd0c 	bl	8000a8c <__aeabi_dcmplt>
 8007074:	b140      	cbz	r0, 8007088 <_dtoa_r+0x168>
 8007076:	4638      	mov	r0, r7
 8007078:	f7f9 fa2c 	bl	80004d4 <__aeabi_i2d>
 800707c:	4622      	mov	r2, r4
 800707e:	462b      	mov	r3, r5
 8007080:	f7f9 fcfa 	bl	8000a78 <__aeabi_dcmpeq>
 8007084:	b900      	cbnz	r0, 8007088 <_dtoa_r+0x168>
 8007086:	3f01      	subs	r7, #1
 8007088:	2f16      	cmp	r7, #22
 800708a:	d852      	bhi.n	8007132 <_dtoa_r+0x212>
 800708c:	4b5d      	ldr	r3, [pc, #372]	@ (8007204 <_dtoa_r+0x2e4>)
 800708e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007096:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800709a:	f7f9 fcf7 	bl	8000a8c <__aeabi_dcmplt>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d049      	beq.n	8007136 <_dtoa_r+0x216>
 80070a2:	3f01      	subs	r7, #1
 80070a4:	2300      	movs	r3, #0
 80070a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80070a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80070aa:	1b9b      	subs	r3, r3, r6
 80070ac:	1e5a      	subs	r2, r3, #1
 80070ae:	bf45      	ittet	mi
 80070b0:	f1c3 0301 	rsbmi	r3, r3, #1
 80070b4:	9300      	strmi	r3, [sp, #0]
 80070b6:	2300      	movpl	r3, #0
 80070b8:	2300      	movmi	r3, #0
 80070ba:	9206      	str	r2, [sp, #24]
 80070bc:	bf54      	ite	pl
 80070be:	9300      	strpl	r3, [sp, #0]
 80070c0:	9306      	strmi	r3, [sp, #24]
 80070c2:	2f00      	cmp	r7, #0
 80070c4:	db39      	blt.n	800713a <_dtoa_r+0x21a>
 80070c6:	9b06      	ldr	r3, [sp, #24]
 80070c8:	970d      	str	r7, [sp, #52]	@ 0x34
 80070ca:	443b      	add	r3, r7
 80070cc:	9306      	str	r3, [sp, #24]
 80070ce:	2300      	movs	r3, #0
 80070d0:	9308      	str	r3, [sp, #32]
 80070d2:	9b07      	ldr	r3, [sp, #28]
 80070d4:	2b09      	cmp	r3, #9
 80070d6:	d863      	bhi.n	80071a0 <_dtoa_r+0x280>
 80070d8:	2b05      	cmp	r3, #5
 80070da:	bfc4      	itt	gt
 80070dc:	3b04      	subgt	r3, #4
 80070de:	9307      	strgt	r3, [sp, #28]
 80070e0:	9b07      	ldr	r3, [sp, #28]
 80070e2:	f1a3 0302 	sub.w	r3, r3, #2
 80070e6:	bfcc      	ite	gt
 80070e8:	2400      	movgt	r4, #0
 80070ea:	2401      	movle	r4, #1
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d863      	bhi.n	80071b8 <_dtoa_r+0x298>
 80070f0:	e8df f003 	tbb	[pc, r3]
 80070f4:	2b375452 	.word	0x2b375452
 80070f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80070fc:	441e      	add	r6, r3
 80070fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007102:	2b20      	cmp	r3, #32
 8007104:	bfc1      	itttt	gt
 8007106:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800710a:	409f      	lslgt	r7, r3
 800710c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007110:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007114:	bfd6      	itet	le
 8007116:	f1c3 0320 	rsble	r3, r3, #32
 800711a:	ea47 0003 	orrgt.w	r0, r7, r3
 800711e:	fa04 f003 	lslle.w	r0, r4, r3
 8007122:	f7f9 f9c7 	bl	80004b4 <__aeabi_ui2d>
 8007126:	2201      	movs	r2, #1
 8007128:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800712c:	3e01      	subs	r6, #1
 800712e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007130:	e776      	b.n	8007020 <_dtoa_r+0x100>
 8007132:	2301      	movs	r3, #1
 8007134:	e7b7      	b.n	80070a6 <_dtoa_r+0x186>
 8007136:	9010      	str	r0, [sp, #64]	@ 0x40
 8007138:	e7b6      	b.n	80070a8 <_dtoa_r+0x188>
 800713a:	9b00      	ldr	r3, [sp, #0]
 800713c:	1bdb      	subs	r3, r3, r7
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	427b      	negs	r3, r7
 8007142:	9308      	str	r3, [sp, #32]
 8007144:	2300      	movs	r3, #0
 8007146:	930d      	str	r3, [sp, #52]	@ 0x34
 8007148:	e7c3      	b.n	80070d2 <_dtoa_r+0x1b2>
 800714a:	2301      	movs	r3, #1
 800714c:	9309      	str	r3, [sp, #36]	@ 0x24
 800714e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007150:	eb07 0b03 	add.w	fp, r7, r3
 8007154:	f10b 0301 	add.w	r3, fp, #1
 8007158:	2b01      	cmp	r3, #1
 800715a:	9303      	str	r3, [sp, #12]
 800715c:	bfb8      	it	lt
 800715e:	2301      	movlt	r3, #1
 8007160:	e006      	b.n	8007170 <_dtoa_r+0x250>
 8007162:	2301      	movs	r3, #1
 8007164:	9309      	str	r3, [sp, #36]	@ 0x24
 8007166:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007168:	2b00      	cmp	r3, #0
 800716a:	dd28      	ble.n	80071be <_dtoa_r+0x29e>
 800716c:	469b      	mov	fp, r3
 800716e:	9303      	str	r3, [sp, #12]
 8007170:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007174:	2100      	movs	r1, #0
 8007176:	2204      	movs	r2, #4
 8007178:	f102 0514 	add.w	r5, r2, #20
 800717c:	429d      	cmp	r5, r3
 800717e:	d926      	bls.n	80071ce <_dtoa_r+0x2ae>
 8007180:	6041      	str	r1, [r0, #4]
 8007182:	4648      	mov	r0, r9
 8007184:	f000 fd9c 	bl	8007cc0 <_Balloc>
 8007188:	4682      	mov	sl, r0
 800718a:	2800      	cmp	r0, #0
 800718c:	d142      	bne.n	8007214 <_dtoa_r+0x2f4>
 800718e:	4b1e      	ldr	r3, [pc, #120]	@ (8007208 <_dtoa_r+0x2e8>)
 8007190:	4602      	mov	r2, r0
 8007192:	f240 11af 	movw	r1, #431	@ 0x1af
 8007196:	e6da      	b.n	8006f4e <_dtoa_r+0x2e>
 8007198:	2300      	movs	r3, #0
 800719a:	e7e3      	b.n	8007164 <_dtoa_r+0x244>
 800719c:	2300      	movs	r3, #0
 800719e:	e7d5      	b.n	800714c <_dtoa_r+0x22c>
 80071a0:	2401      	movs	r4, #1
 80071a2:	2300      	movs	r3, #0
 80071a4:	9307      	str	r3, [sp, #28]
 80071a6:	9409      	str	r4, [sp, #36]	@ 0x24
 80071a8:	f04f 3bff 	mov.w	fp, #4294967295
 80071ac:	2200      	movs	r2, #0
 80071ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80071b2:	2312      	movs	r3, #18
 80071b4:	920c      	str	r2, [sp, #48]	@ 0x30
 80071b6:	e7db      	b.n	8007170 <_dtoa_r+0x250>
 80071b8:	2301      	movs	r3, #1
 80071ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80071bc:	e7f4      	b.n	80071a8 <_dtoa_r+0x288>
 80071be:	f04f 0b01 	mov.w	fp, #1
 80071c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80071c6:	465b      	mov	r3, fp
 80071c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80071cc:	e7d0      	b.n	8007170 <_dtoa_r+0x250>
 80071ce:	3101      	adds	r1, #1
 80071d0:	0052      	lsls	r2, r2, #1
 80071d2:	e7d1      	b.n	8007178 <_dtoa_r+0x258>
 80071d4:	f3af 8000 	nop.w
 80071d8:	636f4361 	.word	0x636f4361
 80071dc:	3fd287a7 	.word	0x3fd287a7
 80071e0:	8b60c8b3 	.word	0x8b60c8b3
 80071e4:	3fc68a28 	.word	0x3fc68a28
 80071e8:	509f79fb 	.word	0x509f79fb
 80071ec:	3fd34413 	.word	0x3fd34413
 80071f0:	08008bf1 	.word	0x08008bf1
 80071f4:	08008c08 	.word	0x08008c08
 80071f8:	7ff00000 	.word	0x7ff00000
 80071fc:	08008bc1 	.word	0x08008bc1
 8007200:	3ff80000 	.word	0x3ff80000
 8007204:	08008d58 	.word	0x08008d58
 8007208:	08008c60 	.word	0x08008c60
 800720c:	08008bed 	.word	0x08008bed
 8007210:	08008bc0 	.word	0x08008bc0
 8007214:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007218:	6018      	str	r0, [r3, #0]
 800721a:	9b03      	ldr	r3, [sp, #12]
 800721c:	2b0e      	cmp	r3, #14
 800721e:	f200 80a1 	bhi.w	8007364 <_dtoa_r+0x444>
 8007222:	2c00      	cmp	r4, #0
 8007224:	f000 809e 	beq.w	8007364 <_dtoa_r+0x444>
 8007228:	2f00      	cmp	r7, #0
 800722a:	dd33      	ble.n	8007294 <_dtoa_r+0x374>
 800722c:	4b9c      	ldr	r3, [pc, #624]	@ (80074a0 <_dtoa_r+0x580>)
 800722e:	f007 020f 	and.w	r2, r7, #15
 8007232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007236:	ed93 7b00 	vldr	d7, [r3]
 800723a:	05f8      	lsls	r0, r7, #23
 800723c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007240:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007244:	d516      	bpl.n	8007274 <_dtoa_r+0x354>
 8007246:	4b97      	ldr	r3, [pc, #604]	@ (80074a4 <_dtoa_r+0x584>)
 8007248:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800724c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007250:	f7f9 fad4 	bl	80007fc <__aeabi_ddiv>
 8007254:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007258:	f004 040f 	and.w	r4, r4, #15
 800725c:	2603      	movs	r6, #3
 800725e:	4d91      	ldr	r5, [pc, #580]	@ (80074a4 <_dtoa_r+0x584>)
 8007260:	b954      	cbnz	r4, 8007278 <_dtoa_r+0x358>
 8007262:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007266:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800726a:	f7f9 fac7 	bl	80007fc <__aeabi_ddiv>
 800726e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007272:	e028      	b.n	80072c6 <_dtoa_r+0x3a6>
 8007274:	2602      	movs	r6, #2
 8007276:	e7f2      	b.n	800725e <_dtoa_r+0x33e>
 8007278:	07e1      	lsls	r1, r4, #31
 800727a:	d508      	bpl.n	800728e <_dtoa_r+0x36e>
 800727c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007280:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007284:	f7f9 f990 	bl	80005a8 <__aeabi_dmul>
 8007288:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800728c:	3601      	adds	r6, #1
 800728e:	1064      	asrs	r4, r4, #1
 8007290:	3508      	adds	r5, #8
 8007292:	e7e5      	b.n	8007260 <_dtoa_r+0x340>
 8007294:	f000 80af 	beq.w	80073f6 <_dtoa_r+0x4d6>
 8007298:	427c      	negs	r4, r7
 800729a:	4b81      	ldr	r3, [pc, #516]	@ (80074a0 <_dtoa_r+0x580>)
 800729c:	4d81      	ldr	r5, [pc, #516]	@ (80074a4 <_dtoa_r+0x584>)
 800729e:	f004 020f 	and.w	r2, r4, #15
 80072a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80072ae:	f7f9 f97b 	bl	80005a8 <__aeabi_dmul>
 80072b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072b6:	1124      	asrs	r4, r4, #4
 80072b8:	2300      	movs	r3, #0
 80072ba:	2602      	movs	r6, #2
 80072bc:	2c00      	cmp	r4, #0
 80072be:	f040 808f 	bne.w	80073e0 <_dtoa_r+0x4c0>
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1d3      	bne.n	800726e <_dtoa_r+0x34e>
 80072c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80072c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 8094 	beq.w	80073fa <_dtoa_r+0x4da>
 80072d2:	4b75      	ldr	r3, [pc, #468]	@ (80074a8 <_dtoa_r+0x588>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	4620      	mov	r0, r4
 80072d8:	4629      	mov	r1, r5
 80072da:	f7f9 fbd7 	bl	8000a8c <__aeabi_dcmplt>
 80072de:	2800      	cmp	r0, #0
 80072e0:	f000 808b 	beq.w	80073fa <_dtoa_r+0x4da>
 80072e4:	9b03      	ldr	r3, [sp, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 8087 	beq.w	80073fa <_dtoa_r+0x4da>
 80072ec:	f1bb 0f00 	cmp.w	fp, #0
 80072f0:	dd34      	ble.n	800735c <_dtoa_r+0x43c>
 80072f2:	4620      	mov	r0, r4
 80072f4:	4b6d      	ldr	r3, [pc, #436]	@ (80074ac <_dtoa_r+0x58c>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	4629      	mov	r1, r5
 80072fa:	f7f9 f955 	bl	80005a8 <__aeabi_dmul>
 80072fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007302:	f107 38ff 	add.w	r8, r7, #4294967295
 8007306:	3601      	adds	r6, #1
 8007308:	465c      	mov	r4, fp
 800730a:	4630      	mov	r0, r6
 800730c:	f7f9 f8e2 	bl	80004d4 <__aeabi_i2d>
 8007310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007314:	f7f9 f948 	bl	80005a8 <__aeabi_dmul>
 8007318:	4b65      	ldr	r3, [pc, #404]	@ (80074b0 <_dtoa_r+0x590>)
 800731a:	2200      	movs	r2, #0
 800731c:	f7f8 ff8e 	bl	800023c <__adddf3>
 8007320:	4605      	mov	r5, r0
 8007322:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007326:	2c00      	cmp	r4, #0
 8007328:	d16a      	bne.n	8007400 <_dtoa_r+0x4e0>
 800732a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800732e:	4b61      	ldr	r3, [pc, #388]	@ (80074b4 <_dtoa_r+0x594>)
 8007330:	2200      	movs	r2, #0
 8007332:	f7f8 ff81 	bl	8000238 <__aeabi_dsub>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800733e:	462a      	mov	r2, r5
 8007340:	4633      	mov	r3, r6
 8007342:	f7f9 fbc1 	bl	8000ac8 <__aeabi_dcmpgt>
 8007346:	2800      	cmp	r0, #0
 8007348:	f040 8298 	bne.w	800787c <_dtoa_r+0x95c>
 800734c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007350:	462a      	mov	r2, r5
 8007352:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007356:	f7f9 fb99 	bl	8000a8c <__aeabi_dcmplt>
 800735a:	bb38      	cbnz	r0, 80073ac <_dtoa_r+0x48c>
 800735c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007360:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007364:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007366:	2b00      	cmp	r3, #0
 8007368:	f2c0 8157 	blt.w	800761a <_dtoa_r+0x6fa>
 800736c:	2f0e      	cmp	r7, #14
 800736e:	f300 8154 	bgt.w	800761a <_dtoa_r+0x6fa>
 8007372:	4b4b      	ldr	r3, [pc, #300]	@ (80074a0 <_dtoa_r+0x580>)
 8007374:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007378:	ed93 7b00 	vldr	d7, [r3]
 800737c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800737e:	2b00      	cmp	r3, #0
 8007380:	ed8d 7b00 	vstr	d7, [sp]
 8007384:	f280 80e5 	bge.w	8007552 <_dtoa_r+0x632>
 8007388:	9b03      	ldr	r3, [sp, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	f300 80e1 	bgt.w	8007552 <_dtoa_r+0x632>
 8007390:	d10c      	bne.n	80073ac <_dtoa_r+0x48c>
 8007392:	4b48      	ldr	r3, [pc, #288]	@ (80074b4 <_dtoa_r+0x594>)
 8007394:	2200      	movs	r2, #0
 8007396:	ec51 0b17 	vmov	r0, r1, d7
 800739a:	f7f9 f905 	bl	80005a8 <__aeabi_dmul>
 800739e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073a2:	f7f9 fb87 	bl	8000ab4 <__aeabi_dcmpge>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	f000 8266 	beq.w	8007878 <_dtoa_r+0x958>
 80073ac:	2400      	movs	r4, #0
 80073ae:	4625      	mov	r5, r4
 80073b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80073b2:	4656      	mov	r6, sl
 80073b4:	ea6f 0803 	mvn.w	r8, r3
 80073b8:	2700      	movs	r7, #0
 80073ba:	4621      	mov	r1, r4
 80073bc:	4648      	mov	r0, r9
 80073be:	f000 fcbf 	bl	8007d40 <_Bfree>
 80073c2:	2d00      	cmp	r5, #0
 80073c4:	f000 80bd 	beq.w	8007542 <_dtoa_r+0x622>
 80073c8:	b12f      	cbz	r7, 80073d6 <_dtoa_r+0x4b6>
 80073ca:	42af      	cmp	r7, r5
 80073cc:	d003      	beq.n	80073d6 <_dtoa_r+0x4b6>
 80073ce:	4639      	mov	r1, r7
 80073d0:	4648      	mov	r0, r9
 80073d2:	f000 fcb5 	bl	8007d40 <_Bfree>
 80073d6:	4629      	mov	r1, r5
 80073d8:	4648      	mov	r0, r9
 80073da:	f000 fcb1 	bl	8007d40 <_Bfree>
 80073de:	e0b0      	b.n	8007542 <_dtoa_r+0x622>
 80073e0:	07e2      	lsls	r2, r4, #31
 80073e2:	d505      	bpl.n	80073f0 <_dtoa_r+0x4d0>
 80073e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073e8:	f7f9 f8de 	bl	80005a8 <__aeabi_dmul>
 80073ec:	3601      	adds	r6, #1
 80073ee:	2301      	movs	r3, #1
 80073f0:	1064      	asrs	r4, r4, #1
 80073f2:	3508      	adds	r5, #8
 80073f4:	e762      	b.n	80072bc <_dtoa_r+0x39c>
 80073f6:	2602      	movs	r6, #2
 80073f8:	e765      	b.n	80072c6 <_dtoa_r+0x3a6>
 80073fa:	9c03      	ldr	r4, [sp, #12]
 80073fc:	46b8      	mov	r8, r7
 80073fe:	e784      	b.n	800730a <_dtoa_r+0x3ea>
 8007400:	4b27      	ldr	r3, [pc, #156]	@ (80074a0 <_dtoa_r+0x580>)
 8007402:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007404:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007408:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800740c:	4454      	add	r4, sl
 800740e:	2900      	cmp	r1, #0
 8007410:	d054      	beq.n	80074bc <_dtoa_r+0x59c>
 8007412:	4929      	ldr	r1, [pc, #164]	@ (80074b8 <_dtoa_r+0x598>)
 8007414:	2000      	movs	r0, #0
 8007416:	f7f9 f9f1 	bl	80007fc <__aeabi_ddiv>
 800741a:	4633      	mov	r3, r6
 800741c:	462a      	mov	r2, r5
 800741e:	f7f8 ff0b 	bl	8000238 <__aeabi_dsub>
 8007422:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007426:	4656      	mov	r6, sl
 8007428:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800742c:	f7f9 fb6c 	bl	8000b08 <__aeabi_d2iz>
 8007430:	4605      	mov	r5, r0
 8007432:	f7f9 f84f 	bl	80004d4 <__aeabi_i2d>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800743e:	f7f8 fefb 	bl	8000238 <__aeabi_dsub>
 8007442:	3530      	adds	r5, #48	@ 0x30
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800744c:	f806 5b01 	strb.w	r5, [r6], #1
 8007450:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007454:	f7f9 fb1a 	bl	8000a8c <__aeabi_dcmplt>
 8007458:	2800      	cmp	r0, #0
 800745a:	d172      	bne.n	8007542 <_dtoa_r+0x622>
 800745c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007460:	4911      	ldr	r1, [pc, #68]	@ (80074a8 <_dtoa_r+0x588>)
 8007462:	2000      	movs	r0, #0
 8007464:	f7f8 fee8 	bl	8000238 <__aeabi_dsub>
 8007468:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800746c:	f7f9 fb0e 	bl	8000a8c <__aeabi_dcmplt>
 8007470:	2800      	cmp	r0, #0
 8007472:	f040 80b4 	bne.w	80075de <_dtoa_r+0x6be>
 8007476:	42a6      	cmp	r6, r4
 8007478:	f43f af70 	beq.w	800735c <_dtoa_r+0x43c>
 800747c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007480:	4b0a      	ldr	r3, [pc, #40]	@ (80074ac <_dtoa_r+0x58c>)
 8007482:	2200      	movs	r2, #0
 8007484:	f7f9 f890 	bl	80005a8 <__aeabi_dmul>
 8007488:	4b08      	ldr	r3, [pc, #32]	@ (80074ac <_dtoa_r+0x58c>)
 800748a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800748e:	2200      	movs	r2, #0
 8007490:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007494:	f7f9 f888 	bl	80005a8 <__aeabi_dmul>
 8007498:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800749c:	e7c4      	b.n	8007428 <_dtoa_r+0x508>
 800749e:	bf00      	nop
 80074a0:	08008d58 	.word	0x08008d58
 80074a4:	08008d30 	.word	0x08008d30
 80074a8:	3ff00000 	.word	0x3ff00000
 80074ac:	40240000 	.word	0x40240000
 80074b0:	401c0000 	.word	0x401c0000
 80074b4:	40140000 	.word	0x40140000
 80074b8:	3fe00000 	.word	0x3fe00000
 80074bc:	4631      	mov	r1, r6
 80074be:	4628      	mov	r0, r5
 80074c0:	f7f9 f872 	bl	80005a8 <__aeabi_dmul>
 80074c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80074c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80074ca:	4656      	mov	r6, sl
 80074cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074d0:	f7f9 fb1a 	bl	8000b08 <__aeabi_d2iz>
 80074d4:	4605      	mov	r5, r0
 80074d6:	f7f8 fffd 	bl	80004d4 <__aeabi_i2d>
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074e2:	f7f8 fea9 	bl	8000238 <__aeabi_dsub>
 80074e6:	3530      	adds	r5, #48	@ 0x30
 80074e8:	f806 5b01 	strb.w	r5, [r6], #1
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	42a6      	cmp	r6, r4
 80074f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074f6:	f04f 0200 	mov.w	r2, #0
 80074fa:	d124      	bne.n	8007546 <_dtoa_r+0x626>
 80074fc:	4baf      	ldr	r3, [pc, #700]	@ (80077bc <_dtoa_r+0x89c>)
 80074fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007502:	f7f8 fe9b 	bl	800023c <__adddf3>
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800750e:	f7f9 fadb 	bl	8000ac8 <__aeabi_dcmpgt>
 8007512:	2800      	cmp	r0, #0
 8007514:	d163      	bne.n	80075de <_dtoa_r+0x6be>
 8007516:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800751a:	49a8      	ldr	r1, [pc, #672]	@ (80077bc <_dtoa_r+0x89c>)
 800751c:	2000      	movs	r0, #0
 800751e:	f7f8 fe8b 	bl	8000238 <__aeabi_dsub>
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800752a:	f7f9 faaf 	bl	8000a8c <__aeabi_dcmplt>
 800752e:	2800      	cmp	r0, #0
 8007530:	f43f af14 	beq.w	800735c <_dtoa_r+0x43c>
 8007534:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007536:	1e73      	subs	r3, r6, #1
 8007538:	9313      	str	r3, [sp, #76]	@ 0x4c
 800753a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800753e:	2b30      	cmp	r3, #48	@ 0x30
 8007540:	d0f8      	beq.n	8007534 <_dtoa_r+0x614>
 8007542:	4647      	mov	r7, r8
 8007544:	e03b      	b.n	80075be <_dtoa_r+0x69e>
 8007546:	4b9e      	ldr	r3, [pc, #632]	@ (80077c0 <_dtoa_r+0x8a0>)
 8007548:	f7f9 f82e 	bl	80005a8 <__aeabi_dmul>
 800754c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007550:	e7bc      	b.n	80074cc <_dtoa_r+0x5ac>
 8007552:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007556:	4656      	mov	r6, sl
 8007558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800755c:	4620      	mov	r0, r4
 800755e:	4629      	mov	r1, r5
 8007560:	f7f9 f94c 	bl	80007fc <__aeabi_ddiv>
 8007564:	f7f9 fad0 	bl	8000b08 <__aeabi_d2iz>
 8007568:	4680      	mov	r8, r0
 800756a:	f7f8 ffb3 	bl	80004d4 <__aeabi_i2d>
 800756e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007572:	f7f9 f819 	bl	80005a8 <__aeabi_dmul>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4620      	mov	r0, r4
 800757c:	4629      	mov	r1, r5
 800757e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007582:	f7f8 fe59 	bl	8000238 <__aeabi_dsub>
 8007586:	f806 4b01 	strb.w	r4, [r6], #1
 800758a:	9d03      	ldr	r5, [sp, #12]
 800758c:	eba6 040a 	sub.w	r4, r6, sl
 8007590:	42a5      	cmp	r5, r4
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	d133      	bne.n	8007600 <_dtoa_r+0x6e0>
 8007598:	f7f8 fe50 	bl	800023c <__adddf3>
 800759c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075a0:	4604      	mov	r4, r0
 80075a2:	460d      	mov	r5, r1
 80075a4:	f7f9 fa90 	bl	8000ac8 <__aeabi_dcmpgt>
 80075a8:	b9c0      	cbnz	r0, 80075dc <_dtoa_r+0x6bc>
 80075aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075ae:	4620      	mov	r0, r4
 80075b0:	4629      	mov	r1, r5
 80075b2:	f7f9 fa61 	bl	8000a78 <__aeabi_dcmpeq>
 80075b6:	b110      	cbz	r0, 80075be <_dtoa_r+0x69e>
 80075b8:	f018 0f01 	tst.w	r8, #1
 80075bc:	d10e      	bne.n	80075dc <_dtoa_r+0x6bc>
 80075be:	9902      	ldr	r1, [sp, #8]
 80075c0:	4648      	mov	r0, r9
 80075c2:	f000 fbbd 	bl	8007d40 <_Bfree>
 80075c6:	2300      	movs	r3, #0
 80075c8:	7033      	strb	r3, [r6, #0]
 80075ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80075cc:	3701      	adds	r7, #1
 80075ce:	601f      	str	r7, [r3, #0]
 80075d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 824b 	beq.w	8007a6e <_dtoa_r+0xb4e>
 80075d8:	601e      	str	r6, [r3, #0]
 80075da:	e248      	b.n	8007a6e <_dtoa_r+0xb4e>
 80075dc:	46b8      	mov	r8, r7
 80075de:	4633      	mov	r3, r6
 80075e0:	461e      	mov	r6, r3
 80075e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075e6:	2a39      	cmp	r2, #57	@ 0x39
 80075e8:	d106      	bne.n	80075f8 <_dtoa_r+0x6d8>
 80075ea:	459a      	cmp	sl, r3
 80075ec:	d1f8      	bne.n	80075e0 <_dtoa_r+0x6c0>
 80075ee:	2230      	movs	r2, #48	@ 0x30
 80075f0:	f108 0801 	add.w	r8, r8, #1
 80075f4:	f88a 2000 	strb.w	r2, [sl]
 80075f8:	781a      	ldrb	r2, [r3, #0]
 80075fa:	3201      	adds	r2, #1
 80075fc:	701a      	strb	r2, [r3, #0]
 80075fe:	e7a0      	b.n	8007542 <_dtoa_r+0x622>
 8007600:	4b6f      	ldr	r3, [pc, #444]	@ (80077c0 <_dtoa_r+0x8a0>)
 8007602:	2200      	movs	r2, #0
 8007604:	f7f8 ffd0 	bl	80005a8 <__aeabi_dmul>
 8007608:	2200      	movs	r2, #0
 800760a:	2300      	movs	r3, #0
 800760c:	4604      	mov	r4, r0
 800760e:	460d      	mov	r5, r1
 8007610:	f7f9 fa32 	bl	8000a78 <__aeabi_dcmpeq>
 8007614:	2800      	cmp	r0, #0
 8007616:	d09f      	beq.n	8007558 <_dtoa_r+0x638>
 8007618:	e7d1      	b.n	80075be <_dtoa_r+0x69e>
 800761a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800761c:	2a00      	cmp	r2, #0
 800761e:	f000 80ea 	beq.w	80077f6 <_dtoa_r+0x8d6>
 8007622:	9a07      	ldr	r2, [sp, #28]
 8007624:	2a01      	cmp	r2, #1
 8007626:	f300 80cd 	bgt.w	80077c4 <_dtoa_r+0x8a4>
 800762a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800762c:	2a00      	cmp	r2, #0
 800762e:	f000 80c1 	beq.w	80077b4 <_dtoa_r+0x894>
 8007632:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007636:	9c08      	ldr	r4, [sp, #32]
 8007638:	9e00      	ldr	r6, [sp, #0]
 800763a:	9a00      	ldr	r2, [sp, #0]
 800763c:	441a      	add	r2, r3
 800763e:	9200      	str	r2, [sp, #0]
 8007640:	9a06      	ldr	r2, [sp, #24]
 8007642:	2101      	movs	r1, #1
 8007644:	441a      	add	r2, r3
 8007646:	4648      	mov	r0, r9
 8007648:	9206      	str	r2, [sp, #24]
 800764a:	f000 fc2d 	bl	8007ea8 <__i2b>
 800764e:	4605      	mov	r5, r0
 8007650:	b166      	cbz	r6, 800766c <_dtoa_r+0x74c>
 8007652:	9b06      	ldr	r3, [sp, #24]
 8007654:	2b00      	cmp	r3, #0
 8007656:	dd09      	ble.n	800766c <_dtoa_r+0x74c>
 8007658:	42b3      	cmp	r3, r6
 800765a:	9a00      	ldr	r2, [sp, #0]
 800765c:	bfa8      	it	ge
 800765e:	4633      	movge	r3, r6
 8007660:	1ad2      	subs	r2, r2, r3
 8007662:	9200      	str	r2, [sp, #0]
 8007664:	9a06      	ldr	r2, [sp, #24]
 8007666:	1af6      	subs	r6, r6, r3
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	9306      	str	r3, [sp, #24]
 800766c:	9b08      	ldr	r3, [sp, #32]
 800766e:	b30b      	cbz	r3, 80076b4 <_dtoa_r+0x794>
 8007670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 80c6 	beq.w	8007804 <_dtoa_r+0x8e4>
 8007678:	2c00      	cmp	r4, #0
 800767a:	f000 80c0 	beq.w	80077fe <_dtoa_r+0x8de>
 800767e:	4629      	mov	r1, r5
 8007680:	4622      	mov	r2, r4
 8007682:	4648      	mov	r0, r9
 8007684:	f000 fcc8 	bl	8008018 <__pow5mult>
 8007688:	9a02      	ldr	r2, [sp, #8]
 800768a:	4601      	mov	r1, r0
 800768c:	4605      	mov	r5, r0
 800768e:	4648      	mov	r0, r9
 8007690:	f000 fc20 	bl	8007ed4 <__multiply>
 8007694:	9902      	ldr	r1, [sp, #8]
 8007696:	4680      	mov	r8, r0
 8007698:	4648      	mov	r0, r9
 800769a:	f000 fb51 	bl	8007d40 <_Bfree>
 800769e:	9b08      	ldr	r3, [sp, #32]
 80076a0:	1b1b      	subs	r3, r3, r4
 80076a2:	9308      	str	r3, [sp, #32]
 80076a4:	f000 80b1 	beq.w	800780a <_dtoa_r+0x8ea>
 80076a8:	9a08      	ldr	r2, [sp, #32]
 80076aa:	4641      	mov	r1, r8
 80076ac:	4648      	mov	r0, r9
 80076ae:	f000 fcb3 	bl	8008018 <__pow5mult>
 80076b2:	9002      	str	r0, [sp, #8]
 80076b4:	2101      	movs	r1, #1
 80076b6:	4648      	mov	r0, r9
 80076b8:	f000 fbf6 	bl	8007ea8 <__i2b>
 80076bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076be:	4604      	mov	r4, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 81d8 	beq.w	8007a76 <_dtoa_r+0xb56>
 80076c6:	461a      	mov	r2, r3
 80076c8:	4601      	mov	r1, r0
 80076ca:	4648      	mov	r0, r9
 80076cc:	f000 fca4 	bl	8008018 <__pow5mult>
 80076d0:	9b07      	ldr	r3, [sp, #28]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	4604      	mov	r4, r0
 80076d6:	f300 809f 	bgt.w	8007818 <_dtoa_r+0x8f8>
 80076da:	9b04      	ldr	r3, [sp, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f040 8097 	bne.w	8007810 <_dtoa_r+0x8f0>
 80076e2:	9b05      	ldr	r3, [sp, #20]
 80076e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f040 8093 	bne.w	8007814 <_dtoa_r+0x8f4>
 80076ee:	9b05      	ldr	r3, [sp, #20]
 80076f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80076f4:	0d1b      	lsrs	r3, r3, #20
 80076f6:	051b      	lsls	r3, r3, #20
 80076f8:	b133      	cbz	r3, 8007708 <_dtoa_r+0x7e8>
 80076fa:	9b00      	ldr	r3, [sp, #0]
 80076fc:	3301      	adds	r3, #1
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	9b06      	ldr	r3, [sp, #24]
 8007702:	3301      	adds	r3, #1
 8007704:	9306      	str	r3, [sp, #24]
 8007706:	2301      	movs	r3, #1
 8007708:	9308      	str	r3, [sp, #32]
 800770a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 81b8 	beq.w	8007a82 <_dtoa_r+0xb62>
 8007712:	6923      	ldr	r3, [r4, #16]
 8007714:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007718:	6918      	ldr	r0, [r3, #16]
 800771a:	f000 fb79 	bl	8007e10 <__hi0bits>
 800771e:	f1c0 0020 	rsb	r0, r0, #32
 8007722:	9b06      	ldr	r3, [sp, #24]
 8007724:	4418      	add	r0, r3
 8007726:	f010 001f 	ands.w	r0, r0, #31
 800772a:	f000 8082 	beq.w	8007832 <_dtoa_r+0x912>
 800772e:	f1c0 0320 	rsb	r3, r0, #32
 8007732:	2b04      	cmp	r3, #4
 8007734:	dd73      	ble.n	800781e <_dtoa_r+0x8fe>
 8007736:	9b00      	ldr	r3, [sp, #0]
 8007738:	f1c0 001c 	rsb	r0, r0, #28
 800773c:	4403      	add	r3, r0
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	9b06      	ldr	r3, [sp, #24]
 8007742:	4403      	add	r3, r0
 8007744:	4406      	add	r6, r0
 8007746:	9306      	str	r3, [sp, #24]
 8007748:	9b00      	ldr	r3, [sp, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	dd05      	ble.n	800775a <_dtoa_r+0x83a>
 800774e:	9902      	ldr	r1, [sp, #8]
 8007750:	461a      	mov	r2, r3
 8007752:	4648      	mov	r0, r9
 8007754:	f000 fcba 	bl	80080cc <__lshift>
 8007758:	9002      	str	r0, [sp, #8]
 800775a:	9b06      	ldr	r3, [sp, #24]
 800775c:	2b00      	cmp	r3, #0
 800775e:	dd05      	ble.n	800776c <_dtoa_r+0x84c>
 8007760:	4621      	mov	r1, r4
 8007762:	461a      	mov	r2, r3
 8007764:	4648      	mov	r0, r9
 8007766:	f000 fcb1 	bl	80080cc <__lshift>
 800776a:	4604      	mov	r4, r0
 800776c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d061      	beq.n	8007836 <_dtoa_r+0x916>
 8007772:	9802      	ldr	r0, [sp, #8]
 8007774:	4621      	mov	r1, r4
 8007776:	f000 fd15 	bl	80081a4 <__mcmp>
 800777a:	2800      	cmp	r0, #0
 800777c:	da5b      	bge.n	8007836 <_dtoa_r+0x916>
 800777e:	2300      	movs	r3, #0
 8007780:	9902      	ldr	r1, [sp, #8]
 8007782:	220a      	movs	r2, #10
 8007784:	4648      	mov	r0, r9
 8007786:	f000 fafd 	bl	8007d84 <__multadd>
 800778a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800778c:	9002      	str	r0, [sp, #8]
 800778e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 8177 	beq.w	8007a86 <_dtoa_r+0xb66>
 8007798:	4629      	mov	r1, r5
 800779a:	2300      	movs	r3, #0
 800779c:	220a      	movs	r2, #10
 800779e:	4648      	mov	r0, r9
 80077a0:	f000 faf0 	bl	8007d84 <__multadd>
 80077a4:	f1bb 0f00 	cmp.w	fp, #0
 80077a8:	4605      	mov	r5, r0
 80077aa:	dc6f      	bgt.n	800788c <_dtoa_r+0x96c>
 80077ac:	9b07      	ldr	r3, [sp, #28]
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	dc49      	bgt.n	8007846 <_dtoa_r+0x926>
 80077b2:	e06b      	b.n	800788c <_dtoa_r+0x96c>
 80077b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80077b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80077ba:	e73c      	b.n	8007636 <_dtoa_r+0x716>
 80077bc:	3fe00000 	.word	0x3fe00000
 80077c0:	40240000 	.word	0x40240000
 80077c4:	9b03      	ldr	r3, [sp, #12]
 80077c6:	1e5c      	subs	r4, r3, #1
 80077c8:	9b08      	ldr	r3, [sp, #32]
 80077ca:	42a3      	cmp	r3, r4
 80077cc:	db09      	blt.n	80077e2 <_dtoa_r+0x8c2>
 80077ce:	1b1c      	subs	r4, r3, r4
 80077d0:	9b03      	ldr	r3, [sp, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f6bf af30 	bge.w	8007638 <_dtoa_r+0x718>
 80077d8:	9b00      	ldr	r3, [sp, #0]
 80077da:	9a03      	ldr	r2, [sp, #12]
 80077dc:	1a9e      	subs	r6, r3, r2
 80077de:	2300      	movs	r3, #0
 80077e0:	e72b      	b.n	800763a <_dtoa_r+0x71a>
 80077e2:	9b08      	ldr	r3, [sp, #32]
 80077e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80077e6:	9408      	str	r4, [sp, #32]
 80077e8:	1ae3      	subs	r3, r4, r3
 80077ea:	441a      	add	r2, r3
 80077ec:	9e00      	ldr	r6, [sp, #0]
 80077ee:	9b03      	ldr	r3, [sp, #12]
 80077f0:	920d      	str	r2, [sp, #52]	@ 0x34
 80077f2:	2400      	movs	r4, #0
 80077f4:	e721      	b.n	800763a <_dtoa_r+0x71a>
 80077f6:	9c08      	ldr	r4, [sp, #32]
 80077f8:	9e00      	ldr	r6, [sp, #0]
 80077fa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80077fc:	e728      	b.n	8007650 <_dtoa_r+0x730>
 80077fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007802:	e751      	b.n	80076a8 <_dtoa_r+0x788>
 8007804:	9a08      	ldr	r2, [sp, #32]
 8007806:	9902      	ldr	r1, [sp, #8]
 8007808:	e750      	b.n	80076ac <_dtoa_r+0x78c>
 800780a:	f8cd 8008 	str.w	r8, [sp, #8]
 800780e:	e751      	b.n	80076b4 <_dtoa_r+0x794>
 8007810:	2300      	movs	r3, #0
 8007812:	e779      	b.n	8007708 <_dtoa_r+0x7e8>
 8007814:	9b04      	ldr	r3, [sp, #16]
 8007816:	e777      	b.n	8007708 <_dtoa_r+0x7e8>
 8007818:	2300      	movs	r3, #0
 800781a:	9308      	str	r3, [sp, #32]
 800781c:	e779      	b.n	8007712 <_dtoa_r+0x7f2>
 800781e:	d093      	beq.n	8007748 <_dtoa_r+0x828>
 8007820:	9a00      	ldr	r2, [sp, #0]
 8007822:	331c      	adds	r3, #28
 8007824:	441a      	add	r2, r3
 8007826:	9200      	str	r2, [sp, #0]
 8007828:	9a06      	ldr	r2, [sp, #24]
 800782a:	441a      	add	r2, r3
 800782c:	441e      	add	r6, r3
 800782e:	9206      	str	r2, [sp, #24]
 8007830:	e78a      	b.n	8007748 <_dtoa_r+0x828>
 8007832:	4603      	mov	r3, r0
 8007834:	e7f4      	b.n	8007820 <_dtoa_r+0x900>
 8007836:	9b03      	ldr	r3, [sp, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	46b8      	mov	r8, r7
 800783c:	dc20      	bgt.n	8007880 <_dtoa_r+0x960>
 800783e:	469b      	mov	fp, r3
 8007840:	9b07      	ldr	r3, [sp, #28]
 8007842:	2b02      	cmp	r3, #2
 8007844:	dd1e      	ble.n	8007884 <_dtoa_r+0x964>
 8007846:	f1bb 0f00 	cmp.w	fp, #0
 800784a:	f47f adb1 	bne.w	80073b0 <_dtoa_r+0x490>
 800784e:	4621      	mov	r1, r4
 8007850:	465b      	mov	r3, fp
 8007852:	2205      	movs	r2, #5
 8007854:	4648      	mov	r0, r9
 8007856:	f000 fa95 	bl	8007d84 <__multadd>
 800785a:	4601      	mov	r1, r0
 800785c:	4604      	mov	r4, r0
 800785e:	9802      	ldr	r0, [sp, #8]
 8007860:	f000 fca0 	bl	80081a4 <__mcmp>
 8007864:	2800      	cmp	r0, #0
 8007866:	f77f ada3 	ble.w	80073b0 <_dtoa_r+0x490>
 800786a:	4656      	mov	r6, sl
 800786c:	2331      	movs	r3, #49	@ 0x31
 800786e:	f806 3b01 	strb.w	r3, [r6], #1
 8007872:	f108 0801 	add.w	r8, r8, #1
 8007876:	e59f      	b.n	80073b8 <_dtoa_r+0x498>
 8007878:	9c03      	ldr	r4, [sp, #12]
 800787a:	46b8      	mov	r8, r7
 800787c:	4625      	mov	r5, r4
 800787e:	e7f4      	b.n	800786a <_dtoa_r+0x94a>
 8007880:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 8101 	beq.w	8007a8e <_dtoa_r+0xb6e>
 800788c:	2e00      	cmp	r6, #0
 800788e:	dd05      	ble.n	800789c <_dtoa_r+0x97c>
 8007890:	4629      	mov	r1, r5
 8007892:	4632      	mov	r2, r6
 8007894:	4648      	mov	r0, r9
 8007896:	f000 fc19 	bl	80080cc <__lshift>
 800789a:	4605      	mov	r5, r0
 800789c:	9b08      	ldr	r3, [sp, #32]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d05c      	beq.n	800795c <_dtoa_r+0xa3c>
 80078a2:	6869      	ldr	r1, [r5, #4]
 80078a4:	4648      	mov	r0, r9
 80078a6:	f000 fa0b 	bl	8007cc0 <_Balloc>
 80078aa:	4606      	mov	r6, r0
 80078ac:	b928      	cbnz	r0, 80078ba <_dtoa_r+0x99a>
 80078ae:	4b82      	ldr	r3, [pc, #520]	@ (8007ab8 <_dtoa_r+0xb98>)
 80078b0:	4602      	mov	r2, r0
 80078b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80078b6:	f7ff bb4a 	b.w	8006f4e <_dtoa_r+0x2e>
 80078ba:	692a      	ldr	r2, [r5, #16]
 80078bc:	3202      	adds	r2, #2
 80078be:	0092      	lsls	r2, r2, #2
 80078c0:	f105 010c 	add.w	r1, r5, #12
 80078c4:	300c      	adds	r0, #12
 80078c6:	f000 fff7 	bl	80088b8 <memcpy>
 80078ca:	2201      	movs	r2, #1
 80078cc:	4631      	mov	r1, r6
 80078ce:	4648      	mov	r0, r9
 80078d0:	f000 fbfc 	bl	80080cc <__lshift>
 80078d4:	f10a 0301 	add.w	r3, sl, #1
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	eb0a 030b 	add.w	r3, sl, fp
 80078de:	9308      	str	r3, [sp, #32]
 80078e0:	9b04      	ldr	r3, [sp, #16]
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	462f      	mov	r7, r5
 80078e8:	9306      	str	r3, [sp, #24]
 80078ea:	4605      	mov	r5, r0
 80078ec:	9b00      	ldr	r3, [sp, #0]
 80078ee:	9802      	ldr	r0, [sp, #8]
 80078f0:	4621      	mov	r1, r4
 80078f2:	f103 3bff 	add.w	fp, r3, #4294967295
 80078f6:	f7ff fa8a 	bl	8006e0e <quorem>
 80078fa:	4603      	mov	r3, r0
 80078fc:	3330      	adds	r3, #48	@ 0x30
 80078fe:	9003      	str	r0, [sp, #12]
 8007900:	4639      	mov	r1, r7
 8007902:	9802      	ldr	r0, [sp, #8]
 8007904:	9309      	str	r3, [sp, #36]	@ 0x24
 8007906:	f000 fc4d 	bl	80081a4 <__mcmp>
 800790a:	462a      	mov	r2, r5
 800790c:	9004      	str	r0, [sp, #16]
 800790e:	4621      	mov	r1, r4
 8007910:	4648      	mov	r0, r9
 8007912:	f000 fc63 	bl	80081dc <__mdiff>
 8007916:	68c2      	ldr	r2, [r0, #12]
 8007918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800791a:	4606      	mov	r6, r0
 800791c:	bb02      	cbnz	r2, 8007960 <_dtoa_r+0xa40>
 800791e:	4601      	mov	r1, r0
 8007920:	9802      	ldr	r0, [sp, #8]
 8007922:	f000 fc3f 	bl	80081a4 <__mcmp>
 8007926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007928:	4602      	mov	r2, r0
 800792a:	4631      	mov	r1, r6
 800792c:	4648      	mov	r0, r9
 800792e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007930:	9309      	str	r3, [sp, #36]	@ 0x24
 8007932:	f000 fa05 	bl	8007d40 <_Bfree>
 8007936:	9b07      	ldr	r3, [sp, #28]
 8007938:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800793a:	9e00      	ldr	r6, [sp, #0]
 800793c:	ea42 0103 	orr.w	r1, r2, r3
 8007940:	9b06      	ldr	r3, [sp, #24]
 8007942:	4319      	orrs	r1, r3
 8007944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007946:	d10d      	bne.n	8007964 <_dtoa_r+0xa44>
 8007948:	2b39      	cmp	r3, #57	@ 0x39
 800794a:	d027      	beq.n	800799c <_dtoa_r+0xa7c>
 800794c:	9a04      	ldr	r2, [sp, #16]
 800794e:	2a00      	cmp	r2, #0
 8007950:	dd01      	ble.n	8007956 <_dtoa_r+0xa36>
 8007952:	9b03      	ldr	r3, [sp, #12]
 8007954:	3331      	adds	r3, #49	@ 0x31
 8007956:	f88b 3000 	strb.w	r3, [fp]
 800795a:	e52e      	b.n	80073ba <_dtoa_r+0x49a>
 800795c:	4628      	mov	r0, r5
 800795e:	e7b9      	b.n	80078d4 <_dtoa_r+0x9b4>
 8007960:	2201      	movs	r2, #1
 8007962:	e7e2      	b.n	800792a <_dtoa_r+0xa0a>
 8007964:	9904      	ldr	r1, [sp, #16]
 8007966:	2900      	cmp	r1, #0
 8007968:	db04      	blt.n	8007974 <_dtoa_r+0xa54>
 800796a:	9807      	ldr	r0, [sp, #28]
 800796c:	4301      	orrs	r1, r0
 800796e:	9806      	ldr	r0, [sp, #24]
 8007970:	4301      	orrs	r1, r0
 8007972:	d120      	bne.n	80079b6 <_dtoa_r+0xa96>
 8007974:	2a00      	cmp	r2, #0
 8007976:	ddee      	ble.n	8007956 <_dtoa_r+0xa36>
 8007978:	9902      	ldr	r1, [sp, #8]
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	2201      	movs	r2, #1
 800797e:	4648      	mov	r0, r9
 8007980:	f000 fba4 	bl	80080cc <__lshift>
 8007984:	4621      	mov	r1, r4
 8007986:	9002      	str	r0, [sp, #8]
 8007988:	f000 fc0c 	bl	80081a4 <__mcmp>
 800798c:	2800      	cmp	r0, #0
 800798e:	9b00      	ldr	r3, [sp, #0]
 8007990:	dc02      	bgt.n	8007998 <_dtoa_r+0xa78>
 8007992:	d1e0      	bne.n	8007956 <_dtoa_r+0xa36>
 8007994:	07da      	lsls	r2, r3, #31
 8007996:	d5de      	bpl.n	8007956 <_dtoa_r+0xa36>
 8007998:	2b39      	cmp	r3, #57	@ 0x39
 800799a:	d1da      	bne.n	8007952 <_dtoa_r+0xa32>
 800799c:	2339      	movs	r3, #57	@ 0x39
 800799e:	f88b 3000 	strb.w	r3, [fp]
 80079a2:	4633      	mov	r3, r6
 80079a4:	461e      	mov	r6, r3
 80079a6:	3b01      	subs	r3, #1
 80079a8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80079ac:	2a39      	cmp	r2, #57	@ 0x39
 80079ae:	d04e      	beq.n	8007a4e <_dtoa_r+0xb2e>
 80079b0:	3201      	adds	r2, #1
 80079b2:	701a      	strb	r2, [r3, #0]
 80079b4:	e501      	b.n	80073ba <_dtoa_r+0x49a>
 80079b6:	2a00      	cmp	r2, #0
 80079b8:	dd03      	ble.n	80079c2 <_dtoa_r+0xaa2>
 80079ba:	2b39      	cmp	r3, #57	@ 0x39
 80079bc:	d0ee      	beq.n	800799c <_dtoa_r+0xa7c>
 80079be:	3301      	adds	r3, #1
 80079c0:	e7c9      	b.n	8007956 <_dtoa_r+0xa36>
 80079c2:	9a00      	ldr	r2, [sp, #0]
 80079c4:	9908      	ldr	r1, [sp, #32]
 80079c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80079ca:	428a      	cmp	r2, r1
 80079cc:	d028      	beq.n	8007a20 <_dtoa_r+0xb00>
 80079ce:	9902      	ldr	r1, [sp, #8]
 80079d0:	2300      	movs	r3, #0
 80079d2:	220a      	movs	r2, #10
 80079d4:	4648      	mov	r0, r9
 80079d6:	f000 f9d5 	bl	8007d84 <__multadd>
 80079da:	42af      	cmp	r7, r5
 80079dc:	9002      	str	r0, [sp, #8]
 80079de:	f04f 0300 	mov.w	r3, #0
 80079e2:	f04f 020a 	mov.w	r2, #10
 80079e6:	4639      	mov	r1, r7
 80079e8:	4648      	mov	r0, r9
 80079ea:	d107      	bne.n	80079fc <_dtoa_r+0xadc>
 80079ec:	f000 f9ca 	bl	8007d84 <__multadd>
 80079f0:	4607      	mov	r7, r0
 80079f2:	4605      	mov	r5, r0
 80079f4:	9b00      	ldr	r3, [sp, #0]
 80079f6:	3301      	adds	r3, #1
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	e777      	b.n	80078ec <_dtoa_r+0x9cc>
 80079fc:	f000 f9c2 	bl	8007d84 <__multadd>
 8007a00:	4629      	mov	r1, r5
 8007a02:	4607      	mov	r7, r0
 8007a04:	2300      	movs	r3, #0
 8007a06:	220a      	movs	r2, #10
 8007a08:	4648      	mov	r0, r9
 8007a0a:	f000 f9bb 	bl	8007d84 <__multadd>
 8007a0e:	4605      	mov	r5, r0
 8007a10:	e7f0      	b.n	80079f4 <_dtoa_r+0xad4>
 8007a12:	f1bb 0f00 	cmp.w	fp, #0
 8007a16:	bfcc      	ite	gt
 8007a18:	465e      	movgt	r6, fp
 8007a1a:	2601      	movle	r6, #1
 8007a1c:	4456      	add	r6, sl
 8007a1e:	2700      	movs	r7, #0
 8007a20:	9902      	ldr	r1, [sp, #8]
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	2201      	movs	r2, #1
 8007a26:	4648      	mov	r0, r9
 8007a28:	f000 fb50 	bl	80080cc <__lshift>
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	9002      	str	r0, [sp, #8]
 8007a30:	f000 fbb8 	bl	80081a4 <__mcmp>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	dcb4      	bgt.n	80079a2 <_dtoa_r+0xa82>
 8007a38:	d102      	bne.n	8007a40 <_dtoa_r+0xb20>
 8007a3a:	9b00      	ldr	r3, [sp, #0]
 8007a3c:	07db      	lsls	r3, r3, #31
 8007a3e:	d4b0      	bmi.n	80079a2 <_dtoa_r+0xa82>
 8007a40:	4633      	mov	r3, r6
 8007a42:	461e      	mov	r6, r3
 8007a44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a48:	2a30      	cmp	r2, #48	@ 0x30
 8007a4a:	d0fa      	beq.n	8007a42 <_dtoa_r+0xb22>
 8007a4c:	e4b5      	b.n	80073ba <_dtoa_r+0x49a>
 8007a4e:	459a      	cmp	sl, r3
 8007a50:	d1a8      	bne.n	80079a4 <_dtoa_r+0xa84>
 8007a52:	2331      	movs	r3, #49	@ 0x31
 8007a54:	f108 0801 	add.w	r8, r8, #1
 8007a58:	f88a 3000 	strb.w	r3, [sl]
 8007a5c:	e4ad      	b.n	80073ba <_dtoa_r+0x49a>
 8007a5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a60:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007abc <_dtoa_r+0xb9c>
 8007a64:	b11b      	cbz	r3, 8007a6e <_dtoa_r+0xb4e>
 8007a66:	f10a 0308 	add.w	r3, sl, #8
 8007a6a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	4650      	mov	r0, sl
 8007a70:	b017      	add	sp, #92	@ 0x5c
 8007a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a76:	9b07      	ldr	r3, [sp, #28]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	f77f ae2e 	ble.w	80076da <_dtoa_r+0x7ba>
 8007a7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a80:	9308      	str	r3, [sp, #32]
 8007a82:	2001      	movs	r0, #1
 8007a84:	e64d      	b.n	8007722 <_dtoa_r+0x802>
 8007a86:	f1bb 0f00 	cmp.w	fp, #0
 8007a8a:	f77f aed9 	ble.w	8007840 <_dtoa_r+0x920>
 8007a8e:	4656      	mov	r6, sl
 8007a90:	9802      	ldr	r0, [sp, #8]
 8007a92:	4621      	mov	r1, r4
 8007a94:	f7ff f9bb 	bl	8006e0e <quorem>
 8007a98:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007a9c:	f806 3b01 	strb.w	r3, [r6], #1
 8007aa0:	eba6 020a 	sub.w	r2, r6, sl
 8007aa4:	4593      	cmp	fp, r2
 8007aa6:	ddb4      	ble.n	8007a12 <_dtoa_r+0xaf2>
 8007aa8:	9902      	ldr	r1, [sp, #8]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	220a      	movs	r2, #10
 8007aae:	4648      	mov	r0, r9
 8007ab0:	f000 f968 	bl	8007d84 <__multadd>
 8007ab4:	9002      	str	r0, [sp, #8]
 8007ab6:	e7eb      	b.n	8007a90 <_dtoa_r+0xb70>
 8007ab8:	08008c60 	.word	0x08008c60
 8007abc:	08008be4 	.word	0x08008be4

08007ac0 <_free_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	2900      	cmp	r1, #0
 8007ac6:	d041      	beq.n	8007b4c <_free_r+0x8c>
 8007ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007acc:	1f0c      	subs	r4, r1, #4
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	bfb8      	it	lt
 8007ad2:	18e4      	addlt	r4, r4, r3
 8007ad4:	f000 f8e8 	bl	8007ca8 <__malloc_lock>
 8007ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b50 <_free_r+0x90>)
 8007ada:	6813      	ldr	r3, [r2, #0]
 8007adc:	b933      	cbnz	r3, 8007aec <_free_r+0x2c>
 8007ade:	6063      	str	r3, [r4, #4]
 8007ae0:	6014      	str	r4, [r2, #0]
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ae8:	f000 b8e4 	b.w	8007cb4 <__malloc_unlock>
 8007aec:	42a3      	cmp	r3, r4
 8007aee:	d908      	bls.n	8007b02 <_free_r+0x42>
 8007af0:	6820      	ldr	r0, [r4, #0]
 8007af2:	1821      	adds	r1, r4, r0
 8007af4:	428b      	cmp	r3, r1
 8007af6:	bf01      	itttt	eq
 8007af8:	6819      	ldreq	r1, [r3, #0]
 8007afa:	685b      	ldreq	r3, [r3, #4]
 8007afc:	1809      	addeq	r1, r1, r0
 8007afe:	6021      	streq	r1, [r4, #0]
 8007b00:	e7ed      	b.n	8007ade <_free_r+0x1e>
 8007b02:	461a      	mov	r2, r3
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	b10b      	cbz	r3, 8007b0c <_free_r+0x4c>
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	d9fa      	bls.n	8007b02 <_free_r+0x42>
 8007b0c:	6811      	ldr	r1, [r2, #0]
 8007b0e:	1850      	adds	r0, r2, r1
 8007b10:	42a0      	cmp	r0, r4
 8007b12:	d10b      	bne.n	8007b2c <_free_r+0x6c>
 8007b14:	6820      	ldr	r0, [r4, #0]
 8007b16:	4401      	add	r1, r0
 8007b18:	1850      	adds	r0, r2, r1
 8007b1a:	4283      	cmp	r3, r0
 8007b1c:	6011      	str	r1, [r2, #0]
 8007b1e:	d1e0      	bne.n	8007ae2 <_free_r+0x22>
 8007b20:	6818      	ldr	r0, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	6053      	str	r3, [r2, #4]
 8007b26:	4408      	add	r0, r1
 8007b28:	6010      	str	r0, [r2, #0]
 8007b2a:	e7da      	b.n	8007ae2 <_free_r+0x22>
 8007b2c:	d902      	bls.n	8007b34 <_free_r+0x74>
 8007b2e:	230c      	movs	r3, #12
 8007b30:	602b      	str	r3, [r5, #0]
 8007b32:	e7d6      	b.n	8007ae2 <_free_r+0x22>
 8007b34:	6820      	ldr	r0, [r4, #0]
 8007b36:	1821      	adds	r1, r4, r0
 8007b38:	428b      	cmp	r3, r1
 8007b3a:	bf04      	itt	eq
 8007b3c:	6819      	ldreq	r1, [r3, #0]
 8007b3e:	685b      	ldreq	r3, [r3, #4]
 8007b40:	6063      	str	r3, [r4, #4]
 8007b42:	bf04      	itt	eq
 8007b44:	1809      	addeq	r1, r1, r0
 8007b46:	6021      	streq	r1, [r4, #0]
 8007b48:	6054      	str	r4, [r2, #4]
 8007b4a:	e7ca      	b.n	8007ae2 <_free_r+0x22>
 8007b4c:	bd38      	pop	{r3, r4, r5, pc}
 8007b4e:	bf00      	nop
 8007b50:	20000558 	.word	0x20000558

08007b54 <malloc>:
 8007b54:	4b02      	ldr	r3, [pc, #8]	@ (8007b60 <malloc+0xc>)
 8007b56:	4601      	mov	r1, r0
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	f000 b825 	b.w	8007ba8 <_malloc_r>
 8007b5e:	bf00      	nop
 8007b60:	2000003c 	.word	0x2000003c

08007b64 <sbrk_aligned>:
 8007b64:	b570      	push	{r4, r5, r6, lr}
 8007b66:	4e0f      	ldr	r6, [pc, #60]	@ (8007ba4 <sbrk_aligned+0x40>)
 8007b68:	460c      	mov	r4, r1
 8007b6a:	6831      	ldr	r1, [r6, #0]
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	b911      	cbnz	r1, 8007b76 <sbrk_aligned+0x12>
 8007b70:	f000 fe92 	bl	8008898 <_sbrk_r>
 8007b74:	6030      	str	r0, [r6, #0]
 8007b76:	4621      	mov	r1, r4
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f000 fe8d 	bl	8008898 <_sbrk_r>
 8007b7e:	1c43      	adds	r3, r0, #1
 8007b80:	d103      	bne.n	8007b8a <sbrk_aligned+0x26>
 8007b82:	f04f 34ff 	mov.w	r4, #4294967295
 8007b86:	4620      	mov	r0, r4
 8007b88:	bd70      	pop	{r4, r5, r6, pc}
 8007b8a:	1cc4      	adds	r4, r0, #3
 8007b8c:	f024 0403 	bic.w	r4, r4, #3
 8007b90:	42a0      	cmp	r0, r4
 8007b92:	d0f8      	beq.n	8007b86 <sbrk_aligned+0x22>
 8007b94:	1a21      	subs	r1, r4, r0
 8007b96:	4628      	mov	r0, r5
 8007b98:	f000 fe7e 	bl	8008898 <_sbrk_r>
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d1f2      	bne.n	8007b86 <sbrk_aligned+0x22>
 8007ba0:	e7ef      	b.n	8007b82 <sbrk_aligned+0x1e>
 8007ba2:	bf00      	nop
 8007ba4:	20000554 	.word	0x20000554

08007ba8 <_malloc_r>:
 8007ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bac:	1ccd      	adds	r5, r1, #3
 8007bae:	f025 0503 	bic.w	r5, r5, #3
 8007bb2:	3508      	adds	r5, #8
 8007bb4:	2d0c      	cmp	r5, #12
 8007bb6:	bf38      	it	cc
 8007bb8:	250c      	movcc	r5, #12
 8007bba:	2d00      	cmp	r5, #0
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	db01      	blt.n	8007bc4 <_malloc_r+0x1c>
 8007bc0:	42a9      	cmp	r1, r5
 8007bc2:	d904      	bls.n	8007bce <_malloc_r+0x26>
 8007bc4:	230c      	movs	r3, #12
 8007bc6:	6033      	str	r3, [r6, #0]
 8007bc8:	2000      	movs	r0, #0
 8007bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ca4 <_malloc_r+0xfc>
 8007bd2:	f000 f869 	bl	8007ca8 <__malloc_lock>
 8007bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8007bda:	461c      	mov	r4, r3
 8007bdc:	bb44      	cbnz	r4, 8007c30 <_malloc_r+0x88>
 8007bde:	4629      	mov	r1, r5
 8007be0:	4630      	mov	r0, r6
 8007be2:	f7ff ffbf 	bl	8007b64 <sbrk_aligned>
 8007be6:	1c43      	adds	r3, r0, #1
 8007be8:	4604      	mov	r4, r0
 8007bea:	d158      	bne.n	8007c9e <_malloc_r+0xf6>
 8007bec:	f8d8 4000 	ldr.w	r4, [r8]
 8007bf0:	4627      	mov	r7, r4
 8007bf2:	2f00      	cmp	r7, #0
 8007bf4:	d143      	bne.n	8007c7e <_malloc_r+0xd6>
 8007bf6:	2c00      	cmp	r4, #0
 8007bf8:	d04b      	beq.n	8007c92 <_malloc_r+0xea>
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	4639      	mov	r1, r7
 8007bfe:	4630      	mov	r0, r6
 8007c00:	eb04 0903 	add.w	r9, r4, r3
 8007c04:	f000 fe48 	bl	8008898 <_sbrk_r>
 8007c08:	4581      	cmp	r9, r0
 8007c0a:	d142      	bne.n	8007c92 <_malloc_r+0xea>
 8007c0c:	6821      	ldr	r1, [r4, #0]
 8007c0e:	1a6d      	subs	r5, r5, r1
 8007c10:	4629      	mov	r1, r5
 8007c12:	4630      	mov	r0, r6
 8007c14:	f7ff ffa6 	bl	8007b64 <sbrk_aligned>
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d03a      	beq.n	8007c92 <_malloc_r+0xea>
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	442b      	add	r3, r5
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	f8d8 3000 	ldr.w	r3, [r8]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	bb62      	cbnz	r2, 8007c84 <_malloc_r+0xdc>
 8007c2a:	f8c8 7000 	str.w	r7, [r8]
 8007c2e:	e00f      	b.n	8007c50 <_malloc_r+0xa8>
 8007c30:	6822      	ldr	r2, [r4, #0]
 8007c32:	1b52      	subs	r2, r2, r5
 8007c34:	d420      	bmi.n	8007c78 <_malloc_r+0xd0>
 8007c36:	2a0b      	cmp	r2, #11
 8007c38:	d917      	bls.n	8007c6a <_malloc_r+0xc2>
 8007c3a:	1961      	adds	r1, r4, r5
 8007c3c:	42a3      	cmp	r3, r4
 8007c3e:	6025      	str	r5, [r4, #0]
 8007c40:	bf18      	it	ne
 8007c42:	6059      	strne	r1, [r3, #4]
 8007c44:	6863      	ldr	r3, [r4, #4]
 8007c46:	bf08      	it	eq
 8007c48:	f8c8 1000 	streq.w	r1, [r8]
 8007c4c:	5162      	str	r2, [r4, r5]
 8007c4e:	604b      	str	r3, [r1, #4]
 8007c50:	4630      	mov	r0, r6
 8007c52:	f000 f82f 	bl	8007cb4 <__malloc_unlock>
 8007c56:	f104 000b 	add.w	r0, r4, #11
 8007c5a:	1d23      	adds	r3, r4, #4
 8007c5c:	f020 0007 	bic.w	r0, r0, #7
 8007c60:	1ac2      	subs	r2, r0, r3
 8007c62:	bf1c      	itt	ne
 8007c64:	1a1b      	subne	r3, r3, r0
 8007c66:	50a3      	strne	r3, [r4, r2]
 8007c68:	e7af      	b.n	8007bca <_malloc_r+0x22>
 8007c6a:	6862      	ldr	r2, [r4, #4]
 8007c6c:	42a3      	cmp	r3, r4
 8007c6e:	bf0c      	ite	eq
 8007c70:	f8c8 2000 	streq.w	r2, [r8]
 8007c74:	605a      	strne	r2, [r3, #4]
 8007c76:	e7eb      	b.n	8007c50 <_malloc_r+0xa8>
 8007c78:	4623      	mov	r3, r4
 8007c7a:	6864      	ldr	r4, [r4, #4]
 8007c7c:	e7ae      	b.n	8007bdc <_malloc_r+0x34>
 8007c7e:	463c      	mov	r4, r7
 8007c80:	687f      	ldr	r7, [r7, #4]
 8007c82:	e7b6      	b.n	8007bf2 <_malloc_r+0x4a>
 8007c84:	461a      	mov	r2, r3
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	42a3      	cmp	r3, r4
 8007c8a:	d1fb      	bne.n	8007c84 <_malloc_r+0xdc>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	6053      	str	r3, [r2, #4]
 8007c90:	e7de      	b.n	8007c50 <_malloc_r+0xa8>
 8007c92:	230c      	movs	r3, #12
 8007c94:	6033      	str	r3, [r6, #0]
 8007c96:	4630      	mov	r0, r6
 8007c98:	f000 f80c 	bl	8007cb4 <__malloc_unlock>
 8007c9c:	e794      	b.n	8007bc8 <_malloc_r+0x20>
 8007c9e:	6005      	str	r5, [r0, #0]
 8007ca0:	e7d6      	b.n	8007c50 <_malloc_r+0xa8>
 8007ca2:	bf00      	nop
 8007ca4:	20000558 	.word	0x20000558

08007ca8 <__malloc_lock>:
 8007ca8:	4801      	ldr	r0, [pc, #4]	@ (8007cb0 <__malloc_lock+0x8>)
 8007caa:	f7ff b8ae 	b.w	8006e0a <__retarget_lock_acquire_recursive>
 8007cae:	bf00      	nop
 8007cb0:	20000550 	.word	0x20000550

08007cb4 <__malloc_unlock>:
 8007cb4:	4801      	ldr	r0, [pc, #4]	@ (8007cbc <__malloc_unlock+0x8>)
 8007cb6:	f7ff b8a9 	b.w	8006e0c <__retarget_lock_release_recursive>
 8007cba:	bf00      	nop
 8007cbc:	20000550 	.word	0x20000550

08007cc0 <_Balloc>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	69c6      	ldr	r6, [r0, #28]
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	460d      	mov	r5, r1
 8007cc8:	b976      	cbnz	r6, 8007ce8 <_Balloc+0x28>
 8007cca:	2010      	movs	r0, #16
 8007ccc:	f7ff ff42 	bl	8007b54 <malloc>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	61e0      	str	r0, [r4, #28]
 8007cd4:	b920      	cbnz	r0, 8007ce0 <_Balloc+0x20>
 8007cd6:	4b18      	ldr	r3, [pc, #96]	@ (8007d38 <_Balloc+0x78>)
 8007cd8:	4818      	ldr	r0, [pc, #96]	@ (8007d3c <_Balloc+0x7c>)
 8007cda:	216b      	movs	r1, #107	@ 0x6b
 8007cdc:	f000 fdfa 	bl	80088d4 <__assert_func>
 8007ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ce4:	6006      	str	r6, [r0, #0]
 8007ce6:	60c6      	str	r6, [r0, #12]
 8007ce8:	69e6      	ldr	r6, [r4, #28]
 8007cea:	68f3      	ldr	r3, [r6, #12]
 8007cec:	b183      	cbz	r3, 8007d10 <_Balloc+0x50>
 8007cee:	69e3      	ldr	r3, [r4, #28]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007cf6:	b9b8      	cbnz	r0, 8007d28 <_Balloc+0x68>
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	fa01 f605 	lsl.w	r6, r1, r5
 8007cfe:	1d72      	adds	r2, r6, #5
 8007d00:	0092      	lsls	r2, r2, #2
 8007d02:	4620      	mov	r0, r4
 8007d04:	f000 fe04 	bl	8008910 <_calloc_r>
 8007d08:	b160      	cbz	r0, 8007d24 <_Balloc+0x64>
 8007d0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d0e:	e00e      	b.n	8007d2e <_Balloc+0x6e>
 8007d10:	2221      	movs	r2, #33	@ 0x21
 8007d12:	2104      	movs	r1, #4
 8007d14:	4620      	mov	r0, r4
 8007d16:	f000 fdfb 	bl	8008910 <_calloc_r>
 8007d1a:	69e3      	ldr	r3, [r4, #28]
 8007d1c:	60f0      	str	r0, [r6, #12]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1e4      	bne.n	8007cee <_Balloc+0x2e>
 8007d24:	2000      	movs	r0, #0
 8007d26:	bd70      	pop	{r4, r5, r6, pc}
 8007d28:	6802      	ldr	r2, [r0, #0]
 8007d2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d34:	e7f7      	b.n	8007d26 <_Balloc+0x66>
 8007d36:	bf00      	nop
 8007d38:	08008bf1 	.word	0x08008bf1
 8007d3c:	08008c71 	.word	0x08008c71

08007d40 <_Bfree>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	69c6      	ldr	r6, [r0, #28]
 8007d44:	4605      	mov	r5, r0
 8007d46:	460c      	mov	r4, r1
 8007d48:	b976      	cbnz	r6, 8007d68 <_Bfree+0x28>
 8007d4a:	2010      	movs	r0, #16
 8007d4c:	f7ff ff02 	bl	8007b54 <malloc>
 8007d50:	4602      	mov	r2, r0
 8007d52:	61e8      	str	r0, [r5, #28]
 8007d54:	b920      	cbnz	r0, 8007d60 <_Bfree+0x20>
 8007d56:	4b09      	ldr	r3, [pc, #36]	@ (8007d7c <_Bfree+0x3c>)
 8007d58:	4809      	ldr	r0, [pc, #36]	@ (8007d80 <_Bfree+0x40>)
 8007d5a:	218f      	movs	r1, #143	@ 0x8f
 8007d5c:	f000 fdba 	bl	80088d4 <__assert_func>
 8007d60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d64:	6006      	str	r6, [r0, #0]
 8007d66:	60c6      	str	r6, [r0, #12]
 8007d68:	b13c      	cbz	r4, 8007d7a <_Bfree+0x3a>
 8007d6a:	69eb      	ldr	r3, [r5, #28]
 8007d6c:	6862      	ldr	r2, [r4, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d74:	6021      	str	r1, [r4, #0]
 8007d76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d7a:	bd70      	pop	{r4, r5, r6, pc}
 8007d7c:	08008bf1 	.word	0x08008bf1
 8007d80:	08008c71 	.word	0x08008c71

08007d84 <__multadd>:
 8007d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d88:	690d      	ldr	r5, [r1, #16]
 8007d8a:	4607      	mov	r7, r0
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	461e      	mov	r6, r3
 8007d90:	f101 0c14 	add.w	ip, r1, #20
 8007d94:	2000      	movs	r0, #0
 8007d96:	f8dc 3000 	ldr.w	r3, [ip]
 8007d9a:	b299      	uxth	r1, r3
 8007d9c:	fb02 6101 	mla	r1, r2, r1, r6
 8007da0:	0c1e      	lsrs	r6, r3, #16
 8007da2:	0c0b      	lsrs	r3, r1, #16
 8007da4:	fb02 3306 	mla	r3, r2, r6, r3
 8007da8:	b289      	uxth	r1, r1
 8007daa:	3001      	adds	r0, #1
 8007dac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007db0:	4285      	cmp	r5, r0
 8007db2:	f84c 1b04 	str.w	r1, [ip], #4
 8007db6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007dba:	dcec      	bgt.n	8007d96 <__multadd+0x12>
 8007dbc:	b30e      	cbz	r6, 8007e02 <__multadd+0x7e>
 8007dbe:	68a3      	ldr	r3, [r4, #8]
 8007dc0:	42ab      	cmp	r3, r5
 8007dc2:	dc19      	bgt.n	8007df8 <__multadd+0x74>
 8007dc4:	6861      	ldr	r1, [r4, #4]
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	3101      	adds	r1, #1
 8007dca:	f7ff ff79 	bl	8007cc0 <_Balloc>
 8007dce:	4680      	mov	r8, r0
 8007dd0:	b928      	cbnz	r0, 8007dde <__multadd+0x5a>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8007e08 <__multadd+0x84>)
 8007dd6:	480d      	ldr	r0, [pc, #52]	@ (8007e0c <__multadd+0x88>)
 8007dd8:	21ba      	movs	r1, #186	@ 0xba
 8007dda:	f000 fd7b 	bl	80088d4 <__assert_func>
 8007dde:	6922      	ldr	r2, [r4, #16]
 8007de0:	3202      	adds	r2, #2
 8007de2:	f104 010c 	add.w	r1, r4, #12
 8007de6:	0092      	lsls	r2, r2, #2
 8007de8:	300c      	adds	r0, #12
 8007dea:	f000 fd65 	bl	80088b8 <memcpy>
 8007dee:	4621      	mov	r1, r4
 8007df0:	4638      	mov	r0, r7
 8007df2:	f7ff ffa5 	bl	8007d40 <_Bfree>
 8007df6:	4644      	mov	r4, r8
 8007df8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007dfc:	3501      	adds	r5, #1
 8007dfe:	615e      	str	r6, [r3, #20]
 8007e00:	6125      	str	r5, [r4, #16]
 8007e02:	4620      	mov	r0, r4
 8007e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e08:	08008c60 	.word	0x08008c60
 8007e0c:	08008c71 	.word	0x08008c71

08007e10 <__hi0bits>:
 8007e10:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007e14:	4603      	mov	r3, r0
 8007e16:	bf36      	itet	cc
 8007e18:	0403      	lslcc	r3, r0, #16
 8007e1a:	2000      	movcs	r0, #0
 8007e1c:	2010      	movcc	r0, #16
 8007e1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e22:	bf3c      	itt	cc
 8007e24:	021b      	lslcc	r3, r3, #8
 8007e26:	3008      	addcc	r0, #8
 8007e28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e2c:	bf3c      	itt	cc
 8007e2e:	011b      	lslcc	r3, r3, #4
 8007e30:	3004      	addcc	r0, #4
 8007e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e36:	bf3c      	itt	cc
 8007e38:	009b      	lslcc	r3, r3, #2
 8007e3a:	3002      	addcc	r0, #2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	db05      	blt.n	8007e4c <__hi0bits+0x3c>
 8007e40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e44:	f100 0001 	add.w	r0, r0, #1
 8007e48:	bf08      	it	eq
 8007e4a:	2020      	moveq	r0, #32
 8007e4c:	4770      	bx	lr

08007e4e <__lo0bits>:
 8007e4e:	6803      	ldr	r3, [r0, #0]
 8007e50:	4602      	mov	r2, r0
 8007e52:	f013 0007 	ands.w	r0, r3, #7
 8007e56:	d00b      	beq.n	8007e70 <__lo0bits+0x22>
 8007e58:	07d9      	lsls	r1, r3, #31
 8007e5a:	d421      	bmi.n	8007ea0 <__lo0bits+0x52>
 8007e5c:	0798      	lsls	r0, r3, #30
 8007e5e:	bf49      	itett	mi
 8007e60:	085b      	lsrmi	r3, r3, #1
 8007e62:	089b      	lsrpl	r3, r3, #2
 8007e64:	2001      	movmi	r0, #1
 8007e66:	6013      	strmi	r3, [r2, #0]
 8007e68:	bf5c      	itt	pl
 8007e6a:	6013      	strpl	r3, [r2, #0]
 8007e6c:	2002      	movpl	r0, #2
 8007e6e:	4770      	bx	lr
 8007e70:	b299      	uxth	r1, r3
 8007e72:	b909      	cbnz	r1, 8007e78 <__lo0bits+0x2a>
 8007e74:	0c1b      	lsrs	r3, r3, #16
 8007e76:	2010      	movs	r0, #16
 8007e78:	b2d9      	uxtb	r1, r3
 8007e7a:	b909      	cbnz	r1, 8007e80 <__lo0bits+0x32>
 8007e7c:	3008      	adds	r0, #8
 8007e7e:	0a1b      	lsrs	r3, r3, #8
 8007e80:	0719      	lsls	r1, r3, #28
 8007e82:	bf04      	itt	eq
 8007e84:	091b      	lsreq	r3, r3, #4
 8007e86:	3004      	addeq	r0, #4
 8007e88:	0799      	lsls	r1, r3, #30
 8007e8a:	bf04      	itt	eq
 8007e8c:	089b      	lsreq	r3, r3, #2
 8007e8e:	3002      	addeq	r0, #2
 8007e90:	07d9      	lsls	r1, r3, #31
 8007e92:	d403      	bmi.n	8007e9c <__lo0bits+0x4e>
 8007e94:	085b      	lsrs	r3, r3, #1
 8007e96:	f100 0001 	add.w	r0, r0, #1
 8007e9a:	d003      	beq.n	8007ea4 <__lo0bits+0x56>
 8007e9c:	6013      	str	r3, [r2, #0]
 8007e9e:	4770      	bx	lr
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	4770      	bx	lr
 8007ea4:	2020      	movs	r0, #32
 8007ea6:	4770      	bx	lr

08007ea8 <__i2b>:
 8007ea8:	b510      	push	{r4, lr}
 8007eaa:	460c      	mov	r4, r1
 8007eac:	2101      	movs	r1, #1
 8007eae:	f7ff ff07 	bl	8007cc0 <_Balloc>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	b928      	cbnz	r0, 8007ec2 <__i2b+0x1a>
 8007eb6:	4b05      	ldr	r3, [pc, #20]	@ (8007ecc <__i2b+0x24>)
 8007eb8:	4805      	ldr	r0, [pc, #20]	@ (8007ed0 <__i2b+0x28>)
 8007eba:	f240 1145 	movw	r1, #325	@ 0x145
 8007ebe:	f000 fd09 	bl	80088d4 <__assert_func>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	6144      	str	r4, [r0, #20]
 8007ec6:	6103      	str	r3, [r0, #16]
 8007ec8:	bd10      	pop	{r4, pc}
 8007eca:	bf00      	nop
 8007ecc:	08008c60 	.word	0x08008c60
 8007ed0:	08008c71 	.word	0x08008c71

08007ed4 <__multiply>:
 8007ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed8:	4617      	mov	r7, r2
 8007eda:	690a      	ldr	r2, [r1, #16]
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	bfa8      	it	ge
 8007ee2:	463b      	movge	r3, r7
 8007ee4:	4689      	mov	r9, r1
 8007ee6:	bfa4      	itt	ge
 8007ee8:	460f      	movge	r7, r1
 8007eea:	4699      	movge	r9, r3
 8007eec:	693d      	ldr	r5, [r7, #16]
 8007eee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	6879      	ldr	r1, [r7, #4]
 8007ef6:	eb05 060a 	add.w	r6, r5, sl
 8007efa:	42b3      	cmp	r3, r6
 8007efc:	b085      	sub	sp, #20
 8007efe:	bfb8      	it	lt
 8007f00:	3101      	addlt	r1, #1
 8007f02:	f7ff fedd 	bl	8007cc0 <_Balloc>
 8007f06:	b930      	cbnz	r0, 8007f16 <__multiply+0x42>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	4b41      	ldr	r3, [pc, #260]	@ (8008010 <__multiply+0x13c>)
 8007f0c:	4841      	ldr	r0, [pc, #260]	@ (8008014 <__multiply+0x140>)
 8007f0e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007f12:	f000 fcdf 	bl	80088d4 <__assert_func>
 8007f16:	f100 0414 	add.w	r4, r0, #20
 8007f1a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007f1e:	4623      	mov	r3, r4
 8007f20:	2200      	movs	r2, #0
 8007f22:	4573      	cmp	r3, lr
 8007f24:	d320      	bcc.n	8007f68 <__multiply+0x94>
 8007f26:	f107 0814 	add.w	r8, r7, #20
 8007f2a:	f109 0114 	add.w	r1, r9, #20
 8007f2e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007f32:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007f36:	9302      	str	r3, [sp, #8]
 8007f38:	1beb      	subs	r3, r5, r7
 8007f3a:	3b15      	subs	r3, #21
 8007f3c:	f023 0303 	bic.w	r3, r3, #3
 8007f40:	3304      	adds	r3, #4
 8007f42:	3715      	adds	r7, #21
 8007f44:	42bd      	cmp	r5, r7
 8007f46:	bf38      	it	cc
 8007f48:	2304      	movcc	r3, #4
 8007f4a:	9301      	str	r3, [sp, #4]
 8007f4c:	9b02      	ldr	r3, [sp, #8]
 8007f4e:	9103      	str	r1, [sp, #12]
 8007f50:	428b      	cmp	r3, r1
 8007f52:	d80c      	bhi.n	8007f6e <__multiply+0x9a>
 8007f54:	2e00      	cmp	r6, #0
 8007f56:	dd03      	ble.n	8007f60 <__multiply+0x8c>
 8007f58:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d055      	beq.n	800800c <__multiply+0x138>
 8007f60:	6106      	str	r6, [r0, #16]
 8007f62:	b005      	add	sp, #20
 8007f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f68:	f843 2b04 	str.w	r2, [r3], #4
 8007f6c:	e7d9      	b.n	8007f22 <__multiply+0x4e>
 8007f6e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f72:	f1ba 0f00 	cmp.w	sl, #0
 8007f76:	d01f      	beq.n	8007fb8 <__multiply+0xe4>
 8007f78:	46c4      	mov	ip, r8
 8007f7a:	46a1      	mov	r9, r4
 8007f7c:	2700      	movs	r7, #0
 8007f7e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f82:	f8d9 3000 	ldr.w	r3, [r9]
 8007f86:	fa1f fb82 	uxth.w	fp, r2
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f90:	443b      	add	r3, r7
 8007f92:	f8d9 7000 	ldr.w	r7, [r9]
 8007f96:	0c12      	lsrs	r2, r2, #16
 8007f98:	0c3f      	lsrs	r7, r7, #16
 8007f9a:	fb0a 7202 	mla	r2, sl, r2, r7
 8007f9e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fa8:	4565      	cmp	r5, ip
 8007faa:	f849 3b04 	str.w	r3, [r9], #4
 8007fae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007fb2:	d8e4      	bhi.n	8007f7e <__multiply+0xaa>
 8007fb4:	9b01      	ldr	r3, [sp, #4]
 8007fb6:	50e7      	str	r7, [r4, r3]
 8007fb8:	9b03      	ldr	r3, [sp, #12]
 8007fba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007fbe:	3104      	adds	r1, #4
 8007fc0:	f1b9 0f00 	cmp.w	r9, #0
 8007fc4:	d020      	beq.n	8008008 <__multiply+0x134>
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	4647      	mov	r7, r8
 8007fca:	46a4      	mov	ip, r4
 8007fcc:	f04f 0a00 	mov.w	sl, #0
 8007fd0:	f8b7 b000 	ldrh.w	fp, [r7]
 8007fd4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007fd8:	fb09 220b 	mla	r2, r9, fp, r2
 8007fdc:	4452      	add	r2, sl
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fe4:	f84c 3b04 	str.w	r3, [ip], #4
 8007fe8:	f857 3b04 	ldr.w	r3, [r7], #4
 8007fec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ff0:	f8bc 3000 	ldrh.w	r3, [ip]
 8007ff4:	fb09 330a 	mla	r3, r9, sl, r3
 8007ff8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007ffc:	42bd      	cmp	r5, r7
 8007ffe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008002:	d8e5      	bhi.n	8007fd0 <__multiply+0xfc>
 8008004:	9a01      	ldr	r2, [sp, #4]
 8008006:	50a3      	str	r3, [r4, r2]
 8008008:	3404      	adds	r4, #4
 800800a:	e79f      	b.n	8007f4c <__multiply+0x78>
 800800c:	3e01      	subs	r6, #1
 800800e:	e7a1      	b.n	8007f54 <__multiply+0x80>
 8008010:	08008c60 	.word	0x08008c60
 8008014:	08008c71 	.word	0x08008c71

08008018 <__pow5mult>:
 8008018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800801c:	4615      	mov	r5, r2
 800801e:	f012 0203 	ands.w	r2, r2, #3
 8008022:	4607      	mov	r7, r0
 8008024:	460e      	mov	r6, r1
 8008026:	d007      	beq.n	8008038 <__pow5mult+0x20>
 8008028:	4c25      	ldr	r4, [pc, #148]	@ (80080c0 <__pow5mult+0xa8>)
 800802a:	3a01      	subs	r2, #1
 800802c:	2300      	movs	r3, #0
 800802e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008032:	f7ff fea7 	bl	8007d84 <__multadd>
 8008036:	4606      	mov	r6, r0
 8008038:	10ad      	asrs	r5, r5, #2
 800803a:	d03d      	beq.n	80080b8 <__pow5mult+0xa0>
 800803c:	69fc      	ldr	r4, [r7, #28]
 800803e:	b97c      	cbnz	r4, 8008060 <__pow5mult+0x48>
 8008040:	2010      	movs	r0, #16
 8008042:	f7ff fd87 	bl	8007b54 <malloc>
 8008046:	4602      	mov	r2, r0
 8008048:	61f8      	str	r0, [r7, #28]
 800804a:	b928      	cbnz	r0, 8008058 <__pow5mult+0x40>
 800804c:	4b1d      	ldr	r3, [pc, #116]	@ (80080c4 <__pow5mult+0xac>)
 800804e:	481e      	ldr	r0, [pc, #120]	@ (80080c8 <__pow5mult+0xb0>)
 8008050:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008054:	f000 fc3e 	bl	80088d4 <__assert_func>
 8008058:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800805c:	6004      	str	r4, [r0, #0]
 800805e:	60c4      	str	r4, [r0, #12]
 8008060:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008064:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008068:	b94c      	cbnz	r4, 800807e <__pow5mult+0x66>
 800806a:	f240 2171 	movw	r1, #625	@ 0x271
 800806e:	4638      	mov	r0, r7
 8008070:	f7ff ff1a 	bl	8007ea8 <__i2b>
 8008074:	2300      	movs	r3, #0
 8008076:	f8c8 0008 	str.w	r0, [r8, #8]
 800807a:	4604      	mov	r4, r0
 800807c:	6003      	str	r3, [r0, #0]
 800807e:	f04f 0900 	mov.w	r9, #0
 8008082:	07eb      	lsls	r3, r5, #31
 8008084:	d50a      	bpl.n	800809c <__pow5mult+0x84>
 8008086:	4631      	mov	r1, r6
 8008088:	4622      	mov	r2, r4
 800808a:	4638      	mov	r0, r7
 800808c:	f7ff ff22 	bl	8007ed4 <__multiply>
 8008090:	4631      	mov	r1, r6
 8008092:	4680      	mov	r8, r0
 8008094:	4638      	mov	r0, r7
 8008096:	f7ff fe53 	bl	8007d40 <_Bfree>
 800809a:	4646      	mov	r6, r8
 800809c:	106d      	asrs	r5, r5, #1
 800809e:	d00b      	beq.n	80080b8 <__pow5mult+0xa0>
 80080a0:	6820      	ldr	r0, [r4, #0]
 80080a2:	b938      	cbnz	r0, 80080b4 <__pow5mult+0x9c>
 80080a4:	4622      	mov	r2, r4
 80080a6:	4621      	mov	r1, r4
 80080a8:	4638      	mov	r0, r7
 80080aa:	f7ff ff13 	bl	8007ed4 <__multiply>
 80080ae:	6020      	str	r0, [r4, #0]
 80080b0:	f8c0 9000 	str.w	r9, [r0]
 80080b4:	4604      	mov	r4, r0
 80080b6:	e7e4      	b.n	8008082 <__pow5mult+0x6a>
 80080b8:	4630      	mov	r0, r6
 80080ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080be:	bf00      	nop
 80080c0:	08008d24 	.word	0x08008d24
 80080c4:	08008bf1 	.word	0x08008bf1
 80080c8:	08008c71 	.word	0x08008c71

080080cc <__lshift>:
 80080cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d0:	460c      	mov	r4, r1
 80080d2:	6849      	ldr	r1, [r1, #4]
 80080d4:	6923      	ldr	r3, [r4, #16]
 80080d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080da:	68a3      	ldr	r3, [r4, #8]
 80080dc:	4607      	mov	r7, r0
 80080de:	4691      	mov	r9, r2
 80080e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080e4:	f108 0601 	add.w	r6, r8, #1
 80080e8:	42b3      	cmp	r3, r6
 80080ea:	db0b      	blt.n	8008104 <__lshift+0x38>
 80080ec:	4638      	mov	r0, r7
 80080ee:	f7ff fde7 	bl	8007cc0 <_Balloc>
 80080f2:	4605      	mov	r5, r0
 80080f4:	b948      	cbnz	r0, 800810a <__lshift+0x3e>
 80080f6:	4602      	mov	r2, r0
 80080f8:	4b28      	ldr	r3, [pc, #160]	@ (800819c <__lshift+0xd0>)
 80080fa:	4829      	ldr	r0, [pc, #164]	@ (80081a0 <__lshift+0xd4>)
 80080fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008100:	f000 fbe8 	bl	80088d4 <__assert_func>
 8008104:	3101      	adds	r1, #1
 8008106:	005b      	lsls	r3, r3, #1
 8008108:	e7ee      	b.n	80080e8 <__lshift+0x1c>
 800810a:	2300      	movs	r3, #0
 800810c:	f100 0114 	add.w	r1, r0, #20
 8008110:	f100 0210 	add.w	r2, r0, #16
 8008114:	4618      	mov	r0, r3
 8008116:	4553      	cmp	r3, sl
 8008118:	db33      	blt.n	8008182 <__lshift+0xb6>
 800811a:	6920      	ldr	r0, [r4, #16]
 800811c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008120:	f104 0314 	add.w	r3, r4, #20
 8008124:	f019 091f 	ands.w	r9, r9, #31
 8008128:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800812c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008130:	d02b      	beq.n	800818a <__lshift+0xbe>
 8008132:	f1c9 0e20 	rsb	lr, r9, #32
 8008136:	468a      	mov	sl, r1
 8008138:	2200      	movs	r2, #0
 800813a:	6818      	ldr	r0, [r3, #0]
 800813c:	fa00 f009 	lsl.w	r0, r0, r9
 8008140:	4310      	orrs	r0, r2
 8008142:	f84a 0b04 	str.w	r0, [sl], #4
 8008146:	f853 2b04 	ldr.w	r2, [r3], #4
 800814a:	459c      	cmp	ip, r3
 800814c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008150:	d8f3      	bhi.n	800813a <__lshift+0x6e>
 8008152:	ebac 0304 	sub.w	r3, ip, r4
 8008156:	3b15      	subs	r3, #21
 8008158:	f023 0303 	bic.w	r3, r3, #3
 800815c:	3304      	adds	r3, #4
 800815e:	f104 0015 	add.w	r0, r4, #21
 8008162:	4560      	cmp	r0, ip
 8008164:	bf88      	it	hi
 8008166:	2304      	movhi	r3, #4
 8008168:	50ca      	str	r2, [r1, r3]
 800816a:	b10a      	cbz	r2, 8008170 <__lshift+0xa4>
 800816c:	f108 0602 	add.w	r6, r8, #2
 8008170:	3e01      	subs	r6, #1
 8008172:	4638      	mov	r0, r7
 8008174:	612e      	str	r6, [r5, #16]
 8008176:	4621      	mov	r1, r4
 8008178:	f7ff fde2 	bl	8007d40 <_Bfree>
 800817c:	4628      	mov	r0, r5
 800817e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008182:	f842 0f04 	str.w	r0, [r2, #4]!
 8008186:	3301      	adds	r3, #1
 8008188:	e7c5      	b.n	8008116 <__lshift+0x4a>
 800818a:	3904      	subs	r1, #4
 800818c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008190:	f841 2f04 	str.w	r2, [r1, #4]!
 8008194:	459c      	cmp	ip, r3
 8008196:	d8f9      	bhi.n	800818c <__lshift+0xc0>
 8008198:	e7ea      	b.n	8008170 <__lshift+0xa4>
 800819a:	bf00      	nop
 800819c:	08008c60 	.word	0x08008c60
 80081a0:	08008c71 	.word	0x08008c71

080081a4 <__mcmp>:
 80081a4:	690a      	ldr	r2, [r1, #16]
 80081a6:	4603      	mov	r3, r0
 80081a8:	6900      	ldr	r0, [r0, #16]
 80081aa:	1a80      	subs	r0, r0, r2
 80081ac:	b530      	push	{r4, r5, lr}
 80081ae:	d10e      	bne.n	80081ce <__mcmp+0x2a>
 80081b0:	3314      	adds	r3, #20
 80081b2:	3114      	adds	r1, #20
 80081b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80081b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80081bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80081c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80081c4:	4295      	cmp	r5, r2
 80081c6:	d003      	beq.n	80081d0 <__mcmp+0x2c>
 80081c8:	d205      	bcs.n	80081d6 <__mcmp+0x32>
 80081ca:	f04f 30ff 	mov.w	r0, #4294967295
 80081ce:	bd30      	pop	{r4, r5, pc}
 80081d0:	42a3      	cmp	r3, r4
 80081d2:	d3f3      	bcc.n	80081bc <__mcmp+0x18>
 80081d4:	e7fb      	b.n	80081ce <__mcmp+0x2a>
 80081d6:	2001      	movs	r0, #1
 80081d8:	e7f9      	b.n	80081ce <__mcmp+0x2a>
	...

080081dc <__mdiff>:
 80081dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e0:	4689      	mov	r9, r1
 80081e2:	4606      	mov	r6, r0
 80081e4:	4611      	mov	r1, r2
 80081e6:	4648      	mov	r0, r9
 80081e8:	4614      	mov	r4, r2
 80081ea:	f7ff ffdb 	bl	80081a4 <__mcmp>
 80081ee:	1e05      	subs	r5, r0, #0
 80081f0:	d112      	bne.n	8008218 <__mdiff+0x3c>
 80081f2:	4629      	mov	r1, r5
 80081f4:	4630      	mov	r0, r6
 80081f6:	f7ff fd63 	bl	8007cc0 <_Balloc>
 80081fa:	4602      	mov	r2, r0
 80081fc:	b928      	cbnz	r0, 800820a <__mdiff+0x2e>
 80081fe:	4b3f      	ldr	r3, [pc, #252]	@ (80082fc <__mdiff+0x120>)
 8008200:	f240 2137 	movw	r1, #567	@ 0x237
 8008204:	483e      	ldr	r0, [pc, #248]	@ (8008300 <__mdiff+0x124>)
 8008206:	f000 fb65 	bl	80088d4 <__assert_func>
 800820a:	2301      	movs	r3, #1
 800820c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008210:	4610      	mov	r0, r2
 8008212:	b003      	add	sp, #12
 8008214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008218:	bfbc      	itt	lt
 800821a:	464b      	movlt	r3, r9
 800821c:	46a1      	movlt	r9, r4
 800821e:	4630      	mov	r0, r6
 8008220:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008224:	bfba      	itte	lt
 8008226:	461c      	movlt	r4, r3
 8008228:	2501      	movlt	r5, #1
 800822a:	2500      	movge	r5, #0
 800822c:	f7ff fd48 	bl	8007cc0 <_Balloc>
 8008230:	4602      	mov	r2, r0
 8008232:	b918      	cbnz	r0, 800823c <__mdiff+0x60>
 8008234:	4b31      	ldr	r3, [pc, #196]	@ (80082fc <__mdiff+0x120>)
 8008236:	f240 2145 	movw	r1, #581	@ 0x245
 800823a:	e7e3      	b.n	8008204 <__mdiff+0x28>
 800823c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008240:	6926      	ldr	r6, [r4, #16]
 8008242:	60c5      	str	r5, [r0, #12]
 8008244:	f109 0310 	add.w	r3, r9, #16
 8008248:	f109 0514 	add.w	r5, r9, #20
 800824c:	f104 0e14 	add.w	lr, r4, #20
 8008250:	f100 0b14 	add.w	fp, r0, #20
 8008254:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008258:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800825c:	9301      	str	r3, [sp, #4]
 800825e:	46d9      	mov	r9, fp
 8008260:	f04f 0c00 	mov.w	ip, #0
 8008264:	9b01      	ldr	r3, [sp, #4]
 8008266:	f85e 0b04 	ldr.w	r0, [lr], #4
 800826a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800826e:	9301      	str	r3, [sp, #4]
 8008270:	fa1f f38a 	uxth.w	r3, sl
 8008274:	4619      	mov	r1, r3
 8008276:	b283      	uxth	r3, r0
 8008278:	1acb      	subs	r3, r1, r3
 800827a:	0c00      	lsrs	r0, r0, #16
 800827c:	4463      	add	r3, ip
 800827e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008282:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008286:	b29b      	uxth	r3, r3
 8008288:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800828c:	4576      	cmp	r6, lr
 800828e:	f849 3b04 	str.w	r3, [r9], #4
 8008292:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008296:	d8e5      	bhi.n	8008264 <__mdiff+0x88>
 8008298:	1b33      	subs	r3, r6, r4
 800829a:	3b15      	subs	r3, #21
 800829c:	f023 0303 	bic.w	r3, r3, #3
 80082a0:	3415      	adds	r4, #21
 80082a2:	3304      	adds	r3, #4
 80082a4:	42a6      	cmp	r6, r4
 80082a6:	bf38      	it	cc
 80082a8:	2304      	movcc	r3, #4
 80082aa:	441d      	add	r5, r3
 80082ac:	445b      	add	r3, fp
 80082ae:	461e      	mov	r6, r3
 80082b0:	462c      	mov	r4, r5
 80082b2:	4544      	cmp	r4, r8
 80082b4:	d30e      	bcc.n	80082d4 <__mdiff+0xf8>
 80082b6:	f108 0103 	add.w	r1, r8, #3
 80082ba:	1b49      	subs	r1, r1, r5
 80082bc:	f021 0103 	bic.w	r1, r1, #3
 80082c0:	3d03      	subs	r5, #3
 80082c2:	45a8      	cmp	r8, r5
 80082c4:	bf38      	it	cc
 80082c6:	2100      	movcc	r1, #0
 80082c8:	440b      	add	r3, r1
 80082ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082ce:	b191      	cbz	r1, 80082f6 <__mdiff+0x11a>
 80082d0:	6117      	str	r7, [r2, #16]
 80082d2:	e79d      	b.n	8008210 <__mdiff+0x34>
 80082d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80082d8:	46e6      	mov	lr, ip
 80082da:	0c08      	lsrs	r0, r1, #16
 80082dc:	fa1c fc81 	uxtah	ip, ip, r1
 80082e0:	4471      	add	r1, lr
 80082e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80082e6:	b289      	uxth	r1, r1
 80082e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80082ec:	f846 1b04 	str.w	r1, [r6], #4
 80082f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082f4:	e7dd      	b.n	80082b2 <__mdiff+0xd6>
 80082f6:	3f01      	subs	r7, #1
 80082f8:	e7e7      	b.n	80082ca <__mdiff+0xee>
 80082fa:	bf00      	nop
 80082fc:	08008c60 	.word	0x08008c60
 8008300:	08008c71 	.word	0x08008c71

08008304 <__d2b>:
 8008304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008308:	460f      	mov	r7, r1
 800830a:	2101      	movs	r1, #1
 800830c:	ec59 8b10 	vmov	r8, r9, d0
 8008310:	4616      	mov	r6, r2
 8008312:	f7ff fcd5 	bl	8007cc0 <_Balloc>
 8008316:	4604      	mov	r4, r0
 8008318:	b930      	cbnz	r0, 8008328 <__d2b+0x24>
 800831a:	4602      	mov	r2, r0
 800831c:	4b23      	ldr	r3, [pc, #140]	@ (80083ac <__d2b+0xa8>)
 800831e:	4824      	ldr	r0, [pc, #144]	@ (80083b0 <__d2b+0xac>)
 8008320:	f240 310f 	movw	r1, #783	@ 0x30f
 8008324:	f000 fad6 	bl	80088d4 <__assert_func>
 8008328:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800832c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008330:	b10d      	cbz	r5, 8008336 <__d2b+0x32>
 8008332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008336:	9301      	str	r3, [sp, #4]
 8008338:	f1b8 0300 	subs.w	r3, r8, #0
 800833c:	d023      	beq.n	8008386 <__d2b+0x82>
 800833e:	4668      	mov	r0, sp
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	f7ff fd84 	bl	8007e4e <__lo0bits>
 8008346:	e9dd 1200 	ldrd	r1, r2, [sp]
 800834a:	b1d0      	cbz	r0, 8008382 <__d2b+0x7e>
 800834c:	f1c0 0320 	rsb	r3, r0, #32
 8008350:	fa02 f303 	lsl.w	r3, r2, r3
 8008354:	430b      	orrs	r3, r1
 8008356:	40c2      	lsrs	r2, r0
 8008358:	6163      	str	r3, [r4, #20]
 800835a:	9201      	str	r2, [sp, #4]
 800835c:	9b01      	ldr	r3, [sp, #4]
 800835e:	61a3      	str	r3, [r4, #24]
 8008360:	2b00      	cmp	r3, #0
 8008362:	bf0c      	ite	eq
 8008364:	2201      	moveq	r2, #1
 8008366:	2202      	movne	r2, #2
 8008368:	6122      	str	r2, [r4, #16]
 800836a:	b1a5      	cbz	r5, 8008396 <__d2b+0x92>
 800836c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008370:	4405      	add	r5, r0
 8008372:	603d      	str	r5, [r7, #0]
 8008374:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008378:	6030      	str	r0, [r6, #0]
 800837a:	4620      	mov	r0, r4
 800837c:	b003      	add	sp, #12
 800837e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008382:	6161      	str	r1, [r4, #20]
 8008384:	e7ea      	b.n	800835c <__d2b+0x58>
 8008386:	a801      	add	r0, sp, #4
 8008388:	f7ff fd61 	bl	8007e4e <__lo0bits>
 800838c:	9b01      	ldr	r3, [sp, #4]
 800838e:	6163      	str	r3, [r4, #20]
 8008390:	3020      	adds	r0, #32
 8008392:	2201      	movs	r2, #1
 8008394:	e7e8      	b.n	8008368 <__d2b+0x64>
 8008396:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800839a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800839e:	6038      	str	r0, [r7, #0]
 80083a0:	6918      	ldr	r0, [r3, #16]
 80083a2:	f7ff fd35 	bl	8007e10 <__hi0bits>
 80083a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80083aa:	e7e5      	b.n	8008378 <__d2b+0x74>
 80083ac:	08008c60 	.word	0x08008c60
 80083b0:	08008c71 	.word	0x08008c71

080083b4 <__sfputc_r>:
 80083b4:	6893      	ldr	r3, [r2, #8]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	b410      	push	{r4}
 80083bc:	6093      	str	r3, [r2, #8]
 80083be:	da08      	bge.n	80083d2 <__sfputc_r+0x1e>
 80083c0:	6994      	ldr	r4, [r2, #24]
 80083c2:	42a3      	cmp	r3, r4
 80083c4:	db01      	blt.n	80083ca <__sfputc_r+0x16>
 80083c6:	290a      	cmp	r1, #10
 80083c8:	d103      	bne.n	80083d2 <__sfputc_r+0x1e>
 80083ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083ce:	f7fe bc0a 	b.w	8006be6 <__swbuf_r>
 80083d2:	6813      	ldr	r3, [r2, #0]
 80083d4:	1c58      	adds	r0, r3, #1
 80083d6:	6010      	str	r0, [r2, #0]
 80083d8:	7019      	strb	r1, [r3, #0]
 80083da:	4608      	mov	r0, r1
 80083dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <__sfputs_r>:
 80083e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e4:	4606      	mov	r6, r0
 80083e6:	460f      	mov	r7, r1
 80083e8:	4614      	mov	r4, r2
 80083ea:	18d5      	adds	r5, r2, r3
 80083ec:	42ac      	cmp	r4, r5
 80083ee:	d101      	bne.n	80083f4 <__sfputs_r+0x12>
 80083f0:	2000      	movs	r0, #0
 80083f2:	e007      	b.n	8008404 <__sfputs_r+0x22>
 80083f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f8:	463a      	mov	r2, r7
 80083fa:	4630      	mov	r0, r6
 80083fc:	f7ff ffda 	bl	80083b4 <__sfputc_r>
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	d1f3      	bne.n	80083ec <__sfputs_r+0xa>
 8008404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008408 <_vfiprintf_r>:
 8008408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840c:	460d      	mov	r5, r1
 800840e:	b09d      	sub	sp, #116	@ 0x74
 8008410:	4614      	mov	r4, r2
 8008412:	4698      	mov	r8, r3
 8008414:	4606      	mov	r6, r0
 8008416:	b118      	cbz	r0, 8008420 <_vfiprintf_r+0x18>
 8008418:	6a03      	ldr	r3, [r0, #32]
 800841a:	b90b      	cbnz	r3, 8008420 <_vfiprintf_r+0x18>
 800841c:	f7fe fafa 	bl	8006a14 <__sinit>
 8008420:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008422:	07d9      	lsls	r1, r3, #31
 8008424:	d405      	bmi.n	8008432 <_vfiprintf_r+0x2a>
 8008426:	89ab      	ldrh	r3, [r5, #12]
 8008428:	059a      	lsls	r2, r3, #22
 800842a:	d402      	bmi.n	8008432 <_vfiprintf_r+0x2a>
 800842c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800842e:	f7fe fcec 	bl	8006e0a <__retarget_lock_acquire_recursive>
 8008432:	89ab      	ldrh	r3, [r5, #12]
 8008434:	071b      	lsls	r3, r3, #28
 8008436:	d501      	bpl.n	800843c <_vfiprintf_r+0x34>
 8008438:	692b      	ldr	r3, [r5, #16]
 800843a:	b99b      	cbnz	r3, 8008464 <_vfiprintf_r+0x5c>
 800843c:	4629      	mov	r1, r5
 800843e:	4630      	mov	r0, r6
 8008440:	f7fe fc10 	bl	8006c64 <__swsetup_r>
 8008444:	b170      	cbz	r0, 8008464 <_vfiprintf_r+0x5c>
 8008446:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008448:	07dc      	lsls	r4, r3, #31
 800844a:	d504      	bpl.n	8008456 <_vfiprintf_r+0x4e>
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	b01d      	add	sp, #116	@ 0x74
 8008452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008456:	89ab      	ldrh	r3, [r5, #12]
 8008458:	0598      	lsls	r0, r3, #22
 800845a:	d4f7      	bmi.n	800844c <_vfiprintf_r+0x44>
 800845c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800845e:	f7fe fcd5 	bl	8006e0c <__retarget_lock_release_recursive>
 8008462:	e7f3      	b.n	800844c <_vfiprintf_r+0x44>
 8008464:	2300      	movs	r3, #0
 8008466:	9309      	str	r3, [sp, #36]	@ 0x24
 8008468:	2320      	movs	r3, #32
 800846a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800846e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008472:	2330      	movs	r3, #48	@ 0x30
 8008474:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008624 <_vfiprintf_r+0x21c>
 8008478:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800847c:	f04f 0901 	mov.w	r9, #1
 8008480:	4623      	mov	r3, r4
 8008482:	469a      	mov	sl, r3
 8008484:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008488:	b10a      	cbz	r2, 800848e <_vfiprintf_r+0x86>
 800848a:	2a25      	cmp	r2, #37	@ 0x25
 800848c:	d1f9      	bne.n	8008482 <_vfiprintf_r+0x7a>
 800848e:	ebba 0b04 	subs.w	fp, sl, r4
 8008492:	d00b      	beq.n	80084ac <_vfiprintf_r+0xa4>
 8008494:	465b      	mov	r3, fp
 8008496:	4622      	mov	r2, r4
 8008498:	4629      	mov	r1, r5
 800849a:	4630      	mov	r0, r6
 800849c:	f7ff ffa1 	bl	80083e2 <__sfputs_r>
 80084a0:	3001      	adds	r0, #1
 80084a2:	f000 80a7 	beq.w	80085f4 <_vfiprintf_r+0x1ec>
 80084a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084a8:	445a      	add	r2, fp
 80084aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80084ac:	f89a 3000 	ldrb.w	r3, [sl]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 809f 	beq.w	80085f4 <_vfiprintf_r+0x1ec>
 80084b6:	2300      	movs	r3, #0
 80084b8:	f04f 32ff 	mov.w	r2, #4294967295
 80084bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084c0:	f10a 0a01 	add.w	sl, sl, #1
 80084c4:	9304      	str	r3, [sp, #16]
 80084c6:	9307      	str	r3, [sp, #28]
 80084c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80084ce:	4654      	mov	r4, sl
 80084d0:	2205      	movs	r2, #5
 80084d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084d6:	4853      	ldr	r0, [pc, #332]	@ (8008624 <_vfiprintf_r+0x21c>)
 80084d8:	f7f7 fe52 	bl	8000180 <memchr>
 80084dc:	9a04      	ldr	r2, [sp, #16]
 80084de:	b9d8      	cbnz	r0, 8008518 <_vfiprintf_r+0x110>
 80084e0:	06d1      	lsls	r1, r2, #27
 80084e2:	bf44      	itt	mi
 80084e4:	2320      	movmi	r3, #32
 80084e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084ea:	0713      	lsls	r3, r2, #28
 80084ec:	bf44      	itt	mi
 80084ee:	232b      	movmi	r3, #43	@ 0x2b
 80084f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084f4:	f89a 3000 	ldrb.w	r3, [sl]
 80084f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80084fa:	d015      	beq.n	8008528 <_vfiprintf_r+0x120>
 80084fc:	9a07      	ldr	r2, [sp, #28]
 80084fe:	4654      	mov	r4, sl
 8008500:	2000      	movs	r0, #0
 8008502:	f04f 0c0a 	mov.w	ip, #10
 8008506:	4621      	mov	r1, r4
 8008508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800850c:	3b30      	subs	r3, #48	@ 0x30
 800850e:	2b09      	cmp	r3, #9
 8008510:	d94b      	bls.n	80085aa <_vfiprintf_r+0x1a2>
 8008512:	b1b0      	cbz	r0, 8008542 <_vfiprintf_r+0x13a>
 8008514:	9207      	str	r2, [sp, #28]
 8008516:	e014      	b.n	8008542 <_vfiprintf_r+0x13a>
 8008518:	eba0 0308 	sub.w	r3, r0, r8
 800851c:	fa09 f303 	lsl.w	r3, r9, r3
 8008520:	4313      	orrs	r3, r2
 8008522:	9304      	str	r3, [sp, #16]
 8008524:	46a2      	mov	sl, r4
 8008526:	e7d2      	b.n	80084ce <_vfiprintf_r+0xc6>
 8008528:	9b03      	ldr	r3, [sp, #12]
 800852a:	1d19      	adds	r1, r3, #4
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	9103      	str	r1, [sp, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	bfbb      	ittet	lt
 8008534:	425b      	neglt	r3, r3
 8008536:	f042 0202 	orrlt.w	r2, r2, #2
 800853a:	9307      	strge	r3, [sp, #28]
 800853c:	9307      	strlt	r3, [sp, #28]
 800853e:	bfb8      	it	lt
 8008540:	9204      	strlt	r2, [sp, #16]
 8008542:	7823      	ldrb	r3, [r4, #0]
 8008544:	2b2e      	cmp	r3, #46	@ 0x2e
 8008546:	d10a      	bne.n	800855e <_vfiprintf_r+0x156>
 8008548:	7863      	ldrb	r3, [r4, #1]
 800854a:	2b2a      	cmp	r3, #42	@ 0x2a
 800854c:	d132      	bne.n	80085b4 <_vfiprintf_r+0x1ac>
 800854e:	9b03      	ldr	r3, [sp, #12]
 8008550:	1d1a      	adds	r2, r3, #4
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	9203      	str	r2, [sp, #12]
 8008556:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800855a:	3402      	adds	r4, #2
 800855c:	9305      	str	r3, [sp, #20]
 800855e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008634 <_vfiprintf_r+0x22c>
 8008562:	7821      	ldrb	r1, [r4, #0]
 8008564:	2203      	movs	r2, #3
 8008566:	4650      	mov	r0, sl
 8008568:	f7f7 fe0a 	bl	8000180 <memchr>
 800856c:	b138      	cbz	r0, 800857e <_vfiprintf_r+0x176>
 800856e:	9b04      	ldr	r3, [sp, #16]
 8008570:	eba0 000a 	sub.w	r0, r0, sl
 8008574:	2240      	movs	r2, #64	@ 0x40
 8008576:	4082      	lsls	r2, r0
 8008578:	4313      	orrs	r3, r2
 800857a:	3401      	adds	r4, #1
 800857c:	9304      	str	r3, [sp, #16]
 800857e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008582:	4829      	ldr	r0, [pc, #164]	@ (8008628 <_vfiprintf_r+0x220>)
 8008584:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008588:	2206      	movs	r2, #6
 800858a:	f7f7 fdf9 	bl	8000180 <memchr>
 800858e:	2800      	cmp	r0, #0
 8008590:	d03f      	beq.n	8008612 <_vfiprintf_r+0x20a>
 8008592:	4b26      	ldr	r3, [pc, #152]	@ (800862c <_vfiprintf_r+0x224>)
 8008594:	bb1b      	cbnz	r3, 80085de <_vfiprintf_r+0x1d6>
 8008596:	9b03      	ldr	r3, [sp, #12]
 8008598:	3307      	adds	r3, #7
 800859a:	f023 0307 	bic.w	r3, r3, #7
 800859e:	3308      	adds	r3, #8
 80085a0:	9303      	str	r3, [sp, #12]
 80085a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a4:	443b      	add	r3, r7
 80085a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80085a8:	e76a      	b.n	8008480 <_vfiprintf_r+0x78>
 80085aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80085ae:	460c      	mov	r4, r1
 80085b0:	2001      	movs	r0, #1
 80085b2:	e7a8      	b.n	8008506 <_vfiprintf_r+0xfe>
 80085b4:	2300      	movs	r3, #0
 80085b6:	3401      	adds	r4, #1
 80085b8:	9305      	str	r3, [sp, #20]
 80085ba:	4619      	mov	r1, r3
 80085bc:	f04f 0c0a 	mov.w	ip, #10
 80085c0:	4620      	mov	r0, r4
 80085c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085c6:	3a30      	subs	r2, #48	@ 0x30
 80085c8:	2a09      	cmp	r2, #9
 80085ca:	d903      	bls.n	80085d4 <_vfiprintf_r+0x1cc>
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0c6      	beq.n	800855e <_vfiprintf_r+0x156>
 80085d0:	9105      	str	r1, [sp, #20]
 80085d2:	e7c4      	b.n	800855e <_vfiprintf_r+0x156>
 80085d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80085d8:	4604      	mov	r4, r0
 80085da:	2301      	movs	r3, #1
 80085dc:	e7f0      	b.n	80085c0 <_vfiprintf_r+0x1b8>
 80085de:	ab03      	add	r3, sp, #12
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	462a      	mov	r2, r5
 80085e4:	4b12      	ldr	r3, [pc, #72]	@ (8008630 <_vfiprintf_r+0x228>)
 80085e6:	a904      	add	r1, sp, #16
 80085e8:	4630      	mov	r0, r6
 80085ea:	f7fd fdd1 	bl	8006190 <_printf_float>
 80085ee:	4607      	mov	r7, r0
 80085f0:	1c78      	adds	r0, r7, #1
 80085f2:	d1d6      	bne.n	80085a2 <_vfiprintf_r+0x19a>
 80085f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085f6:	07d9      	lsls	r1, r3, #31
 80085f8:	d405      	bmi.n	8008606 <_vfiprintf_r+0x1fe>
 80085fa:	89ab      	ldrh	r3, [r5, #12]
 80085fc:	059a      	lsls	r2, r3, #22
 80085fe:	d402      	bmi.n	8008606 <_vfiprintf_r+0x1fe>
 8008600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008602:	f7fe fc03 	bl	8006e0c <__retarget_lock_release_recursive>
 8008606:	89ab      	ldrh	r3, [r5, #12]
 8008608:	065b      	lsls	r3, r3, #25
 800860a:	f53f af1f 	bmi.w	800844c <_vfiprintf_r+0x44>
 800860e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008610:	e71e      	b.n	8008450 <_vfiprintf_r+0x48>
 8008612:	ab03      	add	r3, sp, #12
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	462a      	mov	r2, r5
 8008618:	4b05      	ldr	r3, [pc, #20]	@ (8008630 <_vfiprintf_r+0x228>)
 800861a:	a904      	add	r1, sp, #16
 800861c:	4630      	mov	r0, r6
 800861e:	f7fe f84f 	bl	80066c0 <_printf_i>
 8008622:	e7e4      	b.n	80085ee <_vfiprintf_r+0x1e6>
 8008624:	08008cca 	.word	0x08008cca
 8008628:	08008cd4 	.word	0x08008cd4
 800862c:	08006191 	.word	0x08006191
 8008630:	080083e3 	.word	0x080083e3
 8008634:	08008cd0 	.word	0x08008cd0

08008638 <__sflush_r>:
 8008638:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800863c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008640:	0716      	lsls	r6, r2, #28
 8008642:	4605      	mov	r5, r0
 8008644:	460c      	mov	r4, r1
 8008646:	d454      	bmi.n	80086f2 <__sflush_r+0xba>
 8008648:	684b      	ldr	r3, [r1, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	dc02      	bgt.n	8008654 <__sflush_r+0x1c>
 800864e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008650:	2b00      	cmp	r3, #0
 8008652:	dd48      	ble.n	80086e6 <__sflush_r+0xae>
 8008654:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008656:	2e00      	cmp	r6, #0
 8008658:	d045      	beq.n	80086e6 <__sflush_r+0xae>
 800865a:	2300      	movs	r3, #0
 800865c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008660:	682f      	ldr	r7, [r5, #0]
 8008662:	6a21      	ldr	r1, [r4, #32]
 8008664:	602b      	str	r3, [r5, #0]
 8008666:	d030      	beq.n	80086ca <__sflush_r+0x92>
 8008668:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800866a:	89a3      	ldrh	r3, [r4, #12]
 800866c:	0759      	lsls	r1, r3, #29
 800866e:	d505      	bpl.n	800867c <__sflush_r+0x44>
 8008670:	6863      	ldr	r3, [r4, #4]
 8008672:	1ad2      	subs	r2, r2, r3
 8008674:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008676:	b10b      	cbz	r3, 800867c <__sflush_r+0x44>
 8008678:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800867a:	1ad2      	subs	r2, r2, r3
 800867c:	2300      	movs	r3, #0
 800867e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008680:	6a21      	ldr	r1, [r4, #32]
 8008682:	4628      	mov	r0, r5
 8008684:	47b0      	blx	r6
 8008686:	1c43      	adds	r3, r0, #1
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	d106      	bne.n	800869a <__sflush_r+0x62>
 800868c:	6829      	ldr	r1, [r5, #0]
 800868e:	291d      	cmp	r1, #29
 8008690:	d82b      	bhi.n	80086ea <__sflush_r+0xb2>
 8008692:	4a2a      	ldr	r2, [pc, #168]	@ (800873c <__sflush_r+0x104>)
 8008694:	40ca      	lsrs	r2, r1
 8008696:	07d6      	lsls	r6, r2, #31
 8008698:	d527      	bpl.n	80086ea <__sflush_r+0xb2>
 800869a:	2200      	movs	r2, #0
 800869c:	6062      	str	r2, [r4, #4]
 800869e:	04d9      	lsls	r1, r3, #19
 80086a0:	6922      	ldr	r2, [r4, #16]
 80086a2:	6022      	str	r2, [r4, #0]
 80086a4:	d504      	bpl.n	80086b0 <__sflush_r+0x78>
 80086a6:	1c42      	adds	r2, r0, #1
 80086a8:	d101      	bne.n	80086ae <__sflush_r+0x76>
 80086aa:	682b      	ldr	r3, [r5, #0]
 80086ac:	b903      	cbnz	r3, 80086b0 <__sflush_r+0x78>
 80086ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80086b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086b2:	602f      	str	r7, [r5, #0]
 80086b4:	b1b9      	cbz	r1, 80086e6 <__sflush_r+0xae>
 80086b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086ba:	4299      	cmp	r1, r3
 80086bc:	d002      	beq.n	80086c4 <__sflush_r+0x8c>
 80086be:	4628      	mov	r0, r5
 80086c0:	f7ff f9fe 	bl	8007ac0 <_free_r>
 80086c4:	2300      	movs	r3, #0
 80086c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80086c8:	e00d      	b.n	80086e6 <__sflush_r+0xae>
 80086ca:	2301      	movs	r3, #1
 80086cc:	4628      	mov	r0, r5
 80086ce:	47b0      	blx	r6
 80086d0:	4602      	mov	r2, r0
 80086d2:	1c50      	adds	r0, r2, #1
 80086d4:	d1c9      	bne.n	800866a <__sflush_r+0x32>
 80086d6:	682b      	ldr	r3, [r5, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0c6      	beq.n	800866a <__sflush_r+0x32>
 80086dc:	2b1d      	cmp	r3, #29
 80086de:	d001      	beq.n	80086e4 <__sflush_r+0xac>
 80086e0:	2b16      	cmp	r3, #22
 80086e2:	d11e      	bne.n	8008722 <__sflush_r+0xea>
 80086e4:	602f      	str	r7, [r5, #0]
 80086e6:	2000      	movs	r0, #0
 80086e8:	e022      	b.n	8008730 <__sflush_r+0xf8>
 80086ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ee:	b21b      	sxth	r3, r3
 80086f0:	e01b      	b.n	800872a <__sflush_r+0xf2>
 80086f2:	690f      	ldr	r7, [r1, #16]
 80086f4:	2f00      	cmp	r7, #0
 80086f6:	d0f6      	beq.n	80086e6 <__sflush_r+0xae>
 80086f8:	0793      	lsls	r3, r2, #30
 80086fa:	680e      	ldr	r6, [r1, #0]
 80086fc:	bf08      	it	eq
 80086fe:	694b      	ldreq	r3, [r1, #20]
 8008700:	600f      	str	r7, [r1, #0]
 8008702:	bf18      	it	ne
 8008704:	2300      	movne	r3, #0
 8008706:	eba6 0807 	sub.w	r8, r6, r7
 800870a:	608b      	str	r3, [r1, #8]
 800870c:	f1b8 0f00 	cmp.w	r8, #0
 8008710:	dde9      	ble.n	80086e6 <__sflush_r+0xae>
 8008712:	6a21      	ldr	r1, [r4, #32]
 8008714:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008716:	4643      	mov	r3, r8
 8008718:	463a      	mov	r2, r7
 800871a:	4628      	mov	r0, r5
 800871c:	47b0      	blx	r6
 800871e:	2800      	cmp	r0, #0
 8008720:	dc08      	bgt.n	8008734 <__sflush_r+0xfc>
 8008722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800872a:	81a3      	strh	r3, [r4, #12]
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008734:	4407      	add	r7, r0
 8008736:	eba8 0800 	sub.w	r8, r8, r0
 800873a:	e7e7      	b.n	800870c <__sflush_r+0xd4>
 800873c:	20400001 	.word	0x20400001

08008740 <_fflush_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	690b      	ldr	r3, [r1, #16]
 8008744:	4605      	mov	r5, r0
 8008746:	460c      	mov	r4, r1
 8008748:	b913      	cbnz	r3, 8008750 <_fflush_r+0x10>
 800874a:	2500      	movs	r5, #0
 800874c:	4628      	mov	r0, r5
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	b118      	cbz	r0, 800875a <_fflush_r+0x1a>
 8008752:	6a03      	ldr	r3, [r0, #32]
 8008754:	b90b      	cbnz	r3, 800875a <_fflush_r+0x1a>
 8008756:	f7fe f95d 	bl	8006a14 <__sinit>
 800875a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d0f3      	beq.n	800874a <_fflush_r+0xa>
 8008762:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008764:	07d0      	lsls	r0, r2, #31
 8008766:	d404      	bmi.n	8008772 <_fflush_r+0x32>
 8008768:	0599      	lsls	r1, r3, #22
 800876a:	d402      	bmi.n	8008772 <_fflush_r+0x32>
 800876c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800876e:	f7fe fb4c 	bl	8006e0a <__retarget_lock_acquire_recursive>
 8008772:	4628      	mov	r0, r5
 8008774:	4621      	mov	r1, r4
 8008776:	f7ff ff5f 	bl	8008638 <__sflush_r>
 800877a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800877c:	07da      	lsls	r2, r3, #31
 800877e:	4605      	mov	r5, r0
 8008780:	d4e4      	bmi.n	800874c <_fflush_r+0xc>
 8008782:	89a3      	ldrh	r3, [r4, #12]
 8008784:	059b      	lsls	r3, r3, #22
 8008786:	d4e1      	bmi.n	800874c <_fflush_r+0xc>
 8008788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800878a:	f7fe fb3f 	bl	8006e0c <__retarget_lock_release_recursive>
 800878e:	e7dd      	b.n	800874c <_fflush_r+0xc>

08008790 <__swhatbuf_r>:
 8008790:	b570      	push	{r4, r5, r6, lr}
 8008792:	460c      	mov	r4, r1
 8008794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008798:	2900      	cmp	r1, #0
 800879a:	b096      	sub	sp, #88	@ 0x58
 800879c:	4615      	mov	r5, r2
 800879e:	461e      	mov	r6, r3
 80087a0:	da0d      	bge.n	80087be <__swhatbuf_r+0x2e>
 80087a2:	89a3      	ldrh	r3, [r4, #12]
 80087a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80087a8:	f04f 0100 	mov.w	r1, #0
 80087ac:	bf14      	ite	ne
 80087ae:	2340      	movne	r3, #64	@ 0x40
 80087b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80087b4:	2000      	movs	r0, #0
 80087b6:	6031      	str	r1, [r6, #0]
 80087b8:	602b      	str	r3, [r5, #0]
 80087ba:	b016      	add	sp, #88	@ 0x58
 80087bc:	bd70      	pop	{r4, r5, r6, pc}
 80087be:	466a      	mov	r2, sp
 80087c0:	f000 f848 	bl	8008854 <_fstat_r>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	dbec      	blt.n	80087a2 <__swhatbuf_r+0x12>
 80087c8:	9901      	ldr	r1, [sp, #4]
 80087ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80087ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80087d2:	4259      	negs	r1, r3
 80087d4:	4159      	adcs	r1, r3
 80087d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087da:	e7eb      	b.n	80087b4 <__swhatbuf_r+0x24>

080087dc <__smakebuf_r>:
 80087dc:	898b      	ldrh	r3, [r1, #12]
 80087de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087e0:	079d      	lsls	r5, r3, #30
 80087e2:	4606      	mov	r6, r0
 80087e4:	460c      	mov	r4, r1
 80087e6:	d507      	bpl.n	80087f8 <__smakebuf_r+0x1c>
 80087e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80087ec:	6023      	str	r3, [r4, #0]
 80087ee:	6123      	str	r3, [r4, #16]
 80087f0:	2301      	movs	r3, #1
 80087f2:	6163      	str	r3, [r4, #20]
 80087f4:	b003      	add	sp, #12
 80087f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087f8:	ab01      	add	r3, sp, #4
 80087fa:	466a      	mov	r2, sp
 80087fc:	f7ff ffc8 	bl	8008790 <__swhatbuf_r>
 8008800:	9f00      	ldr	r7, [sp, #0]
 8008802:	4605      	mov	r5, r0
 8008804:	4639      	mov	r1, r7
 8008806:	4630      	mov	r0, r6
 8008808:	f7ff f9ce 	bl	8007ba8 <_malloc_r>
 800880c:	b948      	cbnz	r0, 8008822 <__smakebuf_r+0x46>
 800880e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008812:	059a      	lsls	r2, r3, #22
 8008814:	d4ee      	bmi.n	80087f4 <__smakebuf_r+0x18>
 8008816:	f023 0303 	bic.w	r3, r3, #3
 800881a:	f043 0302 	orr.w	r3, r3, #2
 800881e:	81a3      	strh	r3, [r4, #12]
 8008820:	e7e2      	b.n	80087e8 <__smakebuf_r+0xc>
 8008822:	89a3      	ldrh	r3, [r4, #12]
 8008824:	6020      	str	r0, [r4, #0]
 8008826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800882a:	81a3      	strh	r3, [r4, #12]
 800882c:	9b01      	ldr	r3, [sp, #4]
 800882e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008832:	b15b      	cbz	r3, 800884c <__smakebuf_r+0x70>
 8008834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008838:	4630      	mov	r0, r6
 800883a:	f000 f81d 	bl	8008878 <_isatty_r>
 800883e:	b128      	cbz	r0, 800884c <__smakebuf_r+0x70>
 8008840:	89a3      	ldrh	r3, [r4, #12]
 8008842:	f023 0303 	bic.w	r3, r3, #3
 8008846:	f043 0301 	orr.w	r3, r3, #1
 800884a:	81a3      	strh	r3, [r4, #12]
 800884c:	89a3      	ldrh	r3, [r4, #12]
 800884e:	431d      	orrs	r5, r3
 8008850:	81a5      	strh	r5, [r4, #12]
 8008852:	e7cf      	b.n	80087f4 <__smakebuf_r+0x18>

08008854 <_fstat_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4d07      	ldr	r5, [pc, #28]	@ (8008874 <_fstat_r+0x20>)
 8008858:	2300      	movs	r3, #0
 800885a:	4604      	mov	r4, r0
 800885c:	4608      	mov	r0, r1
 800885e:	4611      	mov	r1, r2
 8008860:	602b      	str	r3, [r5, #0]
 8008862:	f7f8 ff18 	bl	8001696 <_fstat>
 8008866:	1c43      	adds	r3, r0, #1
 8008868:	d102      	bne.n	8008870 <_fstat_r+0x1c>
 800886a:	682b      	ldr	r3, [r5, #0]
 800886c:	b103      	cbz	r3, 8008870 <_fstat_r+0x1c>
 800886e:	6023      	str	r3, [r4, #0]
 8008870:	bd38      	pop	{r3, r4, r5, pc}
 8008872:	bf00      	nop
 8008874:	2000054c 	.word	0x2000054c

08008878 <_isatty_r>:
 8008878:	b538      	push	{r3, r4, r5, lr}
 800887a:	4d06      	ldr	r5, [pc, #24]	@ (8008894 <_isatty_r+0x1c>)
 800887c:	2300      	movs	r3, #0
 800887e:	4604      	mov	r4, r0
 8008880:	4608      	mov	r0, r1
 8008882:	602b      	str	r3, [r5, #0]
 8008884:	f7f8 ff17 	bl	80016b6 <_isatty>
 8008888:	1c43      	adds	r3, r0, #1
 800888a:	d102      	bne.n	8008892 <_isatty_r+0x1a>
 800888c:	682b      	ldr	r3, [r5, #0]
 800888e:	b103      	cbz	r3, 8008892 <_isatty_r+0x1a>
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	bd38      	pop	{r3, r4, r5, pc}
 8008894:	2000054c 	.word	0x2000054c

08008898 <_sbrk_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	4d06      	ldr	r5, [pc, #24]	@ (80088b4 <_sbrk_r+0x1c>)
 800889c:	2300      	movs	r3, #0
 800889e:	4604      	mov	r4, r0
 80088a0:	4608      	mov	r0, r1
 80088a2:	602b      	str	r3, [r5, #0]
 80088a4:	f7f8 ff20 	bl	80016e8 <_sbrk>
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	d102      	bne.n	80088b2 <_sbrk_r+0x1a>
 80088ac:	682b      	ldr	r3, [r5, #0]
 80088ae:	b103      	cbz	r3, 80088b2 <_sbrk_r+0x1a>
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	2000054c 	.word	0x2000054c

080088b8 <memcpy>:
 80088b8:	440a      	add	r2, r1
 80088ba:	4291      	cmp	r1, r2
 80088bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80088c0:	d100      	bne.n	80088c4 <memcpy+0xc>
 80088c2:	4770      	bx	lr
 80088c4:	b510      	push	{r4, lr}
 80088c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ce:	4291      	cmp	r1, r2
 80088d0:	d1f9      	bne.n	80088c6 <memcpy+0xe>
 80088d2:	bd10      	pop	{r4, pc}

080088d4 <__assert_func>:
 80088d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088d6:	4614      	mov	r4, r2
 80088d8:	461a      	mov	r2, r3
 80088da:	4b09      	ldr	r3, [pc, #36]	@ (8008900 <__assert_func+0x2c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4605      	mov	r5, r0
 80088e0:	68d8      	ldr	r0, [r3, #12]
 80088e2:	b14c      	cbz	r4, 80088f8 <__assert_func+0x24>
 80088e4:	4b07      	ldr	r3, [pc, #28]	@ (8008904 <__assert_func+0x30>)
 80088e6:	9100      	str	r1, [sp, #0]
 80088e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088ec:	4906      	ldr	r1, [pc, #24]	@ (8008908 <__assert_func+0x34>)
 80088ee:	462b      	mov	r3, r5
 80088f0:	f000 f842 	bl	8008978 <fiprintf>
 80088f4:	f000 f852 	bl	800899c <abort>
 80088f8:	4b04      	ldr	r3, [pc, #16]	@ (800890c <__assert_func+0x38>)
 80088fa:	461c      	mov	r4, r3
 80088fc:	e7f3      	b.n	80088e6 <__assert_func+0x12>
 80088fe:	bf00      	nop
 8008900:	2000003c 	.word	0x2000003c
 8008904:	08008ce5 	.word	0x08008ce5
 8008908:	08008cf2 	.word	0x08008cf2
 800890c:	08008d20 	.word	0x08008d20

08008910 <_calloc_r>:
 8008910:	b570      	push	{r4, r5, r6, lr}
 8008912:	fba1 5402 	umull	r5, r4, r1, r2
 8008916:	b934      	cbnz	r4, 8008926 <_calloc_r+0x16>
 8008918:	4629      	mov	r1, r5
 800891a:	f7ff f945 	bl	8007ba8 <_malloc_r>
 800891e:	4606      	mov	r6, r0
 8008920:	b928      	cbnz	r0, 800892e <_calloc_r+0x1e>
 8008922:	4630      	mov	r0, r6
 8008924:	bd70      	pop	{r4, r5, r6, pc}
 8008926:	220c      	movs	r2, #12
 8008928:	6002      	str	r2, [r0, #0]
 800892a:	2600      	movs	r6, #0
 800892c:	e7f9      	b.n	8008922 <_calloc_r+0x12>
 800892e:	462a      	mov	r2, r5
 8008930:	4621      	mov	r1, r4
 8008932:	f7fe f9ed 	bl	8006d10 <memset>
 8008936:	e7f4      	b.n	8008922 <_calloc_r+0x12>

08008938 <__ascii_mbtowc>:
 8008938:	b082      	sub	sp, #8
 800893a:	b901      	cbnz	r1, 800893e <__ascii_mbtowc+0x6>
 800893c:	a901      	add	r1, sp, #4
 800893e:	b142      	cbz	r2, 8008952 <__ascii_mbtowc+0x1a>
 8008940:	b14b      	cbz	r3, 8008956 <__ascii_mbtowc+0x1e>
 8008942:	7813      	ldrb	r3, [r2, #0]
 8008944:	600b      	str	r3, [r1, #0]
 8008946:	7812      	ldrb	r2, [r2, #0]
 8008948:	1e10      	subs	r0, r2, #0
 800894a:	bf18      	it	ne
 800894c:	2001      	movne	r0, #1
 800894e:	b002      	add	sp, #8
 8008950:	4770      	bx	lr
 8008952:	4610      	mov	r0, r2
 8008954:	e7fb      	b.n	800894e <__ascii_mbtowc+0x16>
 8008956:	f06f 0001 	mvn.w	r0, #1
 800895a:	e7f8      	b.n	800894e <__ascii_mbtowc+0x16>

0800895c <__ascii_wctomb>:
 800895c:	4603      	mov	r3, r0
 800895e:	4608      	mov	r0, r1
 8008960:	b141      	cbz	r1, 8008974 <__ascii_wctomb+0x18>
 8008962:	2aff      	cmp	r2, #255	@ 0xff
 8008964:	d904      	bls.n	8008970 <__ascii_wctomb+0x14>
 8008966:	228a      	movs	r2, #138	@ 0x8a
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	f04f 30ff 	mov.w	r0, #4294967295
 800896e:	4770      	bx	lr
 8008970:	700a      	strb	r2, [r1, #0]
 8008972:	2001      	movs	r0, #1
 8008974:	4770      	bx	lr
	...

08008978 <fiprintf>:
 8008978:	b40e      	push	{r1, r2, r3}
 800897a:	b503      	push	{r0, r1, lr}
 800897c:	4601      	mov	r1, r0
 800897e:	ab03      	add	r3, sp, #12
 8008980:	4805      	ldr	r0, [pc, #20]	@ (8008998 <fiprintf+0x20>)
 8008982:	f853 2b04 	ldr.w	r2, [r3], #4
 8008986:	6800      	ldr	r0, [r0, #0]
 8008988:	9301      	str	r3, [sp, #4]
 800898a:	f7ff fd3d 	bl	8008408 <_vfiprintf_r>
 800898e:	b002      	add	sp, #8
 8008990:	f85d eb04 	ldr.w	lr, [sp], #4
 8008994:	b003      	add	sp, #12
 8008996:	4770      	bx	lr
 8008998:	2000003c 	.word	0x2000003c

0800899c <abort>:
 800899c:	b508      	push	{r3, lr}
 800899e:	2006      	movs	r0, #6
 80089a0:	f000 f82c 	bl	80089fc <raise>
 80089a4:	2001      	movs	r0, #1
 80089a6:	f7f8 fe26 	bl	80015f6 <_exit>

080089aa <_raise_r>:
 80089aa:	291f      	cmp	r1, #31
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	4605      	mov	r5, r0
 80089b0:	460c      	mov	r4, r1
 80089b2:	d904      	bls.n	80089be <_raise_r+0x14>
 80089b4:	2316      	movs	r3, #22
 80089b6:	6003      	str	r3, [r0, #0]
 80089b8:	f04f 30ff 	mov.w	r0, #4294967295
 80089bc:	bd38      	pop	{r3, r4, r5, pc}
 80089be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80089c0:	b112      	cbz	r2, 80089c8 <_raise_r+0x1e>
 80089c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089c6:	b94b      	cbnz	r3, 80089dc <_raise_r+0x32>
 80089c8:	4628      	mov	r0, r5
 80089ca:	f000 f831 	bl	8008a30 <_getpid_r>
 80089ce:	4622      	mov	r2, r4
 80089d0:	4601      	mov	r1, r0
 80089d2:	4628      	mov	r0, r5
 80089d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089d8:	f000 b818 	b.w	8008a0c <_kill_r>
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d00a      	beq.n	80089f6 <_raise_r+0x4c>
 80089e0:	1c59      	adds	r1, r3, #1
 80089e2:	d103      	bne.n	80089ec <_raise_r+0x42>
 80089e4:	2316      	movs	r3, #22
 80089e6:	6003      	str	r3, [r0, #0]
 80089e8:	2001      	movs	r0, #1
 80089ea:	e7e7      	b.n	80089bc <_raise_r+0x12>
 80089ec:	2100      	movs	r1, #0
 80089ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80089f2:	4620      	mov	r0, r4
 80089f4:	4798      	blx	r3
 80089f6:	2000      	movs	r0, #0
 80089f8:	e7e0      	b.n	80089bc <_raise_r+0x12>
	...

080089fc <raise>:
 80089fc:	4b02      	ldr	r3, [pc, #8]	@ (8008a08 <raise+0xc>)
 80089fe:	4601      	mov	r1, r0
 8008a00:	6818      	ldr	r0, [r3, #0]
 8008a02:	f7ff bfd2 	b.w	80089aa <_raise_r>
 8008a06:	bf00      	nop
 8008a08:	2000003c 	.word	0x2000003c

08008a0c <_kill_r>:
 8008a0c:	b538      	push	{r3, r4, r5, lr}
 8008a0e:	4d07      	ldr	r5, [pc, #28]	@ (8008a2c <_kill_r+0x20>)
 8008a10:	2300      	movs	r3, #0
 8008a12:	4604      	mov	r4, r0
 8008a14:	4608      	mov	r0, r1
 8008a16:	4611      	mov	r1, r2
 8008a18:	602b      	str	r3, [r5, #0]
 8008a1a:	f7f8 fddc 	bl	80015d6 <_kill>
 8008a1e:	1c43      	adds	r3, r0, #1
 8008a20:	d102      	bne.n	8008a28 <_kill_r+0x1c>
 8008a22:	682b      	ldr	r3, [r5, #0]
 8008a24:	b103      	cbz	r3, 8008a28 <_kill_r+0x1c>
 8008a26:	6023      	str	r3, [r4, #0]
 8008a28:	bd38      	pop	{r3, r4, r5, pc}
 8008a2a:	bf00      	nop
 8008a2c:	2000054c 	.word	0x2000054c

08008a30 <_getpid_r>:
 8008a30:	f7f8 bdc9 	b.w	80015c6 <_getpid>

08008a34 <_init>:
 8008a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a36:	bf00      	nop
 8008a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3a:	bc08      	pop	{r3}
 8008a3c:	469e      	mov	lr, r3
 8008a3e:	4770      	bx	lr

08008a40 <_fini>:
 8008a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a42:	bf00      	nop
 8008a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a46:	bc08      	pop	{r3}
 8008a48:	469e      	mov	lr, r3
 8008a4a:	4770      	bx	lr
