
SeniorProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b6c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08007cb0  08007cb0  00008cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800816c  0800816c  0000916c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008174  08008174  00009174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008178  08008178  00009178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f0  20000008  0800817c  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000300  200001f8  0800836c  0000a1f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200004f8  0800836c  0000a4f8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000a1f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014786  00000000  00000000  0000a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a8a  00000000  00000000  0001e9ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001630  00000000  00000000  00021438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000010f8  00000000  00000000  00022a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000230e9  00000000  00000000  00023b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000149dd  00000000  00000000  00046c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000dba63  00000000  00000000  0005b626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00137089  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006da8  00000000  00000000  001370cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0013de74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f8 	.word	0x200001f8
 800015c:	00000000 	.word	0x00000000
 8000160:	08007c94 	.word	0x08007c94

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001fc 	.word	0x200001fc
 800017c:	08007c94 	.word	0x08007c94

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b988 	b.w	8000e80 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	468e      	mov	lr, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	4688      	mov	r8, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14a      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	d962      	bls.n	8000c64 <__udivmoddi4+0xdc>
 8000b9e:	fab2 f682 	clz	r6, r2
 8000ba2:	b14e      	cbz	r6, 8000bb8 <__udivmoddi4+0x30>
 8000ba4:	f1c6 0320 	rsb	r3, r6, #32
 8000ba8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bac:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb0:	40b7      	lsls	r7, r6
 8000bb2:	ea43 0808 	orr.w	r8, r3, r8
 8000bb6:	40b4      	lsls	r4, r6
 8000bb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bc4:	0c23      	lsrs	r3, r4, #16
 8000bc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bce:	fb01 f20c 	mul.w	r2, r1, ip
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0x62>
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bdc:	f080 80ea 	bcs.w	8000db4 <__udivmoddi4+0x22c>
 8000be0:	429a      	cmp	r2, r3
 8000be2:	f240 80e7 	bls.w	8000db4 <__udivmoddi4+0x22c>
 8000be6:	3902      	subs	r1, #2
 8000be8:	443b      	add	r3, r7
 8000bea:	1a9a      	subs	r2, r3, r2
 8000bec:	b2a3      	uxth	r3, r4
 8000bee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfe:	459c      	cmp	ip, r3
 8000c00:	d909      	bls.n	8000c16 <__udivmoddi4+0x8e>
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c08:	f080 80d6 	bcs.w	8000db8 <__udivmoddi4+0x230>
 8000c0c:	459c      	cmp	ip, r3
 8000c0e:	f240 80d3 	bls.w	8000db8 <__udivmoddi4+0x230>
 8000c12:	443b      	add	r3, r7
 8000c14:	3802      	subs	r0, #2
 8000c16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c1a:	eba3 030c 	sub.w	r3, r3, ip
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11d      	cbz	r5, 8000c2a <__udivmoddi4+0xa2>
 8000c22:	40f3      	lsrs	r3, r6
 8000c24:	2200      	movs	r2, #0
 8000c26:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d905      	bls.n	8000c3e <__udivmoddi4+0xb6>
 8000c32:	b10d      	cbz	r5, 8000c38 <__udivmoddi4+0xb0>
 8000c34:	e9c5 0100 	strd	r0, r1, [r5]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e7f5      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c3e:	fab3 f183 	clz	r1, r3
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d146      	bne.n	8000cd4 <__udivmoddi4+0x14c>
 8000c46:	4573      	cmp	r3, lr
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xc8>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 8105 	bhi.w	8000e5a <__udivmoddi4+0x2d2>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	4690      	mov	r8, r2
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0e5      	beq.n	8000c2a <__udivmoddi4+0xa2>
 8000c5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000c62:	e7e2      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	f000 8090 	beq.w	8000d8a <__udivmoddi4+0x202>
 8000c6a:	fab2 f682 	clz	r6, r2
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	f040 80a4 	bne.w	8000dbc <__udivmoddi4+0x234>
 8000c74:	1a8a      	subs	r2, r1, r2
 8000c76:	0c03      	lsrs	r3, r0, #16
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	b280      	uxth	r0, r0
 8000c7e:	b2bc      	uxth	r4, r7
 8000c80:	2101      	movs	r1, #1
 8000c82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x11e>
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x11c>
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	f200 80e0 	bhi.w	8000e64 <__udivmoddi4+0x2dc>
 8000ca4:	46c4      	mov	ip, r8
 8000ca6:	1a9b      	subs	r3, r3, r2
 8000ca8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cb0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cb4:	fb02 f404 	mul.w	r4, r2, r4
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x144>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x142>
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	f200 80ca 	bhi.w	8000e5e <__udivmoddi4+0x2d6>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0x98>
 8000cd4:	f1c1 0620 	rsb	r6, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 f706 	lsr.w	r7, r2, r6
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	fa0e f401 	lsl.w	r4, lr, r1
 8000ce4:	fa20 f306 	lsr.w	r3, r0, r6
 8000ce8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	fa1f fc87 	uxth.w	ip, r7
 8000cfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000cfe:	0c1c      	lsrs	r4, r3, #16
 8000d00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x1a0>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d1a:	f080 809c 	bcs.w	8000e56 <__udivmoddi4+0x2ce>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8099 	bls.w	8000e56 <__udivmoddi4+0x2ce>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	fa1f fe83 	uxth.w	lr, r3
 8000d30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d34:	fb09 4413 	mls	r4, r9, r3, r4
 8000d38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d40:	45a4      	cmp	ip, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x1ce>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d4a:	f080 8082 	bcs.w	8000e52 <__udivmoddi4+0x2ca>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	d97f      	bls.n	8000e52 <__udivmoddi4+0x2ca>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d5a:	eba4 040c 	sub.w	r4, r4, ip
 8000d5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d62:	4564      	cmp	r4, ip
 8000d64:	4673      	mov	r3, lr
 8000d66:	46e1      	mov	r9, ip
 8000d68:	d362      	bcc.n	8000e30 <__udivmoddi4+0x2a8>
 8000d6a:	d05f      	beq.n	8000e2c <__udivmoddi4+0x2a4>
 8000d6c:	b15d      	cbz	r5, 8000d86 <__udivmoddi4+0x1fe>
 8000d6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000d72:	eb64 0409 	sbc.w	r4, r4, r9
 8000d76:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d7e:	431e      	orrs	r6, r3
 8000d80:	40cc      	lsrs	r4, r1
 8000d82:	e9c5 6400 	strd	r6, r4, [r5]
 8000d86:	2100      	movs	r1, #0
 8000d88:	e74f      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000d8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d8e:	0c01      	lsrs	r1, r0, #16
 8000d90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d94:	b280      	uxth	r0, r0
 8000d96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4638      	mov	r0, r7
 8000d9e:	463c      	mov	r4, r7
 8000da0:	46b8      	mov	r8, r7
 8000da2:	46be      	mov	lr, r7
 8000da4:	2620      	movs	r6, #32
 8000da6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000daa:	eba2 0208 	sub.w	r2, r2, r8
 8000dae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000db2:	e766      	b.n	8000c82 <__udivmoddi4+0xfa>
 8000db4:	4601      	mov	r1, r0
 8000db6:	e718      	b.n	8000bea <__udivmoddi4+0x62>
 8000db8:	4610      	mov	r0, r2
 8000dba:	e72c      	b.n	8000c16 <__udivmoddi4+0x8e>
 8000dbc:	f1c6 0220 	rsb	r2, r6, #32
 8000dc0:	fa2e f302 	lsr.w	r3, lr, r2
 8000dc4:	40b7      	lsls	r7, r6
 8000dc6:	40b1      	lsls	r1, r6
 8000dc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dd6:	b2bc      	uxth	r4, r7
 8000dd8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ddc:	0c11      	lsrs	r1, r2, #16
 8000dde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de2:	fb08 f904 	mul.w	r9, r8, r4
 8000de6:	40b0      	lsls	r0, r6
 8000de8:	4589      	cmp	r9, r1
 8000dea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dee:	b280      	uxth	r0, r0
 8000df0:	d93e      	bls.n	8000e70 <__udivmoddi4+0x2e8>
 8000df2:	1879      	adds	r1, r7, r1
 8000df4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000df8:	d201      	bcs.n	8000dfe <__udivmoddi4+0x276>
 8000dfa:	4589      	cmp	r9, r1
 8000dfc:	d81f      	bhi.n	8000e3e <__udivmoddi4+0x2b6>
 8000dfe:	eba1 0109 	sub.w	r1, r1, r9
 8000e02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e06:	fb09 f804 	mul.w	r8, r9, r4
 8000e0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e0e:	b292      	uxth	r2, r2
 8000e10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e14:	4542      	cmp	r2, r8
 8000e16:	d229      	bcs.n	8000e6c <__udivmoddi4+0x2e4>
 8000e18:	18ba      	adds	r2, r7, r2
 8000e1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e1e:	d2c4      	bcs.n	8000daa <__udivmoddi4+0x222>
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d2c2      	bcs.n	8000daa <__udivmoddi4+0x222>
 8000e24:	f1a9 0102 	sub.w	r1, r9, #2
 8000e28:	443a      	add	r2, r7
 8000e2a:	e7be      	b.n	8000daa <__udivmoddi4+0x222>
 8000e2c:	45f0      	cmp	r8, lr
 8000e2e:	d29d      	bcs.n	8000d6c <__udivmoddi4+0x1e4>
 8000e30:	ebbe 0302 	subs.w	r3, lr, r2
 8000e34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e38:	3801      	subs	r0, #1
 8000e3a:	46e1      	mov	r9, ip
 8000e3c:	e796      	b.n	8000d6c <__udivmoddi4+0x1e4>
 8000e3e:	eba7 0909 	sub.w	r9, r7, r9
 8000e42:	4449      	add	r1, r9
 8000e44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4c:	fb09 f804 	mul.w	r8, r9, r4
 8000e50:	e7db      	b.n	8000e0a <__udivmoddi4+0x282>
 8000e52:	4673      	mov	r3, lr
 8000e54:	e77f      	b.n	8000d56 <__udivmoddi4+0x1ce>
 8000e56:	4650      	mov	r0, sl
 8000e58:	e766      	b.n	8000d28 <__udivmoddi4+0x1a0>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e6fd      	b.n	8000c5a <__udivmoddi4+0xd2>
 8000e5e:	443b      	add	r3, r7
 8000e60:	3a02      	subs	r2, #2
 8000e62:	e733      	b.n	8000ccc <__udivmoddi4+0x144>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	443b      	add	r3, r7
 8000e6a:	e71c      	b.n	8000ca6 <__udivmoddi4+0x11e>
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	e79c      	b.n	8000daa <__udivmoddi4+0x222>
 8000e70:	eba1 0109 	sub.w	r1, r1, r9
 8000e74:	46c4      	mov	ip, r8
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fb09 f804 	mul.w	r8, r9, r4
 8000e7e:	e7c4      	b.n	8000e0a <__udivmoddi4+0x282>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <read_temperature>:
/**
  * @brief  Reads the temperature from the TMP117 sensor.
  * @retval Temperature in °C as a float, or a specific error value if read fails.
  */
float read_temperature(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af04      	add	r7, sp, #16
    uint8_t tempData[2];

    // Read 2 bytes from the temperature register
    if (HAL_I2C_Mem_Read(&hi2c3, TMP117_ADDR, TMP117_TEMP_REG, I2C_MEMADD_SIZE_8BIT, tempData, 2, HAL_MAX_DELAY) != HAL_OK)
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	9302      	str	r3, [sp, #8]
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2190      	movs	r1, #144	@ 0x90
 8000ed2:	4813      	ldr	r0, [pc, #76]	@ (8000f20 <read_temperature+0x68>)
 8000ed4:	f001 f9b6 	bl	8002244 <HAL_I2C_Mem_Read>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d004      	beq.n	8000ee8 <read_temperature+0x30>
    {
        printf("TMP117 read error!\n");
 8000ede:	4811      	ldr	r0, [pc, #68]	@ (8000f24 <read_temperature+0x6c>)
 8000ee0:	f004 ff64 	bl	8005dac <puts>
        return -999.0f;  // Return a clearly erroneous value to indicate a failure
 8000ee4:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <read_temperature+0x70>)
 8000ee6:	e014      	b.n	8000f12 <read_temperature+0x5a>
    }

    // Combine the two bytes into a 16-bit value (big-endian format)
    int16_t rawTemp = (int16_t)((tempData[0] << 8) | tempData[1]);
 8000ee8:	793b      	ldrb	r3, [r7, #4]
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	b21a      	sxth	r2, r3
 8000ef0:	797b      	ldrb	r3, [r7, #5]
 8000ef2:	b21b      	sxth	r3, r3
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	81fb      	strh	r3, [r7, #14]

    // Convert the raw value to temperature in Celsius.
    // Each LSB represents 0.0078125°C
    float temperature = rawTemp * 0.0078125f;
 8000ef8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f04:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000f2c <read_temperature+0x74>
 8000f08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f0c:	edc7 7a02 	vstr	s15, [r7, #8]

    return temperature;
 8000f10:	68bb      	ldr	r3, [r7, #8]
}
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000224 	.word	0x20000224
 8000f24:	08007cb0 	.word	0x08007cb0
 8000f28:	c479c000 	.word	0xc479c000
 8000f2c:	3c000000 	.word	0x3c000000

08000f30 <main>:

int main(void)
{
 8000f30:	b5b0      	push	{r4, r5, r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f36:	f000 fda7 	bl	8001a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3a:	f000 f875 	bl	8001028 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f3e:	f000 f8cb 	bl	80010d8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 f975 	bl	8001230 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000f46:	f000 f8e5 	bl	8001114 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8000f4a:	f000 f923 	bl	8001194 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 fc42 	bl	80017d8 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f000 fc3f 	bl	80017d8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	f000 fc3c 	bl	80017d8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000f60:	2101      	movs	r1, #1
 8000f62:	2000      	movs	r0, #0
 8000f64:	f000 fc72 	bl	800184c <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000f68:	2101      	movs	r1, #1
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f000 fc6e 	bl	800184c <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000f70:	2101      	movs	r1, #1
 8000f72:	2002      	movs	r0, #2
 8000f74:	f000 fc6a 	bl	800184c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000f78:	4b26      	ldr	r3, [pc, #152]	@ (8001014 <main+0xe4>)
 8000f7a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f7e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000f80:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <main+0xe4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000f86:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <main+0xe4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000f8c:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <main+0xe4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000f92:	4b20      	ldr	r3, [pc, #128]	@ (8001014 <main+0xe4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000f98:	491e      	ldr	r1, [pc, #120]	@ (8001014 <main+0xe4>)
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 fcc6 	bl	800192c <BSP_COM_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <main+0x7a>
  {
    Error_Handler();
 8000fa6:	f000 f96b 	bl	8001280 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      float tempC = read_temperature();
 8000faa:	f7ff ff85 	bl	8000eb8 <read_temperature>
 8000fae:	ed87 0a01 	vstr	s0, [r7, #4]
      if (tempC > -100.0f)  // simple check to see if reading is valid
 8000fb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001018 <main+0xe8>
 8000fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc2:	dd23      	ble.n	800100c <main+0xdc>
      {
          float tempF = tempC * 9.0f / 5.0f + 32.0f;
 8000fc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc8:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8000fcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fd0:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000fd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800101c <main+0xec>
 8000fdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fe0:	edc7 7a00 	vstr	s15, [r7]
          printf("\033[2J\033[H");
 8000fe4:	480e      	ldr	r0, [pc, #56]	@ (8001020 <main+0xf0>)
 8000fe6:	f004 fe79 	bl	8005cdc <iprintf>
          printf("Temperature: %.3f °C / %.3f °F\r\n", tempC, tempF);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff fa84 	bl	80004f8 <__aeabi_f2d>
 8000ff0:	4604      	mov	r4, r0
 8000ff2:	460d      	mov	r5, r1
 8000ff4:	6838      	ldr	r0, [r7, #0]
 8000ff6:	f7ff fa7f 	bl	80004f8 <__aeabi_f2d>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	e9cd 2300 	strd	r2, r3, [sp]
 8001002:	4622      	mov	r2, r4
 8001004:	462b      	mov	r3, r5
 8001006:	4807      	ldr	r0, [pc, #28]	@ (8001024 <main+0xf4>)
 8001008:	f004 fe68 	bl	8005cdc <iprintf>
      }
      HAL_Delay(100); // Read every second
 800100c:	2064      	movs	r0, #100	@ 0x64
 800100e:	f000 fdc1 	bl	8001b94 <HAL_Delay>
  {
 8001012:	e7ca      	b.n	8000faa <main+0x7a>
 8001014:	20000214 	.word	0x20000214
 8001018:	c2c80000 	.word	0xc2c80000
 800101c:	42000000 	.word	0x42000000
 8001020:	08007cc4 	.word	0x08007cc4
 8001024:	08007ccc 	.word	0x08007ccc

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b09a      	sub	sp, #104	@ 0x68
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0320 	add.w	r3, r7, #32
 8001032:	2248      	movs	r2, #72	@ 0x48
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f004 ff98 	bl	8005f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	615a      	str	r2, [r3, #20]
 800104c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800104e:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <SystemClock_Config+0xac>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001056:	4a1f      	ldr	r2, [pc, #124]	@ (80010d4 <SystemClock_Config+0xac>)
 8001058:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	4b1d      	ldr	r3, [pc, #116]	@ (80010d4 <SystemClock_Config+0xac>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800106a:	2322      	movs	r3, #34	@ 0x22
 800106c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001072:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001074:	2301      	movs	r3, #1
 8001076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001078:	2340      	movs	r3, #64	@ 0x40
 800107a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800107c:	2300      	movs	r3, #0
 800107e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001080:	23a0      	movs	r3, #160	@ 0xa0
 8001082:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001084:	2300      	movs	r3, #0
 8001086:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	4618      	mov	r0, r3
 800108e:	f002 f88d 	bl	80031ac <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001098:	f000 f8f2 	bl	8001280 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800109c:	236f      	movs	r3, #111	@ 0x6f
 800109e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2101      	movs	r1, #1
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 fbe9 	bl	8003894 <HAL_RCC_ClockConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80010c8:	f000 f8da 	bl	8001280 <Error_Handler>
  }
}
 80010cc:	bf00      	nop
 80010ce:	3768      	adds	r7, #104	@ 0x68
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	58000400 	.word	0x58000400

080010d8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	@ 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010de:	463b      	mov	r3, r7
 80010e0:	2250      	movs	r2, #80	@ 0x50
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f004 ff41 	bl	8005f6c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80010ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ee:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80010f0:	2300      	movs	r3, #0
 80010f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f8:	463b      	mov	r3, r7
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 f807 	bl	800410e <HAL_RCCEx_PeriphCLKConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8001106:	f000 f8bb 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800110a:	bf00      	nop
 800110c:	3750      	adds	r7, #80	@ 0x50
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001118:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <MX_I2C3_Init+0x74>)
 800111a:	4a1c      	ldr	r2, [pc, #112]	@ (800118c <MX_I2C3_Init+0x78>)
 800111c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B07CB4;
 800111e:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <MX_I2C3_Init+0x74>)
 8001120:	4a1b      	ldr	r2, [pc, #108]	@ (8001190 <MX_I2C3_Init+0x7c>)
 8001122:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001124:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <MX_I2C3_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800112a:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <MX_I2C3_Init+0x74>)
 800112c:	2201      	movs	r2, #1
 800112e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001130:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <MX_I2C3_Init+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001136:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <MX_I2C3_Init+0x74>)
 8001138:	2200      	movs	r2, #0
 800113a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <MX_I2C3_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <MX_I2C3_Init+0x74>)
 8001144:	2200      	movs	r2, #0
 8001146:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <MX_I2C3_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800114e:	480e      	ldr	r0, [pc, #56]	@ (8001188 <MX_I2C3_Init+0x74>)
 8001150:	f000 ffdc 	bl	800210c <HAL_I2C_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800115a:	f000 f891 	bl	8001280 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800115e:	2100      	movs	r1, #0
 8001160:	4809      	ldr	r0, [pc, #36]	@ (8001188 <MX_I2C3_Init+0x74>)
 8001162:	f001 fbf7 	bl	8002954 <HAL_I2CEx_ConfigAnalogFilter>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800116c:	f000 f888 	bl	8001280 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001170:	2100      	movs	r1, #0
 8001172:	4805      	ldr	r0, [pc, #20]	@ (8001188 <MX_I2C3_Init+0x74>)
 8001174:	f001 fc39 	bl	80029ea <HAL_I2CEx_ConfigDigitalFilter>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800117e:	f000 f87f 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000224 	.word	0x20000224
 800118c:	40005c00 	.word	0x40005c00
 8001190:	00b07cb4 	.word	0x00b07cb4

08001194 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001198:	4b23      	ldr	r3, [pc, #140]	@ (8001228 <MX_LPUART1_UART_Init+0x94>)
 800119a:	4a24      	ldr	r2, [pc, #144]	@ (800122c <MX_LPUART1_UART_Init+0x98>)
 800119c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800119e:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <MX_LPUART1_UART_Init+0x94>)
 80011a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b20      	ldr	r3, [pc, #128]	@ (8001228 <MX_LPUART1_UART_Init+0x94>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001228 <MX_LPUART1_UART_Init+0x94>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001228 <MX_LPUART1_UART_Init+0x94>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <MX_LPUART1_UART_Init+0x94>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80011be:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <MX_LPUART1_UART_Init+0x94>)
 80011c0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80011c4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c6:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <MX_LPUART1_UART_Init+0x94>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011cc:	4b16      	ldr	r3, [pc, #88]	@ (8001228 <MX_LPUART1_UART_Init+0x94>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d2:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <MX_LPUART1_UART_Init+0x94>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80011d8:	4b13      	ldr	r3, [pc, #76]	@ (8001228 <MX_LPUART1_UART_Init+0x94>)
 80011da:	2200      	movs	r2, #0
 80011dc:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011de:	4812      	ldr	r0, [pc, #72]	@ (8001228 <MX_LPUART1_UART_Init+0x94>)
 80011e0:	f003 fa3c 	bl	800465c <HAL_UART_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 80011ea:	f000 f849 	bl	8001280 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ee:	2100      	movs	r1, #0
 80011f0:	480d      	ldr	r0, [pc, #52]	@ (8001228 <MX_LPUART1_UART_Init+0x94>)
 80011f2:	f003 ff91 	bl	8005118 <HAL_UARTEx_SetTxFifoThreshold>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 80011fc:	f000 f840 	bl	8001280 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001200:	2100      	movs	r1, #0
 8001202:	4809      	ldr	r0, [pc, #36]	@ (8001228 <MX_LPUART1_UART_Init+0x94>)
 8001204:	f003 ffc6 	bl	8005194 <HAL_UARTEx_SetRxFifoThreshold>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 800120e:	f000 f837 	bl	8001280 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001212:	4805      	ldr	r0, [pc, #20]	@ (8001228 <MX_LPUART1_UART_Init+0x94>)
 8001214:	f003 ff47 	bl	80050a6 <HAL_UARTEx_DisableFifoMode>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 800121e:	f000 f82f 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000278 	.word	0x20000278
 800122c:	40008000 	.word	0x40008000

08001230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001244:	2004      	movs	r0, #4
 8001246:	f7ff fe1d 	bl	8000e84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2001      	movs	r0, #1
 800124c:	f7ff fe1a 	bl	8000e84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001250:	2002      	movs	r0, #2
 8001252:	f7ff fe17 	bl	8000e84 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8001256:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800125a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001268:	230a      	movs	r3, #10
 800126a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001274:	f000 fdc2 	bl	8001dfc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001278:	bf00      	nop
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <Error_Handler+0x8>

0800128c <LL_AHB2_GRP1_EnableClock>:
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001298:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800129a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4013      	ands	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012b0:	68fb      	ldr	r3, [r7, #12]
}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012be:	b480      	push	{r7}
 80012c0:	b085      	sub	sp, #20
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80012c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80012cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80012d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012da:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4013      	ands	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80012f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4313      	orrs	r3, r2
 8001306:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800130c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001314:	68fb      	ldr	r3, [r7, #12]
}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b09c      	sub	sp, #112	@ 0x70
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	2250      	movs	r2, #80	@ 0x50
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f004 fe0b 	bl	8005f6c <memset>
  if(hi2c->Instance==I2C3)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a16      	ldr	r2, [pc, #88]	@ (80013b4 <HAL_I2C_MspInit+0x84>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d125      	bne.n	80013ac <HAL_I2C_MspInit+0x7c>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001360:	2308      	movs	r3, #8
 8001362:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001364:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001368:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	4618      	mov	r0, r3
 8001370:	f002 fecd 	bl	800410e <HAL_RCCEx_PeriphCLKConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800137a:	f7ff ff81 	bl	8001280 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	2004      	movs	r0, #4
 8001380:	f7ff ff84 	bl	800128c <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001384:	2303      	movs	r3, #3
 8001386:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001388:	2312      	movs	r3, #18
 800138a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001390:	2302      	movs	r3, #2
 8001392:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001394:	2304      	movs	r3, #4
 8001396:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001398:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	@ (80013b8 <HAL_I2C_MspInit+0x88>)
 80013a0:	f000 fd2c 	bl	8001dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013a4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80013a8:	f7ff ff89 	bl	80012be <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80013ac:	bf00      	nop
 80013ae:	3770      	adds	r7, #112	@ 0x70
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40005c00 	.word	0x40005c00
 80013b8:	48000800 	.word	0x48000800

080013bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b09c      	sub	sp, #112	@ 0x70
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	2250      	movs	r2, #80	@ 0x50
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f004 fdc5 	bl	8005f6c <memset>
  if(huart->Instance==LPUART1)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a20      	ldr	r2, [pc, #128]	@ (8001468 <HAL_UART_MspInit+0xac>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d138      	bne.n	800145e <HAL_UART_MspInit+0xa2>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80013ec:	2302      	movs	r3, #2
 80013ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 fe88 	bl	800410e <HAL_RCCEx_PeriphCLKConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001404:	f7ff ff3c 	bl	8001280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001408:	2001      	movs	r0, #1
 800140a:	f7ff ff71 	bl	80012f0 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff ff3c 	bl	800128c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	2002      	movs	r0, #2
 8001416:	f7ff ff39 	bl	800128c <LL_AHB2_GRP1_EnableClock>
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PA6     ------> LPUART1_CTS
    PB12     ------> LPUART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 800141a:	234c      	movs	r3, #76	@ 0x4c
 800141c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800142a:	2308      	movs	r3, #8
 800142c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001432:	4619      	mov	r1, r3
 8001434:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001438:	f000 fce0 	bl	8001dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800143c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001440:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800144e:	2308      	movs	r3, #8
 8001450:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001452:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001456:	4619      	mov	r1, r3
 8001458:	4804      	ldr	r0, [pc, #16]	@ (800146c <HAL_UART_MspInit+0xb0>)
 800145a:	f000 fccf 	bl	8001dfc <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800145e:	bf00      	nop
 8001460:	3770      	adds	r7, #112	@ 0x70
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40008000 	.word	0x40008000
 800146c:	48000400 	.word	0x48000400

08001470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <NMI_Handler+0x4>

08001478 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <MemManage_Handler+0x4>

08001488 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <UsageFault_Handler+0x4>

08001498 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c6:	f000 fb39 	bl	8001b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}

080014ce <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  return 1;
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <_kill>:

int _kill(int pid, int sig)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014e8:	f004 fd92 	bl	8006010 <__errno>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2216      	movs	r2, #22
 80014f0:	601a      	str	r2, [r3, #0]
  return -1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <_exit>:

void _exit (int status)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001506:	f04f 31ff 	mov.w	r1, #4294967295
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ffe7 	bl	80014de <_kill>
  while (1) {}    /* Make sure we hang here */
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <_exit+0x12>

08001514 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e00a      	b.n	800153c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001526:	f3af 8000 	nop.w
 800152a:	4601      	mov	r1, r0
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	60ba      	str	r2, [r7, #8]
 8001532:	b2ca      	uxtb	r2, r1
 8001534:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	dbf0      	blt.n	8001526 <_read+0x12>
  }

  return len;
 8001544:	687b      	ldr	r3, [r7, #4]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	e009      	b.n	8001574 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	60ba      	str	r2, [r7, #8]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fa41 	bl	80019f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3301      	adds	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	dbf1      	blt.n	8001560 <_write+0x12>
  }
  return len;
 800157c:	687b      	ldr	r3, [r7, #4]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_close>:

int _close(int file)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ae:	605a      	str	r2, [r3, #4]
  return 0;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <_isatty>:

int _isatty(int file)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f8:	4a14      	ldr	r2, [pc, #80]	@ (800164c <_sbrk+0x5c>)
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <_sbrk+0x60>)
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001604:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d102      	bne.n	8001612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800160c:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <_sbrk+0x64>)
 800160e:	4a12      	ldr	r2, [pc, #72]	@ (8001658 <_sbrk+0x68>)
 8001610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001612:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	429a      	cmp	r2, r3
 800161e:	d207      	bcs.n	8001630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001620:	f004 fcf6 	bl	8006010 <__errno>
 8001624:	4603      	mov	r3, r0
 8001626:	220c      	movs	r2, #12
 8001628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
 800162e:	e009      	b.n	8001644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001630:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001636:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	4a05      	ldr	r2, [pc, #20]	@ (8001654 <_sbrk+0x64>)
 8001640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20030000 	.word	0x20030000
 8001650:	00000400 	.word	0x00000400
 8001654:	2000030c 	.word	0x2000030c
 8001658:	200004f8 	.word	0x200004f8

0800165c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001660:	4b24      	ldr	r3, [pc, #144]	@ (80016f4 <SystemInit+0x98>)
 8001662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001666:	4a23      	ldr	r2, [pc, #140]	@ (80016f4 <SystemInit+0x98>)
 8001668:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800166c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001684:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001688:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800168a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001694:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <SystemInit+0x9c>)
 8001696:	4013      	ands	r3, r2
 8001698:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800169a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800169e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016a6:	f023 0305 	bic.w	r3, r3, #5
 80016aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80016ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80016c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016c6:	4a0d      	ldr	r2, [pc, #52]	@ (80016fc <SystemInit+0xa0>)
 80016c8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80016ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ce:	4a0b      	ldr	r2, [pc, #44]	@ (80016fc <SystemInit+0xa0>)
 80016d0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00
 80016f8:	faf6fefb 	.word	0xfaf6fefb
 80016fc:	22041000 	.word	0x22041000

08001700 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001700:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001702:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001704:	3304      	adds	r3, #4

08001706 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001706:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001708:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800170a:	d3f9      	bcc.n	8001700 <CopyDataInit>
  bx lr
 800170c:	4770      	bx	lr

0800170e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800170e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001710:	3004      	adds	r0, #4

08001712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001712:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001714:	d3fb      	bcc.n	800170e <FillZerobss>
  bx lr
 8001716:	4770      	bx	lr

08001718 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001718:	480c      	ldr	r0, [pc, #48]	@ (800174c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800171a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800171c:	f7ff ff9e 	bl	800165c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001720:	480b      	ldr	r0, [pc, #44]	@ (8001750 <LoopForever+0x6>)
 8001722:	490c      	ldr	r1, [pc, #48]	@ (8001754 <LoopForever+0xa>)
 8001724:	4a0c      	ldr	r2, [pc, #48]	@ (8001758 <LoopForever+0xe>)
 8001726:	2300      	movs	r3, #0
 8001728:	f7ff ffed 	bl	8001706 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800172c:	480b      	ldr	r0, [pc, #44]	@ (800175c <LoopForever+0x12>)
 800172e:	490c      	ldr	r1, [pc, #48]	@ (8001760 <LoopForever+0x16>)
 8001730:	4a0c      	ldr	r2, [pc, #48]	@ (8001764 <LoopForever+0x1a>)
 8001732:	2300      	movs	r3, #0
 8001734:	f7ff ffe7 	bl	8001706 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001738:	480b      	ldr	r0, [pc, #44]	@ (8001768 <LoopForever+0x1e>)
 800173a:	490c      	ldr	r1, [pc, #48]	@ (800176c <LoopForever+0x22>)
 800173c:	2300      	movs	r3, #0
 800173e:	f7ff ffe8 	bl	8001712 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001742:	f004 fc6b 	bl	800601c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001746:	f7ff fbf3 	bl	8000f30 <main>

0800174a <LoopForever>:

LoopForever:
  b LoopForever
 800174a:	e7fe      	b.n	800174a <LoopForever>
  ldr   r0, =_estack
 800174c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001750:	20000008 	.word	0x20000008
 8001754:	200001f8 	.word	0x200001f8
 8001758:	0800817c 	.word	0x0800817c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800175c:	20030000 	.word	0x20030000
 8001760:	20030000 	.word	0x20030000
 8001764:	0800836c 	.word	0x0800836c
  INIT_BSS _sbss, _ebss
 8001768:	200001f8 	.word	0x200001f8
 800176c:	200004f8 	.word	0x200004f8

08001770 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001770:	e7fe      	b.n	8001770 <ADC1_IRQHandler>

08001772 <LL_AHB2_GRP1_EnableClock>:
{
 8001772:	b480      	push	{r7}
 8001774:	b085      	sub	sp, #20
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800177a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800177e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001780:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4313      	orrs	r3, r2
 8001788:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800178a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800178e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4013      	ands	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001796:	68fb      	ldr	r3, [r7, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80017ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80017bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017c0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4013      	ands	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017c8:	68fb      	ldr	r3, [r7, #12]
}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80017f2:	2002      	movs	r0, #2
 80017f4:	f7ff ffbd 	bl	8001772 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	4a12      	ldr	r2, [pc, #72]	@ (8001844 <BSP_LED_Init+0x6c>)
 80017fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001800:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	2301      	movs	r3, #1
 8001804:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180a:	2302      	movs	r3, #2
 800180c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <BSP_LED_Init+0x70>)
 8001812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001816:	f107 020c 	add.w	r2, r7, #12
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f000 faed 	bl	8001dfc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	4a08      	ldr	r2, [pc, #32]	@ (8001848 <BSP_LED_Init+0x70>)
 8001826:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4a05      	ldr	r2, [pc, #20]	@ (8001844 <BSP_LED_Init+0x6c>)
 800182e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001832:	2200      	movs	r2, #0
 8001834:	4619      	mov	r1, r3
 8001836:	f000 fc51 	bl	80020dc <HAL_GPIO_WritePin>
}
 800183a:	bf00      	nop
 800183c:	3720      	adds	r7, #32
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	08007dbc 	.word	0x08007dbc
 8001848:	2000000c 	.word	0x2000000c

0800184c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	460a      	mov	r2, r1
 8001856:	71fb      	strb	r3, [r7, #7]
 8001858:	4613      	mov	r3, r2
 800185a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d103      	bne.n	800187a <BSP_PB_Init+0x2e>
 8001872:	2004      	movs	r0, #4
 8001874:	f7ff ff7d 	bl	8001772 <LL_AHB2_GRP1_EnableClock>
 8001878:	e00c      	b.n	8001894 <BSP_PB_Init+0x48>
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d103      	bne.n	8001888 <BSP_PB_Init+0x3c>
 8001880:	2008      	movs	r0, #8
 8001882:	f7ff ff76 	bl	8001772 <LL_AHB2_GRP1_EnableClock>
 8001886:	e005      	b.n	8001894 <BSP_PB_Init+0x48>
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d102      	bne.n	8001894 <BSP_PB_Init+0x48>
 800188e:	2008      	movs	r0, #8
 8001890:	f7ff ff6f 	bl	8001772 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001894:	79bb      	ldrb	r3, [r7, #6]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d117      	bne.n	80018ca <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	4a20      	ldr	r2, [pc, #128]	@ (8001920 <BSP_PB_Init+0xd4>)
 800189e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018a2:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80018a8:	2301      	movs	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001924 <BSP_PB_Init+0xd8>)
 80018b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b8:	f107 020c 	add.w	r2, r7, #12
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fa9c 	bl	8001dfc <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 80018c4:	2001      	movs	r0, #1
 80018c6:	f000 f965 	bl	8001b94 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80018ca:	79bb      	ldrb	r3, [r7, #6]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d123      	bne.n	8001918 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	4a13      	ldr	r2, [pc, #76]	@ (8001920 <BSP_PB_Init+0xd4>)
 80018d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018d8:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80018da:	2301      	movs	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 80018de:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018e2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001924 <BSP_PB_Init+0xd8>)
 80018e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ec:	f107 020c 	add.w	r2, r7, #12
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fa82 	bl	8001dfc <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001928 <BSP_PB_Init+0xdc>)
 80018fc:	5cd3      	ldrb	r3, [r2, r3]
 80018fe:	b25b      	sxtb	r3, r3
 8001900:	2200      	movs	r2, #0
 8001902:	210f      	movs	r1, #15
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fa44 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	4a06      	ldr	r2, [pc, #24]	@ (8001928 <BSP_PB_Init+0xdc>)
 800190e:	5cd3      	ldrb	r3, [r2, r3]
 8001910:	b25b      	sxtb	r3, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fa57 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
  }
}
 8001918:	bf00      	nop
 800191a:	3720      	adds	r7, #32
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	08007dc4 	.word	0x08007dc4
 8001924:	20000018 	.word	0x20000018
 8001928:	08007dcc 	.word	0x08007dcc

0800192c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d903      	bls.n	800194a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001942:	f06f 0301 	mvn.w	r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	e018      	b.n	800197c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2294      	movs	r2, #148	@ 0x94
 800194e:	fb02 f303 	mul.w	r3, r2, r3
 8001952:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <BSP_COM_Init+0x5c>)
 8001954:	4413      	add	r3, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f866 	bl	8001a28 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	2294      	movs	r2, #148	@ 0x94
 8001960:	fb02 f303 	mul.w	r3, r2, r3
 8001964:	4a08      	ldr	r2, [pc, #32]	@ (8001988 <BSP_COM_Init+0x5c>)
 8001966:	4413      	add	r3, r2
 8001968:	6839      	ldr	r1, [r7, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f80e 	bl	800198c <MX_LPUART1_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001976:	f06f 0303 	mvn.w	r3, #3
 800197a:	e000      	b.n	800197e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 800197c:	68fb      	ldr	r3, [r7, #12]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000310 	.word	0x20000310

0800198c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <MX_LPUART1_Init+0x60>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	220c      	movs	r2, #12
 80019aa:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	895b      	ldrh	r3, [r3, #10]
 80019b0:	461a      	mov	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	891b      	ldrh	r3, [r3, #8]
 80019c2:	461a      	mov	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	899b      	ldrh	r3, [r3, #12]
 80019cc:	461a      	mov	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019d8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f002 fe3e 	bl	800465c <HAL_UART_Init>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000024 	.word	0x20000024

080019f0 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80019f8:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <__io_putchar+0x30>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	2394      	movs	r3, #148	@ 0x94
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	4a07      	ldr	r2, [pc, #28]	@ (8001a24 <__io_putchar+0x34>)
 8001a06:	1898      	adds	r0, r3, r2
 8001a08:	1d39      	adds	r1, r7, #4
 8001a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f002 fe74 	bl	80046fc <HAL_UART_Transmit>
  return ch;
 8001a14:	687b      	ldr	r3, [r7, #4]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200003a4 	.word	0x200003a4
 8001a24:	20000310 	.word	0x20000310

08001a28 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001a30:	2002      	movs	r0, #2
 8001a32:	f7ff fe9e 	bl	8001772 <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8001a36:	2002      	movs	r0, #2
 8001a38:	f7ff fe9b 	bl	8001772 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001a3c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a40:	f7ff feb0 	bl	80017a4 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001a44:	2340      	movs	r3, #64	@ 0x40
 8001a46:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001a54:	2307      	movs	r3, #7
 8001a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4809      	ldr	r0, [pc, #36]	@ (8001a84 <COM1_MspInit+0x5c>)
 8001a60:	f000 f9cc 	bl	8001dfc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	4619      	mov	r1, r3
 8001a76:	4803      	ldr	r0, [pc, #12]	@ (8001a84 <COM1_MspInit+0x5c>)
 8001a78:	f000 f9c0 	bl	8001dfc <HAL_GPIO_Init>
}
 8001a7c:	bf00      	nop
 8001a7e:	3720      	adds	r7, #32
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	48000400 	.word	0x48000400

08001a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <HAL_Init+0x3c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac4 <HAL_Init+0x3c>)
 8001a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a9c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9e:	2003      	movs	r0, #3
 8001aa0:	f000 f96c 	bl	8001d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f000 f80f 	bl	8001ac8 <HAL_InitTick>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	71fb      	strb	r3, [r7, #7]
 8001ab4:	e001      	b.n	8001aba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ab6:	f7ff fc34 	bl	8001322 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aba:	79fb      	ldrb	r3, [r7, #7]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	58004000 	.word	0x58004000

08001ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001ad4:	4b17      	ldr	r3, [pc, #92]	@ (8001b34 <HAL_InitTick+0x6c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d024      	beq.n	8001b26 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001adc:	f002 f886 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <HAL_InitTick+0x6c>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aec:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 f974 	bl	8001de2 <HAL_SYSTICK_Config>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10f      	bne.n	8001b20 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b0f      	cmp	r3, #15
 8001b04:	d809      	bhi.n	8001b1a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b06:	2200      	movs	r2, #0
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0e:	f000 f940 	bl	8001d92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b12:	4a09      	ldr	r2, [pc, #36]	@ (8001b38 <HAL_InitTick+0x70>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e007      	b.n	8001b2a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	e004      	b.n	8001b2a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
 8001b24:	e001      	b.n	8001b2a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	2000002c 	.word	0x2000002c
 8001b38:	20000028 	.word	0x20000028

08001b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_IncTick+0x20>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_IncTick+0x24>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	@ (8001b60 <HAL_IncTick+0x24>)
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	2000002c 	.word	0x2000002c
 8001b60:	200003a8 	.word	0x200003a8

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	200003a8 	.word	0x200003a8

08001b7c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001b80:	4b03      	ldr	r3, [pc, #12]	@ (8001b90 <HAL_GetTickPrio+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000028 	.word	0x20000028

08001b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b9c:	f7ff ffe2 	bl	8001b64 <HAL_GetTick>
 8001ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bac:	d005      	beq.n	8001bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bae:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd8 <HAL_Delay+0x44>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bba:	bf00      	nop
 8001bbc:	f7ff ffd2 	bl	8001b64 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d8f7      	bhi.n	8001bbc <HAL_Delay+0x28>
  {
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000002c 	.word	0x2000002c

08001bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bec:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c0e:	4a04      	ldr	r2, [pc, #16]	@ (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	60d3      	str	r3, [r2, #12]
}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c28:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <__NVIC_GetPriorityGrouping+0x18>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	f003 0307 	and.w	r3, r3, #7
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	db0b      	blt.n	8001c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	4907      	ldr	r1, [pc, #28]	@ (8001c78 <__NVIC_EnableIRQ+0x38>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	2001      	movs	r0, #1
 8001c62:	fa00 f202 	lsl.w	r2, r0, r2
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000e100 	.word	0xe000e100

08001c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	db0a      	blt.n	8001ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	490c      	ldr	r1, [pc, #48]	@ (8001cc8 <__NVIC_SetPriority+0x4c>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	0112      	lsls	r2, r2, #4
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca4:	e00a      	b.n	8001cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4908      	ldr	r1, [pc, #32]	@ (8001ccc <__NVIC_SetPriority+0x50>)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	3b04      	subs	r3, #4
 8001cb4:	0112      	lsls	r2, r2, #4
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	440b      	add	r3, r1
 8001cba:	761a      	strb	r2, [r3, #24]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000e100 	.word	0xe000e100
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	@ 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f1c3 0307 	rsb	r3, r3, #7
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	bf28      	it	cs
 8001cee:	2304      	movcs	r3, #4
 8001cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d902      	bls.n	8001d00 <NVIC_EncodePriority+0x30>
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3b03      	subs	r3, #3
 8001cfe:	e000      	b.n	8001d02 <NVIC_EncodePriority+0x32>
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	f04f 32ff 	mov.w	r2, #4294967295
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	401a      	ands	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d18:	f04f 31ff 	mov.w	r1, #4294967295
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	43d9      	mvns	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	4313      	orrs	r3, r2
         );
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3724      	adds	r7, #36	@ 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d48:	d301      	bcc.n	8001d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00f      	b.n	8001d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d78 <SysTick_Config+0x40>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d56:	210f      	movs	r1, #15
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	f7ff ff8e 	bl	8001c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d60:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <SysTick_Config+0x40>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d66:	4b04      	ldr	r3, [pc, #16]	@ (8001d78 <SysTick_Config+0x40>)
 8001d68:	2207      	movs	r2, #7
 8001d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	e000e010 	.word	0xe000e010

08001d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ff29 	bl	8001bdc <__NVIC_SetPriorityGrouping>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001da0:	f7ff ff40 	bl	8001c24 <__NVIC_GetPriorityGrouping>
 8001da4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	6978      	ldr	r0, [r7, #20]
 8001dac:	f7ff ff90 	bl	8001cd0 <NVIC_EncodePriority>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff5f 	bl	8001c7c <__NVIC_SetPriority>
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff33 	bl	8001c40 <__NVIC_EnableIRQ>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ffa4 	bl	8001d38 <SysTick_Config>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0a:	e14c      	b.n	80020a6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2101      	movs	r1, #1
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 813e 	beq.w	80020a0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d005      	beq.n	8001e3c <HAL_GPIO_Init+0x40>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d130      	bne.n	8001e9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e72:	2201      	movs	r2, #1
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	f003 0201 	and.w	r2, r3, #1
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d017      	beq.n	8001eda <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d123      	bne.n	8001f2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	08da      	lsrs	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3208      	adds	r2, #8
 8001eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	220f      	movs	r2, #15
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	08da      	lsrs	r2, r3, #3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3208      	adds	r2, #8
 8001f28:	6939      	ldr	r1, [r7, #16]
 8001f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	2203      	movs	r2, #3
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0203 	and.w	r2, r3, #3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 8098 	beq.w	80020a0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001f70:	4a54      	ldr	r2, [pc, #336]	@ (80020c4 <HAL_GPIO_Init+0x2c8>)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3302      	adds	r3, #2
 8001f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f9a:	d019      	beq.n	8001fd0 <HAL_GPIO_Init+0x1d4>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a4a      	ldr	r2, [pc, #296]	@ (80020c8 <HAL_GPIO_Init+0x2cc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <HAL_GPIO_Init+0x1d0>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a49      	ldr	r2, [pc, #292]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00d      	beq.n	8001fc8 <HAL_GPIO_Init+0x1cc>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a48      	ldr	r2, [pc, #288]	@ (80020d0 <HAL_GPIO_Init+0x2d4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <HAL_GPIO_Init+0x1c8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a47      	ldr	r2, [pc, #284]	@ (80020d4 <HAL_GPIO_Init+0x2d8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <HAL_GPIO_Init+0x1c4>
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	e008      	b.n	8001fd2 <HAL_GPIO_Init+0x1d6>
 8001fc0:	2307      	movs	r3, #7
 8001fc2:	e006      	b.n	8001fd2 <HAL_GPIO_Init+0x1d6>
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e004      	b.n	8001fd2 <HAL_GPIO_Init+0x1d6>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e002      	b.n	8001fd2 <HAL_GPIO_Init+0x1d6>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <HAL_GPIO_Init+0x1d6>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	f002 0203 	and.w	r2, r2, #3
 8001fd8:	0092      	lsls	r2, r2, #2
 8001fda:	4093      	lsls	r3, r2
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fe2:	4938      	ldr	r1, [pc, #224]	@ (80020c4 <HAL_GPIO_Init+0x2c8>)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3302      	adds	r3, #2
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ff0:	4b39      	ldr	r3, [pc, #228]	@ (80020d8 <HAL_GPIO_Init+0x2dc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4313      	orrs	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002014:	4a30      	ldr	r2, [pc, #192]	@ (80020d8 <HAL_GPIO_Init+0x2dc>)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800201a:	4b2f      	ldr	r3, [pc, #188]	@ (80020d8 <HAL_GPIO_Init+0x2dc>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800203e:	4a26      	ldr	r2, [pc, #152]	@ (80020d8 <HAL_GPIO_Init+0x2dc>)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002044:	4b24      	ldr	r3, [pc, #144]	@ (80020d8 <HAL_GPIO_Init+0x2dc>)
 8002046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	43db      	mvns	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800206a:	4a1b      	ldr	r2, [pc, #108]	@ (80020d8 <HAL_GPIO_Init+0x2dc>)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002072:	4b19      	ldr	r3, [pc, #100]	@ (80020d8 <HAL_GPIO_Init+0x2dc>)
 8002074:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	43db      	mvns	r3, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002098:	4a0f      	ldr	r2, [pc, #60]	@ (80020d8 <HAL_GPIO_Init+0x2dc>)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	3301      	adds	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	fa22 f303 	lsr.w	r3, r2, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f47f aeab 	bne.w	8001e0c <HAL_GPIO_Init+0x10>
  }
}
 80020b6:	bf00      	nop
 80020b8:	bf00      	nop
 80020ba:	371c      	adds	r7, #28
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	40010000 	.word	0x40010000
 80020c8:	48000400 	.word	0x48000400
 80020cc:	48000800 	.word	0x48000800
 80020d0:	48000c00 	.word	0x48000c00
 80020d4:	48001000 	.word	0x48001000
 80020d8:	58000800 	.word	0x58000800

080020dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
 80020e8:	4613      	mov	r3, r2
 80020ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ec:	787b      	ldrb	r3, [r7, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020f8:	e002      	b.n	8002100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020fa:	887a      	ldrh	r2, [r7, #2]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e08d      	b.n	800223a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff f8fc 	bl	8001330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2224      	movs	r2, #36	@ 0x24
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800215c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800216c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d107      	bne.n	8002186 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	e006      	b.n	8002194 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002192:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d108      	bne.n	80021ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	e007      	b.n	80021be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69d9      	ldr	r1, [r3, #28]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a1a      	ldr	r2, [r3, #32]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2220      	movs	r2, #32
 8002226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	4608      	mov	r0, r1
 800224e:	4611      	mov	r1, r2
 8002250:	461a      	mov	r2, r3
 8002252:	4603      	mov	r3, r0
 8002254:	817b      	strh	r3, [r7, #10]
 8002256:	460b      	mov	r3, r1
 8002258:	813b      	strh	r3, [r7, #8]
 800225a:	4613      	mov	r3, r2
 800225c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b20      	cmp	r3, #32
 8002268:	f040 80fd 	bne.w	8002466 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_I2C_Mem_Read+0x34>
 8002272:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800227e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0f1      	b.n	8002468 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_I2C_Mem_Read+0x4e>
 800228e:	2302      	movs	r3, #2
 8002290:	e0ea      	b.n	8002468 <HAL_I2C_Mem_Read+0x224>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800229a:	f7ff fc63 	bl	8001b64 <HAL_GetTick>
 800229e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	2319      	movs	r3, #25
 80022a6:	2201      	movs	r2, #1
 80022a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f95b 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0d5      	b.n	8002468 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2222      	movs	r2, #34	@ 0x22
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2240      	movs	r2, #64	@ 0x40
 80022c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a3a      	ldr	r2, [r7, #32]
 80022d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80022dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022e4:	88f8      	ldrh	r0, [r7, #6]
 80022e6:	893a      	ldrh	r2, [r7, #8]
 80022e8:	8979      	ldrh	r1, [r7, #10]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	4603      	mov	r3, r0
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f8bf 	bl	8002478 <I2C_RequestMemoryRead>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0ad      	b.n	8002468 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002310:	b29b      	uxth	r3, r3
 8002312:	2bff      	cmp	r3, #255	@ 0xff
 8002314:	d90e      	bls.n	8002334 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	22ff      	movs	r2, #255	@ 0xff
 800231a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002320:	b2da      	uxtb	r2, r3
 8002322:	8979      	ldrh	r1, [r7, #10]
 8002324:	4b52      	ldr	r3, [pc, #328]	@ (8002470 <HAL_I2C_Mem_Read+0x22c>)
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 fadf 	bl	80028f0 <I2C_TransferConfig>
 8002332:	e00f      	b.n	8002354 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002342:	b2da      	uxtb	r2, r3
 8002344:	8979      	ldrh	r1, [r7, #10]
 8002346:	4b4a      	ldr	r3, [pc, #296]	@ (8002470 <HAL_I2C_Mem_Read+0x22c>)
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 face 	bl	80028f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235a:	2200      	movs	r2, #0
 800235c:	2104      	movs	r1, #4
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f902 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e07c      	b.n	8002468 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d034      	beq.n	8002414 <HAL_I2C_Mem_Read+0x1d0>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d130      	bne.n	8002414 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b8:	2200      	movs	r2, #0
 80023ba:	2180      	movs	r1, #128	@ 0x80
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f8d3 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e04d      	b.n	8002468 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2bff      	cmp	r3, #255	@ 0xff
 80023d4:	d90e      	bls.n	80023f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	22ff      	movs	r2, #255	@ 0xff
 80023da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	8979      	ldrh	r1, [r7, #10]
 80023e4:	2300      	movs	r3, #0
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 fa7f 	bl	80028f0 <I2C_TransferConfig>
 80023f2:	e00f      	b.n	8002414 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002402:	b2da      	uxtb	r2, r3
 8002404:	8979      	ldrh	r1, [r7, #10]
 8002406:	2300      	movs	r3, #0
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fa6e 	bl	80028f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d19a      	bne.n	8002354 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 f940 	bl	80026a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e01a      	b.n	8002468 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2220      	movs	r2, #32
 8002438:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <HAL_I2C_Mem_Read+0x230>)
 8002446:	400b      	ands	r3, r1
 8002448:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2220      	movs	r2, #32
 800244e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	e000      	b.n	8002468 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002466:	2302      	movs	r3, #2
  }
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	80002400 	.word	0x80002400
 8002474:	fe00e800 	.word	0xfe00e800

08002478 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	4608      	mov	r0, r1
 8002482:	4611      	mov	r1, r2
 8002484:	461a      	mov	r2, r3
 8002486:	4603      	mov	r3, r0
 8002488:	817b      	strh	r3, [r7, #10]
 800248a:	460b      	mov	r3, r1
 800248c:	813b      	strh	r3, [r7, #8]
 800248e:	4613      	mov	r3, r2
 8002490:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	8979      	ldrh	r1, [r7, #10]
 8002498:	4b20      	ldr	r3, [pc, #128]	@ (800251c <I2C_RequestMemoryRead+0xa4>)
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2300      	movs	r3, #0
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fa26 	bl	80028f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	69b9      	ldr	r1, [r7, #24]
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f8b6 	bl	800261a <I2C_WaitOnTXISFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e02c      	b.n	8002512 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024be:	893b      	ldrh	r3, [r7, #8]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80024c8:	e015      	b.n	80024f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024ca:	893b      	ldrh	r3, [r7, #8]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024d8:	69fa      	ldr	r2, [r7, #28]
 80024da:	69b9      	ldr	r1, [r7, #24]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f89c 	bl	800261a <I2C_WaitOnTXISFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e012      	b.n	8002512 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024ec:	893b      	ldrh	r3, [r7, #8]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	2200      	movs	r2, #0
 80024fe:	2140      	movs	r1, #64	@ 0x40
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f831 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	80002000 	.word	0x80002000

08002520 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b02      	cmp	r3, #2
 8002534:	d103      	bne.n	800253e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2200      	movs	r2, #0
 800253c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d007      	beq.n	800255c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	619a      	str	r2, [r3, #24]
  }
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	4613      	mov	r3, r2
 8002576:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002578:	e03b      	b.n	80025f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	6839      	ldr	r1, [r7, #0]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 f8d6 	bl	8002730 <I2C_IsErrorOccurred>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e041      	b.n	8002612 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d02d      	beq.n	80025f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002596:	f7ff fae5 	bl	8001b64 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d302      	bcc.n	80025ac <I2C_WaitOnFlagUntilTimeout+0x44>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d122      	bne.n	80025f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699a      	ldr	r2, [r3, #24]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	4013      	ands	r3, r2
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	bf0c      	ite	eq
 80025bc:	2301      	moveq	r3, #1
 80025be:	2300      	movne	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d113      	bne.n	80025f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ce:	f043 0220 	orr.w	r2, r3, #32
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00f      	b.n	8002612 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	4013      	ands	r3, r2
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	429a      	cmp	r2, r3
 8002600:	bf0c      	ite	eq
 8002602:	2301      	moveq	r3, #1
 8002604:	2300      	movne	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	429a      	cmp	r2, r3
 800260e:	d0b4      	beq.n	800257a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002626:	e033      	b.n	8002690 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	68b9      	ldr	r1, [r7, #8]
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f87f 	bl	8002730 <I2C_IsErrorOccurred>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e031      	b.n	80026a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002642:	d025      	beq.n	8002690 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002644:	f7ff fa8e 	bl	8001b64 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	429a      	cmp	r2, r3
 8002652:	d302      	bcc.n	800265a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d11a      	bne.n	8002690 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b02      	cmp	r3, #2
 8002666:	d013      	beq.n	8002690 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266c:	f043 0220 	orr.w	r2, r3, #32
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e007      	b.n	80026a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b02      	cmp	r3, #2
 800269c:	d1c4      	bne.n	8002628 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026b4:	e02f      	b.n	8002716 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f838 	bl	8002730 <I2C_IsErrorOccurred>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e02d      	b.n	8002726 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ca:	f7ff fa4b 	bl	8001b64 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d302      	bcc.n	80026e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d11a      	bne.n	8002716 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	d013      	beq.n	8002716 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	f043 0220 	orr.w	r2, r3, #32
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e007      	b.n	8002726 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f003 0320 	and.w	r3, r3, #32
 8002720:	2b20      	cmp	r3, #32
 8002722:	d1c8      	bne.n	80026b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	@ 0x28
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	2b00      	cmp	r3, #0
 800275a:	d068      	beq.n	800282e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2210      	movs	r2, #16
 8002762:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002764:	e049      	b.n	80027fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d045      	beq.n	80027fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800276e:	f7ff f9f9 	bl	8001b64 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	429a      	cmp	r2, r3
 800277c:	d302      	bcc.n	8002784 <I2C_IsErrorOccurred+0x54>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d13a      	bne.n	80027fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800278e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002796:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027a6:	d121      	bne.n	80027ec <I2C_IsErrorOccurred+0xbc>
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027ae:	d01d      	beq.n	80027ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d01a      	beq.n	80027ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80027c6:	f7ff f9cd 	bl	8001b64 <HAL_GetTick>
 80027ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027cc:	e00e      	b.n	80027ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80027ce:	f7ff f9c9 	bl	8001b64 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b19      	cmp	r3, #25
 80027da:	d907      	bls.n	80027ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	f043 0320 	orr.w	r3, r3, #32
 80027e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80027ea:	e006      	b.n	80027fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	2b20      	cmp	r3, #32
 80027f8:	d1e9      	bne.n	80027ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b20      	cmp	r3, #32
 8002806:	d003      	beq.n	8002810 <I2C_IsErrorOccurred+0xe0>
 8002808:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0aa      	beq.n	8002766 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002814:	2b00      	cmp	r3, #0
 8002816:	d103      	bne.n	8002820 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2220      	movs	r2, #32
 800281e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	f043 0304 	orr.w	r3, r3, #4
 8002826:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00b      	beq.n	8002858 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002850:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	f043 0308 	orr.w	r3, r3, #8
 8002868:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002872:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00b      	beq.n	800289c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	f043 0302 	orr.w	r3, r3, #2
 800288a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002894:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800289c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d01c      	beq.n	80028de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7ff fe3b 	bl	8002520 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b0d      	ldr	r3, [pc, #52]	@ (80028ec <I2C_IsErrorOccurred+0x1bc>)
 80028b6:	400b      	ands	r3, r1
 80028b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	431a      	orrs	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80028de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3728      	adds	r7, #40	@ 0x28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	fe00e800 	.word	0xfe00e800

080028f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	817b      	strh	r3, [r7, #10]
 80028fe:	4613      	mov	r3, r2
 8002900:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002902:	897b      	ldrh	r3, [r7, #10]
 8002904:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002908:	7a7b      	ldrb	r3, [r7, #9]
 800290a:	041b      	lsls	r3, r3, #16
 800290c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002910:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	4313      	orrs	r3, r2
 800291a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800291e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	0d5b      	lsrs	r3, r3, #21
 800292a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800292e:	4b08      	ldr	r3, [pc, #32]	@ (8002950 <I2C_TransferConfig+0x60>)
 8002930:	430b      	orrs	r3, r1
 8002932:	43db      	mvns	r3, r3
 8002934:	ea02 0103 	and.w	r1, r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002942:	bf00      	nop
 8002944:	371c      	adds	r7, #28
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	03ff63ff 	.word	0x03ff63ff

08002954 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b20      	cmp	r3, #32
 8002968:	d138      	bne.n	80029dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002974:	2302      	movs	r3, #2
 8002976:	e032      	b.n	80029de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2224      	movs	r2, #36	@ 0x24
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80029a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6819      	ldr	r1, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	e000      	b.n	80029de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029dc:	2302      	movs	r3, #2
  }
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b085      	sub	sp, #20
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	d139      	bne.n	8002a74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e033      	b.n	8002a76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2224      	movs	r2, #36	@ 0x24
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0201 	bic.w	r2, r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	021b      	lsls	r3, r3, #8
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	e000      	b.n	8002a76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a74:	2302      	movs	r3, #2
  }
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a88:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a04      	ldr	r2, [pc, #16]	@ (8002aa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a92:	6013      	str	r3, [r2, #0]
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	58000400 	.word	0x58000400

08002aa4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002aa8:	4b04      	ldr	r3, [pc, #16]	@ (8002abc <HAL_PWREx_GetVoltageRange+0x18>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	58000400 	.word	0x58000400

08002ac0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002ac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ace:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ad2:	d101      	bne.n	8002ad8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002af2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002b06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
}
 8002b16:	bf00      	nop
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b32:	d101      	bne.n	8002b38 <LL_RCC_HSE_IsReady+0x18>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <LL_RCC_HSE_IsReady+0x1a>
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b56:	6013      	str	r3, [r2, #0]
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b74:	6013      	str	r3, [r2, #0]
}
 8002b76:	bf00      	nop
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b92:	d101      	bne.n	8002b98 <LL_RCC_HSI_IsReady+0x18>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <LL_RCC_HSI_IsReady+0x1a>
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	061b      	lsls	r3, r3, #24
 8002bba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	604b      	str	r3, [r1, #4]
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002be6:	bf00      	nop
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c00:	f023 0301 	bic.w	r3, r3, #1
 8002c04:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002c16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d101      	bne.n	8002c2a <LL_RCC_HSI48_IsReady+0x18>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <LL_RCC_HSI48_IsReady+0x1a>
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c92:	bf00      	nop
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cac:	f023 0304 	bic.w	r3, r3, #4
 8002cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d101      	bne.n	8002cd6 <LL_RCC_LSE_IsReady+0x18>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <LL_RCC_LSE_IsReady+0x1a>
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002cfa:	bf00      	nop
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d101      	bne.n	8002d3e <LL_RCC_LSI1_IsReady+0x18>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <LL_RCC_LSI1_IsReady+0x1a>
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d5a:	f043 0304 	orr.w	r3, r3, #4
 8002d5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d7c:	f023 0304 	bic.w	r3, r3, #4
 8002d80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002d92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d101      	bne.n	8002da6 <LL_RCC_LSI2_IsReady+0x18>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <LL_RCC_LSI2_IsReady+0x1a>
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dc2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	021b      	lsls	r3, r3, #8
 8002dca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6013      	str	r3, [r2, #0]
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e0c:	f023 0301 	bic.w	r3, r3, #1
 8002e10:	6013      	str	r3, [r2, #0]
}
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d101      	bne.n	8002e32 <LL_RCC_MSI_IsReady+0x16>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <LL_RCC_MSI_IsReady+0x18>
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e76:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2bb0      	cmp	r3, #176	@ 0xb0
 8002e7c:	d901      	bls.n	8002e82 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002e7e:	23b0      	movs	r3, #176	@ 0xb0
 8002e80:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002e82:	687b      	ldr	r3, [r7, #4]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	604b      	str	r3, [r1, #4]
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f023 0203 	bic.w	r2, r3, #3
 8002ecc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 030c 	and.w	r3, r3, #12
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	608b      	str	r3, [r1, #8]
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f5e:	f023 020f 	bic.w	r2, r3, #15
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	608b      	str	r3, [r1, #8]
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	608b      	str	r3, [r1, #8]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002fe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fec:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800300e:	4618      	mov	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003026:	4618      	mov	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003034:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800303e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003042:	6013      	str	r3, [r2, #0]
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003052:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800305c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003060:	6013      	str	r3, [r2, #0]
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800307e:	d101      	bne.n	8003084 <LL_RCC_PLL_IsReady+0x18>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <LL_RCC_PLL_IsReady+0x1a>
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80030aa:	b480      	push	{r7}
 80030ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80030ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80030c2:	b480      	push	{r7}
 80030c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80030c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80030da:	b480      	push	{r7}
 80030dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80030de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0303 	and.w	r3, r3, #3
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80030f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003104:	d101      	bne.n	800310a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003116:	b480      	push	{r7}
 8003118:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800311a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800311e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003126:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800312a:	d101      	bne.n	8003130 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003144:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800314c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003150:	d101      	bne.n	8003156 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003162:	b480      	push	{r7}
 8003164:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003166:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003170:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003174:	d101      	bne.n	800317a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003186:	b480      	push	{r7}
 8003188:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800318a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003194:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003198:	d101      	bne.n	800319e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ac:	b590      	push	{r4, r7, lr}
 80031ae:	b08d      	sub	sp, #52	@ 0x34
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e363      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 808d 	beq.w	80032e6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031cc:	f7ff fe89 	bl	8002ee2 <LL_RCC_GetSysClkSource>
 80031d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031d2:	f7ff ff82 	bl	80030da <LL_RCC_PLL_GetMainSource>
 80031d6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80031d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_RCC_OscConfig+0x3e>
 80031de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e0:	2b0c      	cmp	r3, #12
 80031e2:	d147      	bne.n	8003274 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80031e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d144      	bne.n	8003274 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e347      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80031fa:	f7ff fe34 	bl	8002e66 <LL_RCC_MSI_GetRange>
 80031fe:	4603      	mov	r3, r0
 8003200:	429c      	cmp	r4, r3
 8003202:	d914      	bls.n	800322e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fd2f 	bl	8003c6c <RCC_SetFlashLatencyFromMSIRange>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e336      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff fe0e 	bl	8002e3e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff fe32 	bl	8002e90 <LL_RCC_MSI_SetCalibTrimming>
 800322c:	e013      	b.n	8003256 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff fe03 	bl	8002e3e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fe27 	bl	8002e90 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fd10 	bl	8003c6c <RCC_SetFlashLatencyFromMSIRange>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e317      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003256:	f000 fcc9 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 800325a:	4603      	mov	r3, r0
 800325c:	4aa4      	ldr	r2, [pc, #656]	@ (80034f0 <HAL_RCC_OscConfig+0x344>)
 800325e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003260:	4ba4      	ldr	r3, [pc, #656]	@ (80034f4 <HAL_RCC_OscConfig+0x348>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7fe fc2f 	bl	8001ac8 <HAL_InitTick>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d039      	beq.n	80032e4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e308      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01e      	beq.n	80032ba <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800327c:	f7ff fdb0 	bl	8002de0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003280:	f7fe fc70 	bl	8001b64 <HAL_GetTick>
 8003284:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003288:	f7fe fc6c 	bl	8001b64 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e2f5      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800329a:	f7ff fdbf 	bl	8002e1c <LL_RCC_MSI_IsReady>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f1      	beq.n	8003288 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fdc8 	bl	8002e3e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff fdec 	bl	8002e90 <LL_RCC_MSI_SetCalibTrimming>
 80032b8:	e015      	b.n	80032e6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032ba:	f7ff fda0 	bl	8002dfe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032be:	f7fe fc51 	bl	8001b64 <HAL_GetTick>
 80032c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032c6:	f7fe fc4d 	bl	8001b64 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e2d6      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80032d8:	f7ff fda0 	bl	8002e1c <LL_RCC_MSI_IsReady>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f1      	bne.n	80032c6 <HAL_RCC_OscConfig+0x11a>
 80032e2:	e000      	b.n	80032e6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80032e4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d047      	beq.n	8003382 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f2:	f7ff fdf6 	bl	8002ee2 <LL_RCC_GetSysClkSource>
 80032f6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032f8:	f7ff feef 	bl	80030da <LL_RCC_PLL_GetMainSource>
 80032fc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d005      	beq.n	8003310 <HAL_RCC_OscConfig+0x164>
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	2b0c      	cmp	r3, #12
 8003308:	d108      	bne.n	800331c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	2b03      	cmp	r3, #3
 800330e:	d105      	bne.n	800331c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d134      	bne.n	8003382 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e2b4      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003324:	d102      	bne.n	800332c <HAL_RCC_OscConfig+0x180>
 8003326:	f7ff fbdd 	bl	8002ae4 <LL_RCC_HSE_Enable>
 800332a:	e001      	b.n	8003330 <HAL_RCC_OscConfig+0x184>
 800332c:	f7ff fbe9 	bl	8002b02 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d012      	beq.n	800335e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fe fc14 	bl	8001b64 <HAL_GetTick>
 800333c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003340:	f7fe fc10 	bl	8001b64 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	@ 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e299      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003352:	f7ff fbe5 	bl	8002b20 <LL_RCC_HSE_IsReady>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f1      	beq.n	8003340 <HAL_RCC_OscConfig+0x194>
 800335c:	e011      	b.n	8003382 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335e:	f7fe fc01 	bl	8001b64 <HAL_GetTick>
 8003362:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003366:	f7fe fbfd 	bl	8001b64 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b64      	cmp	r3, #100	@ 0x64
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e286      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003378:	f7ff fbd2 	bl	8002b20 <LL_RCC_HSE_IsReady>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f1      	bne.n	8003366 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d04c      	beq.n	8003428 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800338e:	f7ff fda8 	bl	8002ee2 <LL_RCC_GetSysClkSource>
 8003392:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003394:	f7ff fea1 	bl	80030da <LL_RCC_PLL_GetMainSource>
 8003398:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2b04      	cmp	r3, #4
 800339e:	d005      	beq.n	80033ac <HAL_RCC_OscConfig+0x200>
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b0c      	cmp	r3, #12
 80033a4:	d10e      	bne.n	80033c4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d10b      	bne.n	80033c4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e266      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fbf1 	bl	8002ba4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80033c2:	e031      	b.n	8003428 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d019      	beq.n	8003400 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033cc:	f7ff fbba 	bl	8002b44 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe fbc8 	bl	8001b64 <HAL_GetTick>
 80033d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d8:	f7fe fbc4 	bl	8001b64 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e24d      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80033ea:	f7ff fbc9 	bl	8002b80 <LL_RCC_HSI_IsReady>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f1      	beq.n	80033d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fbd3 	bl	8002ba4 <LL_RCC_HSI_SetCalibTrimming>
 80033fe:	e013      	b.n	8003428 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003400:	f7ff fbaf 	bl	8002b62 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe fbae 	bl	8001b64 <HAL_GetTick>
 8003408:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340c:	f7fe fbaa 	bl	8001b64 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e233      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800341e:	f7ff fbaf 	bl	8002b80 <LL_RCC_HSI_IsReady>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f1      	bne.n	800340c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d106      	bne.n	8003442 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80a3 	beq.w	8003588 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d076      	beq.n	8003538 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	d046      	beq.n	80034e4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003456:	f7ff fc66 	bl	8002d26 <LL_RCC_LSI1_IsReady>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d113      	bne.n	8003488 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003460:	f7ff fc3f 	bl	8002ce2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003464:	f7fe fb7e 	bl	8001b64 <HAL_GetTick>
 8003468:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800346c:	f7fe fb7a 	bl	8001b64 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e203      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800347e:	f7ff fc52 	bl	8002d26 <LL_RCC_LSI1_IsReady>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f1      	beq.n	800346c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003488:	f7ff fc5f 	bl	8002d4a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fe fb6a 	bl	8001b64 <HAL_GetTick>
 8003490:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003494:	f7fe fb66 	bl	8001b64 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e1ef      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80034a6:	f7ff fc72 	bl	8002d8e <LL_RCC_LSI2_IsReady>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0f1      	beq.n	8003494 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fc7c 	bl	8002db2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80034ba:	f7ff fc23 	bl	8002d04 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fe fb51 	bl	8001b64 <HAL_GetTick>
 80034c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80034c6:	f7fe fb4d 	bl	8001b64 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e1d6      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80034d8:	f7ff fc25 	bl	8002d26 <LL_RCC_LSI1_IsReady>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f1      	bne.n	80034c6 <HAL_RCC_OscConfig+0x31a>
 80034e2:	e051      	b.n	8003588 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80034e4:	f7ff fbfd 	bl	8002ce2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fe fb3c 	bl	8001b64 <HAL_GetTick>
 80034ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80034ee:	e00c      	b.n	800350a <HAL_RCC_OscConfig+0x35e>
 80034f0:	20000008 	.word	0x20000008
 80034f4:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80034f8:	f7fe fb34 	bl	8001b64 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e1bd      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800350a:	f7ff fc0c 	bl	8002d26 <LL_RCC_LSI1_IsReady>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f1      	beq.n	80034f8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003514:	f7ff fc2a 	bl	8002d6c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800351a:	f7fe fb23 	bl	8001b64 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b03      	cmp	r3, #3
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e1ac      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800352c:	f7ff fc2f 	bl	8002d8e <LL_RCC_LSI2_IsReady>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f1      	bne.n	800351a <HAL_RCC_OscConfig+0x36e>
 8003536:	e027      	b.n	8003588 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003538:	f7ff fc18 	bl	8002d6c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fe fb12 	bl	8001b64 <HAL_GetTick>
 8003540:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003544:	f7fe fb0e 	bl	8001b64 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b03      	cmp	r3, #3
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e197      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003556:	f7ff fc1a 	bl	8002d8e <LL_RCC_LSI2_IsReady>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1f1      	bne.n	8003544 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003560:	f7ff fbd0 	bl	8002d04 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003564:	f7fe fafe 	bl	8001b64 <HAL_GetTick>
 8003568:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800356c:	f7fe fafa 	bl	8001b64 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e183      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800357e:	f7ff fbd2 	bl	8002d26 <LL_RCC_LSI1_IsReady>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f1      	bne.n	800356c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d05b      	beq.n	800364c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003594:	4ba7      	ldr	r3, [pc, #668]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d114      	bne.n	80035ca <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80035a0:	f7ff fa70 	bl	8002a84 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a4:	f7fe fade 	bl	8001b64 <HAL_GetTick>
 80035a8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ac:	f7fe fada 	bl	8001b64 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e163      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035be:	4b9d      	ldr	r3, [pc, #628]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d102      	bne.n	80035d8 <HAL_RCC_OscConfig+0x42c>
 80035d2:	f7ff fb30 	bl	8002c36 <LL_RCC_LSE_Enable>
 80035d6:	e00c      	b.n	80035f2 <HAL_RCC_OscConfig+0x446>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b05      	cmp	r3, #5
 80035de:	d104      	bne.n	80035ea <HAL_RCC_OscConfig+0x43e>
 80035e0:	f7ff fb4b 	bl	8002c7a <LL_RCC_LSE_EnableBypass>
 80035e4:	f7ff fb27 	bl	8002c36 <LL_RCC_LSE_Enable>
 80035e8:	e003      	b.n	80035f2 <HAL_RCC_OscConfig+0x446>
 80035ea:	f7ff fb35 	bl	8002c58 <LL_RCC_LSE_Disable>
 80035ee:	f7ff fb55 	bl	8002c9c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d014      	beq.n	8003624 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fe fab3 	bl	8001b64 <HAL_GetTick>
 80035fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003600:	e00a      	b.n	8003618 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fe faaf 	bl	8001b64 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e136      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003618:	f7ff fb51 	bl	8002cbe <LL_RCC_LSE_IsReady>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0ef      	beq.n	8003602 <HAL_RCC_OscConfig+0x456>
 8003622:	e013      	b.n	800364c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003624:	f7fe fa9e 	bl	8001b64 <HAL_GetTick>
 8003628:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800362a:	e00a      	b.n	8003642 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362c:	f7fe fa9a 	bl	8001b64 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e121      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003642:	f7ff fb3c 	bl	8002cbe <LL_RCC_LSE_IsReady>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ef      	bne.n	800362c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d02c      	beq.n	80036b2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365c:	2b00      	cmp	r3, #0
 800365e:	d014      	beq.n	800368a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003660:	f7ff fab5 	bl	8002bce <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003664:	f7fe fa7e 	bl	8001b64 <HAL_GetTick>
 8003668:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800366c:	f7fe fa7a 	bl	8001b64 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e103      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800367e:	f7ff fac8 	bl	8002c12 <LL_RCC_HSI48_IsReady>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f1      	beq.n	800366c <HAL_RCC_OscConfig+0x4c0>
 8003688:	e013      	b.n	80036b2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800368a:	f7ff fab1 	bl	8002bf0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368e:	f7fe fa69 	bl	8001b64 <HAL_GetTick>
 8003692:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003696:	f7fe fa65 	bl	8001b64 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e0ee      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80036a8:	f7ff fab3 	bl	8002c12 <LL_RCC_HSI48_IsReady>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f1      	bne.n	8003696 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 80e4 	beq.w	8003884 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036bc:	f7ff fc11 	bl	8002ee2 <LL_RCC_GetSysClkSource>
 80036c0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80036c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	f040 80b4 	bne.w	800383c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 0203 	and.w	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	429a      	cmp	r2, r3
 80036e0:	d123      	bne.n	800372a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d11c      	bne.n	800372a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	0a1b      	lsrs	r3, r3, #8
 80036f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d114      	bne.n	800372a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d10d      	bne.n	800372a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003718:	429a      	cmp	r2, r3
 800371a:	d106      	bne.n	800372a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003726:	429a      	cmp	r2, r3
 8003728:	d05d      	beq.n	80037e6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2b0c      	cmp	r3, #12
 800372e:	d058      	beq.n	80037e2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e0a1      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003742:	f7ff fc84 	bl	800304e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003746:	f7fe fa0d 	bl	8001b64 <HAL_GetTick>
 800374a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374e:	f7fe fa09 	bl	8001b64 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e092      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1ef      	bne.n	800374e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800376e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	4b30      	ldr	r3, [pc, #192]	@ (8003838 <HAL_RCC_OscConfig+0x68c>)
 8003776:	4013      	ands	r3, r2
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003780:	4311      	orrs	r1, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003786:	0212      	lsls	r2, r2, #8
 8003788:	4311      	orrs	r1, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800378e:	4311      	orrs	r1, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003794:	4311      	orrs	r1, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800379a:	430a      	orrs	r2, r1
 800379c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037a4:	f7ff fc44 	bl	8003030 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037b8:	f7fe f9d4 	bl	8001b64 <HAL_GetTick>
 80037bc:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fe f9d0 	bl	8001b64 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e059      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0ef      	beq.n	80037c0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037e0:	e050      	b.n	8003884 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e04f      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d147      	bne.n	8003884 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037f4:	f7ff fc1c 	bl	8003030 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003806:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003808:	f7fe f9ac 	bl	8001b64 <HAL_GetTick>
 800380c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003810:	f7fe f9a8 	bl	8001b64 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e031      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0ef      	beq.n	8003810 <HAL_RCC_OscConfig+0x664>
 8003830:	e028      	b.n	8003884 <HAL_RCC_OscConfig+0x6d8>
 8003832:	bf00      	nop
 8003834:	58000400 	.word	0x58000400
 8003838:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	2b0c      	cmp	r3, #12
 8003840:	d01e      	beq.n	8003880 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003842:	f7ff fc04 	bl	800304e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003846:	f7fe f98d 	bl	8001b64 <HAL_GetTick>
 800384a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384e:	f7fe f989 	bl	8001b64 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e012      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1ef      	bne.n	800384e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800386e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003878:	4b05      	ldr	r3, [pc, #20]	@ (8003890 <HAL_RCC_OscConfig+0x6e4>)
 800387a:	4013      	ands	r3, r2
 800387c:	60cb      	str	r3, [r1, #12]
 800387e:	e001      	b.n	8003884 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3734      	adds	r7, #52	@ 0x34
 800388a:	46bd      	mov	sp, r7
 800388c:	bd90      	pop	{r4, r7, pc}
 800388e:	bf00      	nop
 8003890:	eefefffc 	.word	0xeefefffc

08003894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e12d      	b.n	8003b04 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038a8:	4b98      	ldr	r3, [pc, #608]	@ (8003b0c <HAL_RCC_ClockConfig+0x278>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d91b      	bls.n	80038ee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b95      	ldr	r3, [pc, #596]	@ (8003b0c <HAL_RCC_ClockConfig+0x278>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 0207 	bic.w	r2, r3, #7
 80038be:	4993      	ldr	r1, [pc, #588]	@ (8003b0c <HAL_RCC_ClockConfig+0x278>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c6:	f7fe f94d 	bl	8001b64 <HAL_GetTick>
 80038ca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80038ce:	f7fe f949 	bl	8001b64 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e111      	b.n	8003b04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e0:	4b8a      	ldr	r3, [pc, #552]	@ (8003b0c <HAL_RCC_ClockConfig+0x278>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d1ef      	bne.n	80038ce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d016      	beq.n	8003928 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff fafb 	bl	8002efa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003904:	f7fe f92e 	bl	8001b64 <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800390c:	f7fe f92a 	bl	8001b64 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e0f2      	b.n	8003b04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800391e:	f7ff fbe8 	bl	80030f2 <LL_RCC_IsActiveFlag_HPRE>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f1      	beq.n	800390c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d016      	beq.n	8003962 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff faf2 	bl	8002f22 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800393e:	f7fe f911 	bl	8001b64 <HAL_GetTick>
 8003942:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003944:	e008      	b.n	8003958 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003946:	f7fe f90d 	bl	8001b64 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e0d5      	b.n	8003b04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003958:	f7ff fbdd 	bl	8003116 <LL_RCC_IsActiveFlag_C2HPRE>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f1      	beq.n	8003946 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d016      	beq.n	800399c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff faeb 	bl	8002f4e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003978:	f7fe f8f4 	bl	8001b64 <HAL_GetTick>
 800397c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800397e:	e008      	b.n	8003992 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003980:	f7fe f8f0 	bl	8001b64 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e0b8      	b.n	8003b04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003992:	f7ff fbd3 	bl	800313c <LL_RCC_IsActiveFlag_SHDHPRE>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0f1      	beq.n	8003980 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d016      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fae5 	bl	8002f7c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039b2:	f7fe f8d7 	bl	8001b64 <HAL_GetTick>
 80039b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039ba:	f7fe f8d3 	bl	8001b64 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e09b      	b.n	8003b04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80039cc:	f7ff fbc9 	bl	8003162 <LL_RCC_IsActiveFlag_PPRE1>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f1      	beq.n	80039ba <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d017      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff fadb 	bl	8002fa4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039ee:	f7fe f8b9 	bl	8001b64 <HAL_GetTick>
 80039f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039f6:	f7fe f8b5 	bl	8001b64 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e07d      	b.n	8003b04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003a08:	f7ff fbbd 	bl	8003186 <LL_RCC_IsActiveFlag_PPRE2>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f1      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d043      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d106      	bne.n	8003a34 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003a26:	f7ff f87b 	bl	8002b20 <LL_RCC_HSE_IsReady>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d11e      	bne.n	8003a6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e067      	b.n	8003b04 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d106      	bne.n	8003a4a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003a3c:	f7ff fb16 	bl	800306c <LL_RCC_PLL_IsReady>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d113      	bne.n	8003a6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e05c      	b.n	8003b04 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003a52:	f7ff f9e3 	bl	8002e1c <LL_RCC_MSI_IsReady>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d108      	bne.n	8003a6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e051      	b.n	8003b04 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003a60:	f7ff f88e 	bl	8002b80 <LL_RCC_HSI_IsReady>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e04a      	b.n	8003b04 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fa21 	bl	8002eba <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a78:	f7fe f874 	bl	8001b64 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a80:	f7fe f870 	bl	8001b64 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e036      	b.n	8003b04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	f7ff fa24 	bl	8002ee2 <LL_RCC_GetSysClkSource>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d1ec      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa6:	4b19      	ldr	r3, [pc, #100]	@ (8003b0c <HAL_RCC_ClockConfig+0x278>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d21b      	bcs.n	8003aec <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab4:	4b15      	ldr	r3, [pc, #84]	@ (8003b0c <HAL_RCC_ClockConfig+0x278>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f023 0207 	bic.w	r2, r3, #7
 8003abc:	4913      	ldr	r1, [pc, #76]	@ (8003b0c <HAL_RCC_ClockConfig+0x278>)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac4:	f7fe f84e 	bl	8001b64 <HAL_GetTick>
 8003ac8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003acc:	f7fe f84a 	bl	8001b64 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e012      	b.n	8003b04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ade:	4b0b      	ldr	r3, [pc, #44]	@ (8003b0c <HAL_RCC_ClockConfig+0x278>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d1ef      	bne.n	8003acc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003aec:	f000 f87e 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 8003af0:	4603      	mov	r3, r0
 8003af2:	4a07      	ldr	r2, [pc, #28]	@ (8003b10 <HAL_RCC_ClockConfig+0x27c>)
 8003af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003af6:	f7fe f841 	bl	8001b7c <HAL_GetTickPrio>
 8003afa:	4603      	mov	r3, r0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fd ffe3 	bl	8001ac8 <HAL_InitTick>
 8003b02:	4603      	mov	r3, r0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	58004000 	.word	0x58004000
 8003b10:	20000008 	.word	0x20000008

08003b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b14:	b590      	push	{r4, r7, lr}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b1a:	f7ff f9e2 	bl	8002ee2 <LL_RCC_GetSysClkSource>
 8003b1e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003b26:	f7ff f99e 	bl	8002e66 <LL_RCC_MSI_GetRange>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	4a2b      	ldr	r2, [pc, #172]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	e04b      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d102      	bne.n	8003b48 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b42:	4b28      	ldr	r3, [pc, #160]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	e045      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d10a      	bne.n	8003b64 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b4e:	f7fe ffb7 	bl	8002ac0 <LL_RCC_HSE_IsEnabledDiv2>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d102      	bne.n	8003b5e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003b58:	4b22      	ldr	r3, [pc, #136]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	e03a      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003b5e:	4b22      	ldr	r3, [pc, #136]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	e037      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003b64:	f7ff fab9 	bl	80030da <LL_RCC_PLL_GetMainSource>
 8003b68:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d003      	beq.n	8003b78 <HAL_RCC_GetSysClockFreq+0x64>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d003      	beq.n	8003b7e <HAL_RCC_GetSysClockFreq+0x6a>
 8003b76:	e00d      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003b78:	4b1a      	ldr	r3, [pc, #104]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b7a:	60bb      	str	r3, [r7, #8]
        break;
 8003b7c:	e015      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b7e:	f7fe ff9f 	bl	8002ac0 <LL_RCC_HSE_IsEnabledDiv2>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d102      	bne.n	8003b8e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003b88:	4b16      	ldr	r3, [pc, #88]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b8a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003b8c:	e00d      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003b8e:	4b16      	ldr	r3, [pc, #88]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b90:	60bb      	str	r3, [r7, #8]
        break;
 8003b92:	e00a      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003b94:	f7ff f967 	bl	8002e66 <LL_RCC_MSI_GetRange>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	091b      	lsrs	r3, r3, #4
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	4a0f      	ldr	r2, [pc, #60]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba6:	60bb      	str	r3, [r7, #8]
        break;
 8003ba8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003baa:	f7ff fa71 	bl	8003090 <LL_RCC_PLL_GetN>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	fb03 f402 	mul.w	r4, r3, r2
 8003bb6:	f7ff fa84 	bl	80030c2 <LL_RCC_PLL_GetDivider>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	091b      	lsrs	r3, r3, #4
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	fbb4 f4f3 	udiv	r4, r4, r3
 8003bc4:	f7ff fa71 	bl	80030aa <LL_RCC_PLL_GetR>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	0f5b      	lsrs	r3, r3, #29
 8003bcc:	3301      	adds	r3, #1
 8003bce:	fbb4 f3f3 	udiv	r3, r4, r3
 8003bd2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd90      	pop	{r4, r7, pc}
 8003bde:	bf00      	nop
 8003be0:	08007d7c 	.word	0x08007d7c
 8003be4:	00f42400 	.word	0x00f42400
 8003be8:	01e84800 	.word	0x01e84800

08003bec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bec:	b598      	push	{r3, r4, r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003bf0:	f7ff ff90 	bl	8003b14 <HAL_RCC_GetSysClockFreq>
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	f7ff f9e9 	bl	8002fcc <LL_RCC_GetAHBPrescaler>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	4a03      	ldr	r2, [pc, #12]	@ (8003c10 <HAL_RCC_GetHCLKFreq+0x24>)
 8003c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c08:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	bd98      	pop	{r3, r4, r7, pc}
 8003c10:	08007d1c 	.word	0x08007d1c

08003c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c14:	b598      	push	{r3, r4, r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003c18:	f7ff ffe8 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 8003c1c:	4604      	mov	r4, r0
 8003c1e:	f7ff f9ef 	bl	8003000 <LL_RCC_GetAPB1Prescaler>
 8003c22:	4603      	mov	r3, r0
 8003c24:	0a1b      	lsrs	r3, r3, #8
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	4a04      	ldr	r2, [pc, #16]	@ (8003c3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c30:	f003 031f 	and.w	r3, r3, #31
 8003c34:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	bd98      	pop	{r3, r4, r7, pc}
 8003c3c:	08007d5c 	.word	0x08007d5c

08003c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c40:	b598      	push	{r3, r4, r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003c44:	f7ff ffd2 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 8003c48:	4604      	mov	r4, r0
 8003c4a:	f7ff f9e5 	bl	8003018 <LL_RCC_GetAPB2Prescaler>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	0adb      	lsrs	r3, r3, #11
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	4a04      	ldr	r2, [pc, #16]	@ (8003c68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd98      	pop	{r3, r4, r7, pc}
 8003c68:	08007d5c 	.word	0x08007d5c

08003c6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003c6c:	b590      	push	{r4, r7, lr}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2bb0      	cmp	r3, #176	@ 0xb0
 8003c78:	d903      	bls.n	8003c82 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003c7a:	4b15      	ldr	r3, [pc, #84]	@ (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	e007      	b.n	8003c92 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	4a11      	ldr	r2, [pc, #68]	@ (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c90:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003c92:	f7ff f9a7 	bl	8002fe4 <LL_RCC_GetAHB4Prescaler>
 8003c96:	4603      	mov	r3, r0
 8003c98:	091b      	lsrs	r3, r3, #4
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003caa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	0c9c      	lsrs	r4, r3, #18
 8003cb6:	f7fe fef5 	bl	8002aa4 <HAL_PWREx_GetVoltageRange>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	f000 f80c 	bl	8003cdc <RCC_SetFlashLatency>
 8003cc4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd90      	pop	{r4, r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	08007d7c 	.word	0x08007d7c
 8003cd4:	08007d1c 	.word	0x08007d1c
 8003cd8:	431bde83 	.word	0x431bde83

08003cdc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003cdc:	b590      	push	{r4, r7, lr}
 8003cde:	b093      	sub	sp, #76	@ 0x4c
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003ce6:	4b37      	ldr	r3, [pc, #220]	@ (8003dc4 <RCC_SetFlashLatency+0xe8>)
 8003ce8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003cec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003cf2:	4a35      	ldr	r2, [pc, #212]	@ (8003dc8 <RCC_SetFlashLatency+0xec>)
 8003cf4:	f107 031c 	add.w	r3, r7, #28
 8003cf8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003cfe:	4b33      	ldr	r3, [pc, #204]	@ (8003dcc <RCC_SetFlashLatency+0xf0>)
 8003d00:	f107 040c 	add.w	r4, r7, #12
 8003d04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d14:	d11a      	bne.n	8003d4c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003d16:	2300      	movs	r3, #0
 8003d18:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d1a:	e013      	b.n	8003d44 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	3348      	adds	r3, #72	@ 0x48
 8003d22:	443b      	add	r3, r7
 8003d24:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d807      	bhi.n	8003d3e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	3348      	adds	r3, #72	@ 0x48
 8003d34:	443b      	add	r3, r7
 8003d36:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003d3a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003d3c:	e020      	b.n	8003d80 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d40:	3301      	adds	r3, #1
 8003d42:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d9e8      	bls.n	8003d1c <RCC_SetFlashLatency+0x40>
 8003d4a:	e019      	b.n	8003d80 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d50:	e013      	b.n	8003d7a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	3348      	adds	r3, #72	@ 0x48
 8003d58:	443b      	add	r3, r7
 8003d5a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d807      	bhi.n	8003d74 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	3348      	adds	r3, #72	@ 0x48
 8003d6a:	443b      	add	r3, r7
 8003d6c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003d70:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003d72:	e005      	b.n	8003d80 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d76:	3301      	adds	r3, #1
 8003d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d9e8      	bls.n	8003d52 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003d80:	4b13      	ldr	r3, [pc, #76]	@ (8003dd0 <RCC_SetFlashLatency+0xf4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f023 0207 	bic.w	r2, r3, #7
 8003d88:	4911      	ldr	r1, [pc, #68]	@ (8003dd0 <RCC_SetFlashLatency+0xf4>)
 8003d8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003d90:	f7fd fee8 	bl	8001b64 <HAL_GetTick>
 8003d94:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003d96:	e008      	b.n	8003daa <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003d98:	f7fd fee4 	bl	8001b64 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e007      	b.n	8003dba <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003daa:	4b09      	ldr	r3, [pc, #36]	@ (8003dd0 <RCC_SetFlashLatency+0xf4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d1ef      	bne.n	8003d98 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	374c      	adds	r7, #76	@ 0x4c
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd90      	pop	{r4, r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	08007cf0 	.word	0x08007cf0
 8003dc8:	08007d00 	.word	0x08007d00
 8003dcc:	08007d0c 	.word	0x08007d0c
 8003dd0:	58004000 	.word	0x58004000

08003dd4 <LL_RCC_LSE_IsEnabled>:
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <LL_RCC_LSE_IsEnabled+0x18>
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <LL_RCC_LSE_IsEnabled+0x1a>
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_RCC_LSE_IsReady>:
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d101      	bne.n	8003e10 <LL_RCC_LSE_IsReady+0x18>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <LL_RCC_LSE_IsReady+0x1a>
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <LL_RCC_SetRFWKPClockSource>:
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003e24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e2c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <LL_RCC_SetSMPSClockSource>:
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	f023 0203 	bic.w	r2, r3, #3
 8003e5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <LL_RCC_SetSMPSPrescaler>:
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <LL_RCC_SetUSARTClockSource>:
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea8:	f023 0203 	bic.w	r2, r3, #3
 8003eac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <LL_RCC_SetLPUARTClockSource>:
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003ecc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ed8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <LL_RCC_SetI2CClockSource>:
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003efc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	091b      	lsrs	r3, r3, #4
 8003f04:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	401a      	ands	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003f14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <LL_RCC_SetLPTIMClockSource>:
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003f32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f36:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	0c1b      	lsrs	r3, r3, #16
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	43db      	mvns	r3, r3
 8003f42:	401a      	ands	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	041b      	lsls	r3, r3, #16
 8003f48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <LL_RCC_SetSAIClockSource>:
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003f66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <LL_RCC_SetRNGClockSource>:
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003f9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <LL_RCC_SetCLK48ClockSource>:
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003fbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <LL_RCC_SetUSBClockSource>:
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff ffe3 	bl	8003fb6 <LL_RCC_SetCLK48ClockSource>
}
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <LL_RCC_SetADCClockSource>:
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004008:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800400c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <LL_RCC_SetRTCClockSource>:
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800402c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004034:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004038:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <LL_RCC_GetRTCClockSource>:
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004060:	4618      	mov	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <LL_RCC_ForceBackupDomainReset>:
{
 800406a:	b480      	push	{r7}
 800406c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800406e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004076:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800407a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800407e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004082:	bf00      	nop
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <LL_RCC_ReleaseBackupDomainReset>:
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004098:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800409c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <LL_RCC_PLLSAI1_Enable>:
{
 80040ae:	b480      	push	{r7}
 80040b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80040b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040c0:	6013      	str	r3, [r2, #0]
}
 80040c2:	bf00      	nop
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <LL_RCC_PLLSAI1_Disable>:
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80040d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80040de:	6013      	str	r3, [r2, #0]
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <LL_RCC_PLLSAI1_IsReady>:
{
 80040ea:	b480      	push	{r7}
 80040ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80040ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040fc:	d101      	bne.n	8004102 <LL_RCC_PLLSAI1_IsReady+0x18>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b088      	sub	sp, #32
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004116:	2300      	movs	r3, #0
 8004118:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800411a:	2300      	movs	r3, #0
 800411c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	d034      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004132:	d021      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004134:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004138:	d81b      	bhi.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800413a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800413e:	d01d      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004140:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004144:	d815      	bhi.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00b      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800414a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800414e:	d110      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800415a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800415e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004160:	e00d      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3304      	adds	r3, #4
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f947 	bl	80043fa <RCCEx_PLLSAI1_ConfigNP>
 800416c:	4603      	mov	r3, r0
 800416e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004170:	e005      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	77fb      	strb	r3, [r7, #31]
        break;
 8004176:	e002      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004178:	bf00      	nop
 800417a:	e000      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800417c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800417e:	7ffb      	ldrb	r3, [r7, #31]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d105      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff fee8 	bl	8003f5e <LL_RCC_SetSAIClockSource>
 800418e:	e001      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004190:	7ffb      	ldrb	r3, [r7, #31]
 8004192:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800419c:	2b00      	cmp	r3, #0
 800419e:	d046      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80041a0:	f7ff ff56 	bl	8004050 <LL_RCC_GetRTCClockSource>
 80041a4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d03c      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80041b0:	f7fe fc68 	bl	8002a84 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d105      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff ff30 	bl	8004024 <LL_RCC_SetRTCClockSource>
 80041c4:	e02e      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80041c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ce:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80041d0:	f7ff ff4b 	bl	800406a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80041d4:	f7ff ff5a 	bl	800408c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80041e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80041f0:	f7ff fdf0 	bl	8003dd4 <LL_RCC_LSE_IsEnabled>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d114      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041fa:	f7fd fcb3 	bl	8001b64 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004200:	e00b      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004202:	f7fd fcaf 	bl	8001b64 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004210:	4293      	cmp	r3, r2
 8004212:	d902      	bls.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	77fb      	strb	r3, [r7, #31]
              break;
 8004218:	e004      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800421a:	f7ff fded 	bl	8003df8 <LL_RCC_LSE_IsReady>
 800421e:	4603      	mov	r3, r0
 8004220:	2b01      	cmp	r3, #1
 8004222:	d1ee      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004224:	7ffb      	ldrb	r3, [r7, #31]
 8004226:	77bb      	strb	r3, [r7, #30]
 8004228:	e001      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422a:	7ffb      	ldrb	r3, [r7, #31]
 800422c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d004      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fe2a 	bl	8003e98 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d004      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fe35 	bl	8003ec4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b00      	cmp	r3, #0
 8004264:	d004      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fe5d 	bl	8003f2a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b00      	cmp	r3, #0
 800427a:	d004      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff fe52 	bl	8003f2a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	d004      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff fe2a 	bl	8003ef0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d004      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff fe1f 	bl	8003ef0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d022      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fe8d 	bl	8003fe2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042d0:	d107      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80042d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042e0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042ea:	d10b      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 f8dd 	bl	80044b0 <RCCEx_PLLSAI1_ConfigNQ>
 80042f6:	4603      	mov	r3, r0
 80042f8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80042fa:	7ffb      	ldrb	r3, [r7, #31]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004300:	7ffb      	ldrb	r3, [r7, #31]
 8004302:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800430c:	2b00      	cmp	r3, #0
 800430e:	d02b      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004318:	d008      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004322:	d003      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004328:	2b00      	cmp	r3, #0
 800432a:	d105      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fe2a 	bl	8003f8a <LL_RCC_SetRNGClockSource>
 8004336:	e00a      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	2000      	movs	r0, #0
 8004344:	f7ff fe21 	bl	8003f8a <LL_RCC_SetRNGClockSource>
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7ff fe34 	bl	8003fb6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004352:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004356:	d107      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004366:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004370:	2b00      	cmp	r3, #0
 8004372:	d022      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff fe3d 	bl	8003ff8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004382:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004386:	d107      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004396:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043a0:	d10b      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f8dd 	bl	8004566 <RCCEx_PLLSAI1_ConfigNR>
 80043ac:	4603      	mov	r3, r0
 80043ae:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80043b0:	7ffb      	ldrb	r3, [r7, #31]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80043b6:	7ffb      	ldrb	r3, [r7, #31]
 80043b8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fd26 	bl	8003e1c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d009      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fd45 	bl	8003e70 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fd2c 	bl	8003e48 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80043f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004406:	f7ff fe61 	bl	80040cc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800440a:	f7fd fbab 	bl	8001b64 <HAL_GetTick>
 800440e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004410:	e009      	b.n	8004426 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004412:	f7fd fba7 	bl	8001b64 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d902      	bls.n	8004426 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	73fb      	strb	r3, [r7, #15]
      break;
 8004424:	e004      	b.n	8004430 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004426:	f7ff fe60 	bl	80040ea <LL_RCC_PLLSAI1_IsReady>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f0      	bne.n	8004412 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d137      	bne.n	80044a6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800444a:	4313      	orrs	r3, r2
 800444c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800444e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004460:	4313      	orrs	r3, r2
 8004462:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004464:	f7ff fe23 	bl	80040ae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004468:	f7fd fb7c 	bl	8001b64 <HAL_GetTick>
 800446c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800446e:	e009      	b.n	8004484 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004470:	f7fd fb78 	bl	8001b64 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d902      	bls.n	8004484 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	73fb      	strb	r3, [r7, #15]
        break;
 8004482:	e004      	b.n	800448e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004484:	f7ff fe31 	bl	80040ea <LL_RCC_PLLSAI1_IsReady>
 8004488:	4603      	mov	r3, r0
 800448a:	2b01      	cmp	r3, #1
 800448c:	d1f0      	bne.n	8004470 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d108      	bne.n	80044a6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044a2:	4313      	orrs	r3, r2
 80044a4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80044bc:	f7ff fe06 	bl	80040cc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80044c0:	f7fd fb50 	bl	8001b64 <HAL_GetTick>
 80044c4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80044c6:	e009      	b.n	80044dc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044c8:	f7fd fb4c 	bl	8001b64 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d902      	bls.n	80044dc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	73fb      	strb	r3, [r7, #15]
      break;
 80044da:	e004      	b.n	80044e6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80044dc:	f7ff fe05 	bl	80040ea <LL_RCC_PLLSAI1_IsReady>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d137      	bne.n	800455c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80044ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	021b      	lsls	r3, r3, #8
 80044fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004500:	4313      	orrs	r3, r2
 8004502:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004516:	4313      	orrs	r3, r2
 8004518:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800451a:	f7ff fdc8 	bl	80040ae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800451e:	f7fd fb21 	bl	8001b64 <HAL_GetTick>
 8004522:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004524:	e009      	b.n	800453a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004526:	f7fd fb1d 	bl	8001b64 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d902      	bls.n	800453a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	73fb      	strb	r3, [r7, #15]
        break;
 8004538:	e004      	b.n	8004544 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800453a:	f7ff fdd6 	bl	80040ea <LL_RCC_PLLSAI1_IsReady>
 800453e:	4603      	mov	r3, r0
 8004540:	2b01      	cmp	r3, #1
 8004542:	d1f0      	bne.n	8004526 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d108      	bne.n	800455c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800454a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004558:	4313      	orrs	r3, r2
 800455a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800455c:	7bfb      	ldrb	r3, [r7, #15]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004572:	f7ff fdab 	bl	80040cc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004576:	f7fd faf5 	bl	8001b64 <HAL_GetTick>
 800457a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800457c:	e009      	b.n	8004592 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800457e:	f7fd faf1 	bl	8001b64 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d902      	bls.n	8004592 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	73fb      	strb	r3, [r7, #15]
      break;
 8004590:	e004      	b.n	800459c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004592:	f7ff fdaa 	bl	80040ea <LL_RCC_PLLSAI1_IsReady>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1f0      	bne.n	800457e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d137      	bne.n	8004612 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80045a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	021b      	lsls	r3, r3, #8
 80045b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045b6:	4313      	orrs	r3, r2
 80045b8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80045ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045cc:	4313      	orrs	r3, r2
 80045ce:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80045d0:	f7ff fd6d 	bl	80040ae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d4:	f7fd fac6 	bl	8001b64 <HAL_GetTick>
 80045d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045da:	e009      	b.n	80045f0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045dc:	f7fd fac2 	bl	8001b64 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d902      	bls.n	80045f0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	73fb      	strb	r3, [r7, #15]
        break;
 80045ee:	e004      	b.n	80045fa <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045f0:	f7ff fd7b 	bl	80040ea <LL_RCC_PLLSAI1_IsReady>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d1f0      	bne.n	80045dc <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d108      	bne.n	8004612 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800460e:	4313      	orrs	r3, r2
 8004610:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004612:	7bfb      	ldrb	r3, [r7, #15]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <LL_RCC_GetUSARTClockSource>:
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004628:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4013      	ands	r3, r2
}
 8004630:	4618      	mov	r0, r3
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <LL_RCC_GetLPUARTClockSource>:
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004648:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4013      	ands	r3, r2
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e042      	b.n	80046f4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004674:	2b00      	cmp	r3, #0
 8004676:	d106      	bne.n	8004686 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7fc fe9b 	bl	80013bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2224      	movs	r2, #36	@ 0x24
 800468a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0201 	bic.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fade 	bl	8004c68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f8b3 	bl	8004818 <UART_SetConfig>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e01b      	b.n	80046f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fb5d 	bl	8004dac <UART_CheckIdleState>
 80046f2:	4603      	mov	r3, r0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08a      	sub	sp, #40	@ 0x28
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004712:	2b20      	cmp	r3, #32
 8004714:	d17b      	bne.n	800480e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <HAL_UART_Transmit+0x26>
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e074      	b.n	8004810 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2221      	movs	r2, #33	@ 0x21
 8004732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004736:	f7fd fa15 	bl	8001b64 <HAL_GetTick>
 800473a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	88fa      	ldrh	r2, [r7, #6]
 8004740:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	88fa      	ldrh	r2, [r7, #6]
 8004748:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004754:	d108      	bne.n	8004768 <HAL_UART_Transmit+0x6c>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d104      	bne.n	8004768 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	61bb      	str	r3, [r7, #24]
 8004766:	e003      	b.n	8004770 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800476c:	2300      	movs	r3, #0
 800476e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004770:	e030      	b.n	80047d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2200      	movs	r2, #0
 800477a:	2180      	movs	r1, #128	@ 0x80
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 fbbf 	bl	8004f00 <UART_WaitOnFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2220      	movs	r2, #32
 800478c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e03d      	b.n	8004810 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10b      	bne.n	80047b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	3302      	adds	r3, #2
 80047ae:	61bb      	str	r3, [r7, #24]
 80047b0:	e007      	b.n	80047c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	781a      	ldrb	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	3301      	adds	r3, #1
 80047c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1c8      	bne.n	8004772 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2200      	movs	r2, #0
 80047e8:	2140      	movs	r1, #64	@ 0x40
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fb88 	bl	8004f00 <UART_WaitOnFlagUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d005      	beq.n	8004802 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e006      	b.n	8004810 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	e000      	b.n	8004810 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800480e:	2302      	movs	r3, #2
  }
}
 8004810:	4618      	mov	r0, r3
 8004812:	3720      	adds	r7, #32
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800481c:	b08c      	sub	sp, #48	@ 0x30
 800481e:	af00      	add	r7, sp, #0
 8004820:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	431a      	orrs	r2, r3
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	431a      	orrs	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	4313      	orrs	r3, r2
 800483e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4baf      	ldr	r3, [pc, #700]	@ (8004b04 <UART_SetConfig+0x2ec>)
 8004848:	4013      	ands	r3, r2
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004850:	430b      	orrs	r3, r1
 8004852:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4aa4      	ldr	r2, [pc, #656]	@ (8004b08 <UART_SetConfig+0x2f0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d004      	beq.n	8004884 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004880:	4313      	orrs	r3, r2
 8004882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800488e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	6812      	ldr	r2, [r2, #0]
 8004896:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004898:	430b      	orrs	r3, r1
 800489a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a2:	f023 010f 	bic.w	r1, r3, #15
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a95      	ldr	r2, [pc, #596]	@ (8004b0c <UART_SetConfig+0x2f4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d125      	bne.n	8004908 <UART_SetConfig+0xf0>
 80048bc:	2003      	movs	r0, #3
 80048be:	f7ff fead 	bl	800461c <LL_RCC_GetUSARTClockSource>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d81b      	bhi.n	8004900 <UART_SetConfig+0xe8>
 80048c8:	a201      	add	r2, pc, #4	@ (adr r2, 80048d0 <UART_SetConfig+0xb8>)
 80048ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ce:	bf00      	nop
 80048d0:	080048e1 	.word	0x080048e1
 80048d4:	080048f1 	.word	0x080048f1
 80048d8:	080048e9 	.word	0x080048e9
 80048dc:	080048f9 	.word	0x080048f9
 80048e0:	2301      	movs	r3, #1
 80048e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048e6:	e042      	b.n	800496e <UART_SetConfig+0x156>
 80048e8:	2302      	movs	r3, #2
 80048ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ee:	e03e      	b.n	800496e <UART_SetConfig+0x156>
 80048f0:	2304      	movs	r3, #4
 80048f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048f6:	e03a      	b.n	800496e <UART_SetConfig+0x156>
 80048f8:	2308      	movs	r3, #8
 80048fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048fe:	e036      	b.n	800496e <UART_SetConfig+0x156>
 8004900:	2310      	movs	r3, #16
 8004902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004906:	e032      	b.n	800496e <UART_SetConfig+0x156>
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a7e      	ldr	r2, [pc, #504]	@ (8004b08 <UART_SetConfig+0x2f0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d12a      	bne.n	8004968 <UART_SetConfig+0x150>
 8004912:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004916:	f7ff fe91 	bl	800463c <LL_RCC_GetLPUARTClockSource>
 800491a:	4603      	mov	r3, r0
 800491c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004920:	d01a      	beq.n	8004958 <UART_SetConfig+0x140>
 8004922:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004926:	d81b      	bhi.n	8004960 <UART_SetConfig+0x148>
 8004928:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800492c:	d00c      	beq.n	8004948 <UART_SetConfig+0x130>
 800492e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004932:	d815      	bhi.n	8004960 <UART_SetConfig+0x148>
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <UART_SetConfig+0x128>
 8004938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800493c:	d008      	beq.n	8004950 <UART_SetConfig+0x138>
 800493e:	e00f      	b.n	8004960 <UART_SetConfig+0x148>
 8004940:	2300      	movs	r3, #0
 8004942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004946:	e012      	b.n	800496e <UART_SetConfig+0x156>
 8004948:	2302      	movs	r3, #2
 800494a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800494e:	e00e      	b.n	800496e <UART_SetConfig+0x156>
 8004950:	2304      	movs	r3, #4
 8004952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004956:	e00a      	b.n	800496e <UART_SetConfig+0x156>
 8004958:	2308      	movs	r3, #8
 800495a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800495e:	e006      	b.n	800496e <UART_SetConfig+0x156>
 8004960:	2310      	movs	r3, #16
 8004962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004966:	e002      	b.n	800496e <UART_SetConfig+0x156>
 8004968:	2310      	movs	r3, #16
 800496a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a65      	ldr	r2, [pc, #404]	@ (8004b08 <UART_SetConfig+0x2f0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	f040 8097 	bne.w	8004aa8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800497a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800497e:	2b08      	cmp	r3, #8
 8004980:	d823      	bhi.n	80049ca <UART_SetConfig+0x1b2>
 8004982:	a201      	add	r2, pc, #4	@ (adr r2, 8004988 <UART_SetConfig+0x170>)
 8004984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004988:	080049ad 	.word	0x080049ad
 800498c:	080049cb 	.word	0x080049cb
 8004990:	080049b5 	.word	0x080049b5
 8004994:	080049cb 	.word	0x080049cb
 8004998:	080049bb 	.word	0x080049bb
 800499c:	080049cb 	.word	0x080049cb
 80049a0:	080049cb 	.word	0x080049cb
 80049a4:	080049cb 	.word	0x080049cb
 80049a8:	080049c3 	.word	0x080049c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049ac:	f7ff f932 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 80049b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049b2:	e010      	b.n	80049d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b4:	4b56      	ldr	r3, [pc, #344]	@ (8004b10 <UART_SetConfig+0x2f8>)
 80049b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049b8:	e00d      	b.n	80049d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ba:	f7ff f8ab 	bl	8003b14 <HAL_RCC_GetSysClockFreq>
 80049be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049c0:	e009      	b.n	80049d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049c8:	e005      	b.n	80049d6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80049d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 812b 	beq.w	8004c34 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e2:	4a4c      	ldr	r2, [pc, #304]	@ (8004b14 <UART_SetConfig+0x2fc>)
 80049e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049e8:	461a      	mov	r2, r3
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	4413      	add	r3, r2
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d305      	bcc.n	8004a0e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d903      	bls.n	8004a16 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a14:	e10e      	b.n	8004c34 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	2200      	movs	r2, #0
 8004a1a:	60bb      	str	r3, [r7, #8]
 8004a1c:	60fa      	str	r2, [r7, #12]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	4a3c      	ldr	r2, [pc, #240]	@ (8004b14 <UART_SetConfig+0x2fc>)
 8004a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	603b      	str	r3, [r7, #0]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a38:	f7fc f88e 	bl	8000b58 <__aeabi_uldivmod>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4610      	mov	r0, r2
 8004a42:	4619      	mov	r1, r3
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	020b      	lsls	r3, r1, #8
 8004a4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a52:	0202      	lsls	r2, r0, #8
 8004a54:	6979      	ldr	r1, [r7, #20]
 8004a56:	6849      	ldr	r1, [r1, #4]
 8004a58:	0849      	lsrs	r1, r1, #1
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	460c      	mov	r4, r1
 8004a5e:	4605      	mov	r5, r0
 8004a60:	eb12 0804 	adds.w	r8, r2, r4
 8004a64:	eb43 0905 	adc.w	r9, r3, r5
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	469a      	mov	sl, r3
 8004a70:	4693      	mov	fp, r2
 8004a72:	4652      	mov	r2, sl
 8004a74:	465b      	mov	r3, fp
 8004a76:	4640      	mov	r0, r8
 8004a78:	4649      	mov	r1, r9
 8004a7a:	f7fc f86d 	bl	8000b58 <__aeabi_uldivmod>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4613      	mov	r3, r2
 8004a84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a8c:	d308      	bcc.n	8004aa0 <UART_SetConfig+0x288>
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a94:	d204      	bcs.n	8004aa0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6a3a      	ldr	r2, [r7, #32]
 8004a9c:	60da      	str	r2, [r3, #12]
 8004a9e:	e0c9      	b.n	8004c34 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004aa6:	e0c5      	b.n	8004c34 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ab0:	d16d      	bne.n	8004b8e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004ab2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	2b07      	cmp	r3, #7
 8004aba:	d82d      	bhi.n	8004b18 <UART_SetConfig+0x300>
 8004abc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac4 <UART_SetConfig+0x2ac>)
 8004abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac2:	bf00      	nop
 8004ac4:	08004ae5 	.word	0x08004ae5
 8004ac8:	08004aed 	.word	0x08004aed
 8004acc:	08004b19 	.word	0x08004b19
 8004ad0:	08004af3 	.word	0x08004af3
 8004ad4:	08004b19 	.word	0x08004b19
 8004ad8:	08004b19 	.word	0x08004b19
 8004adc:	08004b19 	.word	0x08004b19
 8004ae0:	08004afb 	.word	0x08004afb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ae4:	f7ff f8ac 	bl	8003c40 <HAL_RCC_GetPCLK2Freq>
 8004ae8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004aea:	e01b      	b.n	8004b24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aec:	4b08      	ldr	r3, [pc, #32]	@ (8004b10 <UART_SetConfig+0x2f8>)
 8004aee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004af0:	e018      	b.n	8004b24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004af2:	f7ff f80f 	bl	8003b14 <HAL_RCC_GetSysClockFreq>
 8004af6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004af8:	e014      	b.n	8004b24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b00:	e010      	b.n	8004b24 <UART_SetConfig+0x30c>
 8004b02:	bf00      	nop
 8004b04:	cfff69f3 	.word	0xcfff69f3
 8004b08:	40008000 	.word	0x40008000
 8004b0c:	40013800 	.word	0x40013800
 8004b10:	00f42400 	.word	0x00f42400
 8004b14:	08007dd0 	.word	0x08007dd0
      default:
        pclk = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 8084 	beq.w	8004c34 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b30:	4a4b      	ldr	r2, [pc, #300]	@ (8004c60 <UART_SetConfig+0x448>)
 8004b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b36:	461a      	mov	r2, r3
 8004b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b3e:	005a      	lsls	r2, r3, #1
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	085b      	lsrs	r3, r3, #1
 8004b46:	441a      	add	r2, r3
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b50:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	2b0f      	cmp	r3, #15
 8004b56:	d916      	bls.n	8004b86 <UART_SetConfig+0x36e>
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b5e:	d212      	bcs.n	8004b86 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f023 030f 	bic.w	r3, r3, #15
 8004b68:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	085b      	lsrs	r3, r3, #1
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	8bfb      	ldrh	r3, [r7, #30]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	8bfa      	ldrh	r2, [r7, #30]
 8004b82:	60da      	str	r2, [r3, #12]
 8004b84:	e056      	b.n	8004c34 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b8c:	e052      	b.n	8004c34 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b92:	3b01      	subs	r3, #1
 8004b94:	2b07      	cmp	r3, #7
 8004b96:	d822      	bhi.n	8004bde <UART_SetConfig+0x3c6>
 8004b98:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba0 <UART_SetConfig+0x388>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004bc1 	.word	0x08004bc1
 8004ba4:	08004bc9 	.word	0x08004bc9
 8004ba8:	08004bdf 	.word	0x08004bdf
 8004bac:	08004bcf 	.word	0x08004bcf
 8004bb0:	08004bdf 	.word	0x08004bdf
 8004bb4:	08004bdf 	.word	0x08004bdf
 8004bb8:	08004bdf 	.word	0x08004bdf
 8004bbc:	08004bd7 	.word	0x08004bd7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bc0:	f7ff f83e 	bl	8003c40 <HAL_RCC_GetPCLK2Freq>
 8004bc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bc6:	e010      	b.n	8004bea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc8:	4b26      	ldr	r3, [pc, #152]	@ (8004c64 <UART_SetConfig+0x44c>)
 8004bca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bcc:	e00d      	b.n	8004bea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bce:	f7fe ffa1 	bl	8003b14 <HAL_RCC_GetSysClockFreq>
 8004bd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bd4:	e009      	b.n	8004bea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bdc:	e005      	b.n	8004bea <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004be8:	bf00      	nop
    }

    if (pclk != 0U)
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d021      	beq.n	8004c34 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8004c60 <UART_SetConfig+0x448>)
 8004bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	085b      	lsrs	r3, r3, #1
 8004c08:	441a      	add	r2, r3
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	2b0f      	cmp	r3, #15
 8004c18:	d909      	bls.n	8004c2e <UART_SetConfig+0x416>
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c20:	d205      	bcs.n	8004c2e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60da      	str	r2, [r3, #12]
 8004c2c:	e002      	b.n	8004c34 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2200      	movs	r2, #0
 8004c48:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3730      	adds	r7, #48	@ 0x30
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c5e:	bf00      	nop
 8004c60:	08007dd0 	.word	0x08007dd0
 8004c64:	00f42400 	.word	0x00f42400

08004c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01a      	beq.n	8004d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d66:	d10a      	bne.n	8004d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	605a      	str	r2, [r3, #4]
  }
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b098      	sub	sp, #96	@ 0x60
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dbc:	f7fc fed2 	bl	8001b64 <HAL_GetTick>
 8004dc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d12f      	bne.n	8004e30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f88e 	bl	8004f00 <UART_WaitOnFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d022      	beq.n	8004e30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e08:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e0a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e6      	bne.n	8004dea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e063      	b.n	8004ef8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d149      	bne.n	8004ed2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e46:	2200      	movs	r2, #0
 8004e48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f857 	bl	8004f00 <UART_WaitOnFlagUntilTimeout>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d03c      	beq.n	8004ed2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	623b      	str	r3, [r7, #32]
   return(result);
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	461a      	mov	r2, r3
 8004e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e76:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e6      	bne.n	8004e58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3308      	adds	r3, #8
 8004e90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eaa:	61fa      	str	r2, [r7, #28]
 8004eac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	69b9      	ldr	r1, [r7, #24]
 8004eb0:	69fa      	ldr	r2, [r7, #28]
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	617b      	str	r3, [r7, #20]
   return(result);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e5      	bne.n	8004e8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e012      	b.n	8004ef8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3758      	adds	r7, #88	@ 0x58
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f10:	e04f      	b.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d04b      	beq.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1a:	f7fc fe23 	bl	8001b64 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d302      	bcc.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e04e      	b.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d037      	beq.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b80      	cmp	r3, #128	@ 0x80
 8004f46:	d034      	beq.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b40      	cmp	r3, #64	@ 0x40
 8004f4c:	d031      	beq.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d110      	bne.n	8004f7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2208      	movs	r2, #8
 8004f62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f838 	bl	8004fda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2208      	movs	r2, #8
 8004f6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e029      	b.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f8c:	d111      	bne.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f81e 	bl	8004fda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e00f      	b.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	bf0c      	ite	eq
 8004fc2:	2301      	moveq	r3, #1
 8004fc4:	2300      	movne	r3, #0
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	79fb      	ldrb	r3, [r7, #7]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d0a0      	beq.n	8004f12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b095      	sub	sp, #84	@ 0x54
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005000:	643b      	str	r3, [r7, #64]	@ 0x40
 8005002:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005006:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800500e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e6      	bne.n	8004fe2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3308      	adds	r3, #8
 800501a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	61fb      	str	r3, [r7, #28]
   return(result);
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800502a:	f023 0301 	bic.w	r3, r3, #1
 800502e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3308      	adds	r3, #8
 8005036:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005038:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800503a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800503e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005040:	e841 2300 	strex	r3, r2, [r1]
 8005044:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e3      	bne.n	8005014 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005050:	2b01      	cmp	r3, #1
 8005052:	d118      	bne.n	8005086 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	60bb      	str	r3, [r7, #8]
   return(result);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f023 0310 	bic.w	r3, r3, #16
 8005068:	647b      	str	r3, [r7, #68]	@ 0x44
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005072:	61bb      	str	r3, [r7, #24]
 8005074:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	6979      	ldr	r1, [r7, #20]
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	e841 2300 	strex	r3, r2, [r1]
 800507e:	613b      	str	r3, [r7, #16]
   return(result);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1e6      	bne.n	8005054 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800509a:	bf00      	nop
 800509c:	3754      	adds	r7, #84	@ 0x54
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_UARTEx_DisableFifoMode+0x16>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e027      	b.n	800510c <HAL_UARTEx_DisableFifoMode+0x66>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2224      	movs	r2, #36	@ 0x24
 80050c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0201 	bic.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80050ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800512c:	2302      	movs	r3, #2
 800512e:	e02d      	b.n	800518c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2224      	movs	r2, #36	@ 0x24
 800513c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0201 	bic.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f84f 	bl	8005210 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d101      	bne.n	80051ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051a8:	2302      	movs	r3, #2
 80051aa:	e02d      	b.n	8005208 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2224      	movs	r2, #36	@ 0x24
 80051b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0201 	bic.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f811 	bl	8005210 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800521c:	2b00      	cmp	r3, #0
 800521e:	d108      	bne.n	8005232 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005230:	e031      	b.n	8005296 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005232:	2308      	movs	r3, #8
 8005234:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005236:	2308      	movs	r3, #8
 8005238:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	0e5b      	lsrs	r3, r3, #25
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	0f5b      	lsrs	r3, r3, #29
 8005252:	b2db      	uxtb	r3, r3
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800525a:	7bbb      	ldrb	r3, [r7, #14]
 800525c:	7b3a      	ldrb	r2, [r7, #12]
 800525e:	4911      	ldr	r1, [pc, #68]	@ (80052a4 <UARTEx_SetNbDataToProcess+0x94>)
 8005260:	5c8a      	ldrb	r2, [r1, r2]
 8005262:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005266:	7b3a      	ldrb	r2, [r7, #12]
 8005268:	490f      	ldr	r1, [pc, #60]	@ (80052a8 <UARTEx_SetNbDataToProcess+0x98>)
 800526a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800526c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005270:	b29a      	uxth	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005278:	7bfb      	ldrb	r3, [r7, #15]
 800527a:	7b7a      	ldrb	r2, [r7, #13]
 800527c:	4909      	ldr	r1, [pc, #36]	@ (80052a4 <UARTEx_SetNbDataToProcess+0x94>)
 800527e:	5c8a      	ldrb	r2, [r1, r2]
 8005280:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005284:	7b7a      	ldrb	r2, [r7, #13]
 8005286:	4908      	ldr	r1, [pc, #32]	@ (80052a8 <UARTEx_SetNbDataToProcess+0x98>)
 8005288:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800528a:	fb93 f3f2 	sdiv	r3, r3, r2
 800528e:	b29a      	uxth	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005296:	bf00      	nop
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	08007de8 	.word	0x08007de8
 80052a8:	08007df0 	.word	0x08007df0

080052ac <__cvt>:
 80052ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052b0:	ec57 6b10 	vmov	r6, r7, d0
 80052b4:	2f00      	cmp	r7, #0
 80052b6:	460c      	mov	r4, r1
 80052b8:	4619      	mov	r1, r3
 80052ba:	463b      	mov	r3, r7
 80052bc:	bfbb      	ittet	lt
 80052be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80052c2:	461f      	movlt	r7, r3
 80052c4:	2300      	movge	r3, #0
 80052c6:	232d      	movlt	r3, #45	@ 0x2d
 80052c8:	700b      	strb	r3, [r1, #0]
 80052ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80052d0:	4691      	mov	r9, r2
 80052d2:	f023 0820 	bic.w	r8, r3, #32
 80052d6:	bfbc      	itt	lt
 80052d8:	4632      	movlt	r2, r6
 80052da:	4616      	movlt	r6, r2
 80052dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052e0:	d005      	beq.n	80052ee <__cvt+0x42>
 80052e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80052e6:	d100      	bne.n	80052ea <__cvt+0x3e>
 80052e8:	3401      	adds	r4, #1
 80052ea:	2102      	movs	r1, #2
 80052ec:	e000      	b.n	80052f0 <__cvt+0x44>
 80052ee:	2103      	movs	r1, #3
 80052f0:	ab03      	add	r3, sp, #12
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	ab02      	add	r3, sp, #8
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	ec47 6b10 	vmov	d0, r6, r7
 80052fc:	4653      	mov	r3, sl
 80052fe:	4622      	mov	r2, r4
 8005300:	f000 ff3e 	bl	8006180 <_dtoa_r>
 8005304:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005308:	4605      	mov	r5, r0
 800530a:	d119      	bne.n	8005340 <__cvt+0x94>
 800530c:	f019 0f01 	tst.w	r9, #1
 8005310:	d00e      	beq.n	8005330 <__cvt+0x84>
 8005312:	eb00 0904 	add.w	r9, r0, r4
 8005316:	2200      	movs	r2, #0
 8005318:	2300      	movs	r3, #0
 800531a:	4630      	mov	r0, r6
 800531c:	4639      	mov	r1, r7
 800531e:	f7fb fbab 	bl	8000a78 <__aeabi_dcmpeq>
 8005322:	b108      	cbz	r0, 8005328 <__cvt+0x7c>
 8005324:	f8cd 900c 	str.w	r9, [sp, #12]
 8005328:	2230      	movs	r2, #48	@ 0x30
 800532a:	9b03      	ldr	r3, [sp, #12]
 800532c:	454b      	cmp	r3, r9
 800532e:	d31e      	bcc.n	800536e <__cvt+0xc2>
 8005330:	9b03      	ldr	r3, [sp, #12]
 8005332:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005334:	1b5b      	subs	r3, r3, r5
 8005336:	4628      	mov	r0, r5
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	b004      	add	sp, #16
 800533c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005340:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005344:	eb00 0904 	add.w	r9, r0, r4
 8005348:	d1e5      	bne.n	8005316 <__cvt+0x6a>
 800534a:	7803      	ldrb	r3, [r0, #0]
 800534c:	2b30      	cmp	r3, #48	@ 0x30
 800534e:	d10a      	bne.n	8005366 <__cvt+0xba>
 8005350:	2200      	movs	r2, #0
 8005352:	2300      	movs	r3, #0
 8005354:	4630      	mov	r0, r6
 8005356:	4639      	mov	r1, r7
 8005358:	f7fb fb8e 	bl	8000a78 <__aeabi_dcmpeq>
 800535c:	b918      	cbnz	r0, 8005366 <__cvt+0xba>
 800535e:	f1c4 0401 	rsb	r4, r4, #1
 8005362:	f8ca 4000 	str.w	r4, [sl]
 8005366:	f8da 3000 	ldr.w	r3, [sl]
 800536a:	4499      	add	r9, r3
 800536c:	e7d3      	b.n	8005316 <__cvt+0x6a>
 800536e:	1c59      	adds	r1, r3, #1
 8005370:	9103      	str	r1, [sp, #12]
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	e7d9      	b.n	800532a <__cvt+0x7e>

08005376 <__exponent>:
 8005376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005378:	2900      	cmp	r1, #0
 800537a:	bfba      	itte	lt
 800537c:	4249      	neglt	r1, r1
 800537e:	232d      	movlt	r3, #45	@ 0x2d
 8005380:	232b      	movge	r3, #43	@ 0x2b
 8005382:	2909      	cmp	r1, #9
 8005384:	7002      	strb	r2, [r0, #0]
 8005386:	7043      	strb	r3, [r0, #1]
 8005388:	dd29      	ble.n	80053de <__exponent+0x68>
 800538a:	f10d 0307 	add.w	r3, sp, #7
 800538e:	461d      	mov	r5, r3
 8005390:	270a      	movs	r7, #10
 8005392:	461a      	mov	r2, r3
 8005394:	fbb1 f6f7 	udiv	r6, r1, r7
 8005398:	fb07 1416 	mls	r4, r7, r6, r1
 800539c:	3430      	adds	r4, #48	@ 0x30
 800539e:	f802 4c01 	strb.w	r4, [r2, #-1]
 80053a2:	460c      	mov	r4, r1
 80053a4:	2c63      	cmp	r4, #99	@ 0x63
 80053a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80053aa:	4631      	mov	r1, r6
 80053ac:	dcf1      	bgt.n	8005392 <__exponent+0x1c>
 80053ae:	3130      	adds	r1, #48	@ 0x30
 80053b0:	1e94      	subs	r4, r2, #2
 80053b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80053b6:	1c41      	adds	r1, r0, #1
 80053b8:	4623      	mov	r3, r4
 80053ba:	42ab      	cmp	r3, r5
 80053bc:	d30a      	bcc.n	80053d4 <__exponent+0x5e>
 80053be:	f10d 0309 	add.w	r3, sp, #9
 80053c2:	1a9b      	subs	r3, r3, r2
 80053c4:	42ac      	cmp	r4, r5
 80053c6:	bf88      	it	hi
 80053c8:	2300      	movhi	r3, #0
 80053ca:	3302      	adds	r3, #2
 80053cc:	4403      	add	r3, r0
 80053ce:	1a18      	subs	r0, r3, r0
 80053d0:	b003      	add	sp, #12
 80053d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80053d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80053dc:	e7ed      	b.n	80053ba <__exponent+0x44>
 80053de:	2330      	movs	r3, #48	@ 0x30
 80053e0:	3130      	adds	r1, #48	@ 0x30
 80053e2:	7083      	strb	r3, [r0, #2]
 80053e4:	70c1      	strb	r1, [r0, #3]
 80053e6:	1d03      	adds	r3, r0, #4
 80053e8:	e7f1      	b.n	80053ce <__exponent+0x58>
	...

080053ec <_printf_float>:
 80053ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f0:	b08d      	sub	sp, #52	@ 0x34
 80053f2:	460c      	mov	r4, r1
 80053f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80053f8:	4616      	mov	r6, r2
 80053fa:	461f      	mov	r7, r3
 80053fc:	4605      	mov	r5, r0
 80053fe:	f000 fdbd 	bl	8005f7c <_localeconv_r>
 8005402:	6803      	ldr	r3, [r0, #0]
 8005404:	9304      	str	r3, [sp, #16]
 8005406:	4618      	mov	r0, r3
 8005408:	f7fa ff0a 	bl	8000220 <strlen>
 800540c:	2300      	movs	r3, #0
 800540e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005410:	f8d8 3000 	ldr.w	r3, [r8]
 8005414:	9005      	str	r0, [sp, #20]
 8005416:	3307      	adds	r3, #7
 8005418:	f023 0307 	bic.w	r3, r3, #7
 800541c:	f103 0208 	add.w	r2, r3, #8
 8005420:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005424:	f8d4 b000 	ldr.w	fp, [r4]
 8005428:	f8c8 2000 	str.w	r2, [r8]
 800542c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005430:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005434:	9307      	str	r3, [sp, #28]
 8005436:	f8cd 8018 	str.w	r8, [sp, #24]
 800543a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800543e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005442:	4b9c      	ldr	r3, [pc, #624]	@ (80056b4 <_printf_float+0x2c8>)
 8005444:	f04f 32ff 	mov.w	r2, #4294967295
 8005448:	f7fb fb48 	bl	8000adc <__aeabi_dcmpun>
 800544c:	bb70      	cbnz	r0, 80054ac <_printf_float+0xc0>
 800544e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005452:	4b98      	ldr	r3, [pc, #608]	@ (80056b4 <_printf_float+0x2c8>)
 8005454:	f04f 32ff 	mov.w	r2, #4294967295
 8005458:	f7fb fb22 	bl	8000aa0 <__aeabi_dcmple>
 800545c:	bb30      	cbnz	r0, 80054ac <_printf_float+0xc0>
 800545e:	2200      	movs	r2, #0
 8005460:	2300      	movs	r3, #0
 8005462:	4640      	mov	r0, r8
 8005464:	4649      	mov	r1, r9
 8005466:	f7fb fb11 	bl	8000a8c <__aeabi_dcmplt>
 800546a:	b110      	cbz	r0, 8005472 <_printf_float+0x86>
 800546c:	232d      	movs	r3, #45	@ 0x2d
 800546e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005472:	4a91      	ldr	r2, [pc, #580]	@ (80056b8 <_printf_float+0x2cc>)
 8005474:	4b91      	ldr	r3, [pc, #580]	@ (80056bc <_printf_float+0x2d0>)
 8005476:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800547a:	bf8c      	ite	hi
 800547c:	4690      	movhi	r8, r2
 800547e:	4698      	movls	r8, r3
 8005480:	2303      	movs	r3, #3
 8005482:	6123      	str	r3, [r4, #16]
 8005484:	f02b 0304 	bic.w	r3, fp, #4
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	f04f 0900 	mov.w	r9, #0
 800548e:	9700      	str	r7, [sp, #0]
 8005490:	4633      	mov	r3, r6
 8005492:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005494:	4621      	mov	r1, r4
 8005496:	4628      	mov	r0, r5
 8005498:	f000 f9d2 	bl	8005840 <_printf_common>
 800549c:	3001      	adds	r0, #1
 800549e:	f040 808d 	bne.w	80055bc <_printf_float+0x1d0>
 80054a2:	f04f 30ff 	mov.w	r0, #4294967295
 80054a6:	b00d      	add	sp, #52	@ 0x34
 80054a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ac:	4642      	mov	r2, r8
 80054ae:	464b      	mov	r3, r9
 80054b0:	4640      	mov	r0, r8
 80054b2:	4649      	mov	r1, r9
 80054b4:	f7fb fb12 	bl	8000adc <__aeabi_dcmpun>
 80054b8:	b140      	cbz	r0, 80054cc <_printf_float+0xe0>
 80054ba:	464b      	mov	r3, r9
 80054bc:	2b00      	cmp	r3, #0
 80054be:	bfbc      	itt	lt
 80054c0:	232d      	movlt	r3, #45	@ 0x2d
 80054c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80054c6:	4a7e      	ldr	r2, [pc, #504]	@ (80056c0 <_printf_float+0x2d4>)
 80054c8:	4b7e      	ldr	r3, [pc, #504]	@ (80056c4 <_printf_float+0x2d8>)
 80054ca:	e7d4      	b.n	8005476 <_printf_float+0x8a>
 80054cc:	6863      	ldr	r3, [r4, #4]
 80054ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80054d2:	9206      	str	r2, [sp, #24]
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	d13b      	bne.n	8005550 <_printf_float+0x164>
 80054d8:	2306      	movs	r3, #6
 80054da:	6063      	str	r3, [r4, #4]
 80054dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80054e0:	2300      	movs	r3, #0
 80054e2:	6022      	str	r2, [r4, #0]
 80054e4:	9303      	str	r3, [sp, #12]
 80054e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80054e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80054ec:	ab09      	add	r3, sp, #36	@ 0x24
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	6861      	ldr	r1, [r4, #4]
 80054f2:	ec49 8b10 	vmov	d0, r8, r9
 80054f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80054fa:	4628      	mov	r0, r5
 80054fc:	f7ff fed6 	bl	80052ac <__cvt>
 8005500:	9b06      	ldr	r3, [sp, #24]
 8005502:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005504:	2b47      	cmp	r3, #71	@ 0x47
 8005506:	4680      	mov	r8, r0
 8005508:	d129      	bne.n	800555e <_printf_float+0x172>
 800550a:	1cc8      	adds	r0, r1, #3
 800550c:	db02      	blt.n	8005514 <_printf_float+0x128>
 800550e:	6863      	ldr	r3, [r4, #4]
 8005510:	4299      	cmp	r1, r3
 8005512:	dd41      	ble.n	8005598 <_printf_float+0x1ac>
 8005514:	f1aa 0a02 	sub.w	sl, sl, #2
 8005518:	fa5f fa8a 	uxtb.w	sl, sl
 800551c:	3901      	subs	r1, #1
 800551e:	4652      	mov	r2, sl
 8005520:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005524:	9109      	str	r1, [sp, #36]	@ 0x24
 8005526:	f7ff ff26 	bl	8005376 <__exponent>
 800552a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800552c:	1813      	adds	r3, r2, r0
 800552e:	2a01      	cmp	r2, #1
 8005530:	4681      	mov	r9, r0
 8005532:	6123      	str	r3, [r4, #16]
 8005534:	dc02      	bgt.n	800553c <_printf_float+0x150>
 8005536:	6822      	ldr	r2, [r4, #0]
 8005538:	07d2      	lsls	r2, r2, #31
 800553a:	d501      	bpl.n	8005540 <_printf_float+0x154>
 800553c:	3301      	adds	r3, #1
 800553e:	6123      	str	r3, [r4, #16]
 8005540:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0a2      	beq.n	800548e <_printf_float+0xa2>
 8005548:	232d      	movs	r3, #45	@ 0x2d
 800554a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800554e:	e79e      	b.n	800548e <_printf_float+0xa2>
 8005550:	9a06      	ldr	r2, [sp, #24]
 8005552:	2a47      	cmp	r2, #71	@ 0x47
 8005554:	d1c2      	bne.n	80054dc <_printf_float+0xf0>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1c0      	bne.n	80054dc <_printf_float+0xf0>
 800555a:	2301      	movs	r3, #1
 800555c:	e7bd      	b.n	80054da <_printf_float+0xee>
 800555e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005562:	d9db      	bls.n	800551c <_printf_float+0x130>
 8005564:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005568:	d118      	bne.n	800559c <_printf_float+0x1b0>
 800556a:	2900      	cmp	r1, #0
 800556c:	6863      	ldr	r3, [r4, #4]
 800556e:	dd0b      	ble.n	8005588 <_printf_float+0x19c>
 8005570:	6121      	str	r1, [r4, #16]
 8005572:	b913      	cbnz	r3, 800557a <_printf_float+0x18e>
 8005574:	6822      	ldr	r2, [r4, #0]
 8005576:	07d0      	lsls	r0, r2, #31
 8005578:	d502      	bpl.n	8005580 <_printf_float+0x194>
 800557a:	3301      	adds	r3, #1
 800557c:	440b      	add	r3, r1
 800557e:	6123      	str	r3, [r4, #16]
 8005580:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005582:	f04f 0900 	mov.w	r9, #0
 8005586:	e7db      	b.n	8005540 <_printf_float+0x154>
 8005588:	b913      	cbnz	r3, 8005590 <_printf_float+0x1a4>
 800558a:	6822      	ldr	r2, [r4, #0]
 800558c:	07d2      	lsls	r2, r2, #31
 800558e:	d501      	bpl.n	8005594 <_printf_float+0x1a8>
 8005590:	3302      	adds	r3, #2
 8005592:	e7f4      	b.n	800557e <_printf_float+0x192>
 8005594:	2301      	movs	r3, #1
 8005596:	e7f2      	b.n	800557e <_printf_float+0x192>
 8005598:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800559c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800559e:	4299      	cmp	r1, r3
 80055a0:	db05      	blt.n	80055ae <_printf_float+0x1c2>
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	6121      	str	r1, [r4, #16]
 80055a6:	07d8      	lsls	r0, r3, #31
 80055a8:	d5ea      	bpl.n	8005580 <_printf_float+0x194>
 80055aa:	1c4b      	adds	r3, r1, #1
 80055ac:	e7e7      	b.n	800557e <_printf_float+0x192>
 80055ae:	2900      	cmp	r1, #0
 80055b0:	bfd4      	ite	le
 80055b2:	f1c1 0202 	rsble	r2, r1, #2
 80055b6:	2201      	movgt	r2, #1
 80055b8:	4413      	add	r3, r2
 80055ba:	e7e0      	b.n	800557e <_printf_float+0x192>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	055a      	lsls	r2, r3, #21
 80055c0:	d407      	bmi.n	80055d2 <_printf_float+0x1e6>
 80055c2:	6923      	ldr	r3, [r4, #16]
 80055c4:	4642      	mov	r2, r8
 80055c6:	4631      	mov	r1, r6
 80055c8:	4628      	mov	r0, r5
 80055ca:	47b8      	blx	r7
 80055cc:	3001      	adds	r0, #1
 80055ce:	d12b      	bne.n	8005628 <_printf_float+0x23c>
 80055d0:	e767      	b.n	80054a2 <_printf_float+0xb6>
 80055d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055d6:	f240 80dd 	bls.w	8005794 <_printf_float+0x3a8>
 80055da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055de:	2200      	movs	r2, #0
 80055e0:	2300      	movs	r3, #0
 80055e2:	f7fb fa49 	bl	8000a78 <__aeabi_dcmpeq>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d033      	beq.n	8005652 <_printf_float+0x266>
 80055ea:	4a37      	ldr	r2, [pc, #220]	@ (80056c8 <_printf_float+0x2dc>)
 80055ec:	2301      	movs	r3, #1
 80055ee:	4631      	mov	r1, r6
 80055f0:	4628      	mov	r0, r5
 80055f2:	47b8      	blx	r7
 80055f4:	3001      	adds	r0, #1
 80055f6:	f43f af54 	beq.w	80054a2 <_printf_float+0xb6>
 80055fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80055fe:	4543      	cmp	r3, r8
 8005600:	db02      	blt.n	8005608 <_printf_float+0x21c>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	07d8      	lsls	r0, r3, #31
 8005606:	d50f      	bpl.n	8005628 <_printf_float+0x23c>
 8005608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800560c:	4631      	mov	r1, r6
 800560e:	4628      	mov	r0, r5
 8005610:	47b8      	blx	r7
 8005612:	3001      	adds	r0, #1
 8005614:	f43f af45 	beq.w	80054a2 <_printf_float+0xb6>
 8005618:	f04f 0900 	mov.w	r9, #0
 800561c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005620:	f104 0a1a 	add.w	sl, r4, #26
 8005624:	45c8      	cmp	r8, r9
 8005626:	dc09      	bgt.n	800563c <_printf_float+0x250>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	079b      	lsls	r3, r3, #30
 800562c:	f100 8103 	bmi.w	8005836 <_printf_float+0x44a>
 8005630:	68e0      	ldr	r0, [r4, #12]
 8005632:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005634:	4298      	cmp	r0, r3
 8005636:	bfb8      	it	lt
 8005638:	4618      	movlt	r0, r3
 800563a:	e734      	b.n	80054a6 <_printf_float+0xba>
 800563c:	2301      	movs	r3, #1
 800563e:	4652      	mov	r2, sl
 8005640:	4631      	mov	r1, r6
 8005642:	4628      	mov	r0, r5
 8005644:	47b8      	blx	r7
 8005646:	3001      	adds	r0, #1
 8005648:	f43f af2b 	beq.w	80054a2 <_printf_float+0xb6>
 800564c:	f109 0901 	add.w	r9, r9, #1
 8005650:	e7e8      	b.n	8005624 <_printf_float+0x238>
 8005652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005654:	2b00      	cmp	r3, #0
 8005656:	dc39      	bgt.n	80056cc <_printf_float+0x2e0>
 8005658:	4a1b      	ldr	r2, [pc, #108]	@ (80056c8 <_printf_float+0x2dc>)
 800565a:	2301      	movs	r3, #1
 800565c:	4631      	mov	r1, r6
 800565e:	4628      	mov	r0, r5
 8005660:	47b8      	blx	r7
 8005662:	3001      	adds	r0, #1
 8005664:	f43f af1d 	beq.w	80054a2 <_printf_float+0xb6>
 8005668:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800566c:	ea59 0303 	orrs.w	r3, r9, r3
 8005670:	d102      	bne.n	8005678 <_printf_float+0x28c>
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	07d9      	lsls	r1, r3, #31
 8005676:	d5d7      	bpl.n	8005628 <_printf_float+0x23c>
 8005678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800567c:	4631      	mov	r1, r6
 800567e:	4628      	mov	r0, r5
 8005680:	47b8      	blx	r7
 8005682:	3001      	adds	r0, #1
 8005684:	f43f af0d 	beq.w	80054a2 <_printf_float+0xb6>
 8005688:	f04f 0a00 	mov.w	sl, #0
 800568c:	f104 0b1a 	add.w	fp, r4, #26
 8005690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005692:	425b      	negs	r3, r3
 8005694:	4553      	cmp	r3, sl
 8005696:	dc01      	bgt.n	800569c <_printf_float+0x2b0>
 8005698:	464b      	mov	r3, r9
 800569a:	e793      	b.n	80055c4 <_printf_float+0x1d8>
 800569c:	2301      	movs	r3, #1
 800569e:	465a      	mov	r2, fp
 80056a0:	4631      	mov	r1, r6
 80056a2:	4628      	mov	r0, r5
 80056a4:	47b8      	blx	r7
 80056a6:	3001      	adds	r0, #1
 80056a8:	f43f aefb 	beq.w	80054a2 <_printf_float+0xb6>
 80056ac:	f10a 0a01 	add.w	sl, sl, #1
 80056b0:	e7ee      	b.n	8005690 <_printf_float+0x2a4>
 80056b2:	bf00      	nop
 80056b4:	7fefffff 	.word	0x7fefffff
 80056b8:	08007dfc 	.word	0x08007dfc
 80056bc:	08007df8 	.word	0x08007df8
 80056c0:	08007e04 	.word	0x08007e04
 80056c4:	08007e00 	.word	0x08007e00
 80056c8:	08007e08 	.word	0x08007e08
 80056cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80056d2:	4553      	cmp	r3, sl
 80056d4:	bfa8      	it	ge
 80056d6:	4653      	movge	r3, sl
 80056d8:	2b00      	cmp	r3, #0
 80056da:	4699      	mov	r9, r3
 80056dc:	dc36      	bgt.n	800574c <_printf_float+0x360>
 80056de:	f04f 0b00 	mov.w	fp, #0
 80056e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056e6:	f104 021a 	add.w	r2, r4, #26
 80056ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056ec:	9306      	str	r3, [sp, #24]
 80056ee:	eba3 0309 	sub.w	r3, r3, r9
 80056f2:	455b      	cmp	r3, fp
 80056f4:	dc31      	bgt.n	800575a <_printf_float+0x36e>
 80056f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056f8:	459a      	cmp	sl, r3
 80056fa:	dc3a      	bgt.n	8005772 <_printf_float+0x386>
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	07da      	lsls	r2, r3, #31
 8005700:	d437      	bmi.n	8005772 <_printf_float+0x386>
 8005702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005704:	ebaa 0903 	sub.w	r9, sl, r3
 8005708:	9b06      	ldr	r3, [sp, #24]
 800570a:	ebaa 0303 	sub.w	r3, sl, r3
 800570e:	4599      	cmp	r9, r3
 8005710:	bfa8      	it	ge
 8005712:	4699      	movge	r9, r3
 8005714:	f1b9 0f00 	cmp.w	r9, #0
 8005718:	dc33      	bgt.n	8005782 <_printf_float+0x396>
 800571a:	f04f 0800 	mov.w	r8, #0
 800571e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005722:	f104 0b1a 	add.w	fp, r4, #26
 8005726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005728:	ebaa 0303 	sub.w	r3, sl, r3
 800572c:	eba3 0309 	sub.w	r3, r3, r9
 8005730:	4543      	cmp	r3, r8
 8005732:	f77f af79 	ble.w	8005628 <_printf_float+0x23c>
 8005736:	2301      	movs	r3, #1
 8005738:	465a      	mov	r2, fp
 800573a:	4631      	mov	r1, r6
 800573c:	4628      	mov	r0, r5
 800573e:	47b8      	blx	r7
 8005740:	3001      	adds	r0, #1
 8005742:	f43f aeae 	beq.w	80054a2 <_printf_float+0xb6>
 8005746:	f108 0801 	add.w	r8, r8, #1
 800574a:	e7ec      	b.n	8005726 <_printf_float+0x33a>
 800574c:	4642      	mov	r2, r8
 800574e:	4631      	mov	r1, r6
 8005750:	4628      	mov	r0, r5
 8005752:	47b8      	blx	r7
 8005754:	3001      	adds	r0, #1
 8005756:	d1c2      	bne.n	80056de <_printf_float+0x2f2>
 8005758:	e6a3      	b.n	80054a2 <_printf_float+0xb6>
 800575a:	2301      	movs	r3, #1
 800575c:	4631      	mov	r1, r6
 800575e:	4628      	mov	r0, r5
 8005760:	9206      	str	r2, [sp, #24]
 8005762:	47b8      	blx	r7
 8005764:	3001      	adds	r0, #1
 8005766:	f43f ae9c 	beq.w	80054a2 <_printf_float+0xb6>
 800576a:	9a06      	ldr	r2, [sp, #24]
 800576c:	f10b 0b01 	add.w	fp, fp, #1
 8005770:	e7bb      	b.n	80056ea <_printf_float+0x2fe>
 8005772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005776:	4631      	mov	r1, r6
 8005778:	4628      	mov	r0, r5
 800577a:	47b8      	blx	r7
 800577c:	3001      	adds	r0, #1
 800577e:	d1c0      	bne.n	8005702 <_printf_float+0x316>
 8005780:	e68f      	b.n	80054a2 <_printf_float+0xb6>
 8005782:	9a06      	ldr	r2, [sp, #24]
 8005784:	464b      	mov	r3, r9
 8005786:	4442      	add	r2, r8
 8005788:	4631      	mov	r1, r6
 800578a:	4628      	mov	r0, r5
 800578c:	47b8      	blx	r7
 800578e:	3001      	adds	r0, #1
 8005790:	d1c3      	bne.n	800571a <_printf_float+0x32e>
 8005792:	e686      	b.n	80054a2 <_printf_float+0xb6>
 8005794:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005798:	f1ba 0f01 	cmp.w	sl, #1
 800579c:	dc01      	bgt.n	80057a2 <_printf_float+0x3b6>
 800579e:	07db      	lsls	r3, r3, #31
 80057a0:	d536      	bpl.n	8005810 <_printf_float+0x424>
 80057a2:	2301      	movs	r3, #1
 80057a4:	4642      	mov	r2, r8
 80057a6:	4631      	mov	r1, r6
 80057a8:	4628      	mov	r0, r5
 80057aa:	47b8      	blx	r7
 80057ac:	3001      	adds	r0, #1
 80057ae:	f43f ae78 	beq.w	80054a2 <_printf_float+0xb6>
 80057b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057b6:	4631      	mov	r1, r6
 80057b8:	4628      	mov	r0, r5
 80057ba:	47b8      	blx	r7
 80057bc:	3001      	adds	r0, #1
 80057be:	f43f ae70 	beq.w	80054a2 <_printf_float+0xb6>
 80057c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057c6:	2200      	movs	r2, #0
 80057c8:	2300      	movs	r3, #0
 80057ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057ce:	f7fb f953 	bl	8000a78 <__aeabi_dcmpeq>
 80057d2:	b9c0      	cbnz	r0, 8005806 <_printf_float+0x41a>
 80057d4:	4653      	mov	r3, sl
 80057d6:	f108 0201 	add.w	r2, r8, #1
 80057da:	4631      	mov	r1, r6
 80057dc:	4628      	mov	r0, r5
 80057de:	47b8      	blx	r7
 80057e0:	3001      	adds	r0, #1
 80057e2:	d10c      	bne.n	80057fe <_printf_float+0x412>
 80057e4:	e65d      	b.n	80054a2 <_printf_float+0xb6>
 80057e6:	2301      	movs	r3, #1
 80057e8:	465a      	mov	r2, fp
 80057ea:	4631      	mov	r1, r6
 80057ec:	4628      	mov	r0, r5
 80057ee:	47b8      	blx	r7
 80057f0:	3001      	adds	r0, #1
 80057f2:	f43f ae56 	beq.w	80054a2 <_printf_float+0xb6>
 80057f6:	f108 0801 	add.w	r8, r8, #1
 80057fa:	45d0      	cmp	r8, sl
 80057fc:	dbf3      	blt.n	80057e6 <_printf_float+0x3fa>
 80057fe:	464b      	mov	r3, r9
 8005800:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005804:	e6df      	b.n	80055c6 <_printf_float+0x1da>
 8005806:	f04f 0800 	mov.w	r8, #0
 800580a:	f104 0b1a 	add.w	fp, r4, #26
 800580e:	e7f4      	b.n	80057fa <_printf_float+0x40e>
 8005810:	2301      	movs	r3, #1
 8005812:	4642      	mov	r2, r8
 8005814:	e7e1      	b.n	80057da <_printf_float+0x3ee>
 8005816:	2301      	movs	r3, #1
 8005818:	464a      	mov	r2, r9
 800581a:	4631      	mov	r1, r6
 800581c:	4628      	mov	r0, r5
 800581e:	47b8      	blx	r7
 8005820:	3001      	adds	r0, #1
 8005822:	f43f ae3e 	beq.w	80054a2 <_printf_float+0xb6>
 8005826:	f108 0801 	add.w	r8, r8, #1
 800582a:	68e3      	ldr	r3, [r4, #12]
 800582c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800582e:	1a5b      	subs	r3, r3, r1
 8005830:	4543      	cmp	r3, r8
 8005832:	dcf0      	bgt.n	8005816 <_printf_float+0x42a>
 8005834:	e6fc      	b.n	8005630 <_printf_float+0x244>
 8005836:	f04f 0800 	mov.w	r8, #0
 800583a:	f104 0919 	add.w	r9, r4, #25
 800583e:	e7f4      	b.n	800582a <_printf_float+0x43e>

08005840 <_printf_common>:
 8005840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005844:	4616      	mov	r6, r2
 8005846:	4698      	mov	r8, r3
 8005848:	688a      	ldr	r2, [r1, #8]
 800584a:	690b      	ldr	r3, [r1, #16]
 800584c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005850:	4293      	cmp	r3, r2
 8005852:	bfb8      	it	lt
 8005854:	4613      	movlt	r3, r2
 8005856:	6033      	str	r3, [r6, #0]
 8005858:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800585c:	4607      	mov	r7, r0
 800585e:	460c      	mov	r4, r1
 8005860:	b10a      	cbz	r2, 8005866 <_printf_common+0x26>
 8005862:	3301      	adds	r3, #1
 8005864:	6033      	str	r3, [r6, #0]
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	0699      	lsls	r1, r3, #26
 800586a:	bf42      	ittt	mi
 800586c:	6833      	ldrmi	r3, [r6, #0]
 800586e:	3302      	addmi	r3, #2
 8005870:	6033      	strmi	r3, [r6, #0]
 8005872:	6825      	ldr	r5, [r4, #0]
 8005874:	f015 0506 	ands.w	r5, r5, #6
 8005878:	d106      	bne.n	8005888 <_printf_common+0x48>
 800587a:	f104 0a19 	add.w	sl, r4, #25
 800587e:	68e3      	ldr	r3, [r4, #12]
 8005880:	6832      	ldr	r2, [r6, #0]
 8005882:	1a9b      	subs	r3, r3, r2
 8005884:	42ab      	cmp	r3, r5
 8005886:	dc26      	bgt.n	80058d6 <_printf_common+0x96>
 8005888:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800588c:	6822      	ldr	r2, [r4, #0]
 800588e:	3b00      	subs	r3, #0
 8005890:	bf18      	it	ne
 8005892:	2301      	movne	r3, #1
 8005894:	0692      	lsls	r2, r2, #26
 8005896:	d42b      	bmi.n	80058f0 <_printf_common+0xb0>
 8005898:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800589c:	4641      	mov	r1, r8
 800589e:	4638      	mov	r0, r7
 80058a0:	47c8      	blx	r9
 80058a2:	3001      	adds	r0, #1
 80058a4:	d01e      	beq.n	80058e4 <_printf_common+0xa4>
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	6922      	ldr	r2, [r4, #16]
 80058aa:	f003 0306 	and.w	r3, r3, #6
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	bf02      	ittt	eq
 80058b2:	68e5      	ldreq	r5, [r4, #12]
 80058b4:	6833      	ldreq	r3, [r6, #0]
 80058b6:	1aed      	subeq	r5, r5, r3
 80058b8:	68a3      	ldr	r3, [r4, #8]
 80058ba:	bf0c      	ite	eq
 80058bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058c0:	2500      	movne	r5, #0
 80058c2:	4293      	cmp	r3, r2
 80058c4:	bfc4      	itt	gt
 80058c6:	1a9b      	subgt	r3, r3, r2
 80058c8:	18ed      	addgt	r5, r5, r3
 80058ca:	2600      	movs	r6, #0
 80058cc:	341a      	adds	r4, #26
 80058ce:	42b5      	cmp	r5, r6
 80058d0:	d11a      	bne.n	8005908 <_printf_common+0xc8>
 80058d2:	2000      	movs	r0, #0
 80058d4:	e008      	b.n	80058e8 <_printf_common+0xa8>
 80058d6:	2301      	movs	r3, #1
 80058d8:	4652      	mov	r2, sl
 80058da:	4641      	mov	r1, r8
 80058dc:	4638      	mov	r0, r7
 80058de:	47c8      	blx	r9
 80058e0:	3001      	adds	r0, #1
 80058e2:	d103      	bne.n	80058ec <_printf_common+0xac>
 80058e4:	f04f 30ff 	mov.w	r0, #4294967295
 80058e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ec:	3501      	adds	r5, #1
 80058ee:	e7c6      	b.n	800587e <_printf_common+0x3e>
 80058f0:	18e1      	adds	r1, r4, r3
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	2030      	movs	r0, #48	@ 0x30
 80058f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058fa:	4422      	add	r2, r4
 80058fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005900:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005904:	3302      	adds	r3, #2
 8005906:	e7c7      	b.n	8005898 <_printf_common+0x58>
 8005908:	2301      	movs	r3, #1
 800590a:	4622      	mov	r2, r4
 800590c:	4641      	mov	r1, r8
 800590e:	4638      	mov	r0, r7
 8005910:	47c8      	blx	r9
 8005912:	3001      	adds	r0, #1
 8005914:	d0e6      	beq.n	80058e4 <_printf_common+0xa4>
 8005916:	3601      	adds	r6, #1
 8005918:	e7d9      	b.n	80058ce <_printf_common+0x8e>
	...

0800591c <_printf_i>:
 800591c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005920:	7e0f      	ldrb	r7, [r1, #24]
 8005922:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005924:	2f78      	cmp	r7, #120	@ 0x78
 8005926:	4691      	mov	r9, r2
 8005928:	4680      	mov	r8, r0
 800592a:	460c      	mov	r4, r1
 800592c:	469a      	mov	sl, r3
 800592e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005932:	d807      	bhi.n	8005944 <_printf_i+0x28>
 8005934:	2f62      	cmp	r7, #98	@ 0x62
 8005936:	d80a      	bhi.n	800594e <_printf_i+0x32>
 8005938:	2f00      	cmp	r7, #0
 800593a:	f000 80d1 	beq.w	8005ae0 <_printf_i+0x1c4>
 800593e:	2f58      	cmp	r7, #88	@ 0x58
 8005940:	f000 80b8 	beq.w	8005ab4 <_printf_i+0x198>
 8005944:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005948:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800594c:	e03a      	b.n	80059c4 <_printf_i+0xa8>
 800594e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005952:	2b15      	cmp	r3, #21
 8005954:	d8f6      	bhi.n	8005944 <_printf_i+0x28>
 8005956:	a101      	add	r1, pc, #4	@ (adr r1, 800595c <_printf_i+0x40>)
 8005958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800595c:	080059b5 	.word	0x080059b5
 8005960:	080059c9 	.word	0x080059c9
 8005964:	08005945 	.word	0x08005945
 8005968:	08005945 	.word	0x08005945
 800596c:	08005945 	.word	0x08005945
 8005970:	08005945 	.word	0x08005945
 8005974:	080059c9 	.word	0x080059c9
 8005978:	08005945 	.word	0x08005945
 800597c:	08005945 	.word	0x08005945
 8005980:	08005945 	.word	0x08005945
 8005984:	08005945 	.word	0x08005945
 8005988:	08005ac7 	.word	0x08005ac7
 800598c:	080059f3 	.word	0x080059f3
 8005990:	08005a81 	.word	0x08005a81
 8005994:	08005945 	.word	0x08005945
 8005998:	08005945 	.word	0x08005945
 800599c:	08005ae9 	.word	0x08005ae9
 80059a0:	08005945 	.word	0x08005945
 80059a4:	080059f3 	.word	0x080059f3
 80059a8:	08005945 	.word	0x08005945
 80059ac:	08005945 	.word	0x08005945
 80059b0:	08005a89 	.word	0x08005a89
 80059b4:	6833      	ldr	r3, [r6, #0]
 80059b6:	1d1a      	adds	r2, r3, #4
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6032      	str	r2, [r6, #0]
 80059bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059c4:	2301      	movs	r3, #1
 80059c6:	e09c      	b.n	8005b02 <_printf_i+0x1e6>
 80059c8:	6833      	ldr	r3, [r6, #0]
 80059ca:	6820      	ldr	r0, [r4, #0]
 80059cc:	1d19      	adds	r1, r3, #4
 80059ce:	6031      	str	r1, [r6, #0]
 80059d0:	0606      	lsls	r6, r0, #24
 80059d2:	d501      	bpl.n	80059d8 <_printf_i+0xbc>
 80059d4:	681d      	ldr	r5, [r3, #0]
 80059d6:	e003      	b.n	80059e0 <_printf_i+0xc4>
 80059d8:	0645      	lsls	r5, r0, #25
 80059da:	d5fb      	bpl.n	80059d4 <_printf_i+0xb8>
 80059dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059e0:	2d00      	cmp	r5, #0
 80059e2:	da03      	bge.n	80059ec <_printf_i+0xd0>
 80059e4:	232d      	movs	r3, #45	@ 0x2d
 80059e6:	426d      	negs	r5, r5
 80059e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059ec:	4858      	ldr	r0, [pc, #352]	@ (8005b50 <_printf_i+0x234>)
 80059ee:	230a      	movs	r3, #10
 80059f0:	e011      	b.n	8005a16 <_printf_i+0xfa>
 80059f2:	6821      	ldr	r1, [r4, #0]
 80059f4:	6833      	ldr	r3, [r6, #0]
 80059f6:	0608      	lsls	r0, r1, #24
 80059f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80059fc:	d402      	bmi.n	8005a04 <_printf_i+0xe8>
 80059fe:	0649      	lsls	r1, r1, #25
 8005a00:	bf48      	it	mi
 8005a02:	b2ad      	uxthmi	r5, r5
 8005a04:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a06:	4852      	ldr	r0, [pc, #328]	@ (8005b50 <_printf_i+0x234>)
 8005a08:	6033      	str	r3, [r6, #0]
 8005a0a:	bf14      	ite	ne
 8005a0c:	230a      	movne	r3, #10
 8005a0e:	2308      	moveq	r3, #8
 8005a10:	2100      	movs	r1, #0
 8005a12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a16:	6866      	ldr	r6, [r4, #4]
 8005a18:	60a6      	str	r6, [r4, #8]
 8005a1a:	2e00      	cmp	r6, #0
 8005a1c:	db05      	blt.n	8005a2a <_printf_i+0x10e>
 8005a1e:	6821      	ldr	r1, [r4, #0]
 8005a20:	432e      	orrs	r6, r5
 8005a22:	f021 0104 	bic.w	r1, r1, #4
 8005a26:	6021      	str	r1, [r4, #0]
 8005a28:	d04b      	beq.n	8005ac2 <_printf_i+0x1a6>
 8005a2a:	4616      	mov	r6, r2
 8005a2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a30:	fb03 5711 	mls	r7, r3, r1, r5
 8005a34:	5dc7      	ldrb	r7, [r0, r7]
 8005a36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a3a:	462f      	mov	r7, r5
 8005a3c:	42bb      	cmp	r3, r7
 8005a3e:	460d      	mov	r5, r1
 8005a40:	d9f4      	bls.n	8005a2c <_printf_i+0x110>
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d10b      	bne.n	8005a5e <_printf_i+0x142>
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	07df      	lsls	r7, r3, #31
 8005a4a:	d508      	bpl.n	8005a5e <_printf_i+0x142>
 8005a4c:	6923      	ldr	r3, [r4, #16]
 8005a4e:	6861      	ldr	r1, [r4, #4]
 8005a50:	4299      	cmp	r1, r3
 8005a52:	bfde      	ittt	le
 8005a54:	2330      	movle	r3, #48	@ 0x30
 8005a56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a5e:	1b92      	subs	r2, r2, r6
 8005a60:	6122      	str	r2, [r4, #16]
 8005a62:	f8cd a000 	str.w	sl, [sp]
 8005a66:	464b      	mov	r3, r9
 8005a68:	aa03      	add	r2, sp, #12
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	f7ff fee7 	bl	8005840 <_printf_common>
 8005a72:	3001      	adds	r0, #1
 8005a74:	d14a      	bne.n	8005b0c <_printf_i+0x1f0>
 8005a76:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7a:	b004      	add	sp, #16
 8005a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	f043 0320 	orr.w	r3, r3, #32
 8005a86:	6023      	str	r3, [r4, #0]
 8005a88:	4832      	ldr	r0, [pc, #200]	@ (8005b54 <_printf_i+0x238>)
 8005a8a:	2778      	movs	r7, #120	@ 0x78
 8005a8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	6831      	ldr	r1, [r6, #0]
 8005a94:	061f      	lsls	r7, r3, #24
 8005a96:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a9a:	d402      	bmi.n	8005aa2 <_printf_i+0x186>
 8005a9c:	065f      	lsls	r7, r3, #25
 8005a9e:	bf48      	it	mi
 8005aa0:	b2ad      	uxthmi	r5, r5
 8005aa2:	6031      	str	r1, [r6, #0]
 8005aa4:	07d9      	lsls	r1, r3, #31
 8005aa6:	bf44      	itt	mi
 8005aa8:	f043 0320 	orrmi.w	r3, r3, #32
 8005aac:	6023      	strmi	r3, [r4, #0]
 8005aae:	b11d      	cbz	r5, 8005ab8 <_printf_i+0x19c>
 8005ab0:	2310      	movs	r3, #16
 8005ab2:	e7ad      	b.n	8005a10 <_printf_i+0xf4>
 8005ab4:	4826      	ldr	r0, [pc, #152]	@ (8005b50 <_printf_i+0x234>)
 8005ab6:	e7e9      	b.n	8005a8c <_printf_i+0x170>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	f023 0320 	bic.w	r3, r3, #32
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	e7f6      	b.n	8005ab0 <_printf_i+0x194>
 8005ac2:	4616      	mov	r6, r2
 8005ac4:	e7bd      	b.n	8005a42 <_printf_i+0x126>
 8005ac6:	6833      	ldr	r3, [r6, #0]
 8005ac8:	6825      	ldr	r5, [r4, #0]
 8005aca:	6961      	ldr	r1, [r4, #20]
 8005acc:	1d18      	adds	r0, r3, #4
 8005ace:	6030      	str	r0, [r6, #0]
 8005ad0:	062e      	lsls	r6, r5, #24
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	d501      	bpl.n	8005ada <_printf_i+0x1be>
 8005ad6:	6019      	str	r1, [r3, #0]
 8005ad8:	e002      	b.n	8005ae0 <_printf_i+0x1c4>
 8005ada:	0668      	lsls	r0, r5, #25
 8005adc:	d5fb      	bpl.n	8005ad6 <_printf_i+0x1ba>
 8005ade:	8019      	strh	r1, [r3, #0]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	6123      	str	r3, [r4, #16]
 8005ae4:	4616      	mov	r6, r2
 8005ae6:	e7bc      	b.n	8005a62 <_printf_i+0x146>
 8005ae8:	6833      	ldr	r3, [r6, #0]
 8005aea:	1d1a      	adds	r2, r3, #4
 8005aec:	6032      	str	r2, [r6, #0]
 8005aee:	681e      	ldr	r6, [r3, #0]
 8005af0:	6862      	ldr	r2, [r4, #4]
 8005af2:	2100      	movs	r1, #0
 8005af4:	4630      	mov	r0, r6
 8005af6:	f7fa fb43 	bl	8000180 <memchr>
 8005afa:	b108      	cbz	r0, 8005b00 <_printf_i+0x1e4>
 8005afc:	1b80      	subs	r0, r0, r6
 8005afe:	6060      	str	r0, [r4, #4]
 8005b00:	6863      	ldr	r3, [r4, #4]
 8005b02:	6123      	str	r3, [r4, #16]
 8005b04:	2300      	movs	r3, #0
 8005b06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b0a:	e7aa      	b.n	8005a62 <_printf_i+0x146>
 8005b0c:	6923      	ldr	r3, [r4, #16]
 8005b0e:	4632      	mov	r2, r6
 8005b10:	4649      	mov	r1, r9
 8005b12:	4640      	mov	r0, r8
 8005b14:	47d0      	blx	sl
 8005b16:	3001      	adds	r0, #1
 8005b18:	d0ad      	beq.n	8005a76 <_printf_i+0x15a>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	079b      	lsls	r3, r3, #30
 8005b1e:	d413      	bmi.n	8005b48 <_printf_i+0x22c>
 8005b20:	68e0      	ldr	r0, [r4, #12]
 8005b22:	9b03      	ldr	r3, [sp, #12]
 8005b24:	4298      	cmp	r0, r3
 8005b26:	bfb8      	it	lt
 8005b28:	4618      	movlt	r0, r3
 8005b2a:	e7a6      	b.n	8005a7a <_printf_i+0x15e>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	4632      	mov	r2, r6
 8005b30:	4649      	mov	r1, r9
 8005b32:	4640      	mov	r0, r8
 8005b34:	47d0      	blx	sl
 8005b36:	3001      	adds	r0, #1
 8005b38:	d09d      	beq.n	8005a76 <_printf_i+0x15a>
 8005b3a:	3501      	adds	r5, #1
 8005b3c:	68e3      	ldr	r3, [r4, #12]
 8005b3e:	9903      	ldr	r1, [sp, #12]
 8005b40:	1a5b      	subs	r3, r3, r1
 8005b42:	42ab      	cmp	r3, r5
 8005b44:	dcf2      	bgt.n	8005b2c <_printf_i+0x210>
 8005b46:	e7eb      	b.n	8005b20 <_printf_i+0x204>
 8005b48:	2500      	movs	r5, #0
 8005b4a:	f104 0619 	add.w	r6, r4, #25
 8005b4e:	e7f5      	b.n	8005b3c <_printf_i+0x220>
 8005b50:	08007e0a 	.word	0x08007e0a
 8005b54:	08007e1b 	.word	0x08007e1b

08005b58 <std>:
 8005b58:	2300      	movs	r3, #0
 8005b5a:	b510      	push	{r4, lr}
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b66:	6083      	str	r3, [r0, #8]
 8005b68:	8181      	strh	r1, [r0, #12]
 8005b6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b6c:	81c2      	strh	r2, [r0, #14]
 8005b6e:	6183      	str	r3, [r0, #24]
 8005b70:	4619      	mov	r1, r3
 8005b72:	2208      	movs	r2, #8
 8005b74:	305c      	adds	r0, #92	@ 0x5c
 8005b76:	f000 f9f9 	bl	8005f6c <memset>
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb0 <std+0x58>)
 8005b7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb4 <std+0x5c>)
 8005b80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b82:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb8 <std+0x60>)
 8005b84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b86:	4b0d      	ldr	r3, [pc, #52]	@ (8005bbc <std+0x64>)
 8005b88:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc0 <std+0x68>)
 8005b8c:	6224      	str	r4, [r4, #32]
 8005b8e:	429c      	cmp	r4, r3
 8005b90:	d006      	beq.n	8005ba0 <std+0x48>
 8005b92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b96:	4294      	cmp	r4, r2
 8005b98:	d002      	beq.n	8005ba0 <std+0x48>
 8005b9a:	33d0      	adds	r3, #208	@ 0xd0
 8005b9c:	429c      	cmp	r4, r3
 8005b9e:	d105      	bne.n	8005bac <std+0x54>
 8005ba0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba8:	f000 ba5c 	b.w	8006064 <__retarget_lock_init_recursive>
 8005bac:	bd10      	pop	{r4, pc}
 8005bae:	bf00      	nop
 8005bb0:	08005dbd 	.word	0x08005dbd
 8005bb4:	08005ddf 	.word	0x08005ddf
 8005bb8:	08005e17 	.word	0x08005e17
 8005bbc:	08005e3b 	.word	0x08005e3b
 8005bc0:	200003ac 	.word	0x200003ac

08005bc4 <stdio_exit_handler>:
 8005bc4:	4a02      	ldr	r2, [pc, #8]	@ (8005bd0 <stdio_exit_handler+0xc>)
 8005bc6:	4903      	ldr	r1, [pc, #12]	@ (8005bd4 <stdio_exit_handler+0x10>)
 8005bc8:	4803      	ldr	r0, [pc, #12]	@ (8005bd8 <stdio_exit_handler+0x14>)
 8005bca:	f000 b869 	b.w	8005ca0 <_fwalk_sglue>
 8005bce:	bf00      	nop
 8005bd0:	20000030 	.word	0x20000030
 8005bd4:	080079a1 	.word	0x080079a1
 8005bd8:	20000040 	.word	0x20000040

08005bdc <cleanup_stdio>:
 8005bdc:	6841      	ldr	r1, [r0, #4]
 8005bde:	4b0c      	ldr	r3, [pc, #48]	@ (8005c10 <cleanup_stdio+0x34>)
 8005be0:	4299      	cmp	r1, r3
 8005be2:	b510      	push	{r4, lr}
 8005be4:	4604      	mov	r4, r0
 8005be6:	d001      	beq.n	8005bec <cleanup_stdio+0x10>
 8005be8:	f001 feda 	bl	80079a0 <_fflush_r>
 8005bec:	68a1      	ldr	r1, [r4, #8]
 8005bee:	4b09      	ldr	r3, [pc, #36]	@ (8005c14 <cleanup_stdio+0x38>)
 8005bf0:	4299      	cmp	r1, r3
 8005bf2:	d002      	beq.n	8005bfa <cleanup_stdio+0x1e>
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f001 fed3 	bl	80079a0 <_fflush_r>
 8005bfa:	68e1      	ldr	r1, [r4, #12]
 8005bfc:	4b06      	ldr	r3, [pc, #24]	@ (8005c18 <cleanup_stdio+0x3c>)
 8005bfe:	4299      	cmp	r1, r3
 8005c00:	d004      	beq.n	8005c0c <cleanup_stdio+0x30>
 8005c02:	4620      	mov	r0, r4
 8005c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c08:	f001 beca 	b.w	80079a0 <_fflush_r>
 8005c0c:	bd10      	pop	{r4, pc}
 8005c0e:	bf00      	nop
 8005c10:	200003ac 	.word	0x200003ac
 8005c14:	20000414 	.word	0x20000414
 8005c18:	2000047c 	.word	0x2000047c

08005c1c <global_stdio_init.part.0>:
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c4c <global_stdio_init.part.0+0x30>)
 8005c20:	4c0b      	ldr	r4, [pc, #44]	@ (8005c50 <global_stdio_init.part.0+0x34>)
 8005c22:	4a0c      	ldr	r2, [pc, #48]	@ (8005c54 <global_stdio_init.part.0+0x38>)
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	4620      	mov	r0, r4
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2104      	movs	r1, #4
 8005c2c:	f7ff ff94 	bl	8005b58 <std>
 8005c30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c34:	2201      	movs	r2, #1
 8005c36:	2109      	movs	r1, #9
 8005c38:	f7ff ff8e 	bl	8005b58 <std>
 8005c3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c40:	2202      	movs	r2, #2
 8005c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c46:	2112      	movs	r1, #18
 8005c48:	f7ff bf86 	b.w	8005b58 <std>
 8005c4c:	200004e4 	.word	0x200004e4
 8005c50:	200003ac 	.word	0x200003ac
 8005c54:	08005bc5 	.word	0x08005bc5

08005c58 <__sfp_lock_acquire>:
 8005c58:	4801      	ldr	r0, [pc, #4]	@ (8005c60 <__sfp_lock_acquire+0x8>)
 8005c5a:	f000 ba04 	b.w	8006066 <__retarget_lock_acquire_recursive>
 8005c5e:	bf00      	nop
 8005c60:	200004ed 	.word	0x200004ed

08005c64 <__sfp_lock_release>:
 8005c64:	4801      	ldr	r0, [pc, #4]	@ (8005c6c <__sfp_lock_release+0x8>)
 8005c66:	f000 b9ff 	b.w	8006068 <__retarget_lock_release_recursive>
 8005c6a:	bf00      	nop
 8005c6c:	200004ed 	.word	0x200004ed

08005c70 <__sinit>:
 8005c70:	b510      	push	{r4, lr}
 8005c72:	4604      	mov	r4, r0
 8005c74:	f7ff fff0 	bl	8005c58 <__sfp_lock_acquire>
 8005c78:	6a23      	ldr	r3, [r4, #32]
 8005c7a:	b11b      	cbz	r3, 8005c84 <__sinit+0x14>
 8005c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c80:	f7ff bff0 	b.w	8005c64 <__sfp_lock_release>
 8005c84:	4b04      	ldr	r3, [pc, #16]	@ (8005c98 <__sinit+0x28>)
 8005c86:	6223      	str	r3, [r4, #32]
 8005c88:	4b04      	ldr	r3, [pc, #16]	@ (8005c9c <__sinit+0x2c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1f5      	bne.n	8005c7c <__sinit+0xc>
 8005c90:	f7ff ffc4 	bl	8005c1c <global_stdio_init.part.0>
 8005c94:	e7f2      	b.n	8005c7c <__sinit+0xc>
 8005c96:	bf00      	nop
 8005c98:	08005bdd 	.word	0x08005bdd
 8005c9c:	200004e4 	.word	0x200004e4

08005ca0 <_fwalk_sglue>:
 8005ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ca4:	4607      	mov	r7, r0
 8005ca6:	4688      	mov	r8, r1
 8005ca8:	4614      	mov	r4, r2
 8005caa:	2600      	movs	r6, #0
 8005cac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cb0:	f1b9 0901 	subs.w	r9, r9, #1
 8005cb4:	d505      	bpl.n	8005cc2 <_fwalk_sglue+0x22>
 8005cb6:	6824      	ldr	r4, [r4, #0]
 8005cb8:	2c00      	cmp	r4, #0
 8005cba:	d1f7      	bne.n	8005cac <_fwalk_sglue+0xc>
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cc2:	89ab      	ldrh	r3, [r5, #12]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d907      	bls.n	8005cd8 <_fwalk_sglue+0x38>
 8005cc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	d003      	beq.n	8005cd8 <_fwalk_sglue+0x38>
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	47c0      	blx	r8
 8005cd6:	4306      	orrs	r6, r0
 8005cd8:	3568      	adds	r5, #104	@ 0x68
 8005cda:	e7e9      	b.n	8005cb0 <_fwalk_sglue+0x10>

08005cdc <iprintf>:
 8005cdc:	b40f      	push	{r0, r1, r2, r3}
 8005cde:	b507      	push	{r0, r1, r2, lr}
 8005ce0:	4906      	ldr	r1, [pc, #24]	@ (8005cfc <iprintf+0x20>)
 8005ce2:	ab04      	add	r3, sp, #16
 8005ce4:	6808      	ldr	r0, [r1, #0]
 8005ce6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cea:	6881      	ldr	r1, [r0, #8]
 8005cec:	9301      	str	r3, [sp, #4]
 8005cee:	f001 fcbb 	bl	8007668 <_vfiprintf_r>
 8005cf2:	b003      	add	sp, #12
 8005cf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cf8:	b004      	add	sp, #16
 8005cfa:	4770      	bx	lr
 8005cfc:	2000003c 	.word	0x2000003c

08005d00 <_puts_r>:
 8005d00:	6a03      	ldr	r3, [r0, #32]
 8005d02:	b570      	push	{r4, r5, r6, lr}
 8005d04:	6884      	ldr	r4, [r0, #8]
 8005d06:	4605      	mov	r5, r0
 8005d08:	460e      	mov	r6, r1
 8005d0a:	b90b      	cbnz	r3, 8005d10 <_puts_r+0x10>
 8005d0c:	f7ff ffb0 	bl	8005c70 <__sinit>
 8005d10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d12:	07db      	lsls	r3, r3, #31
 8005d14:	d405      	bmi.n	8005d22 <_puts_r+0x22>
 8005d16:	89a3      	ldrh	r3, [r4, #12]
 8005d18:	0598      	lsls	r0, r3, #22
 8005d1a:	d402      	bmi.n	8005d22 <_puts_r+0x22>
 8005d1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d1e:	f000 f9a2 	bl	8006066 <__retarget_lock_acquire_recursive>
 8005d22:	89a3      	ldrh	r3, [r4, #12]
 8005d24:	0719      	lsls	r1, r3, #28
 8005d26:	d502      	bpl.n	8005d2e <_puts_r+0x2e>
 8005d28:	6923      	ldr	r3, [r4, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d135      	bne.n	8005d9a <_puts_r+0x9a>
 8005d2e:	4621      	mov	r1, r4
 8005d30:	4628      	mov	r0, r5
 8005d32:	f000 f8c5 	bl	8005ec0 <__swsetup_r>
 8005d36:	b380      	cbz	r0, 8005d9a <_puts_r+0x9a>
 8005d38:	f04f 35ff 	mov.w	r5, #4294967295
 8005d3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d3e:	07da      	lsls	r2, r3, #31
 8005d40:	d405      	bmi.n	8005d4e <_puts_r+0x4e>
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	059b      	lsls	r3, r3, #22
 8005d46:	d402      	bmi.n	8005d4e <_puts_r+0x4e>
 8005d48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d4a:	f000 f98d 	bl	8006068 <__retarget_lock_release_recursive>
 8005d4e:	4628      	mov	r0, r5
 8005d50:	bd70      	pop	{r4, r5, r6, pc}
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	da04      	bge.n	8005d60 <_puts_r+0x60>
 8005d56:	69a2      	ldr	r2, [r4, #24]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	dc17      	bgt.n	8005d8c <_puts_r+0x8c>
 8005d5c:	290a      	cmp	r1, #10
 8005d5e:	d015      	beq.n	8005d8c <_puts_r+0x8c>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	6022      	str	r2, [r4, #0]
 8005d66:	7019      	strb	r1, [r3, #0]
 8005d68:	68a3      	ldr	r3, [r4, #8]
 8005d6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	60a3      	str	r3, [r4, #8]
 8005d72:	2900      	cmp	r1, #0
 8005d74:	d1ed      	bne.n	8005d52 <_puts_r+0x52>
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	da11      	bge.n	8005d9e <_puts_r+0x9e>
 8005d7a:	4622      	mov	r2, r4
 8005d7c:	210a      	movs	r1, #10
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f000 f85f 	bl	8005e42 <__swbuf_r>
 8005d84:	3001      	adds	r0, #1
 8005d86:	d0d7      	beq.n	8005d38 <_puts_r+0x38>
 8005d88:	250a      	movs	r5, #10
 8005d8a:	e7d7      	b.n	8005d3c <_puts_r+0x3c>
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f000 f857 	bl	8005e42 <__swbuf_r>
 8005d94:	3001      	adds	r0, #1
 8005d96:	d1e7      	bne.n	8005d68 <_puts_r+0x68>
 8005d98:	e7ce      	b.n	8005d38 <_puts_r+0x38>
 8005d9a:	3e01      	subs	r6, #1
 8005d9c:	e7e4      	b.n	8005d68 <_puts_r+0x68>
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	6022      	str	r2, [r4, #0]
 8005da4:	220a      	movs	r2, #10
 8005da6:	701a      	strb	r2, [r3, #0]
 8005da8:	e7ee      	b.n	8005d88 <_puts_r+0x88>
	...

08005dac <puts>:
 8005dac:	4b02      	ldr	r3, [pc, #8]	@ (8005db8 <puts+0xc>)
 8005dae:	4601      	mov	r1, r0
 8005db0:	6818      	ldr	r0, [r3, #0]
 8005db2:	f7ff bfa5 	b.w	8005d00 <_puts_r>
 8005db6:	bf00      	nop
 8005db8:	2000003c 	.word	0x2000003c

08005dbc <__sread>:
 8005dbc:	b510      	push	{r4, lr}
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc4:	f000 f900 	bl	8005fc8 <_read_r>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	bfab      	itete	ge
 8005dcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005dce:	89a3      	ldrhlt	r3, [r4, #12]
 8005dd0:	181b      	addge	r3, r3, r0
 8005dd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005dd6:	bfac      	ite	ge
 8005dd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005dda:	81a3      	strhlt	r3, [r4, #12]
 8005ddc:	bd10      	pop	{r4, pc}

08005dde <__swrite>:
 8005dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005de2:	461f      	mov	r7, r3
 8005de4:	898b      	ldrh	r3, [r1, #12]
 8005de6:	05db      	lsls	r3, r3, #23
 8005de8:	4605      	mov	r5, r0
 8005dea:	460c      	mov	r4, r1
 8005dec:	4616      	mov	r6, r2
 8005dee:	d505      	bpl.n	8005dfc <__swrite+0x1e>
 8005df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005df4:	2302      	movs	r3, #2
 8005df6:	2200      	movs	r2, #0
 8005df8:	f000 f8d4 	bl	8005fa4 <_lseek_r>
 8005dfc:	89a3      	ldrh	r3, [r4, #12]
 8005dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e06:	81a3      	strh	r3, [r4, #12]
 8005e08:	4632      	mov	r2, r6
 8005e0a:	463b      	mov	r3, r7
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e12:	f000 b8eb 	b.w	8005fec <_write_r>

08005e16 <__sseek>:
 8005e16:	b510      	push	{r4, lr}
 8005e18:	460c      	mov	r4, r1
 8005e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e1e:	f000 f8c1 	bl	8005fa4 <_lseek_r>
 8005e22:	1c43      	adds	r3, r0, #1
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	bf15      	itete	ne
 8005e28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e32:	81a3      	strheq	r3, [r4, #12]
 8005e34:	bf18      	it	ne
 8005e36:	81a3      	strhne	r3, [r4, #12]
 8005e38:	bd10      	pop	{r4, pc}

08005e3a <__sclose>:
 8005e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e3e:	f000 b8a1 	b.w	8005f84 <_close_r>

08005e42 <__swbuf_r>:
 8005e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e44:	460e      	mov	r6, r1
 8005e46:	4614      	mov	r4, r2
 8005e48:	4605      	mov	r5, r0
 8005e4a:	b118      	cbz	r0, 8005e54 <__swbuf_r+0x12>
 8005e4c:	6a03      	ldr	r3, [r0, #32]
 8005e4e:	b90b      	cbnz	r3, 8005e54 <__swbuf_r+0x12>
 8005e50:	f7ff ff0e 	bl	8005c70 <__sinit>
 8005e54:	69a3      	ldr	r3, [r4, #24]
 8005e56:	60a3      	str	r3, [r4, #8]
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	071a      	lsls	r2, r3, #28
 8005e5c:	d501      	bpl.n	8005e62 <__swbuf_r+0x20>
 8005e5e:	6923      	ldr	r3, [r4, #16]
 8005e60:	b943      	cbnz	r3, 8005e74 <__swbuf_r+0x32>
 8005e62:	4621      	mov	r1, r4
 8005e64:	4628      	mov	r0, r5
 8005e66:	f000 f82b 	bl	8005ec0 <__swsetup_r>
 8005e6a:	b118      	cbz	r0, 8005e74 <__swbuf_r+0x32>
 8005e6c:	f04f 37ff 	mov.w	r7, #4294967295
 8005e70:	4638      	mov	r0, r7
 8005e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	6922      	ldr	r2, [r4, #16]
 8005e78:	1a98      	subs	r0, r3, r2
 8005e7a:	6963      	ldr	r3, [r4, #20]
 8005e7c:	b2f6      	uxtb	r6, r6
 8005e7e:	4283      	cmp	r3, r0
 8005e80:	4637      	mov	r7, r6
 8005e82:	dc05      	bgt.n	8005e90 <__swbuf_r+0x4e>
 8005e84:	4621      	mov	r1, r4
 8005e86:	4628      	mov	r0, r5
 8005e88:	f001 fd8a 	bl	80079a0 <_fflush_r>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d1ed      	bne.n	8005e6c <__swbuf_r+0x2a>
 8005e90:	68a3      	ldr	r3, [r4, #8]
 8005e92:	3b01      	subs	r3, #1
 8005e94:	60a3      	str	r3, [r4, #8]
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	6022      	str	r2, [r4, #0]
 8005e9c:	701e      	strb	r6, [r3, #0]
 8005e9e:	6962      	ldr	r2, [r4, #20]
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d004      	beq.n	8005eb0 <__swbuf_r+0x6e>
 8005ea6:	89a3      	ldrh	r3, [r4, #12]
 8005ea8:	07db      	lsls	r3, r3, #31
 8005eaa:	d5e1      	bpl.n	8005e70 <__swbuf_r+0x2e>
 8005eac:	2e0a      	cmp	r6, #10
 8005eae:	d1df      	bne.n	8005e70 <__swbuf_r+0x2e>
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	f001 fd74 	bl	80079a0 <_fflush_r>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d0d9      	beq.n	8005e70 <__swbuf_r+0x2e>
 8005ebc:	e7d6      	b.n	8005e6c <__swbuf_r+0x2a>
	...

08005ec0 <__swsetup_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	4b29      	ldr	r3, [pc, #164]	@ (8005f68 <__swsetup_r+0xa8>)
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	6818      	ldr	r0, [r3, #0]
 8005ec8:	460c      	mov	r4, r1
 8005eca:	b118      	cbz	r0, 8005ed4 <__swsetup_r+0x14>
 8005ecc:	6a03      	ldr	r3, [r0, #32]
 8005ece:	b90b      	cbnz	r3, 8005ed4 <__swsetup_r+0x14>
 8005ed0:	f7ff fece 	bl	8005c70 <__sinit>
 8005ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ed8:	0719      	lsls	r1, r3, #28
 8005eda:	d422      	bmi.n	8005f22 <__swsetup_r+0x62>
 8005edc:	06da      	lsls	r2, r3, #27
 8005ede:	d407      	bmi.n	8005ef0 <__swsetup_r+0x30>
 8005ee0:	2209      	movs	r2, #9
 8005ee2:	602a      	str	r2, [r5, #0]
 8005ee4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ee8:	81a3      	strh	r3, [r4, #12]
 8005eea:	f04f 30ff 	mov.w	r0, #4294967295
 8005eee:	e033      	b.n	8005f58 <__swsetup_r+0x98>
 8005ef0:	0758      	lsls	r0, r3, #29
 8005ef2:	d512      	bpl.n	8005f1a <__swsetup_r+0x5a>
 8005ef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ef6:	b141      	cbz	r1, 8005f0a <__swsetup_r+0x4a>
 8005ef8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005efc:	4299      	cmp	r1, r3
 8005efe:	d002      	beq.n	8005f06 <__swsetup_r+0x46>
 8005f00:	4628      	mov	r0, r5
 8005f02:	f000 ff0d 	bl	8006d20 <_free_r>
 8005f06:	2300      	movs	r3, #0
 8005f08:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f0a:	89a3      	ldrh	r3, [r4, #12]
 8005f0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f10:	81a3      	strh	r3, [r4, #12]
 8005f12:	2300      	movs	r3, #0
 8005f14:	6063      	str	r3, [r4, #4]
 8005f16:	6923      	ldr	r3, [r4, #16]
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	89a3      	ldrh	r3, [r4, #12]
 8005f1c:	f043 0308 	orr.w	r3, r3, #8
 8005f20:	81a3      	strh	r3, [r4, #12]
 8005f22:	6923      	ldr	r3, [r4, #16]
 8005f24:	b94b      	cbnz	r3, 8005f3a <__swsetup_r+0x7a>
 8005f26:	89a3      	ldrh	r3, [r4, #12]
 8005f28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f30:	d003      	beq.n	8005f3a <__swsetup_r+0x7a>
 8005f32:	4621      	mov	r1, r4
 8005f34:	4628      	mov	r0, r5
 8005f36:	f001 fd81 	bl	8007a3c <__smakebuf_r>
 8005f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f3e:	f013 0201 	ands.w	r2, r3, #1
 8005f42:	d00a      	beq.n	8005f5a <__swsetup_r+0x9a>
 8005f44:	2200      	movs	r2, #0
 8005f46:	60a2      	str	r2, [r4, #8]
 8005f48:	6962      	ldr	r2, [r4, #20]
 8005f4a:	4252      	negs	r2, r2
 8005f4c:	61a2      	str	r2, [r4, #24]
 8005f4e:	6922      	ldr	r2, [r4, #16]
 8005f50:	b942      	cbnz	r2, 8005f64 <__swsetup_r+0xa4>
 8005f52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f56:	d1c5      	bne.n	8005ee4 <__swsetup_r+0x24>
 8005f58:	bd38      	pop	{r3, r4, r5, pc}
 8005f5a:	0799      	lsls	r1, r3, #30
 8005f5c:	bf58      	it	pl
 8005f5e:	6962      	ldrpl	r2, [r4, #20]
 8005f60:	60a2      	str	r2, [r4, #8]
 8005f62:	e7f4      	b.n	8005f4e <__swsetup_r+0x8e>
 8005f64:	2000      	movs	r0, #0
 8005f66:	e7f7      	b.n	8005f58 <__swsetup_r+0x98>
 8005f68:	2000003c 	.word	0x2000003c

08005f6c <memset>:
 8005f6c:	4402      	add	r2, r0
 8005f6e:	4603      	mov	r3, r0
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d100      	bne.n	8005f76 <memset+0xa>
 8005f74:	4770      	bx	lr
 8005f76:	f803 1b01 	strb.w	r1, [r3], #1
 8005f7a:	e7f9      	b.n	8005f70 <memset+0x4>

08005f7c <_localeconv_r>:
 8005f7c:	4800      	ldr	r0, [pc, #0]	@ (8005f80 <_localeconv_r+0x4>)
 8005f7e:	4770      	bx	lr
 8005f80:	2000017c 	.word	0x2000017c

08005f84 <_close_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	4d06      	ldr	r5, [pc, #24]	@ (8005fa0 <_close_r+0x1c>)
 8005f88:	2300      	movs	r3, #0
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	602b      	str	r3, [r5, #0]
 8005f90:	f7fb faf9 	bl	8001586 <_close>
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	d102      	bne.n	8005f9e <_close_r+0x1a>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	b103      	cbz	r3, 8005f9e <_close_r+0x1a>
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	200004e8 	.word	0x200004e8

08005fa4 <_lseek_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4d07      	ldr	r5, [pc, #28]	@ (8005fc4 <_lseek_r+0x20>)
 8005fa8:	4604      	mov	r4, r0
 8005faa:	4608      	mov	r0, r1
 8005fac:	4611      	mov	r1, r2
 8005fae:	2200      	movs	r2, #0
 8005fb0:	602a      	str	r2, [r5, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f7fb fb0e 	bl	80015d4 <_lseek>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	d102      	bne.n	8005fc2 <_lseek_r+0x1e>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	b103      	cbz	r3, 8005fc2 <_lseek_r+0x1e>
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	bd38      	pop	{r3, r4, r5, pc}
 8005fc4:	200004e8 	.word	0x200004e8

08005fc8 <_read_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4d07      	ldr	r5, [pc, #28]	@ (8005fe8 <_read_r+0x20>)
 8005fcc:	4604      	mov	r4, r0
 8005fce:	4608      	mov	r0, r1
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	602a      	str	r2, [r5, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f7fb fa9c 	bl	8001514 <_read>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d102      	bne.n	8005fe6 <_read_r+0x1e>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	b103      	cbz	r3, 8005fe6 <_read_r+0x1e>
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	200004e8 	.word	0x200004e8

08005fec <_write_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4d07      	ldr	r5, [pc, #28]	@ (800600c <_write_r+0x20>)
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	4608      	mov	r0, r1
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	602a      	str	r2, [r5, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f7fb faa7 	bl	800154e <_write>
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	d102      	bne.n	800600a <_write_r+0x1e>
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	b103      	cbz	r3, 800600a <_write_r+0x1e>
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	bd38      	pop	{r3, r4, r5, pc}
 800600c:	200004e8 	.word	0x200004e8

08006010 <__errno>:
 8006010:	4b01      	ldr	r3, [pc, #4]	@ (8006018 <__errno+0x8>)
 8006012:	6818      	ldr	r0, [r3, #0]
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	2000003c 	.word	0x2000003c

0800601c <__libc_init_array>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	4d0d      	ldr	r5, [pc, #52]	@ (8006054 <__libc_init_array+0x38>)
 8006020:	4c0d      	ldr	r4, [pc, #52]	@ (8006058 <__libc_init_array+0x3c>)
 8006022:	1b64      	subs	r4, r4, r5
 8006024:	10a4      	asrs	r4, r4, #2
 8006026:	2600      	movs	r6, #0
 8006028:	42a6      	cmp	r6, r4
 800602a:	d109      	bne.n	8006040 <__libc_init_array+0x24>
 800602c:	4d0b      	ldr	r5, [pc, #44]	@ (800605c <__libc_init_array+0x40>)
 800602e:	4c0c      	ldr	r4, [pc, #48]	@ (8006060 <__libc_init_array+0x44>)
 8006030:	f001 fe30 	bl	8007c94 <_init>
 8006034:	1b64      	subs	r4, r4, r5
 8006036:	10a4      	asrs	r4, r4, #2
 8006038:	2600      	movs	r6, #0
 800603a:	42a6      	cmp	r6, r4
 800603c:	d105      	bne.n	800604a <__libc_init_array+0x2e>
 800603e:	bd70      	pop	{r4, r5, r6, pc}
 8006040:	f855 3b04 	ldr.w	r3, [r5], #4
 8006044:	4798      	blx	r3
 8006046:	3601      	adds	r6, #1
 8006048:	e7ee      	b.n	8006028 <__libc_init_array+0xc>
 800604a:	f855 3b04 	ldr.w	r3, [r5], #4
 800604e:	4798      	blx	r3
 8006050:	3601      	adds	r6, #1
 8006052:	e7f2      	b.n	800603a <__libc_init_array+0x1e>
 8006054:	08008174 	.word	0x08008174
 8006058:	08008174 	.word	0x08008174
 800605c:	08008174 	.word	0x08008174
 8006060:	08008178 	.word	0x08008178

08006064 <__retarget_lock_init_recursive>:
 8006064:	4770      	bx	lr

08006066 <__retarget_lock_acquire_recursive>:
 8006066:	4770      	bx	lr

08006068 <__retarget_lock_release_recursive>:
 8006068:	4770      	bx	lr

0800606a <quorem>:
 800606a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606e:	6903      	ldr	r3, [r0, #16]
 8006070:	690c      	ldr	r4, [r1, #16]
 8006072:	42a3      	cmp	r3, r4
 8006074:	4607      	mov	r7, r0
 8006076:	db7e      	blt.n	8006176 <quorem+0x10c>
 8006078:	3c01      	subs	r4, #1
 800607a:	f101 0814 	add.w	r8, r1, #20
 800607e:	00a3      	lsls	r3, r4, #2
 8006080:	f100 0514 	add.w	r5, r0, #20
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800608a:	9301      	str	r3, [sp, #4]
 800608c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006090:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006094:	3301      	adds	r3, #1
 8006096:	429a      	cmp	r2, r3
 8006098:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800609c:	fbb2 f6f3 	udiv	r6, r2, r3
 80060a0:	d32e      	bcc.n	8006100 <quorem+0x96>
 80060a2:	f04f 0a00 	mov.w	sl, #0
 80060a6:	46c4      	mov	ip, r8
 80060a8:	46ae      	mov	lr, r5
 80060aa:	46d3      	mov	fp, sl
 80060ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060b0:	b298      	uxth	r0, r3
 80060b2:	fb06 a000 	mla	r0, r6, r0, sl
 80060b6:	0c02      	lsrs	r2, r0, #16
 80060b8:	0c1b      	lsrs	r3, r3, #16
 80060ba:	fb06 2303 	mla	r3, r6, r3, r2
 80060be:	f8de 2000 	ldr.w	r2, [lr]
 80060c2:	b280      	uxth	r0, r0
 80060c4:	b292      	uxth	r2, r2
 80060c6:	1a12      	subs	r2, r2, r0
 80060c8:	445a      	add	r2, fp
 80060ca:	f8de 0000 	ldr.w	r0, [lr]
 80060ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80060d8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80060dc:	b292      	uxth	r2, r2
 80060de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80060e2:	45e1      	cmp	r9, ip
 80060e4:	f84e 2b04 	str.w	r2, [lr], #4
 80060e8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80060ec:	d2de      	bcs.n	80060ac <quorem+0x42>
 80060ee:	9b00      	ldr	r3, [sp, #0]
 80060f0:	58eb      	ldr	r3, [r5, r3]
 80060f2:	b92b      	cbnz	r3, 8006100 <quorem+0x96>
 80060f4:	9b01      	ldr	r3, [sp, #4]
 80060f6:	3b04      	subs	r3, #4
 80060f8:	429d      	cmp	r5, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	d32f      	bcc.n	800615e <quorem+0xf4>
 80060fe:	613c      	str	r4, [r7, #16]
 8006100:	4638      	mov	r0, r7
 8006102:	f001 f97f 	bl	8007404 <__mcmp>
 8006106:	2800      	cmp	r0, #0
 8006108:	db25      	blt.n	8006156 <quorem+0xec>
 800610a:	4629      	mov	r1, r5
 800610c:	2000      	movs	r0, #0
 800610e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006112:	f8d1 c000 	ldr.w	ip, [r1]
 8006116:	fa1f fe82 	uxth.w	lr, r2
 800611a:	fa1f f38c 	uxth.w	r3, ip
 800611e:	eba3 030e 	sub.w	r3, r3, lr
 8006122:	4403      	add	r3, r0
 8006124:	0c12      	lsrs	r2, r2, #16
 8006126:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800612a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800612e:	b29b      	uxth	r3, r3
 8006130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006134:	45c1      	cmp	r9, r8
 8006136:	f841 3b04 	str.w	r3, [r1], #4
 800613a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800613e:	d2e6      	bcs.n	800610e <quorem+0xa4>
 8006140:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006144:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006148:	b922      	cbnz	r2, 8006154 <quorem+0xea>
 800614a:	3b04      	subs	r3, #4
 800614c:	429d      	cmp	r5, r3
 800614e:	461a      	mov	r2, r3
 8006150:	d30b      	bcc.n	800616a <quorem+0x100>
 8006152:	613c      	str	r4, [r7, #16]
 8006154:	3601      	adds	r6, #1
 8006156:	4630      	mov	r0, r6
 8006158:	b003      	add	sp, #12
 800615a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	3b04      	subs	r3, #4
 8006162:	2a00      	cmp	r2, #0
 8006164:	d1cb      	bne.n	80060fe <quorem+0x94>
 8006166:	3c01      	subs	r4, #1
 8006168:	e7c6      	b.n	80060f8 <quorem+0x8e>
 800616a:	6812      	ldr	r2, [r2, #0]
 800616c:	3b04      	subs	r3, #4
 800616e:	2a00      	cmp	r2, #0
 8006170:	d1ef      	bne.n	8006152 <quorem+0xe8>
 8006172:	3c01      	subs	r4, #1
 8006174:	e7ea      	b.n	800614c <quorem+0xe2>
 8006176:	2000      	movs	r0, #0
 8006178:	e7ee      	b.n	8006158 <quorem+0xee>
 800617a:	0000      	movs	r0, r0
 800617c:	0000      	movs	r0, r0
	...

08006180 <_dtoa_r>:
 8006180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006184:	69c7      	ldr	r7, [r0, #28]
 8006186:	b097      	sub	sp, #92	@ 0x5c
 8006188:	ed8d 0b04 	vstr	d0, [sp, #16]
 800618c:	ec55 4b10 	vmov	r4, r5, d0
 8006190:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006192:	9107      	str	r1, [sp, #28]
 8006194:	4681      	mov	r9, r0
 8006196:	920c      	str	r2, [sp, #48]	@ 0x30
 8006198:	9311      	str	r3, [sp, #68]	@ 0x44
 800619a:	b97f      	cbnz	r7, 80061bc <_dtoa_r+0x3c>
 800619c:	2010      	movs	r0, #16
 800619e:	f000 fe09 	bl	8006db4 <malloc>
 80061a2:	4602      	mov	r2, r0
 80061a4:	f8c9 001c 	str.w	r0, [r9, #28]
 80061a8:	b920      	cbnz	r0, 80061b4 <_dtoa_r+0x34>
 80061aa:	4ba9      	ldr	r3, [pc, #676]	@ (8006450 <_dtoa_r+0x2d0>)
 80061ac:	21ef      	movs	r1, #239	@ 0xef
 80061ae:	48a9      	ldr	r0, [pc, #676]	@ (8006454 <_dtoa_r+0x2d4>)
 80061b0:	f001 fcc0 	bl	8007b34 <__assert_func>
 80061b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80061b8:	6007      	str	r7, [r0, #0]
 80061ba:	60c7      	str	r7, [r0, #12]
 80061bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80061c0:	6819      	ldr	r1, [r3, #0]
 80061c2:	b159      	cbz	r1, 80061dc <_dtoa_r+0x5c>
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	604a      	str	r2, [r1, #4]
 80061c8:	2301      	movs	r3, #1
 80061ca:	4093      	lsls	r3, r2
 80061cc:	608b      	str	r3, [r1, #8]
 80061ce:	4648      	mov	r0, r9
 80061d0:	f000 fee6 	bl	8006fa0 <_Bfree>
 80061d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	1e2b      	subs	r3, r5, #0
 80061de:	bfb9      	ittee	lt
 80061e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80061e4:	9305      	strlt	r3, [sp, #20]
 80061e6:	2300      	movge	r3, #0
 80061e8:	6033      	strge	r3, [r6, #0]
 80061ea:	9f05      	ldr	r7, [sp, #20]
 80061ec:	4b9a      	ldr	r3, [pc, #616]	@ (8006458 <_dtoa_r+0x2d8>)
 80061ee:	bfbc      	itt	lt
 80061f0:	2201      	movlt	r2, #1
 80061f2:	6032      	strlt	r2, [r6, #0]
 80061f4:	43bb      	bics	r3, r7
 80061f6:	d112      	bne.n	800621e <_dtoa_r+0x9e>
 80061f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80061fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006204:	4323      	orrs	r3, r4
 8006206:	f000 855a 	beq.w	8006cbe <_dtoa_r+0xb3e>
 800620a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800620c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800646c <_dtoa_r+0x2ec>
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 855c 	beq.w	8006cce <_dtoa_r+0xb4e>
 8006216:	f10a 0303 	add.w	r3, sl, #3
 800621a:	f000 bd56 	b.w	8006cca <_dtoa_r+0xb4a>
 800621e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006222:	2200      	movs	r2, #0
 8006224:	ec51 0b17 	vmov	r0, r1, d7
 8006228:	2300      	movs	r3, #0
 800622a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800622e:	f7fa fc23 	bl	8000a78 <__aeabi_dcmpeq>
 8006232:	4680      	mov	r8, r0
 8006234:	b158      	cbz	r0, 800624e <_dtoa_r+0xce>
 8006236:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006238:	2301      	movs	r3, #1
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800623e:	b113      	cbz	r3, 8006246 <_dtoa_r+0xc6>
 8006240:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006242:	4b86      	ldr	r3, [pc, #536]	@ (800645c <_dtoa_r+0x2dc>)
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006470 <_dtoa_r+0x2f0>
 800624a:	f000 bd40 	b.w	8006cce <_dtoa_r+0xb4e>
 800624e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006252:	aa14      	add	r2, sp, #80	@ 0x50
 8006254:	a915      	add	r1, sp, #84	@ 0x54
 8006256:	4648      	mov	r0, r9
 8006258:	f001 f984 	bl	8007564 <__d2b>
 800625c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006260:	9002      	str	r0, [sp, #8]
 8006262:	2e00      	cmp	r6, #0
 8006264:	d078      	beq.n	8006358 <_dtoa_r+0x1d8>
 8006266:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006268:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800626c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006270:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006274:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006278:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800627c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006280:	4619      	mov	r1, r3
 8006282:	2200      	movs	r2, #0
 8006284:	4b76      	ldr	r3, [pc, #472]	@ (8006460 <_dtoa_r+0x2e0>)
 8006286:	f7f9 ffd7 	bl	8000238 <__aeabi_dsub>
 800628a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006438 <_dtoa_r+0x2b8>)
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	f7fa f98a 	bl	80005a8 <__aeabi_dmul>
 8006294:	a36a      	add	r3, pc, #424	@ (adr r3, 8006440 <_dtoa_r+0x2c0>)
 8006296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629a:	f7f9 ffcf 	bl	800023c <__adddf3>
 800629e:	4604      	mov	r4, r0
 80062a0:	4630      	mov	r0, r6
 80062a2:	460d      	mov	r5, r1
 80062a4:	f7fa f916 	bl	80004d4 <__aeabi_i2d>
 80062a8:	a367      	add	r3, pc, #412	@ (adr r3, 8006448 <_dtoa_r+0x2c8>)
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	f7fa f97b 	bl	80005a8 <__aeabi_dmul>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	4620      	mov	r0, r4
 80062b8:	4629      	mov	r1, r5
 80062ba:	f7f9 ffbf 	bl	800023c <__adddf3>
 80062be:	4604      	mov	r4, r0
 80062c0:	460d      	mov	r5, r1
 80062c2:	f7fa fc21 	bl	8000b08 <__aeabi_d2iz>
 80062c6:	2200      	movs	r2, #0
 80062c8:	4607      	mov	r7, r0
 80062ca:	2300      	movs	r3, #0
 80062cc:	4620      	mov	r0, r4
 80062ce:	4629      	mov	r1, r5
 80062d0:	f7fa fbdc 	bl	8000a8c <__aeabi_dcmplt>
 80062d4:	b140      	cbz	r0, 80062e8 <_dtoa_r+0x168>
 80062d6:	4638      	mov	r0, r7
 80062d8:	f7fa f8fc 	bl	80004d4 <__aeabi_i2d>
 80062dc:	4622      	mov	r2, r4
 80062de:	462b      	mov	r3, r5
 80062e0:	f7fa fbca 	bl	8000a78 <__aeabi_dcmpeq>
 80062e4:	b900      	cbnz	r0, 80062e8 <_dtoa_r+0x168>
 80062e6:	3f01      	subs	r7, #1
 80062e8:	2f16      	cmp	r7, #22
 80062ea:	d852      	bhi.n	8006392 <_dtoa_r+0x212>
 80062ec:	4b5d      	ldr	r3, [pc, #372]	@ (8006464 <_dtoa_r+0x2e4>)
 80062ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80062fa:	f7fa fbc7 	bl	8000a8c <__aeabi_dcmplt>
 80062fe:	2800      	cmp	r0, #0
 8006300:	d049      	beq.n	8006396 <_dtoa_r+0x216>
 8006302:	3f01      	subs	r7, #1
 8006304:	2300      	movs	r3, #0
 8006306:	9310      	str	r3, [sp, #64]	@ 0x40
 8006308:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800630a:	1b9b      	subs	r3, r3, r6
 800630c:	1e5a      	subs	r2, r3, #1
 800630e:	bf45      	ittet	mi
 8006310:	f1c3 0301 	rsbmi	r3, r3, #1
 8006314:	9300      	strmi	r3, [sp, #0]
 8006316:	2300      	movpl	r3, #0
 8006318:	2300      	movmi	r3, #0
 800631a:	9206      	str	r2, [sp, #24]
 800631c:	bf54      	ite	pl
 800631e:	9300      	strpl	r3, [sp, #0]
 8006320:	9306      	strmi	r3, [sp, #24]
 8006322:	2f00      	cmp	r7, #0
 8006324:	db39      	blt.n	800639a <_dtoa_r+0x21a>
 8006326:	9b06      	ldr	r3, [sp, #24]
 8006328:	970d      	str	r7, [sp, #52]	@ 0x34
 800632a:	443b      	add	r3, r7
 800632c:	9306      	str	r3, [sp, #24]
 800632e:	2300      	movs	r3, #0
 8006330:	9308      	str	r3, [sp, #32]
 8006332:	9b07      	ldr	r3, [sp, #28]
 8006334:	2b09      	cmp	r3, #9
 8006336:	d863      	bhi.n	8006400 <_dtoa_r+0x280>
 8006338:	2b05      	cmp	r3, #5
 800633a:	bfc4      	itt	gt
 800633c:	3b04      	subgt	r3, #4
 800633e:	9307      	strgt	r3, [sp, #28]
 8006340:	9b07      	ldr	r3, [sp, #28]
 8006342:	f1a3 0302 	sub.w	r3, r3, #2
 8006346:	bfcc      	ite	gt
 8006348:	2400      	movgt	r4, #0
 800634a:	2401      	movle	r4, #1
 800634c:	2b03      	cmp	r3, #3
 800634e:	d863      	bhi.n	8006418 <_dtoa_r+0x298>
 8006350:	e8df f003 	tbb	[pc, r3]
 8006354:	2b375452 	.word	0x2b375452
 8006358:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800635c:	441e      	add	r6, r3
 800635e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006362:	2b20      	cmp	r3, #32
 8006364:	bfc1      	itttt	gt
 8006366:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800636a:	409f      	lslgt	r7, r3
 800636c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006370:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006374:	bfd6      	itet	le
 8006376:	f1c3 0320 	rsble	r3, r3, #32
 800637a:	ea47 0003 	orrgt.w	r0, r7, r3
 800637e:	fa04 f003 	lslle.w	r0, r4, r3
 8006382:	f7fa f897 	bl	80004b4 <__aeabi_ui2d>
 8006386:	2201      	movs	r2, #1
 8006388:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800638c:	3e01      	subs	r6, #1
 800638e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006390:	e776      	b.n	8006280 <_dtoa_r+0x100>
 8006392:	2301      	movs	r3, #1
 8006394:	e7b7      	b.n	8006306 <_dtoa_r+0x186>
 8006396:	9010      	str	r0, [sp, #64]	@ 0x40
 8006398:	e7b6      	b.n	8006308 <_dtoa_r+0x188>
 800639a:	9b00      	ldr	r3, [sp, #0]
 800639c:	1bdb      	subs	r3, r3, r7
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	427b      	negs	r3, r7
 80063a2:	9308      	str	r3, [sp, #32]
 80063a4:	2300      	movs	r3, #0
 80063a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80063a8:	e7c3      	b.n	8006332 <_dtoa_r+0x1b2>
 80063aa:	2301      	movs	r3, #1
 80063ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80063ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80063b0:	eb07 0b03 	add.w	fp, r7, r3
 80063b4:	f10b 0301 	add.w	r3, fp, #1
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	9303      	str	r3, [sp, #12]
 80063bc:	bfb8      	it	lt
 80063be:	2301      	movlt	r3, #1
 80063c0:	e006      	b.n	80063d0 <_dtoa_r+0x250>
 80063c2:	2301      	movs	r3, #1
 80063c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80063c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	dd28      	ble.n	800641e <_dtoa_r+0x29e>
 80063cc:	469b      	mov	fp, r3
 80063ce:	9303      	str	r3, [sp, #12]
 80063d0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80063d4:	2100      	movs	r1, #0
 80063d6:	2204      	movs	r2, #4
 80063d8:	f102 0514 	add.w	r5, r2, #20
 80063dc:	429d      	cmp	r5, r3
 80063de:	d926      	bls.n	800642e <_dtoa_r+0x2ae>
 80063e0:	6041      	str	r1, [r0, #4]
 80063e2:	4648      	mov	r0, r9
 80063e4:	f000 fd9c 	bl	8006f20 <_Balloc>
 80063e8:	4682      	mov	sl, r0
 80063ea:	2800      	cmp	r0, #0
 80063ec:	d142      	bne.n	8006474 <_dtoa_r+0x2f4>
 80063ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006468 <_dtoa_r+0x2e8>)
 80063f0:	4602      	mov	r2, r0
 80063f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80063f6:	e6da      	b.n	80061ae <_dtoa_r+0x2e>
 80063f8:	2300      	movs	r3, #0
 80063fa:	e7e3      	b.n	80063c4 <_dtoa_r+0x244>
 80063fc:	2300      	movs	r3, #0
 80063fe:	e7d5      	b.n	80063ac <_dtoa_r+0x22c>
 8006400:	2401      	movs	r4, #1
 8006402:	2300      	movs	r3, #0
 8006404:	9307      	str	r3, [sp, #28]
 8006406:	9409      	str	r4, [sp, #36]	@ 0x24
 8006408:	f04f 3bff 	mov.w	fp, #4294967295
 800640c:	2200      	movs	r2, #0
 800640e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006412:	2312      	movs	r3, #18
 8006414:	920c      	str	r2, [sp, #48]	@ 0x30
 8006416:	e7db      	b.n	80063d0 <_dtoa_r+0x250>
 8006418:	2301      	movs	r3, #1
 800641a:	9309      	str	r3, [sp, #36]	@ 0x24
 800641c:	e7f4      	b.n	8006408 <_dtoa_r+0x288>
 800641e:	f04f 0b01 	mov.w	fp, #1
 8006422:	f8cd b00c 	str.w	fp, [sp, #12]
 8006426:	465b      	mov	r3, fp
 8006428:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800642c:	e7d0      	b.n	80063d0 <_dtoa_r+0x250>
 800642e:	3101      	adds	r1, #1
 8006430:	0052      	lsls	r2, r2, #1
 8006432:	e7d1      	b.n	80063d8 <_dtoa_r+0x258>
 8006434:	f3af 8000 	nop.w
 8006438:	636f4361 	.word	0x636f4361
 800643c:	3fd287a7 	.word	0x3fd287a7
 8006440:	8b60c8b3 	.word	0x8b60c8b3
 8006444:	3fc68a28 	.word	0x3fc68a28
 8006448:	509f79fb 	.word	0x509f79fb
 800644c:	3fd34413 	.word	0x3fd34413
 8006450:	08007e39 	.word	0x08007e39
 8006454:	08007e50 	.word	0x08007e50
 8006458:	7ff00000 	.word	0x7ff00000
 800645c:	08007e09 	.word	0x08007e09
 8006460:	3ff80000 	.word	0x3ff80000
 8006464:	08007fa0 	.word	0x08007fa0
 8006468:	08007ea8 	.word	0x08007ea8
 800646c:	08007e35 	.word	0x08007e35
 8006470:	08007e08 	.word	0x08007e08
 8006474:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006478:	6018      	str	r0, [r3, #0]
 800647a:	9b03      	ldr	r3, [sp, #12]
 800647c:	2b0e      	cmp	r3, #14
 800647e:	f200 80a1 	bhi.w	80065c4 <_dtoa_r+0x444>
 8006482:	2c00      	cmp	r4, #0
 8006484:	f000 809e 	beq.w	80065c4 <_dtoa_r+0x444>
 8006488:	2f00      	cmp	r7, #0
 800648a:	dd33      	ble.n	80064f4 <_dtoa_r+0x374>
 800648c:	4b9c      	ldr	r3, [pc, #624]	@ (8006700 <_dtoa_r+0x580>)
 800648e:	f007 020f 	and.w	r2, r7, #15
 8006492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006496:	ed93 7b00 	vldr	d7, [r3]
 800649a:	05f8      	lsls	r0, r7, #23
 800649c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80064a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80064a4:	d516      	bpl.n	80064d4 <_dtoa_r+0x354>
 80064a6:	4b97      	ldr	r3, [pc, #604]	@ (8006704 <_dtoa_r+0x584>)
 80064a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80064ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064b0:	f7fa f9a4 	bl	80007fc <__aeabi_ddiv>
 80064b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064b8:	f004 040f 	and.w	r4, r4, #15
 80064bc:	2603      	movs	r6, #3
 80064be:	4d91      	ldr	r5, [pc, #580]	@ (8006704 <_dtoa_r+0x584>)
 80064c0:	b954      	cbnz	r4, 80064d8 <_dtoa_r+0x358>
 80064c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80064c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064ca:	f7fa f997 	bl	80007fc <__aeabi_ddiv>
 80064ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064d2:	e028      	b.n	8006526 <_dtoa_r+0x3a6>
 80064d4:	2602      	movs	r6, #2
 80064d6:	e7f2      	b.n	80064be <_dtoa_r+0x33e>
 80064d8:	07e1      	lsls	r1, r4, #31
 80064da:	d508      	bpl.n	80064ee <_dtoa_r+0x36e>
 80064dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80064e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064e4:	f7fa f860 	bl	80005a8 <__aeabi_dmul>
 80064e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80064ec:	3601      	adds	r6, #1
 80064ee:	1064      	asrs	r4, r4, #1
 80064f0:	3508      	adds	r5, #8
 80064f2:	e7e5      	b.n	80064c0 <_dtoa_r+0x340>
 80064f4:	f000 80af 	beq.w	8006656 <_dtoa_r+0x4d6>
 80064f8:	427c      	negs	r4, r7
 80064fa:	4b81      	ldr	r3, [pc, #516]	@ (8006700 <_dtoa_r+0x580>)
 80064fc:	4d81      	ldr	r5, [pc, #516]	@ (8006704 <_dtoa_r+0x584>)
 80064fe:	f004 020f 	and.w	r2, r4, #15
 8006502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800650e:	f7fa f84b 	bl	80005a8 <__aeabi_dmul>
 8006512:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006516:	1124      	asrs	r4, r4, #4
 8006518:	2300      	movs	r3, #0
 800651a:	2602      	movs	r6, #2
 800651c:	2c00      	cmp	r4, #0
 800651e:	f040 808f 	bne.w	8006640 <_dtoa_r+0x4c0>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1d3      	bne.n	80064ce <_dtoa_r+0x34e>
 8006526:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006528:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 8094 	beq.w	800665a <_dtoa_r+0x4da>
 8006532:	4b75      	ldr	r3, [pc, #468]	@ (8006708 <_dtoa_r+0x588>)
 8006534:	2200      	movs	r2, #0
 8006536:	4620      	mov	r0, r4
 8006538:	4629      	mov	r1, r5
 800653a:	f7fa faa7 	bl	8000a8c <__aeabi_dcmplt>
 800653e:	2800      	cmp	r0, #0
 8006540:	f000 808b 	beq.w	800665a <_dtoa_r+0x4da>
 8006544:	9b03      	ldr	r3, [sp, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 8087 	beq.w	800665a <_dtoa_r+0x4da>
 800654c:	f1bb 0f00 	cmp.w	fp, #0
 8006550:	dd34      	ble.n	80065bc <_dtoa_r+0x43c>
 8006552:	4620      	mov	r0, r4
 8006554:	4b6d      	ldr	r3, [pc, #436]	@ (800670c <_dtoa_r+0x58c>)
 8006556:	2200      	movs	r2, #0
 8006558:	4629      	mov	r1, r5
 800655a:	f7fa f825 	bl	80005a8 <__aeabi_dmul>
 800655e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006562:	f107 38ff 	add.w	r8, r7, #4294967295
 8006566:	3601      	adds	r6, #1
 8006568:	465c      	mov	r4, fp
 800656a:	4630      	mov	r0, r6
 800656c:	f7f9 ffb2 	bl	80004d4 <__aeabi_i2d>
 8006570:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006574:	f7fa f818 	bl	80005a8 <__aeabi_dmul>
 8006578:	4b65      	ldr	r3, [pc, #404]	@ (8006710 <_dtoa_r+0x590>)
 800657a:	2200      	movs	r2, #0
 800657c:	f7f9 fe5e 	bl	800023c <__adddf3>
 8006580:	4605      	mov	r5, r0
 8006582:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006586:	2c00      	cmp	r4, #0
 8006588:	d16a      	bne.n	8006660 <_dtoa_r+0x4e0>
 800658a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800658e:	4b61      	ldr	r3, [pc, #388]	@ (8006714 <_dtoa_r+0x594>)
 8006590:	2200      	movs	r2, #0
 8006592:	f7f9 fe51 	bl	8000238 <__aeabi_dsub>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800659e:	462a      	mov	r2, r5
 80065a0:	4633      	mov	r3, r6
 80065a2:	f7fa fa91 	bl	8000ac8 <__aeabi_dcmpgt>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	f040 8298 	bne.w	8006adc <_dtoa_r+0x95c>
 80065ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065b0:	462a      	mov	r2, r5
 80065b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80065b6:	f7fa fa69 	bl	8000a8c <__aeabi_dcmplt>
 80065ba:	bb38      	cbnz	r0, 800660c <_dtoa_r+0x48c>
 80065bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80065c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80065c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f2c0 8157 	blt.w	800687a <_dtoa_r+0x6fa>
 80065cc:	2f0e      	cmp	r7, #14
 80065ce:	f300 8154 	bgt.w	800687a <_dtoa_r+0x6fa>
 80065d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006700 <_dtoa_r+0x580>)
 80065d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065d8:	ed93 7b00 	vldr	d7, [r3]
 80065dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80065de:	2b00      	cmp	r3, #0
 80065e0:	ed8d 7b00 	vstr	d7, [sp]
 80065e4:	f280 80e5 	bge.w	80067b2 <_dtoa_r+0x632>
 80065e8:	9b03      	ldr	r3, [sp, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f300 80e1 	bgt.w	80067b2 <_dtoa_r+0x632>
 80065f0:	d10c      	bne.n	800660c <_dtoa_r+0x48c>
 80065f2:	4b48      	ldr	r3, [pc, #288]	@ (8006714 <_dtoa_r+0x594>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	ec51 0b17 	vmov	r0, r1, d7
 80065fa:	f7f9 ffd5 	bl	80005a8 <__aeabi_dmul>
 80065fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006602:	f7fa fa57 	bl	8000ab4 <__aeabi_dcmpge>
 8006606:	2800      	cmp	r0, #0
 8006608:	f000 8266 	beq.w	8006ad8 <_dtoa_r+0x958>
 800660c:	2400      	movs	r4, #0
 800660e:	4625      	mov	r5, r4
 8006610:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006612:	4656      	mov	r6, sl
 8006614:	ea6f 0803 	mvn.w	r8, r3
 8006618:	2700      	movs	r7, #0
 800661a:	4621      	mov	r1, r4
 800661c:	4648      	mov	r0, r9
 800661e:	f000 fcbf 	bl	8006fa0 <_Bfree>
 8006622:	2d00      	cmp	r5, #0
 8006624:	f000 80bd 	beq.w	80067a2 <_dtoa_r+0x622>
 8006628:	b12f      	cbz	r7, 8006636 <_dtoa_r+0x4b6>
 800662a:	42af      	cmp	r7, r5
 800662c:	d003      	beq.n	8006636 <_dtoa_r+0x4b6>
 800662e:	4639      	mov	r1, r7
 8006630:	4648      	mov	r0, r9
 8006632:	f000 fcb5 	bl	8006fa0 <_Bfree>
 8006636:	4629      	mov	r1, r5
 8006638:	4648      	mov	r0, r9
 800663a:	f000 fcb1 	bl	8006fa0 <_Bfree>
 800663e:	e0b0      	b.n	80067a2 <_dtoa_r+0x622>
 8006640:	07e2      	lsls	r2, r4, #31
 8006642:	d505      	bpl.n	8006650 <_dtoa_r+0x4d0>
 8006644:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006648:	f7f9 ffae 	bl	80005a8 <__aeabi_dmul>
 800664c:	3601      	adds	r6, #1
 800664e:	2301      	movs	r3, #1
 8006650:	1064      	asrs	r4, r4, #1
 8006652:	3508      	adds	r5, #8
 8006654:	e762      	b.n	800651c <_dtoa_r+0x39c>
 8006656:	2602      	movs	r6, #2
 8006658:	e765      	b.n	8006526 <_dtoa_r+0x3a6>
 800665a:	9c03      	ldr	r4, [sp, #12]
 800665c:	46b8      	mov	r8, r7
 800665e:	e784      	b.n	800656a <_dtoa_r+0x3ea>
 8006660:	4b27      	ldr	r3, [pc, #156]	@ (8006700 <_dtoa_r+0x580>)
 8006662:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006664:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006668:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800666c:	4454      	add	r4, sl
 800666e:	2900      	cmp	r1, #0
 8006670:	d054      	beq.n	800671c <_dtoa_r+0x59c>
 8006672:	4929      	ldr	r1, [pc, #164]	@ (8006718 <_dtoa_r+0x598>)
 8006674:	2000      	movs	r0, #0
 8006676:	f7fa f8c1 	bl	80007fc <__aeabi_ddiv>
 800667a:	4633      	mov	r3, r6
 800667c:	462a      	mov	r2, r5
 800667e:	f7f9 fddb 	bl	8000238 <__aeabi_dsub>
 8006682:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006686:	4656      	mov	r6, sl
 8006688:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800668c:	f7fa fa3c 	bl	8000b08 <__aeabi_d2iz>
 8006690:	4605      	mov	r5, r0
 8006692:	f7f9 ff1f 	bl	80004d4 <__aeabi_i2d>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800669e:	f7f9 fdcb 	bl	8000238 <__aeabi_dsub>
 80066a2:	3530      	adds	r5, #48	@ 0x30
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066ac:	f806 5b01 	strb.w	r5, [r6], #1
 80066b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80066b4:	f7fa f9ea 	bl	8000a8c <__aeabi_dcmplt>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d172      	bne.n	80067a2 <_dtoa_r+0x622>
 80066bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066c0:	4911      	ldr	r1, [pc, #68]	@ (8006708 <_dtoa_r+0x588>)
 80066c2:	2000      	movs	r0, #0
 80066c4:	f7f9 fdb8 	bl	8000238 <__aeabi_dsub>
 80066c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80066cc:	f7fa f9de 	bl	8000a8c <__aeabi_dcmplt>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	f040 80b4 	bne.w	800683e <_dtoa_r+0x6be>
 80066d6:	42a6      	cmp	r6, r4
 80066d8:	f43f af70 	beq.w	80065bc <_dtoa_r+0x43c>
 80066dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80066e0:	4b0a      	ldr	r3, [pc, #40]	@ (800670c <_dtoa_r+0x58c>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	f7f9 ff60 	bl	80005a8 <__aeabi_dmul>
 80066e8:	4b08      	ldr	r3, [pc, #32]	@ (800670c <_dtoa_r+0x58c>)
 80066ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80066ee:	2200      	movs	r2, #0
 80066f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066f4:	f7f9 ff58 	bl	80005a8 <__aeabi_dmul>
 80066f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066fc:	e7c4      	b.n	8006688 <_dtoa_r+0x508>
 80066fe:	bf00      	nop
 8006700:	08007fa0 	.word	0x08007fa0
 8006704:	08007f78 	.word	0x08007f78
 8006708:	3ff00000 	.word	0x3ff00000
 800670c:	40240000 	.word	0x40240000
 8006710:	401c0000 	.word	0x401c0000
 8006714:	40140000 	.word	0x40140000
 8006718:	3fe00000 	.word	0x3fe00000
 800671c:	4631      	mov	r1, r6
 800671e:	4628      	mov	r0, r5
 8006720:	f7f9 ff42 	bl	80005a8 <__aeabi_dmul>
 8006724:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006728:	9413      	str	r4, [sp, #76]	@ 0x4c
 800672a:	4656      	mov	r6, sl
 800672c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006730:	f7fa f9ea 	bl	8000b08 <__aeabi_d2iz>
 8006734:	4605      	mov	r5, r0
 8006736:	f7f9 fecd 	bl	80004d4 <__aeabi_i2d>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006742:	f7f9 fd79 	bl	8000238 <__aeabi_dsub>
 8006746:	3530      	adds	r5, #48	@ 0x30
 8006748:	f806 5b01 	strb.w	r5, [r6], #1
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	42a6      	cmp	r6, r4
 8006752:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	d124      	bne.n	80067a6 <_dtoa_r+0x626>
 800675c:	4baf      	ldr	r3, [pc, #700]	@ (8006a1c <_dtoa_r+0x89c>)
 800675e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006762:	f7f9 fd6b 	bl	800023c <__adddf3>
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800676e:	f7fa f9ab 	bl	8000ac8 <__aeabi_dcmpgt>
 8006772:	2800      	cmp	r0, #0
 8006774:	d163      	bne.n	800683e <_dtoa_r+0x6be>
 8006776:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800677a:	49a8      	ldr	r1, [pc, #672]	@ (8006a1c <_dtoa_r+0x89c>)
 800677c:	2000      	movs	r0, #0
 800677e:	f7f9 fd5b 	bl	8000238 <__aeabi_dsub>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800678a:	f7fa f97f 	bl	8000a8c <__aeabi_dcmplt>
 800678e:	2800      	cmp	r0, #0
 8006790:	f43f af14 	beq.w	80065bc <_dtoa_r+0x43c>
 8006794:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006796:	1e73      	subs	r3, r6, #1
 8006798:	9313      	str	r3, [sp, #76]	@ 0x4c
 800679a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800679e:	2b30      	cmp	r3, #48	@ 0x30
 80067a0:	d0f8      	beq.n	8006794 <_dtoa_r+0x614>
 80067a2:	4647      	mov	r7, r8
 80067a4:	e03b      	b.n	800681e <_dtoa_r+0x69e>
 80067a6:	4b9e      	ldr	r3, [pc, #632]	@ (8006a20 <_dtoa_r+0x8a0>)
 80067a8:	f7f9 fefe 	bl	80005a8 <__aeabi_dmul>
 80067ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067b0:	e7bc      	b.n	800672c <_dtoa_r+0x5ac>
 80067b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80067b6:	4656      	mov	r6, sl
 80067b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067bc:	4620      	mov	r0, r4
 80067be:	4629      	mov	r1, r5
 80067c0:	f7fa f81c 	bl	80007fc <__aeabi_ddiv>
 80067c4:	f7fa f9a0 	bl	8000b08 <__aeabi_d2iz>
 80067c8:	4680      	mov	r8, r0
 80067ca:	f7f9 fe83 	bl	80004d4 <__aeabi_i2d>
 80067ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067d2:	f7f9 fee9 	bl	80005a8 <__aeabi_dmul>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4620      	mov	r0, r4
 80067dc:	4629      	mov	r1, r5
 80067de:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80067e2:	f7f9 fd29 	bl	8000238 <__aeabi_dsub>
 80067e6:	f806 4b01 	strb.w	r4, [r6], #1
 80067ea:	9d03      	ldr	r5, [sp, #12]
 80067ec:	eba6 040a 	sub.w	r4, r6, sl
 80067f0:	42a5      	cmp	r5, r4
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	d133      	bne.n	8006860 <_dtoa_r+0x6e0>
 80067f8:	f7f9 fd20 	bl	800023c <__adddf3>
 80067fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006800:	4604      	mov	r4, r0
 8006802:	460d      	mov	r5, r1
 8006804:	f7fa f960 	bl	8000ac8 <__aeabi_dcmpgt>
 8006808:	b9c0      	cbnz	r0, 800683c <_dtoa_r+0x6bc>
 800680a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800680e:	4620      	mov	r0, r4
 8006810:	4629      	mov	r1, r5
 8006812:	f7fa f931 	bl	8000a78 <__aeabi_dcmpeq>
 8006816:	b110      	cbz	r0, 800681e <_dtoa_r+0x69e>
 8006818:	f018 0f01 	tst.w	r8, #1
 800681c:	d10e      	bne.n	800683c <_dtoa_r+0x6bc>
 800681e:	9902      	ldr	r1, [sp, #8]
 8006820:	4648      	mov	r0, r9
 8006822:	f000 fbbd 	bl	8006fa0 <_Bfree>
 8006826:	2300      	movs	r3, #0
 8006828:	7033      	strb	r3, [r6, #0]
 800682a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800682c:	3701      	adds	r7, #1
 800682e:	601f      	str	r7, [r3, #0]
 8006830:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 824b 	beq.w	8006cce <_dtoa_r+0xb4e>
 8006838:	601e      	str	r6, [r3, #0]
 800683a:	e248      	b.n	8006cce <_dtoa_r+0xb4e>
 800683c:	46b8      	mov	r8, r7
 800683e:	4633      	mov	r3, r6
 8006840:	461e      	mov	r6, r3
 8006842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006846:	2a39      	cmp	r2, #57	@ 0x39
 8006848:	d106      	bne.n	8006858 <_dtoa_r+0x6d8>
 800684a:	459a      	cmp	sl, r3
 800684c:	d1f8      	bne.n	8006840 <_dtoa_r+0x6c0>
 800684e:	2230      	movs	r2, #48	@ 0x30
 8006850:	f108 0801 	add.w	r8, r8, #1
 8006854:	f88a 2000 	strb.w	r2, [sl]
 8006858:	781a      	ldrb	r2, [r3, #0]
 800685a:	3201      	adds	r2, #1
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	e7a0      	b.n	80067a2 <_dtoa_r+0x622>
 8006860:	4b6f      	ldr	r3, [pc, #444]	@ (8006a20 <_dtoa_r+0x8a0>)
 8006862:	2200      	movs	r2, #0
 8006864:	f7f9 fea0 	bl	80005a8 <__aeabi_dmul>
 8006868:	2200      	movs	r2, #0
 800686a:	2300      	movs	r3, #0
 800686c:	4604      	mov	r4, r0
 800686e:	460d      	mov	r5, r1
 8006870:	f7fa f902 	bl	8000a78 <__aeabi_dcmpeq>
 8006874:	2800      	cmp	r0, #0
 8006876:	d09f      	beq.n	80067b8 <_dtoa_r+0x638>
 8006878:	e7d1      	b.n	800681e <_dtoa_r+0x69e>
 800687a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800687c:	2a00      	cmp	r2, #0
 800687e:	f000 80ea 	beq.w	8006a56 <_dtoa_r+0x8d6>
 8006882:	9a07      	ldr	r2, [sp, #28]
 8006884:	2a01      	cmp	r2, #1
 8006886:	f300 80cd 	bgt.w	8006a24 <_dtoa_r+0x8a4>
 800688a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800688c:	2a00      	cmp	r2, #0
 800688e:	f000 80c1 	beq.w	8006a14 <_dtoa_r+0x894>
 8006892:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006896:	9c08      	ldr	r4, [sp, #32]
 8006898:	9e00      	ldr	r6, [sp, #0]
 800689a:	9a00      	ldr	r2, [sp, #0]
 800689c:	441a      	add	r2, r3
 800689e:	9200      	str	r2, [sp, #0]
 80068a0:	9a06      	ldr	r2, [sp, #24]
 80068a2:	2101      	movs	r1, #1
 80068a4:	441a      	add	r2, r3
 80068a6:	4648      	mov	r0, r9
 80068a8:	9206      	str	r2, [sp, #24]
 80068aa:	f000 fc2d 	bl	8007108 <__i2b>
 80068ae:	4605      	mov	r5, r0
 80068b0:	b166      	cbz	r6, 80068cc <_dtoa_r+0x74c>
 80068b2:	9b06      	ldr	r3, [sp, #24]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	dd09      	ble.n	80068cc <_dtoa_r+0x74c>
 80068b8:	42b3      	cmp	r3, r6
 80068ba:	9a00      	ldr	r2, [sp, #0]
 80068bc:	bfa8      	it	ge
 80068be:	4633      	movge	r3, r6
 80068c0:	1ad2      	subs	r2, r2, r3
 80068c2:	9200      	str	r2, [sp, #0]
 80068c4:	9a06      	ldr	r2, [sp, #24]
 80068c6:	1af6      	subs	r6, r6, r3
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	9306      	str	r3, [sp, #24]
 80068cc:	9b08      	ldr	r3, [sp, #32]
 80068ce:	b30b      	cbz	r3, 8006914 <_dtoa_r+0x794>
 80068d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 80c6 	beq.w	8006a64 <_dtoa_r+0x8e4>
 80068d8:	2c00      	cmp	r4, #0
 80068da:	f000 80c0 	beq.w	8006a5e <_dtoa_r+0x8de>
 80068de:	4629      	mov	r1, r5
 80068e0:	4622      	mov	r2, r4
 80068e2:	4648      	mov	r0, r9
 80068e4:	f000 fcc8 	bl	8007278 <__pow5mult>
 80068e8:	9a02      	ldr	r2, [sp, #8]
 80068ea:	4601      	mov	r1, r0
 80068ec:	4605      	mov	r5, r0
 80068ee:	4648      	mov	r0, r9
 80068f0:	f000 fc20 	bl	8007134 <__multiply>
 80068f4:	9902      	ldr	r1, [sp, #8]
 80068f6:	4680      	mov	r8, r0
 80068f8:	4648      	mov	r0, r9
 80068fa:	f000 fb51 	bl	8006fa0 <_Bfree>
 80068fe:	9b08      	ldr	r3, [sp, #32]
 8006900:	1b1b      	subs	r3, r3, r4
 8006902:	9308      	str	r3, [sp, #32]
 8006904:	f000 80b1 	beq.w	8006a6a <_dtoa_r+0x8ea>
 8006908:	9a08      	ldr	r2, [sp, #32]
 800690a:	4641      	mov	r1, r8
 800690c:	4648      	mov	r0, r9
 800690e:	f000 fcb3 	bl	8007278 <__pow5mult>
 8006912:	9002      	str	r0, [sp, #8]
 8006914:	2101      	movs	r1, #1
 8006916:	4648      	mov	r0, r9
 8006918:	f000 fbf6 	bl	8007108 <__i2b>
 800691c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800691e:	4604      	mov	r4, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 81d8 	beq.w	8006cd6 <_dtoa_r+0xb56>
 8006926:	461a      	mov	r2, r3
 8006928:	4601      	mov	r1, r0
 800692a:	4648      	mov	r0, r9
 800692c:	f000 fca4 	bl	8007278 <__pow5mult>
 8006930:	9b07      	ldr	r3, [sp, #28]
 8006932:	2b01      	cmp	r3, #1
 8006934:	4604      	mov	r4, r0
 8006936:	f300 809f 	bgt.w	8006a78 <_dtoa_r+0x8f8>
 800693a:	9b04      	ldr	r3, [sp, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f040 8097 	bne.w	8006a70 <_dtoa_r+0x8f0>
 8006942:	9b05      	ldr	r3, [sp, #20]
 8006944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006948:	2b00      	cmp	r3, #0
 800694a:	f040 8093 	bne.w	8006a74 <_dtoa_r+0x8f4>
 800694e:	9b05      	ldr	r3, [sp, #20]
 8006950:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006954:	0d1b      	lsrs	r3, r3, #20
 8006956:	051b      	lsls	r3, r3, #20
 8006958:	b133      	cbz	r3, 8006968 <_dtoa_r+0x7e8>
 800695a:	9b00      	ldr	r3, [sp, #0]
 800695c:	3301      	adds	r3, #1
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	9b06      	ldr	r3, [sp, #24]
 8006962:	3301      	adds	r3, #1
 8006964:	9306      	str	r3, [sp, #24]
 8006966:	2301      	movs	r3, #1
 8006968:	9308      	str	r3, [sp, #32]
 800696a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 81b8 	beq.w	8006ce2 <_dtoa_r+0xb62>
 8006972:	6923      	ldr	r3, [r4, #16]
 8006974:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006978:	6918      	ldr	r0, [r3, #16]
 800697a:	f000 fb79 	bl	8007070 <__hi0bits>
 800697e:	f1c0 0020 	rsb	r0, r0, #32
 8006982:	9b06      	ldr	r3, [sp, #24]
 8006984:	4418      	add	r0, r3
 8006986:	f010 001f 	ands.w	r0, r0, #31
 800698a:	f000 8082 	beq.w	8006a92 <_dtoa_r+0x912>
 800698e:	f1c0 0320 	rsb	r3, r0, #32
 8006992:	2b04      	cmp	r3, #4
 8006994:	dd73      	ble.n	8006a7e <_dtoa_r+0x8fe>
 8006996:	9b00      	ldr	r3, [sp, #0]
 8006998:	f1c0 001c 	rsb	r0, r0, #28
 800699c:	4403      	add	r3, r0
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	9b06      	ldr	r3, [sp, #24]
 80069a2:	4403      	add	r3, r0
 80069a4:	4406      	add	r6, r0
 80069a6:	9306      	str	r3, [sp, #24]
 80069a8:	9b00      	ldr	r3, [sp, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	dd05      	ble.n	80069ba <_dtoa_r+0x83a>
 80069ae:	9902      	ldr	r1, [sp, #8]
 80069b0:	461a      	mov	r2, r3
 80069b2:	4648      	mov	r0, r9
 80069b4:	f000 fcba 	bl	800732c <__lshift>
 80069b8:	9002      	str	r0, [sp, #8]
 80069ba:	9b06      	ldr	r3, [sp, #24]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	dd05      	ble.n	80069cc <_dtoa_r+0x84c>
 80069c0:	4621      	mov	r1, r4
 80069c2:	461a      	mov	r2, r3
 80069c4:	4648      	mov	r0, r9
 80069c6:	f000 fcb1 	bl	800732c <__lshift>
 80069ca:	4604      	mov	r4, r0
 80069cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d061      	beq.n	8006a96 <_dtoa_r+0x916>
 80069d2:	9802      	ldr	r0, [sp, #8]
 80069d4:	4621      	mov	r1, r4
 80069d6:	f000 fd15 	bl	8007404 <__mcmp>
 80069da:	2800      	cmp	r0, #0
 80069dc:	da5b      	bge.n	8006a96 <_dtoa_r+0x916>
 80069de:	2300      	movs	r3, #0
 80069e0:	9902      	ldr	r1, [sp, #8]
 80069e2:	220a      	movs	r2, #10
 80069e4:	4648      	mov	r0, r9
 80069e6:	f000 fafd 	bl	8006fe4 <__multadd>
 80069ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ec:	9002      	str	r0, [sp, #8]
 80069ee:	f107 38ff 	add.w	r8, r7, #4294967295
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 8177 	beq.w	8006ce6 <_dtoa_r+0xb66>
 80069f8:	4629      	mov	r1, r5
 80069fa:	2300      	movs	r3, #0
 80069fc:	220a      	movs	r2, #10
 80069fe:	4648      	mov	r0, r9
 8006a00:	f000 faf0 	bl	8006fe4 <__multadd>
 8006a04:	f1bb 0f00 	cmp.w	fp, #0
 8006a08:	4605      	mov	r5, r0
 8006a0a:	dc6f      	bgt.n	8006aec <_dtoa_r+0x96c>
 8006a0c:	9b07      	ldr	r3, [sp, #28]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	dc49      	bgt.n	8006aa6 <_dtoa_r+0x926>
 8006a12:	e06b      	b.n	8006aec <_dtoa_r+0x96c>
 8006a14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a1a:	e73c      	b.n	8006896 <_dtoa_r+0x716>
 8006a1c:	3fe00000 	.word	0x3fe00000
 8006a20:	40240000 	.word	0x40240000
 8006a24:	9b03      	ldr	r3, [sp, #12]
 8006a26:	1e5c      	subs	r4, r3, #1
 8006a28:	9b08      	ldr	r3, [sp, #32]
 8006a2a:	42a3      	cmp	r3, r4
 8006a2c:	db09      	blt.n	8006a42 <_dtoa_r+0x8c2>
 8006a2e:	1b1c      	subs	r4, r3, r4
 8006a30:	9b03      	ldr	r3, [sp, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f6bf af30 	bge.w	8006898 <_dtoa_r+0x718>
 8006a38:	9b00      	ldr	r3, [sp, #0]
 8006a3a:	9a03      	ldr	r2, [sp, #12]
 8006a3c:	1a9e      	subs	r6, r3, r2
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e72b      	b.n	800689a <_dtoa_r+0x71a>
 8006a42:	9b08      	ldr	r3, [sp, #32]
 8006a44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006a46:	9408      	str	r4, [sp, #32]
 8006a48:	1ae3      	subs	r3, r4, r3
 8006a4a:	441a      	add	r2, r3
 8006a4c:	9e00      	ldr	r6, [sp, #0]
 8006a4e:	9b03      	ldr	r3, [sp, #12]
 8006a50:	920d      	str	r2, [sp, #52]	@ 0x34
 8006a52:	2400      	movs	r4, #0
 8006a54:	e721      	b.n	800689a <_dtoa_r+0x71a>
 8006a56:	9c08      	ldr	r4, [sp, #32]
 8006a58:	9e00      	ldr	r6, [sp, #0]
 8006a5a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006a5c:	e728      	b.n	80068b0 <_dtoa_r+0x730>
 8006a5e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006a62:	e751      	b.n	8006908 <_dtoa_r+0x788>
 8006a64:	9a08      	ldr	r2, [sp, #32]
 8006a66:	9902      	ldr	r1, [sp, #8]
 8006a68:	e750      	b.n	800690c <_dtoa_r+0x78c>
 8006a6a:	f8cd 8008 	str.w	r8, [sp, #8]
 8006a6e:	e751      	b.n	8006914 <_dtoa_r+0x794>
 8006a70:	2300      	movs	r3, #0
 8006a72:	e779      	b.n	8006968 <_dtoa_r+0x7e8>
 8006a74:	9b04      	ldr	r3, [sp, #16]
 8006a76:	e777      	b.n	8006968 <_dtoa_r+0x7e8>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	9308      	str	r3, [sp, #32]
 8006a7c:	e779      	b.n	8006972 <_dtoa_r+0x7f2>
 8006a7e:	d093      	beq.n	80069a8 <_dtoa_r+0x828>
 8006a80:	9a00      	ldr	r2, [sp, #0]
 8006a82:	331c      	adds	r3, #28
 8006a84:	441a      	add	r2, r3
 8006a86:	9200      	str	r2, [sp, #0]
 8006a88:	9a06      	ldr	r2, [sp, #24]
 8006a8a:	441a      	add	r2, r3
 8006a8c:	441e      	add	r6, r3
 8006a8e:	9206      	str	r2, [sp, #24]
 8006a90:	e78a      	b.n	80069a8 <_dtoa_r+0x828>
 8006a92:	4603      	mov	r3, r0
 8006a94:	e7f4      	b.n	8006a80 <_dtoa_r+0x900>
 8006a96:	9b03      	ldr	r3, [sp, #12]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	46b8      	mov	r8, r7
 8006a9c:	dc20      	bgt.n	8006ae0 <_dtoa_r+0x960>
 8006a9e:	469b      	mov	fp, r3
 8006aa0:	9b07      	ldr	r3, [sp, #28]
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	dd1e      	ble.n	8006ae4 <_dtoa_r+0x964>
 8006aa6:	f1bb 0f00 	cmp.w	fp, #0
 8006aaa:	f47f adb1 	bne.w	8006610 <_dtoa_r+0x490>
 8006aae:	4621      	mov	r1, r4
 8006ab0:	465b      	mov	r3, fp
 8006ab2:	2205      	movs	r2, #5
 8006ab4:	4648      	mov	r0, r9
 8006ab6:	f000 fa95 	bl	8006fe4 <__multadd>
 8006aba:	4601      	mov	r1, r0
 8006abc:	4604      	mov	r4, r0
 8006abe:	9802      	ldr	r0, [sp, #8]
 8006ac0:	f000 fca0 	bl	8007404 <__mcmp>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	f77f ada3 	ble.w	8006610 <_dtoa_r+0x490>
 8006aca:	4656      	mov	r6, sl
 8006acc:	2331      	movs	r3, #49	@ 0x31
 8006ace:	f806 3b01 	strb.w	r3, [r6], #1
 8006ad2:	f108 0801 	add.w	r8, r8, #1
 8006ad6:	e59f      	b.n	8006618 <_dtoa_r+0x498>
 8006ad8:	9c03      	ldr	r4, [sp, #12]
 8006ada:	46b8      	mov	r8, r7
 8006adc:	4625      	mov	r5, r4
 8006ade:	e7f4      	b.n	8006aca <_dtoa_r+0x94a>
 8006ae0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 8101 	beq.w	8006cee <_dtoa_r+0xb6e>
 8006aec:	2e00      	cmp	r6, #0
 8006aee:	dd05      	ble.n	8006afc <_dtoa_r+0x97c>
 8006af0:	4629      	mov	r1, r5
 8006af2:	4632      	mov	r2, r6
 8006af4:	4648      	mov	r0, r9
 8006af6:	f000 fc19 	bl	800732c <__lshift>
 8006afa:	4605      	mov	r5, r0
 8006afc:	9b08      	ldr	r3, [sp, #32]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d05c      	beq.n	8006bbc <_dtoa_r+0xa3c>
 8006b02:	6869      	ldr	r1, [r5, #4]
 8006b04:	4648      	mov	r0, r9
 8006b06:	f000 fa0b 	bl	8006f20 <_Balloc>
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	b928      	cbnz	r0, 8006b1a <_dtoa_r+0x99a>
 8006b0e:	4b82      	ldr	r3, [pc, #520]	@ (8006d18 <_dtoa_r+0xb98>)
 8006b10:	4602      	mov	r2, r0
 8006b12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b16:	f7ff bb4a 	b.w	80061ae <_dtoa_r+0x2e>
 8006b1a:	692a      	ldr	r2, [r5, #16]
 8006b1c:	3202      	adds	r2, #2
 8006b1e:	0092      	lsls	r2, r2, #2
 8006b20:	f105 010c 	add.w	r1, r5, #12
 8006b24:	300c      	adds	r0, #12
 8006b26:	f000 fff7 	bl	8007b18 <memcpy>
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4648      	mov	r0, r9
 8006b30:	f000 fbfc 	bl	800732c <__lshift>
 8006b34:	f10a 0301 	add.w	r3, sl, #1
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	eb0a 030b 	add.w	r3, sl, fp
 8006b3e:	9308      	str	r3, [sp, #32]
 8006b40:	9b04      	ldr	r3, [sp, #16]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	462f      	mov	r7, r5
 8006b48:	9306      	str	r3, [sp, #24]
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	9b00      	ldr	r3, [sp, #0]
 8006b4e:	9802      	ldr	r0, [sp, #8]
 8006b50:	4621      	mov	r1, r4
 8006b52:	f103 3bff 	add.w	fp, r3, #4294967295
 8006b56:	f7ff fa88 	bl	800606a <quorem>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	3330      	adds	r3, #48	@ 0x30
 8006b5e:	9003      	str	r0, [sp, #12]
 8006b60:	4639      	mov	r1, r7
 8006b62:	9802      	ldr	r0, [sp, #8]
 8006b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b66:	f000 fc4d 	bl	8007404 <__mcmp>
 8006b6a:	462a      	mov	r2, r5
 8006b6c:	9004      	str	r0, [sp, #16]
 8006b6e:	4621      	mov	r1, r4
 8006b70:	4648      	mov	r0, r9
 8006b72:	f000 fc63 	bl	800743c <__mdiff>
 8006b76:	68c2      	ldr	r2, [r0, #12]
 8006b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b7a:	4606      	mov	r6, r0
 8006b7c:	bb02      	cbnz	r2, 8006bc0 <_dtoa_r+0xa40>
 8006b7e:	4601      	mov	r1, r0
 8006b80:	9802      	ldr	r0, [sp, #8]
 8006b82:	f000 fc3f 	bl	8007404 <__mcmp>
 8006b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b88:	4602      	mov	r2, r0
 8006b8a:	4631      	mov	r1, r6
 8006b8c:	4648      	mov	r0, r9
 8006b8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b92:	f000 fa05 	bl	8006fa0 <_Bfree>
 8006b96:	9b07      	ldr	r3, [sp, #28]
 8006b98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006b9a:	9e00      	ldr	r6, [sp, #0]
 8006b9c:	ea42 0103 	orr.w	r1, r2, r3
 8006ba0:	9b06      	ldr	r3, [sp, #24]
 8006ba2:	4319      	orrs	r1, r3
 8006ba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba6:	d10d      	bne.n	8006bc4 <_dtoa_r+0xa44>
 8006ba8:	2b39      	cmp	r3, #57	@ 0x39
 8006baa:	d027      	beq.n	8006bfc <_dtoa_r+0xa7c>
 8006bac:	9a04      	ldr	r2, [sp, #16]
 8006bae:	2a00      	cmp	r2, #0
 8006bb0:	dd01      	ble.n	8006bb6 <_dtoa_r+0xa36>
 8006bb2:	9b03      	ldr	r3, [sp, #12]
 8006bb4:	3331      	adds	r3, #49	@ 0x31
 8006bb6:	f88b 3000 	strb.w	r3, [fp]
 8006bba:	e52e      	b.n	800661a <_dtoa_r+0x49a>
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	e7b9      	b.n	8006b34 <_dtoa_r+0x9b4>
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	e7e2      	b.n	8006b8a <_dtoa_r+0xa0a>
 8006bc4:	9904      	ldr	r1, [sp, #16]
 8006bc6:	2900      	cmp	r1, #0
 8006bc8:	db04      	blt.n	8006bd4 <_dtoa_r+0xa54>
 8006bca:	9807      	ldr	r0, [sp, #28]
 8006bcc:	4301      	orrs	r1, r0
 8006bce:	9806      	ldr	r0, [sp, #24]
 8006bd0:	4301      	orrs	r1, r0
 8006bd2:	d120      	bne.n	8006c16 <_dtoa_r+0xa96>
 8006bd4:	2a00      	cmp	r2, #0
 8006bd6:	ddee      	ble.n	8006bb6 <_dtoa_r+0xa36>
 8006bd8:	9902      	ldr	r1, [sp, #8]
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	4648      	mov	r0, r9
 8006be0:	f000 fba4 	bl	800732c <__lshift>
 8006be4:	4621      	mov	r1, r4
 8006be6:	9002      	str	r0, [sp, #8]
 8006be8:	f000 fc0c 	bl	8007404 <__mcmp>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	9b00      	ldr	r3, [sp, #0]
 8006bf0:	dc02      	bgt.n	8006bf8 <_dtoa_r+0xa78>
 8006bf2:	d1e0      	bne.n	8006bb6 <_dtoa_r+0xa36>
 8006bf4:	07da      	lsls	r2, r3, #31
 8006bf6:	d5de      	bpl.n	8006bb6 <_dtoa_r+0xa36>
 8006bf8:	2b39      	cmp	r3, #57	@ 0x39
 8006bfa:	d1da      	bne.n	8006bb2 <_dtoa_r+0xa32>
 8006bfc:	2339      	movs	r3, #57	@ 0x39
 8006bfe:	f88b 3000 	strb.w	r3, [fp]
 8006c02:	4633      	mov	r3, r6
 8006c04:	461e      	mov	r6, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c0c:	2a39      	cmp	r2, #57	@ 0x39
 8006c0e:	d04e      	beq.n	8006cae <_dtoa_r+0xb2e>
 8006c10:	3201      	adds	r2, #1
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	e501      	b.n	800661a <_dtoa_r+0x49a>
 8006c16:	2a00      	cmp	r2, #0
 8006c18:	dd03      	ble.n	8006c22 <_dtoa_r+0xaa2>
 8006c1a:	2b39      	cmp	r3, #57	@ 0x39
 8006c1c:	d0ee      	beq.n	8006bfc <_dtoa_r+0xa7c>
 8006c1e:	3301      	adds	r3, #1
 8006c20:	e7c9      	b.n	8006bb6 <_dtoa_r+0xa36>
 8006c22:	9a00      	ldr	r2, [sp, #0]
 8006c24:	9908      	ldr	r1, [sp, #32]
 8006c26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c2a:	428a      	cmp	r2, r1
 8006c2c:	d028      	beq.n	8006c80 <_dtoa_r+0xb00>
 8006c2e:	9902      	ldr	r1, [sp, #8]
 8006c30:	2300      	movs	r3, #0
 8006c32:	220a      	movs	r2, #10
 8006c34:	4648      	mov	r0, r9
 8006c36:	f000 f9d5 	bl	8006fe4 <__multadd>
 8006c3a:	42af      	cmp	r7, r5
 8006c3c:	9002      	str	r0, [sp, #8]
 8006c3e:	f04f 0300 	mov.w	r3, #0
 8006c42:	f04f 020a 	mov.w	r2, #10
 8006c46:	4639      	mov	r1, r7
 8006c48:	4648      	mov	r0, r9
 8006c4a:	d107      	bne.n	8006c5c <_dtoa_r+0xadc>
 8006c4c:	f000 f9ca 	bl	8006fe4 <__multadd>
 8006c50:	4607      	mov	r7, r0
 8006c52:	4605      	mov	r5, r0
 8006c54:	9b00      	ldr	r3, [sp, #0]
 8006c56:	3301      	adds	r3, #1
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	e777      	b.n	8006b4c <_dtoa_r+0x9cc>
 8006c5c:	f000 f9c2 	bl	8006fe4 <__multadd>
 8006c60:	4629      	mov	r1, r5
 8006c62:	4607      	mov	r7, r0
 8006c64:	2300      	movs	r3, #0
 8006c66:	220a      	movs	r2, #10
 8006c68:	4648      	mov	r0, r9
 8006c6a:	f000 f9bb 	bl	8006fe4 <__multadd>
 8006c6e:	4605      	mov	r5, r0
 8006c70:	e7f0      	b.n	8006c54 <_dtoa_r+0xad4>
 8006c72:	f1bb 0f00 	cmp.w	fp, #0
 8006c76:	bfcc      	ite	gt
 8006c78:	465e      	movgt	r6, fp
 8006c7a:	2601      	movle	r6, #1
 8006c7c:	4456      	add	r6, sl
 8006c7e:	2700      	movs	r7, #0
 8006c80:	9902      	ldr	r1, [sp, #8]
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	2201      	movs	r2, #1
 8006c86:	4648      	mov	r0, r9
 8006c88:	f000 fb50 	bl	800732c <__lshift>
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	9002      	str	r0, [sp, #8]
 8006c90:	f000 fbb8 	bl	8007404 <__mcmp>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	dcb4      	bgt.n	8006c02 <_dtoa_r+0xa82>
 8006c98:	d102      	bne.n	8006ca0 <_dtoa_r+0xb20>
 8006c9a:	9b00      	ldr	r3, [sp, #0]
 8006c9c:	07db      	lsls	r3, r3, #31
 8006c9e:	d4b0      	bmi.n	8006c02 <_dtoa_r+0xa82>
 8006ca0:	4633      	mov	r3, r6
 8006ca2:	461e      	mov	r6, r3
 8006ca4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ca8:	2a30      	cmp	r2, #48	@ 0x30
 8006caa:	d0fa      	beq.n	8006ca2 <_dtoa_r+0xb22>
 8006cac:	e4b5      	b.n	800661a <_dtoa_r+0x49a>
 8006cae:	459a      	cmp	sl, r3
 8006cb0:	d1a8      	bne.n	8006c04 <_dtoa_r+0xa84>
 8006cb2:	2331      	movs	r3, #49	@ 0x31
 8006cb4:	f108 0801 	add.w	r8, r8, #1
 8006cb8:	f88a 3000 	strb.w	r3, [sl]
 8006cbc:	e4ad      	b.n	800661a <_dtoa_r+0x49a>
 8006cbe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006cc0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006d1c <_dtoa_r+0xb9c>
 8006cc4:	b11b      	cbz	r3, 8006cce <_dtoa_r+0xb4e>
 8006cc6:	f10a 0308 	add.w	r3, sl, #8
 8006cca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	4650      	mov	r0, sl
 8006cd0:	b017      	add	sp, #92	@ 0x5c
 8006cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd6:	9b07      	ldr	r3, [sp, #28]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	f77f ae2e 	ble.w	800693a <_dtoa_r+0x7ba>
 8006cde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ce0:	9308      	str	r3, [sp, #32]
 8006ce2:	2001      	movs	r0, #1
 8006ce4:	e64d      	b.n	8006982 <_dtoa_r+0x802>
 8006ce6:	f1bb 0f00 	cmp.w	fp, #0
 8006cea:	f77f aed9 	ble.w	8006aa0 <_dtoa_r+0x920>
 8006cee:	4656      	mov	r6, sl
 8006cf0:	9802      	ldr	r0, [sp, #8]
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	f7ff f9b9 	bl	800606a <quorem>
 8006cf8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006cfc:	f806 3b01 	strb.w	r3, [r6], #1
 8006d00:	eba6 020a 	sub.w	r2, r6, sl
 8006d04:	4593      	cmp	fp, r2
 8006d06:	ddb4      	ble.n	8006c72 <_dtoa_r+0xaf2>
 8006d08:	9902      	ldr	r1, [sp, #8]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	220a      	movs	r2, #10
 8006d0e:	4648      	mov	r0, r9
 8006d10:	f000 f968 	bl	8006fe4 <__multadd>
 8006d14:	9002      	str	r0, [sp, #8]
 8006d16:	e7eb      	b.n	8006cf0 <_dtoa_r+0xb70>
 8006d18:	08007ea8 	.word	0x08007ea8
 8006d1c:	08007e2c 	.word	0x08007e2c

08006d20 <_free_r>:
 8006d20:	b538      	push	{r3, r4, r5, lr}
 8006d22:	4605      	mov	r5, r0
 8006d24:	2900      	cmp	r1, #0
 8006d26:	d041      	beq.n	8006dac <_free_r+0x8c>
 8006d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d2c:	1f0c      	subs	r4, r1, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	bfb8      	it	lt
 8006d32:	18e4      	addlt	r4, r4, r3
 8006d34:	f000 f8e8 	bl	8006f08 <__malloc_lock>
 8006d38:	4a1d      	ldr	r2, [pc, #116]	@ (8006db0 <_free_r+0x90>)
 8006d3a:	6813      	ldr	r3, [r2, #0]
 8006d3c:	b933      	cbnz	r3, 8006d4c <_free_r+0x2c>
 8006d3e:	6063      	str	r3, [r4, #4]
 8006d40:	6014      	str	r4, [r2, #0]
 8006d42:	4628      	mov	r0, r5
 8006d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d48:	f000 b8e4 	b.w	8006f14 <__malloc_unlock>
 8006d4c:	42a3      	cmp	r3, r4
 8006d4e:	d908      	bls.n	8006d62 <_free_r+0x42>
 8006d50:	6820      	ldr	r0, [r4, #0]
 8006d52:	1821      	adds	r1, r4, r0
 8006d54:	428b      	cmp	r3, r1
 8006d56:	bf01      	itttt	eq
 8006d58:	6819      	ldreq	r1, [r3, #0]
 8006d5a:	685b      	ldreq	r3, [r3, #4]
 8006d5c:	1809      	addeq	r1, r1, r0
 8006d5e:	6021      	streq	r1, [r4, #0]
 8006d60:	e7ed      	b.n	8006d3e <_free_r+0x1e>
 8006d62:	461a      	mov	r2, r3
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	b10b      	cbz	r3, 8006d6c <_free_r+0x4c>
 8006d68:	42a3      	cmp	r3, r4
 8006d6a:	d9fa      	bls.n	8006d62 <_free_r+0x42>
 8006d6c:	6811      	ldr	r1, [r2, #0]
 8006d6e:	1850      	adds	r0, r2, r1
 8006d70:	42a0      	cmp	r0, r4
 8006d72:	d10b      	bne.n	8006d8c <_free_r+0x6c>
 8006d74:	6820      	ldr	r0, [r4, #0]
 8006d76:	4401      	add	r1, r0
 8006d78:	1850      	adds	r0, r2, r1
 8006d7a:	4283      	cmp	r3, r0
 8006d7c:	6011      	str	r1, [r2, #0]
 8006d7e:	d1e0      	bne.n	8006d42 <_free_r+0x22>
 8006d80:	6818      	ldr	r0, [r3, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	6053      	str	r3, [r2, #4]
 8006d86:	4408      	add	r0, r1
 8006d88:	6010      	str	r0, [r2, #0]
 8006d8a:	e7da      	b.n	8006d42 <_free_r+0x22>
 8006d8c:	d902      	bls.n	8006d94 <_free_r+0x74>
 8006d8e:	230c      	movs	r3, #12
 8006d90:	602b      	str	r3, [r5, #0]
 8006d92:	e7d6      	b.n	8006d42 <_free_r+0x22>
 8006d94:	6820      	ldr	r0, [r4, #0]
 8006d96:	1821      	adds	r1, r4, r0
 8006d98:	428b      	cmp	r3, r1
 8006d9a:	bf04      	itt	eq
 8006d9c:	6819      	ldreq	r1, [r3, #0]
 8006d9e:	685b      	ldreq	r3, [r3, #4]
 8006da0:	6063      	str	r3, [r4, #4]
 8006da2:	bf04      	itt	eq
 8006da4:	1809      	addeq	r1, r1, r0
 8006da6:	6021      	streq	r1, [r4, #0]
 8006da8:	6054      	str	r4, [r2, #4]
 8006daa:	e7ca      	b.n	8006d42 <_free_r+0x22>
 8006dac:	bd38      	pop	{r3, r4, r5, pc}
 8006dae:	bf00      	nop
 8006db0:	200004f4 	.word	0x200004f4

08006db4 <malloc>:
 8006db4:	4b02      	ldr	r3, [pc, #8]	@ (8006dc0 <malloc+0xc>)
 8006db6:	4601      	mov	r1, r0
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	f000 b825 	b.w	8006e08 <_malloc_r>
 8006dbe:	bf00      	nop
 8006dc0:	2000003c 	.word	0x2000003c

08006dc4 <sbrk_aligned>:
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	4e0f      	ldr	r6, [pc, #60]	@ (8006e04 <sbrk_aligned+0x40>)
 8006dc8:	460c      	mov	r4, r1
 8006dca:	6831      	ldr	r1, [r6, #0]
 8006dcc:	4605      	mov	r5, r0
 8006dce:	b911      	cbnz	r1, 8006dd6 <sbrk_aligned+0x12>
 8006dd0:	f000 fe92 	bl	8007af8 <_sbrk_r>
 8006dd4:	6030      	str	r0, [r6, #0]
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	4628      	mov	r0, r5
 8006dda:	f000 fe8d 	bl	8007af8 <_sbrk_r>
 8006dde:	1c43      	adds	r3, r0, #1
 8006de0:	d103      	bne.n	8006dea <sbrk_aligned+0x26>
 8006de2:	f04f 34ff 	mov.w	r4, #4294967295
 8006de6:	4620      	mov	r0, r4
 8006de8:	bd70      	pop	{r4, r5, r6, pc}
 8006dea:	1cc4      	adds	r4, r0, #3
 8006dec:	f024 0403 	bic.w	r4, r4, #3
 8006df0:	42a0      	cmp	r0, r4
 8006df2:	d0f8      	beq.n	8006de6 <sbrk_aligned+0x22>
 8006df4:	1a21      	subs	r1, r4, r0
 8006df6:	4628      	mov	r0, r5
 8006df8:	f000 fe7e 	bl	8007af8 <_sbrk_r>
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	d1f2      	bne.n	8006de6 <sbrk_aligned+0x22>
 8006e00:	e7ef      	b.n	8006de2 <sbrk_aligned+0x1e>
 8006e02:	bf00      	nop
 8006e04:	200004f0 	.word	0x200004f0

08006e08 <_malloc_r>:
 8006e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e0c:	1ccd      	adds	r5, r1, #3
 8006e0e:	f025 0503 	bic.w	r5, r5, #3
 8006e12:	3508      	adds	r5, #8
 8006e14:	2d0c      	cmp	r5, #12
 8006e16:	bf38      	it	cc
 8006e18:	250c      	movcc	r5, #12
 8006e1a:	2d00      	cmp	r5, #0
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	db01      	blt.n	8006e24 <_malloc_r+0x1c>
 8006e20:	42a9      	cmp	r1, r5
 8006e22:	d904      	bls.n	8006e2e <_malloc_r+0x26>
 8006e24:	230c      	movs	r3, #12
 8006e26:	6033      	str	r3, [r6, #0]
 8006e28:	2000      	movs	r0, #0
 8006e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f04 <_malloc_r+0xfc>
 8006e32:	f000 f869 	bl	8006f08 <__malloc_lock>
 8006e36:	f8d8 3000 	ldr.w	r3, [r8]
 8006e3a:	461c      	mov	r4, r3
 8006e3c:	bb44      	cbnz	r4, 8006e90 <_malloc_r+0x88>
 8006e3e:	4629      	mov	r1, r5
 8006e40:	4630      	mov	r0, r6
 8006e42:	f7ff ffbf 	bl	8006dc4 <sbrk_aligned>
 8006e46:	1c43      	adds	r3, r0, #1
 8006e48:	4604      	mov	r4, r0
 8006e4a:	d158      	bne.n	8006efe <_malloc_r+0xf6>
 8006e4c:	f8d8 4000 	ldr.w	r4, [r8]
 8006e50:	4627      	mov	r7, r4
 8006e52:	2f00      	cmp	r7, #0
 8006e54:	d143      	bne.n	8006ede <_malloc_r+0xd6>
 8006e56:	2c00      	cmp	r4, #0
 8006e58:	d04b      	beq.n	8006ef2 <_malloc_r+0xea>
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	4639      	mov	r1, r7
 8006e5e:	4630      	mov	r0, r6
 8006e60:	eb04 0903 	add.w	r9, r4, r3
 8006e64:	f000 fe48 	bl	8007af8 <_sbrk_r>
 8006e68:	4581      	cmp	r9, r0
 8006e6a:	d142      	bne.n	8006ef2 <_malloc_r+0xea>
 8006e6c:	6821      	ldr	r1, [r4, #0]
 8006e6e:	1a6d      	subs	r5, r5, r1
 8006e70:	4629      	mov	r1, r5
 8006e72:	4630      	mov	r0, r6
 8006e74:	f7ff ffa6 	bl	8006dc4 <sbrk_aligned>
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d03a      	beq.n	8006ef2 <_malloc_r+0xea>
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	442b      	add	r3, r5
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	f8d8 3000 	ldr.w	r3, [r8]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	bb62      	cbnz	r2, 8006ee4 <_malloc_r+0xdc>
 8006e8a:	f8c8 7000 	str.w	r7, [r8]
 8006e8e:	e00f      	b.n	8006eb0 <_malloc_r+0xa8>
 8006e90:	6822      	ldr	r2, [r4, #0]
 8006e92:	1b52      	subs	r2, r2, r5
 8006e94:	d420      	bmi.n	8006ed8 <_malloc_r+0xd0>
 8006e96:	2a0b      	cmp	r2, #11
 8006e98:	d917      	bls.n	8006eca <_malloc_r+0xc2>
 8006e9a:	1961      	adds	r1, r4, r5
 8006e9c:	42a3      	cmp	r3, r4
 8006e9e:	6025      	str	r5, [r4, #0]
 8006ea0:	bf18      	it	ne
 8006ea2:	6059      	strne	r1, [r3, #4]
 8006ea4:	6863      	ldr	r3, [r4, #4]
 8006ea6:	bf08      	it	eq
 8006ea8:	f8c8 1000 	streq.w	r1, [r8]
 8006eac:	5162      	str	r2, [r4, r5]
 8006eae:	604b      	str	r3, [r1, #4]
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	f000 f82f 	bl	8006f14 <__malloc_unlock>
 8006eb6:	f104 000b 	add.w	r0, r4, #11
 8006eba:	1d23      	adds	r3, r4, #4
 8006ebc:	f020 0007 	bic.w	r0, r0, #7
 8006ec0:	1ac2      	subs	r2, r0, r3
 8006ec2:	bf1c      	itt	ne
 8006ec4:	1a1b      	subne	r3, r3, r0
 8006ec6:	50a3      	strne	r3, [r4, r2]
 8006ec8:	e7af      	b.n	8006e2a <_malloc_r+0x22>
 8006eca:	6862      	ldr	r2, [r4, #4]
 8006ecc:	42a3      	cmp	r3, r4
 8006ece:	bf0c      	ite	eq
 8006ed0:	f8c8 2000 	streq.w	r2, [r8]
 8006ed4:	605a      	strne	r2, [r3, #4]
 8006ed6:	e7eb      	b.n	8006eb0 <_malloc_r+0xa8>
 8006ed8:	4623      	mov	r3, r4
 8006eda:	6864      	ldr	r4, [r4, #4]
 8006edc:	e7ae      	b.n	8006e3c <_malloc_r+0x34>
 8006ede:	463c      	mov	r4, r7
 8006ee0:	687f      	ldr	r7, [r7, #4]
 8006ee2:	e7b6      	b.n	8006e52 <_malloc_r+0x4a>
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	42a3      	cmp	r3, r4
 8006eea:	d1fb      	bne.n	8006ee4 <_malloc_r+0xdc>
 8006eec:	2300      	movs	r3, #0
 8006eee:	6053      	str	r3, [r2, #4]
 8006ef0:	e7de      	b.n	8006eb0 <_malloc_r+0xa8>
 8006ef2:	230c      	movs	r3, #12
 8006ef4:	6033      	str	r3, [r6, #0]
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f000 f80c 	bl	8006f14 <__malloc_unlock>
 8006efc:	e794      	b.n	8006e28 <_malloc_r+0x20>
 8006efe:	6005      	str	r5, [r0, #0]
 8006f00:	e7d6      	b.n	8006eb0 <_malloc_r+0xa8>
 8006f02:	bf00      	nop
 8006f04:	200004f4 	.word	0x200004f4

08006f08 <__malloc_lock>:
 8006f08:	4801      	ldr	r0, [pc, #4]	@ (8006f10 <__malloc_lock+0x8>)
 8006f0a:	f7ff b8ac 	b.w	8006066 <__retarget_lock_acquire_recursive>
 8006f0e:	bf00      	nop
 8006f10:	200004ec 	.word	0x200004ec

08006f14 <__malloc_unlock>:
 8006f14:	4801      	ldr	r0, [pc, #4]	@ (8006f1c <__malloc_unlock+0x8>)
 8006f16:	f7ff b8a7 	b.w	8006068 <__retarget_lock_release_recursive>
 8006f1a:	bf00      	nop
 8006f1c:	200004ec 	.word	0x200004ec

08006f20 <_Balloc>:
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	69c6      	ldr	r6, [r0, #28]
 8006f24:	4604      	mov	r4, r0
 8006f26:	460d      	mov	r5, r1
 8006f28:	b976      	cbnz	r6, 8006f48 <_Balloc+0x28>
 8006f2a:	2010      	movs	r0, #16
 8006f2c:	f7ff ff42 	bl	8006db4 <malloc>
 8006f30:	4602      	mov	r2, r0
 8006f32:	61e0      	str	r0, [r4, #28]
 8006f34:	b920      	cbnz	r0, 8006f40 <_Balloc+0x20>
 8006f36:	4b18      	ldr	r3, [pc, #96]	@ (8006f98 <_Balloc+0x78>)
 8006f38:	4818      	ldr	r0, [pc, #96]	@ (8006f9c <_Balloc+0x7c>)
 8006f3a:	216b      	movs	r1, #107	@ 0x6b
 8006f3c:	f000 fdfa 	bl	8007b34 <__assert_func>
 8006f40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f44:	6006      	str	r6, [r0, #0]
 8006f46:	60c6      	str	r6, [r0, #12]
 8006f48:	69e6      	ldr	r6, [r4, #28]
 8006f4a:	68f3      	ldr	r3, [r6, #12]
 8006f4c:	b183      	cbz	r3, 8006f70 <_Balloc+0x50>
 8006f4e:	69e3      	ldr	r3, [r4, #28]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f56:	b9b8      	cbnz	r0, 8006f88 <_Balloc+0x68>
 8006f58:	2101      	movs	r1, #1
 8006f5a:	fa01 f605 	lsl.w	r6, r1, r5
 8006f5e:	1d72      	adds	r2, r6, #5
 8006f60:	0092      	lsls	r2, r2, #2
 8006f62:	4620      	mov	r0, r4
 8006f64:	f000 fe04 	bl	8007b70 <_calloc_r>
 8006f68:	b160      	cbz	r0, 8006f84 <_Balloc+0x64>
 8006f6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f6e:	e00e      	b.n	8006f8e <_Balloc+0x6e>
 8006f70:	2221      	movs	r2, #33	@ 0x21
 8006f72:	2104      	movs	r1, #4
 8006f74:	4620      	mov	r0, r4
 8006f76:	f000 fdfb 	bl	8007b70 <_calloc_r>
 8006f7a:	69e3      	ldr	r3, [r4, #28]
 8006f7c:	60f0      	str	r0, [r6, #12]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e4      	bne.n	8006f4e <_Balloc+0x2e>
 8006f84:	2000      	movs	r0, #0
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
 8006f88:	6802      	ldr	r2, [r0, #0]
 8006f8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f94:	e7f7      	b.n	8006f86 <_Balloc+0x66>
 8006f96:	bf00      	nop
 8006f98:	08007e39 	.word	0x08007e39
 8006f9c:	08007eb9 	.word	0x08007eb9

08006fa0 <_Bfree>:
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	69c6      	ldr	r6, [r0, #28]
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	b976      	cbnz	r6, 8006fc8 <_Bfree+0x28>
 8006faa:	2010      	movs	r0, #16
 8006fac:	f7ff ff02 	bl	8006db4 <malloc>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	61e8      	str	r0, [r5, #28]
 8006fb4:	b920      	cbnz	r0, 8006fc0 <_Bfree+0x20>
 8006fb6:	4b09      	ldr	r3, [pc, #36]	@ (8006fdc <_Bfree+0x3c>)
 8006fb8:	4809      	ldr	r0, [pc, #36]	@ (8006fe0 <_Bfree+0x40>)
 8006fba:	218f      	movs	r1, #143	@ 0x8f
 8006fbc:	f000 fdba 	bl	8007b34 <__assert_func>
 8006fc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fc4:	6006      	str	r6, [r0, #0]
 8006fc6:	60c6      	str	r6, [r0, #12]
 8006fc8:	b13c      	cbz	r4, 8006fda <_Bfree+0x3a>
 8006fca:	69eb      	ldr	r3, [r5, #28]
 8006fcc:	6862      	ldr	r2, [r4, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fd4:	6021      	str	r1, [r4, #0]
 8006fd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fda:	bd70      	pop	{r4, r5, r6, pc}
 8006fdc:	08007e39 	.word	0x08007e39
 8006fe0:	08007eb9 	.word	0x08007eb9

08006fe4 <__multadd>:
 8006fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe8:	690d      	ldr	r5, [r1, #16]
 8006fea:	4607      	mov	r7, r0
 8006fec:	460c      	mov	r4, r1
 8006fee:	461e      	mov	r6, r3
 8006ff0:	f101 0c14 	add.w	ip, r1, #20
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	f8dc 3000 	ldr.w	r3, [ip]
 8006ffa:	b299      	uxth	r1, r3
 8006ffc:	fb02 6101 	mla	r1, r2, r1, r6
 8007000:	0c1e      	lsrs	r6, r3, #16
 8007002:	0c0b      	lsrs	r3, r1, #16
 8007004:	fb02 3306 	mla	r3, r2, r6, r3
 8007008:	b289      	uxth	r1, r1
 800700a:	3001      	adds	r0, #1
 800700c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007010:	4285      	cmp	r5, r0
 8007012:	f84c 1b04 	str.w	r1, [ip], #4
 8007016:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800701a:	dcec      	bgt.n	8006ff6 <__multadd+0x12>
 800701c:	b30e      	cbz	r6, 8007062 <__multadd+0x7e>
 800701e:	68a3      	ldr	r3, [r4, #8]
 8007020:	42ab      	cmp	r3, r5
 8007022:	dc19      	bgt.n	8007058 <__multadd+0x74>
 8007024:	6861      	ldr	r1, [r4, #4]
 8007026:	4638      	mov	r0, r7
 8007028:	3101      	adds	r1, #1
 800702a:	f7ff ff79 	bl	8006f20 <_Balloc>
 800702e:	4680      	mov	r8, r0
 8007030:	b928      	cbnz	r0, 800703e <__multadd+0x5a>
 8007032:	4602      	mov	r2, r0
 8007034:	4b0c      	ldr	r3, [pc, #48]	@ (8007068 <__multadd+0x84>)
 8007036:	480d      	ldr	r0, [pc, #52]	@ (800706c <__multadd+0x88>)
 8007038:	21ba      	movs	r1, #186	@ 0xba
 800703a:	f000 fd7b 	bl	8007b34 <__assert_func>
 800703e:	6922      	ldr	r2, [r4, #16]
 8007040:	3202      	adds	r2, #2
 8007042:	f104 010c 	add.w	r1, r4, #12
 8007046:	0092      	lsls	r2, r2, #2
 8007048:	300c      	adds	r0, #12
 800704a:	f000 fd65 	bl	8007b18 <memcpy>
 800704e:	4621      	mov	r1, r4
 8007050:	4638      	mov	r0, r7
 8007052:	f7ff ffa5 	bl	8006fa0 <_Bfree>
 8007056:	4644      	mov	r4, r8
 8007058:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800705c:	3501      	adds	r5, #1
 800705e:	615e      	str	r6, [r3, #20]
 8007060:	6125      	str	r5, [r4, #16]
 8007062:	4620      	mov	r0, r4
 8007064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007068:	08007ea8 	.word	0x08007ea8
 800706c:	08007eb9 	.word	0x08007eb9

08007070 <__hi0bits>:
 8007070:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007074:	4603      	mov	r3, r0
 8007076:	bf36      	itet	cc
 8007078:	0403      	lslcc	r3, r0, #16
 800707a:	2000      	movcs	r0, #0
 800707c:	2010      	movcc	r0, #16
 800707e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007082:	bf3c      	itt	cc
 8007084:	021b      	lslcc	r3, r3, #8
 8007086:	3008      	addcc	r0, #8
 8007088:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800708c:	bf3c      	itt	cc
 800708e:	011b      	lslcc	r3, r3, #4
 8007090:	3004      	addcc	r0, #4
 8007092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007096:	bf3c      	itt	cc
 8007098:	009b      	lslcc	r3, r3, #2
 800709a:	3002      	addcc	r0, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	db05      	blt.n	80070ac <__hi0bits+0x3c>
 80070a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80070a4:	f100 0001 	add.w	r0, r0, #1
 80070a8:	bf08      	it	eq
 80070aa:	2020      	moveq	r0, #32
 80070ac:	4770      	bx	lr

080070ae <__lo0bits>:
 80070ae:	6803      	ldr	r3, [r0, #0]
 80070b0:	4602      	mov	r2, r0
 80070b2:	f013 0007 	ands.w	r0, r3, #7
 80070b6:	d00b      	beq.n	80070d0 <__lo0bits+0x22>
 80070b8:	07d9      	lsls	r1, r3, #31
 80070ba:	d421      	bmi.n	8007100 <__lo0bits+0x52>
 80070bc:	0798      	lsls	r0, r3, #30
 80070be:	bf49      	itett	mi
 80070c0:	085b      	lsrmi	r3, r3, #1
 80070c2:	089b      	lsrpl	r3, r3, #2
 80070c4:	2001      	movmi	r0, #1
 80070c6:	6013      	strmi	r3, [r2, #0]
 80070c8:	bf5c      	itt	pl
 80070ca:	6013      	strpl	r3, [r2, #0]
 80070cc:	2002      	movpl	r0, #2
 80070ce:	4770      	bx	lr
 80070d0:	b299      	uxth	r1, r3
 80070d2:	b909      	cbnz	r1, 80070d8 <__lo0bits+0x2a>
 80070d4:	0c1b      	lsrs	r3, r3, #16
 80070d6:	2010      	movs	r0, #16
 80070d8:	b2d9      	uxtb	r1, r3
 80070da:	b909      	cbnz	r1, 80070e0 <__lo0bits+0x32>
 80070dc:	3008      	adds	r0, #8
 80070de:	0a1b      	lsrs	r3, r3, #8
 80070e0:	0719      	lsls	r1, r3, #28
 80070e2:	bf04      	itt	eq
 80070e4:	091b      	lsreq	r3, r3, #4
 80070e6:	3004      	addeq	r0, #4
 80070e8:	0799      	lsls	r1, r3, #30
 80070ea:	bf04      	itt	eq
 80070ec:	089b      	lsreq	r3, r3, #2
 80070ee:	3002      	addeq	r0, #2
 80070f0:	07d9      	lsls	r1, r3, #31
 80070f2:	d403      	bmi.n	80070fc <__lo0bits+0x4e>
 80070f4:	085b      	lsrs	r3, r3, #1
 80070f6:	f100 0001 	add.w	r0, r0, #1
 80070fa:	d003      	beq.n	8007104 <__lo0bits+0x56>
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	4770      	bx	lr
 8007100:	2000      	movs	r0, #0
 8007102:	4770      	bx	lr
 8007104:	2020      	movs	r0, #32
 8007106:	4770      	bx	lr

08007108 <__i2b>:
 8007108:	b510      	push	{r4, lr}
 800710a:	460c      	mov	r4, r1
 800710c:	2101      	movs	r1, #1
 800710e:	f7ff ff07 	bl	8006f20 <_Balloc>
 8007112:	4602      	mov	r2, r0
 8007114:	b928      	cbnz	r0, 8007122 <__i2b+0x1a>
 8007116:	4b05      	ldr	r3, [pc, #20]	@ (800712c <__i2b+0x24>)
 8007118:	4805      	ldr	r0, [pc, #20]	@ (8007130 <__i2b+0x28>)
 800711a:	f240 1145 	movw	r1, #325	@ 0x145
 800711e:	f000 fd09 	bl	8007b34 <__assert_func>
 8007122:	2301      	movs	r3, #1
 8007124:	6144      	str	r4, [r0, #20]
 8007126:	6103      	str	r3, [r0, #16]
 8007128:	bd10      	pop	{r4, pc}
 800712a:	bf00      	nop
 800712c:	08007ea8 	.word	0x08007ea8
 8007130:	08007eb9 	.word	0x08007eb9

08007134 <__multiply>:
 8007134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007138:	4617      	mov	r7, r2
 800713a:	690a      	ldr	r2, [r1, #16]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	429a      	cmp	r2, r3
 8007140:	bfa8      	it	ge
 8007142:	463b      	movge	r3, r7
 8007144:	4689      	mov	r9, r1
 8007146:	bfa4      	itt	ge
 8007148:	460f      	movge	r7, r1
 800714a:	4699      	movge	r9, r3
 800714c:	693d      	ldr	r5, [r7, #16]
 800714e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	eb05 060a 	add.w	r6, r5, sl
 800715a:	42b3      	cmp	r3, r6
 800715c:	b085      	sub	sp, #20
 800715e:	bfb8      	it	lt
 8007160:	3101      	addlt	r1, #1
 8007162:	f7ff fedd 	bl	8006f20 <_Balloc>
 8007166:	b930      	cbnz	r0, 8007176 <__multiply+0x42>
 8007168:	4602      	mov	r2, r0
 800716a:	4b41      	ldr	r3, [pc, #260]	@ (8007270 <__multiply+0x13c>)
 800716c:	4841      	ldr	r0, [pc, #260]	@ (8007274 <__multiply+0x140>)
 800716e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007172:	f000 fcdf 	bl	8007b34 <__assert_func>
 8007176:	f100 0414 	add.w	r4, r0, #20
 800717a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800717e:	4623      	mov	r3, r4
 8007180:	2200      	movs	r2, #0
 8007182:	4573      	cmp	r3, lr
 8007184:	d320      	bcc.n	80071c8 <__multiply+0x94>
 8007186:	f107 0814 	add.w	r8, r7, #20
 800718a:	f109 0114 	add.w	r1, r9, #20
 800718e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007192:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007196:	9302      	str	r3, [sp, #8]
 8007198:	1beb      	subs	r3, r5, r7
 800719a:	3b15      	subs	r3, #21
 800719c:	f023 0303 	bic.w	r3, r3, #3
 80071a0:	3304      	adds	r3, #4
 80071a2:	3715      	adds	r7, #21
 80071a4:	42bd      	cmp	r5, r7
 80071a6:	bf38      	it	cc
 80071a8:	2304      	movcc	r3, #4
 80071aa:	9301      	str	r3, [sp, #4]
 80071ac:	9b02      	ldr	r3, [sp, #8]
 80071ae:	9103      	str	r1, [sp, #12]
 80071b0:	428b      	cmp	r3, r1
 80071b2:	d80c      	bhi.n	80071ce <__multiply+0x9a>
 80071b4:	2e00      	cmp	r6, #0
 80071b6:	dd03      	ble.n	80071c0 <__multiply+0x8c>
 80071b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d055      	beq.n	800726c <__multiply+0x138>
 80071c0:	6106      	str	r6, [r0, #16]
 80071c2:	b005      	add	sp, #20
 80071c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c8:	f843 2b04 	str.w	r2, [r3], #4
 80071cc:	e7d9      	b.n	8007182 <__multiply+0x4e>
 80071ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80071d2:	f1ba 0f00 	cmp.w	sl, #0
 80071d6:	d01f      	beq.n	8007218 <__multiply+0xe4>
 80071d8:	46c4      	mov	ip, r8
 80071da:	46a1      	mov	r9, r4
 80071dc:	2700      	movs	r7, #0
 80071de:	f85c 2b04 	ldr.w	r2, [ip], #4
 80071e2:	f8d9 3000 	ldr.w	r3, [r9]
 80071e6:	fa1f fb82 	uxth.w	fp, r2
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80071f0:	443b      	add	r3, r7
 80071f2:	f8d9 7000 	ldr.w	r7, [r9]
 80071f6:	0c12      	lsrs	r2, r2, #16
 80071f8:	0c3f      	lsrs	r7, r7, #16
 80071fa:	fb0a 7202 	mla	r2, sl, r2, r7
 80071fe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007202:	b29b      	uxth	r3, r3
 8007204:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007208:	4565      	cmp	r5, ip
 800720a:	f849 3b04 	str.w	r3, [r9], #4
 800720e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007212:	d8e4      	bhi.n	80071de <__multiply+0xaa>
 8007214:	9b01      	ldr	r3, [sp, #4]
 8007216:	50e7      	str	r7, [r4, r3]
 8007218:	9b03      	ldr	r3, [sp, #12]
 800721a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800721e:	3104      	adds	r1, #4
 8007220:	f1b9 0f00 	cmp.w	r9, #0
 8007224:	d020      	beq.n	8007268 <__multiply+0x134>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	4647      	mov	r7, r8
 800722a:	46a4      	mov	ip, r4
 800722c:	f04f 0a00 	mov.w	sl, #0
 8007230:	f8b7 b000 	ldrh.w	fp, [r7]
 8007234:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007238:	fb09 220b 	mla	r2, r9, fp, r2
 800723c:	4452      	add	r2, sl
 800723e:	b29b      	uxth	r3, r3
 8007240:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007244:	f84c 3b04 	str.w	r3, [ip], #4
 8007248:	f857 3b04 	ldr.w	r3, [r7], #4
 800724c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007250:	f8bc 3000 	ldrh.w	r3, [ip]
 8007254:	fb09 330a 	mla	r3, r9, sl, r3
 8007258:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800725c:	42bd      	cmp	r5, r7
 800725e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007262:	d8e5      	bhi.n	8007230 <__multiply+0xfc>
 8007264:	9a01      	ldr	r2, [sp, #4]
 8007266:	50a3      	str	r3, [r4, r2]
 8007268:	3404      	adds	r4, #4
 800726a:	e79f      	b.n	80071ac <__multiply+0x78>
 800726c:	3e01      	subs	r6, #1
 800726e:	e7a1      	b.n	80071b4 <__multiply+0x80>
 8007270:	08007ea8 	.word	0x08007ea8
 8007274:	08007eb9 	.word	0x08007eb9

08007278 <__pow5mult>:
 8007278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800727c:	4615      	mov	r5, r2
 800727e:	f012 0203 	ands.w	r2, r2, #3
 8007282:	4607      	mov	r7, r0
 8007284:	460e      	mov	r6, r1
 8007286:	d007      	beq.n	8007298 <__pow5mult+0x20>
 8007288:	4c25      	ldr	r4, [pc, #148]	@ (8007320 <__pow5mult+0xa8>)
 800728a:	3a01      	subs	r2, #1
 800728c:	2300      	movs	r3, #0
 800728e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007292:	f7ff fea7 	bl	8006fe4 <__multadd>
 8007296:	4606      	mov	r6, r0
 8007298:	10ad      	asrs	r5, r5, #2
 800729a:	d03d      	beq.n	8007318 <__pow5mult+0xa0>
 800729c:	69fc      	ldr	r4, [r7, #28]
 800729e:	b97c      	cbnz	r4, 80072c0 <__pow5mult+0x48>
 80072a0:	2010      	movs	r0, #16
 80072a2:	f7ff fd87 	bl	8006db4 <malloc>
 80072a6:	4602      	mov	r2, r0
 80072a8:	61f8      	str	r0, [r7, #28]
 80072aa:	b928      	cbnz	r0, 80072b8 <__pow5mult+0x40>
 80072ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007324 <__pow5mult+0xac>)
 80072ae:	481e      	ldr	r0, [pc, #120]	@ (8007328 <__pow5mult+0xb0>)
 80072b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80072b4:	f000 fc3e 	bl	8007b34 <__assert_func>
 80072b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072bc:	6004      	str	r4, [r0, #0]
 80072be:	60c4      	str	r4, [r0, #12]
 80072c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80072c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072c8:	b94c      	cbnz	r4, 80072de <__pow5mult+0x66>
 80072ca:	f240 2171 	movw	r1, #625	@ 0x271
 80072ce:	4638      	mov	r0, r7
 80072d0:	f7ff ff1a 	bl	8007108 <__i2b>
 80072d4:	2300      	movs	r3, #0
 80072d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80072da:	4604      	mov	r4, r0
 80072dc:	6003      	str	r3, [r0, #0]
 80072de:	f04f 0900 	mov.w	r9, #0
 80072e2:	07eb      	lsls	r3, r5, #31
 80072e4:	d50a      	bpl.n	80072fc <__pow5mult+0x84>
 80072e6:	4631      	mov	r1, r6
 80072e8:	4622      	mov	r2, r4
 80072ea:	4638      	mov	r0, r7
 80072ec:	f7ff ff22 	bl	8007134 <__multiply>
 80072f0:	4631      	mov	r1, r6
 80072f2:	4680      	mov	r8, r0
 80072f4:	4638      	mov	r0, r7
 80072f6:	f7ff fe53 	bl	8006fa0 <_Bfree>
 80072fa:	4646      	mov	r6, r8
 80072fc:	106d      	asrs	r5, r5, #1
 80072fe:	d00b      	beq.n	8007318 <__pow5mult+0xa0>
 8007300:	6820      	ldr	r0, [r4, #0]
 8007302:	b938      	cbnz	r0, 8007314 <__pow5mult+0x9c>
 8007304:	4622      	mov	r2, r4
 8007306:	4621      	mov	r1, r4
 8007308:	4638      	mov	r0, r7
 800730a:	f7ff ff13 	bl	8007134 <__multiply>
 800730e:	6020      	str	r0, [r4, #0]
 8007310:	f8c0 9000 	str.w	r9, [r0]
 8007314:	4604      	mov	r4, r0
 8007316:	e7e4      	b.n	80072e2 <__pow5mult+0x6a>
 8007318:	4630      	mov	r0, r6
 800731a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800731e:	bf00      	nop
 8007320:	08007f6c 	.word	0x08007f6c
 8007324:	08007e39 	.word	0x08007e39
 8007328:	08007eb9 	.word	0x08007eb9

0800732c <__lshift>:
 800732c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007330:	460c      	mov	r4, r1
 8007332:	6849      	ldr	r1, [r1, #4]
 8007334:	6923      	ldr	r3, [r4, #16]
 8007336:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800733a:	68a3      	ldr	r3, [r4, #8]
 800733c:	4607      	mov	r7, r0
 800733e:	4691      	mov	r9, r2
 8007340:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007344:	f108 0601 	add.w	r6, r8, #1
 8007348:	42b3      	cmp	r3, r6
 800734a:	db0b      	blt.n	8007364 <__lshift+0x38>
 800734c:	4638      	mov	r0, r7
 800734e:	f7ff fde7 	bl	8006f20 <_Balloc>
 8007352:	4605      	mov	r5, r0
 8007354:	b948      	cbnz	r0, 800736a <__lshift+0x3e>
 8007356:	4602      	mov	r2, r0
 8007358:	4b28      	ldr	r3, [pc, #160]	@ (80073fc <__lshift+0xd0>)
 800735a:	4829      	ldr	r0, [pc, #164]	@ (8007400 <__lshift+0xd4>)
 800735c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007360:	f000 fbe8 	bl	8007b34 <__assert_func>
 8007364:	3101      	adds	r1, #1
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	e7ee      	b.n	8007348 <__lshift+0x1c>
 800736a:	2300      	movs	r3, #0
 800736c:	f100 0114 	add.w	r1, r0, #20
 8007370:	f100 0210 	add.w	r2, r0, #16
 8007374:	4618      	mov	r0, r3
 8007376:	4553      	cmp	r3, sl
 8007378:	db33      	blt.n	80073e2 <__lshift+0xb6>
 800737a:	6920      	ldr	r0, [r4, #16]
 800737c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007380:	f104 0314 	add.w	r3, r4, #20
 8007384:	f019 091f 	ands.w	r9, r9, #31
 8007388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800738c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007390:	d02b      	beq.n	80073ea <__lshift+0xbe>
 8007392:	f1c9 0e20 	rsb	lr, r9, #32
 8007396:	468a      	mov	sl, r1
 8007398:	2200      	movs	r2, #0
 800739a:	6818      	ldr	r0, [r3, #0]
 800739c:	fa00 f009 	lsl.w	r0, r0, r9
 80073a0:	4310      	orrs	r0, r2
 80073a2:	f84a 0b04 	str.w	r0, [sl], #4
 80073a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80073aa:	459c      	cmp	ip, r3
 80073ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80073b0:	d8f3      	bhi.n	800739a <__lshift+0x6e>
 80073b2:	ebac 0304 	sub.w	r3, ip, r4
 80073b6:	3b15      	subs	r3, #21
 80073b8:	f023 0303 	bic.w	r3, r3, #3
 80073bc:	3304      	adds	r3, #4
 80073be:	f104 0015 	add.w	r0, r4, #21
 80073c2:	4560      	cmp	r0, ip
 80073c4:	bf88      	it	hi
 80073c6:	2304      	movhi	r3, #4
 80073c8:	50ca      	str	r2, [r1, r3]
 80073ca:	b10a      	cbz	r2, 80073d0 <__lshift+0xa4>
 80073cc:	f108 0602 	add.w	r6, r8, #2
 80073d0:	3e01      	subs	r6, #1
 80073d2:	4638      	mov	r0, r7
 80073d4:	612e      	str	r6, [r5, #16]
 80073d6:	4621      	mov	r1, r4
 80073d8:	f7ff fde2 	bl	8006fa0 <_Bfree>
 80073dc:	4628      	mov	r0, r5
 80073de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80073e6:	3301      	adds	r3, #1
 80073e8:	e7c5      	b.n	8007376 <__lshift+0x4a>
 80073ea:	3904      	subs	r1, #4
 80073ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80073f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80073f4:	459c      	cmp	ip, r3
 80073f6:	d8f9      	bhi.n	80073ec <__lshift+0xc0>
 80073f8:	e7ea      	b.n	80073d0 <__lshift+0xa4>
 80073fa:	bf00      	nop
 80073fc:	08007ea8 	.word	0x08007ea8
 8007400:	08007eb9 	.word	0x08007eb9

08007404 <__mcmp>:
 8007404:	690a      	ldr	r2, [r1, #16]
 8007406:	4603      	mov	r3, r0
 8007408:	6900      	ldr	r0, [r0, #16]
 800740a:	1a80      	subs	r0, r0, r2
 800740c:	b530      	push	{r4, r5, lr}
 800740e:	d10e      	bne.n	800742e <__mcmp+0x2a>
 8007410:	3314      	adds	r3, #20
 8007412:	3114      	adds	r1, #20
 8007414:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007418:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800741c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007420:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007424:	4295      	cmp	r5, r2
 8007426:	d003      	beq.n	8007430 <__mcmp+0x2c>
 8007428:	d205      	bcs.n	8007436 <__mcmp+0x32>
 800742a:	f04f 30ff 	mov.w	r0, #4294967295
 800742e:	bd30      	pop	{r4, r5, pc}
 8007430:	42a3      	cmp	r3, r4
 8007432:	d3f3      	bcc.n	800741c <__mcmp+0x18>
 8007434:	e7fb      	b.n	800742e <__mcmp+0x2a>
 8007436:	2001      	movs	r0, #1
 8007438:	e7f9      	b.n	800742e <__mcmp+0x2a>
	...

0800743c <__mdiff>:
 800743c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007440:	4689      	mov	r9, r1
 8007442:	4606      	mov	r6, r0
 8007444:	4611      	mov	r1, r2
 8007446:	4648      	mov	r0, r9
 8007448:	4614      	mov	r4, r2
 800744a:	f7ff ffdb 	bl	8007404 <__mcmp>
 800744e:	1e05      	subs	r5, r0, #0
 8007450:	d112      	bne.n	8007478 <__mdiff+0x3c>
 8007452:	4629      	mov	r1, r5
 8007454:	4630      	mov	r0, r6
 8007456:	f7ff fd63 	bl	8006f20 <_Balloc>
 800745a:	4602      	mov	r2, r0
 800745c:	b928      	cbnz	r0, 800746a <__mdiff+0x2e>
 800745e:	4b3f      	ldr	r3, [pc, #252]	@ (800755c <__mdiff+0x120>)
 8007460:	f240 2137 	movw	r1, #567	@ 0x237
 8007464:	483e      	ldr	r0, [pc, #248]	@ (8007560 <__mdiff+0x124>)
 8007466:	f000 fb65 	bl	8007b34 <__assert_func>
 800746a:	2301      	movs	r3, #1
 800746c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007470:	4610      	mov	r0, r2
 8007472:	b003      	add	sp, #12
 8007474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007478:	bfbc      	itt	lt
 800747a:	464b      	movlt	r3, r9
 800747c:	46a1      	movlt	r9, r4
 800747e:	4630      	mov	r0, r6
 8007480:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007484:	bfba      	itte	lt
 8007486:	461c      	movlt	r4, r3
 8007488:	2501      	movlt	r5, #1
 800748a:	2500      	movge	r5, #0
 800748c:	f7ff fd48 	bl	8006f20 <_Balloc>
 8007490:	4602      	mov	r2, r0
 8007492:	b918      	cbnz	r0, 800749c <__mdiff+0x60>
 8007494:	4b31      	ldr	r3, [pc, #196]	@ (800755c <__mdiff+0x120>)
 8007496:	f240 2145 	movw	r1, #581	@ 0x245
 800749a:	e7e3      	b.n	8007464 <__mdiff+0x28>
 800749c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80074a0:	6926      	ldr	r6, [r4, #16]
 80074a2:	60c5      	str	r5, [r0, #12]
 80074a4:	f109 0310 	add.w	r3, r9, #16
 80074a8:	f109 0514 	add.w	r5, r9, #20
 80074ac:	f104 0e14 	add.w	lr, r4, #20
 80074b0:	f100 0b14 	add.w	fp, r0, #20
 80074b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80074b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	46d9      	mov	r9, fp
 80074c0:	f04f 0c00 	mov.w	ip, #0
 80074c4:	9b01      	ldr	r3, [sp, #4]
 80074c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80074ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80074ce:	9301      	str	r3, [sp, #4]
 80074d0:	fa1f f38a 	uxth.w	r3, sl
 80074d4:	4619      	mov	r1, r3
 80074d6:	b283      	uxth	r3, r0
 80074d8:	1acb      	subs	r3, r1, r3
 80074da:	0c00      	lsrs	r0, r0, #16
 80074dc:	4463      	add	r3, ip
 80074de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80074e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80074ec:	4576      	cmp	r6, lr
 80074ee:	f849 3b04 	str.w	r3, [r9], #4
 80074f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074f6:	d8e5      	bhi.n	80074c4 <__mdiff+0x88>
 80074f8:	1b33      	subs	r3, r6, r4
 80074fa:	3b15      	subs	r3, #21
 80074fc:	f023 0303 	bic.w	r3, r3, #3
 8007500:	3415      	adds	r4, #21
 8007502:	3304      	adds	r3, #4
 8007504:	42a6      	cmp	r6, r4
 8007506:	bf38      	it	cc
 8007508:	2304      	movcc	r3, #4
 800750a:	441d      	add	r5, r3
 800750c:	445b      	add	r3, fp
 800750e:	461e      	mov	r6, r3
 8007510:	462c      	mov	r4, r5
 8007512:	4544      	cmp	r4, r8
 8007514:	d30e      	bcc.n	8007534 <__mdiff+0xf8>
 8007516:	f108 0103 	add.w	r1, r8, #3
 800751a:	1b49      	subs	r1, r1, r5
 800751c:	f021 0103 	bic.w	r1, r1, #3
 8007520:	3d03      	subs	r5, #3
 8007522:	45a8      	cmp	r8, r5
 8007524:	bf38      	it	cc
 8007526:	2100      	movcc	r1, #0
 8007528:	440b      	add	r3, r1
 800752a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800752e:	b191      	cbz	r1, 8007556 <__mdiff+0x11a>
 8007530:	6117      	str	r7, [r2, #16]
 8007532:	e79d      	b.n	8007470 <__mdiff+0x34>
 8007534:	f854 1b04 	ldr.w	r1, [r4], #4
 8007538:	46e6      	mov	lr, ip
 800753a:	0c08      	lsrs	r0, r1, #16
 800753c:	fa1c fc81 	uxtah	ip, ip, r1
 8007540:	4471      	add	r1, lr
 8007542:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007546:	b289      	uxth	r1, r1
 8007548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800754c:	f846 1b04 	str.w	r1, [r6], #4
 8007550:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007554:	e7dd      	b.n	8007512 <__mdiff+0xd6>
 8007556:	3f01      	subs	r7, #1
 8007558:	e7e7      	b.n	800752a <__mdiff+0xee>
 800755a:	bf00      	nop
 800755c:	08007ea8 	.word	0x08007ea8
 8007560:	08007eb9 	.word	0x08007eb9

08007564 <__d2b>:
 8007564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007568:	460f      	mov	r7, r1
 800756a:	2101      	movs	r1, #1
 800756c:	ec59 8b10 	vmov	r8, r9, d0
 8007570:	4616      	mov	r6, r2
 8007572:	f7ff fcd5 	bl	8006f20 <_Balloc>
 8007576:	4604      	mov	r4, r0
 8007578:	b930      	cbnz	r0, 8007588 <__d2b+0x24>
 800757a:	4602      	mov	r2, r0
 800757c:	4b23      	ldr	r3, [pc, #140]	@ (800760c <__d2b+0xa8>)
 800757e:	4824      	ldr	r0, [pc, #144]	@ (8007610 <__d2b+0xac>)
 8007580:	f240 310f 	movw	r1, #783	@ 0x30f
 8007584:	f000 fad6 	bl	8007b34 <__assert_func>
 8007588:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800758c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007590:	b10d      	cbz	r5, 8007596 <__d2b+0x32>
 8007592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007596:	9301      	str	r3, [sp, #4]
 8007598:	f1b8 0300 	subs.w	r3, r8, #0
 800759c:	d023      	beq.n	80075e6 <__d2b+0x82>
 800759e:	4668      	mov	r0, sp
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	f7ff fd84 	bl	80070ae <__lo0bits>
 80075a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80075aa:	b1d0      	cbz	r0, 80075e2 <__d2b+0x7e>
 80075ac:	f1c0 0320 	rsb	r3, r0, #32
 80075b0:	fa02 f303 	lsl.w	r3, r2, r3
 80075b4:	430b      	orrs	r3, r1
 80075b6:	40c2      	lsrs	r2, r0
 80075b8:	6163      	str	r3, [r4, #20]
 80075ba:	9201      	str	r2, [sp, #4]
 80075bc:	9b01      	ldr	r3, [sp, #4]
 80075be:	61a3      	str	r3, [r4, #24]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	bf0c      	ite	eq
 80075c4:	2201      	moveq	r2, #1
 80075c6:	2202      	movne	r2, #2
 80075c8:	6122      	str	r2, [r4, #16]
 80075ca:	b1a5      	cbz	r5, 80075f6 <__d2b+0x92>
 80075cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80075d0:	4405      	add	r5, r0
 80075d2:	603d      	str	r5, [r7, #0]
 80075d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80075d8:	6030      	str	r0, [r6, #0]
 80075da:	4620      	mov	r0, r4
 80075dc:	b003      	add	sp, #12
 80075de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075e2:	6161      	str	r1, [r4, #20]
 80075e4:	e7ea      	b.n	80075bc <__d2b+0x58>
 80075e6:	a801      	add	r0, sp, #4
 80075e8:	f7ff fd61 	bl	80070ae <__lo0bits>
 80075ec:	9b01      	ldr	r3, [sp, #4]
 80075ee:	6163      	str	r3, [r4, #20]
 80075f0:	3020      	adds	r0, #32
 80075f2:	2201      	movs	r2, #1
 80075f4:	e7e8      	b.n	80075c8 <__d2b+0x64>
 80075f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80075fe:	6038      	str	r0, [r7, #0]
 8007600:	6918      	ldr	r0, [r3, #16]
 8007602:	f7ff fd35 	bl	8007070 <__hi0bits>
 8007606:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800760a:	e7e5      	b.n	80075d8 <__d2b+0x74>
 800760c:	08007ea8 	.word	0x08007ea8
 8007610:	08007eb9 	.word	0x08007eb9

08007614 <__sfputc_r>:
 8007614:	6893      	ldr	r3, [r2, #8]
 8007616:	3b01      	subs	r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	b410      	push	{r4}
 800761c:	6093      	str	r3, [r2, #8]
 800761e:	da08      	bge.n	8007632 <__sfputc_r+0x1e>
 8007620:	6994      	ldr	r4, [r2, #24]
 8007622:	42a3      	cmp	r3, r4
 8007624:	db01      	blt.n	800762a <__sfputc_r+0x16>
 8007626:	290a      	cmp	r1, #10
 8007628:	d103      	bne.n	8007632 <__sfputc_r+0x1e>
 800762a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800762e:	f7fe bc08 	b.w	8005e42 <__swbuf_r>
 8007632:	6813      	ldr	r3, [r2, #0]
 8007634:	1c58      	adds	r0, r3, #1
 8007636:	6010      	str	r0, [r2, #0]
 8007638:	7019      	strb	r1, [r3, #0]
 800763a:	4608      	mov	r0, r1
 800763c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007640:	4770      	bx	lr

08007642 <__sfputs_r>:
 8007642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007644:	4606      	mov	r6, r0
 8007646:	460f      	mov	r7, r1
 8007648:	4614      	mov	r4, r2
 800764a:	18d5      	adds	r5, r2, r3
 800764c:	42ac      	cmp	r4, r5
 800764e:	d101      	bne.n	8007654 <__sfputs_r+0x12>
 8007650:	2000      	movs	r0, #0
 8007652:	e007      	b.n	8007664 <__sfputs_r+0x22>
 8007654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007658:	463a      	mov	r2, r7
 800765a:	4630      	mov	r0, r6
 800765c:	f7ff ffda 	bl	8007614 <__sfputc_r>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d1f3      	bne.n	800764c <__sfputs_r+0xa>
 8007664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007668 <_vfiprintf_r>:
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	460d      	mov	r5, r1
 800766e:	b09d      	sub	sp, #116	@ 0x74
 8007670:	4614      	mov	r4, r2
 8007672:	4698      	mov	r8, r3
 8007674:	4606      	mov	r6, r0
 8007676:	b118      	cbz	r0, 8007680 <_vfiprintf_r+0x18>
 8007678:	6a03      	ldr	r3, [r0, #32]
 800767a:	b90b      	cbnz	r3, 8007680 <_vfiprintf_r+0x18>
 800767c:	f7fe faf8 	bl	8005c70 <__sinit>
 8007680:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007682:	07d9      	lsls	r1, r3, #31
 8007684:	d405      	bmi.n	8007692 <_vfiprintf_r+0x2a>
 8007686:	89ab      	ldrh	r3, [r5, #12]
 8007688:	059a      	lsls	r2, r3, #22
 800768a:	d402      	bmi.n	8007692 <_vfiprintf_r+0x2a>
 800768c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800768e:	f7fe fcea 	bl	8006066 <__retarget_lock_acquire_recursive>
 8007692:	89ab      	ldrh	r3, [r5, #12]
 8007694:	071b      	lsls	r3, r3, #28
 8007696:	d501      	bpl.n	800769c <_vfiprintf_r+0x34>
 8007698:	692b      	ldr	r3, [r5, #16]
 800769a:	b99b      	cbnz	r3, 80076c4 <_vfiprintf_r+0x5c>
 800769c:	4629      	mov	r1, r5
 800769e:	4630      	mov	r0, r6
 80076a0:	f7fe fc0e 	bl	8005ec0 <__swsetup_r>
 80076a4:	b170      	cbz	r0, 80076c4 <_vfiprintf_r+0x5c>
 80076a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076a8:	07dc      	lsls	r4, r3, #31
 80076aa:	d504      	bpl.n	80076b6 <_vfiprintf_r+0x4e>
 80076ac:	f04f 30ff 	mov.w	r0, #4294967295
 80076b0:	b01d      	add	sp, #116	@ 0x74
 80076b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b6:	89ab      	ldrh	r3, [r5, #12]
 80076b8:	0598      	lsls	r0, r3, #22
 80076ba:	d4f7      	bmi.n	80076ac <_vfiprintf_r+0x44>
 80076bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076be:	f7fe fcd3 	bl	8006068 <__retarget_lock_release_recursive>
 80076c2:	e7f3      	b.n	80076ac <_vfiprintf_r+0x44>
 80076c4:	2300      	movs	r3, #0
 80076c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80076c8:	2320      	movs	r3, #32
 80076ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80076d2:	2330      	movs	r3, #48	@ 0x30
 80076d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007884 <_vfiprintf_r+0x21c>
 80076d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076dc:	f04f 0901 	mov.w	r9, #1
 80076e0:	4623      	mov	r3, r4
 80076e2:	469a      	mov	sl, r3
 80076e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076e8:	b10a      	cbz	r2, 80076ee <_vfiprintf_r+0x86>
 80076ea:	2a25      	cmp	r2, #37	@ 0x25
 80076ec:	d1f9      	bne.n	80076e2 <_vfiprintf_r+0x7a>
 80076ee:	ebba 0b04 	subs.w	fp, sl, r4
 80076f2:	d00b      	beq.n	800770c <_vfiprintf_r+0xa4>
 80076f4:	465b      	mov	r3, fp
 80076f6:	4622      	mov	r2, r4
 80076f8:	4629      	mov	r1, r5
 80076fa:	4630      	mov	r0, r6
 80076fc:	f7ff ffa1 	bl	8007642 <__sfputs_r>
 8007700:	3001      	adds	r0, #1
 8007702:	f000 80a7 	beq.w	8007854 <_vfiprintf_r+0x1ec>
 8007706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007708:	445a      	add	r2, fp
 800770a:	9209      	str	r2, [sp, #36]	@ 0x24
 800770c:	f89a 3000 	ldrb.w	r3, [sl]
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 809f 	beq.w	8007854 <_vfiprintf_r+0x1ec>
 8007716:	2300      	movs	r3, #0
 8007718:	f04f 32ff 	mov.w	r2, #4294967295
 800771c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007720:	f10a 0a01 	add.w	sl, sl, #1
 8007724:	9304      	str	r3, [sp, #16]
 8007726:	9307      	str	r3, [sp, #28]
 8007728:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800772c:	931a      	str	r3, [sp, #104]	@ 0x68
 800772e:	4654      	mov	r4, sl
 8007730:	2205      	movs	r2, #5
 8007732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007736:	4853      	ldr	r0, [pc, #332]	@ (8007884 <_vfiprintf_r+0x21c>)
 8007738:	f7f8 fd22 	bl	8000180 <memchr>
 800773c:	9a04      	ldr	r2, [sp, #16]
 800773e:	b9d8      	cbnz	r0, 8007778 <_vfiprintf_r+0x110>
 8007740:	06d1      	lsls	r1, r2, #27
 8007742:	bf44      	itt	mi
 8007744:	2320      	movmi	r3, #32
 8007746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800774a:	0713      	lsls	r3, r2, #28
 800774c:	bf44      	itt	mi
 800774e:	232b      	movmi	r3, #43	@ 0x2b
 8007750:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007754:	f89a 3000 	ldrb.w	r3, [sl]
 8007758:	2b2a      	cmp	r3, #42	@ 0x2a
 800775a:	d015      	beq.n	8007788 <_vfiprintf_r+0x120>
 800775c:	9a07      	ldr	r2, [sp, #28]
 800775e:	4654      	mov	r4, sl
 8007760:	2000      	movs	r0, #0
 8007762:	f04f 0c0a 	mov.w	ip, #10
 8007766:	4621      	mov	r1, r4
 8007768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800776c:	3b30      	subs	r3, #48	@ 0x30
 800776e:	2b09      	cmp	r3, #9
 8007770:	d94b      	bls.n	800780a <_vfiprintf_r+0x1a2>
 8007772:	b1b0      	cbz	r0, 80077a2 <_vfiprintf_r+0x13a>
 8007774:	9207      	str	r2, [sp, #28]
 8007776:	e014      	b.n	80077a2 <_vfiprintf_r+0x13a>
 8007778:	eba0 0308 	sub.w	r3, r0, r8
 800777c:	fa09 f303 	lsl.w	r3, r9, r3
 8007780:	4313      	orrs	r3, r2
 8007782:	9304      	str	r3, [sp, #16]
 8007784:	46a2      	mov	sl, r4
 8007786:	e7d2      	b.n	800772e <_vfiprintf_r+0xc6>
 8007788:	9b03      	ldr	r3, [sp, #12]
 800778a:	1d19      	adds	r1, r3, #4
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	9103      	str	r1, [sp, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	bfbb      	ittet	lt
 8007794:	425b      	neglt	r3, r3
 8007796:	f042 0202 	orrlt.w	r2, r2, #2
 800779a:	9307      	strge	r3, [sp, #28]
 800779c:	9307      	strlt	r3, [sp, #28]
 800779e:	bfb8      	it	lt
 80077a0:	9204      	strlt	r2, [sp, #16]
 80077a2:	7823      	ldrb	r3, [r4, #0]
 80077a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80077a6:	d10a      	bne.n	80077be <_vfiprintf_r+0x156>
 80077a8:	7863      	ldrb	r3, [r4, #1]
 80077aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80077ac:	d132      	bne.n	8007814 <_vfiprintf_r+0x1ac>
 80077ae:	9b03      	ldr	r3, [sp, #12]
 80077b0:	1d1a      	adds	r2, r3, #4
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	9203      	str	r2, [sp, #12]
 80077b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077ba:	3402      	adds	r4, #2
 80077bc:	9305      	str	r3, [sp, #20]
 80077be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007894 <_vfiprintf_r+0x22c>
 80077c2:	7821      	ldrb	r1, [r4, #0]
 80077c4:	2203      	movs	r2, #3
 80077c6:	4650      	mov	r0, sl
 80077c8:	f7f8 fcda 	bl	8000180 <memchr>
 80077cc:	b138      	cbz	r0, 80077de <_vfiprintf_r+0x176>
 80077ce:	9b04      	ldr	r3, [sp, #16]
 80077d0:	eba0 000a 	sub.w	r0, r0, sl
 80077d4:	2240      	movs	r2, #64	@ 0x40
 80077d6:	4082      	lsls	r2, r0
 80077d8:	4313      	orrs	r3, r2
 80077da:	3401      	adds	r4, #1
 80077dc:	9304      	str	r3, [sp, #16]
 80077de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e2:	4829      	ldr	r0, [pc, #164]	@ (8007888 <_vfiprintf_r+0x220>)
 80077e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077e8:	2206      	movs	r2, #6
 80077ea:	f7f8 fcc9 	bl	8000180 <memchr>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d03f      	beq.n	8007872 <_vfiprintf_r+0x20a>
 80077f2:	4b26      	ldr	r3, [pc, #152]	@ (800788c <_vfiprintf_r+0x224>)
 80077f4:	bb1b      	cbnz	r3, 800783e <_vfiprintf_r+0x1d6>
 80077f6:	9b03      	ldr	r3, [sp, #12]
 80077f8:	3307      	adds	r3, #7
 80077fa:	f023 0307 	bic.w	r3, r3, #7
 80077fe:	3308      	adds	r3, #8
 8007800:	9303      	str	r3, [sp, #12]
 8007802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007804:	443b      	add	r3, r7
 8007806:	9309      	str	r3, [sp, #36]	@ 0x24
 8007808:	e76a      	b.n	80076e0 <_vfiprintf_r+0x78>
 800780a:	fb0c 3202 	mla	r2, ip, r2, r3
 800780e:	460c      	mov	r4, r1
 8007810:	2001      	movs	r0, #1
 8007812:	e7a8      	b.n	8007766 <_vfiprintf_r+0xfe>
 8007814:	2300      	movs	r3, #0
 8007816:	3401      	adds	r4, #1
 8007818:	9305      	str	r3, [sp, #20]
 800781a:	4619      	mov	r1, r3
 800781c:	f04f 0c0a 	mov.w	ip, #10
 8007820:	4620      	mov	r0, r4
 8007822:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007826:	3a30      	subs	r2, #48	@ 0x30
 8007828:	2a09      	cmp	r2, #9
 800782a:	d903      	bls.n	8007834 <_vfiprintf_r+0x1cc>
 800782c:	2b00      	cmp	r3, #0
 800782e:	d0c6      	beq.n	80077be <_vfiprintf_r+0x156>
 8007830:	9105      	str	r1, [sp, #20]
 8007832:	e7c4      	b.n	80077be <_vfiprintf_r+0x156>
 8007834:	fb0c 2101 	mla	r1, ip, r1, r2
 8007838:	4604      	mov	r4, r0
 800783a:	2301      	movs	r3, #1
 800783c:	e7f0      	b.n	8007820 <_vfiprintf_r+0x1b8>
 800783e:	ab03      	add	r3, sp, #12
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	462a      	mov	r2, r5
 8007844:	4b12      	ldr	r3, [pc, #72]	@ (8007890 <_vfiprintf_r+0x228>)
 8007846:	a904      	add	r1, sp, #16
 8007848:	4630      	mov	r0, r6
 800784a:	f7fd fdcf 	bl	80053ec <_printf_float>
 800784e:	4607      	mov	r7, r0
 8007850:	1c78      	adds	r0, r7, #1
 8007852:	d1d6      	bne.n	8007802 <_vfiprintf_r+0x19a>
 8007854:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007856:	07d9      	lsls	r1, r3, #31
 8007858:	d405      	bmi.n	8007866 <_vfiprintf_r+0x1fe>
 800785a:	89ab      	ldrh	r3, [r5, #12]
 800785c:	059a      	lsls	r2, r3, #22
 800785e:	d402      	bmi.n	8007866 <_vfiprintf_r+0x1fe>
 8007860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007862:	f7fe fc01 	bl	8006068 <__retarget_lock_release_recursive>
 8007866:	89ab      	ldrh	r3, [r5, #12]
 8007868:	065b      	lsls	r3, r3, #25
 800786a:	f53f af1f 	bmi.w	80076ac <_vfiprintf_r+0x44>
 800786e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007870:	e71e      	b.n	80076b0 <_vfiprintf_r+0x48>
 8007872:	ab03      	add	r3, sp, #12
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	462a      	mov	r2, r5
 8007878:	4b05      	ldr	r3, [pc, #20]	@ (8007890 <_vfiprintf_r+0x228>)
 800787a:	a904      	add	r1, sp, #16
 800787c:	4630      	mov	r0, r6
 800787e:	f7fe f84d 	bl	800591c <_printf_i>
 8007882:	e7e4      	b.n	800784e <_vfiprintf_r+0x1e6>
 8007884:	08007f12 	.word	0x08007f12
 8007888:	08007f1c 	.word	0x08007f1c
 800788c:	080053ed 	.word	0x080053ed
 8007890:	08007643 	.word	0x08007643
 8007894:	08007f18 	.word	0x08007f18

08007898 <__sflush_r>:
 8007898:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800789c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a0:	0716      	lsls	r6, r2, #28
 80078a2:	4605      	mov	r5, r0
 80078a4:	460c      	mov	r4, r1
 80078a6:	d454      	bmi.n	8007952 <__sflush_r+0xba>
 80078a8:	684b      	ldr	r3, [r1, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	dc02      	bgt.n	80078b4 <__sflush_r+0x1c>
 80078ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dd48      	ble.n	8007946 <__sflush_r+0xae>
 80078b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078b6:	2e00      	cmp	r6, #0
 80078b8:	d045      	beq.n	8007946 <__sflush_r+0xae>
 80078ba:	2300      	movs	r3, #0
 80078bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078c0:	682f      	ldr	r7, [r5, #0]
 80078c2:	6a21      	ldr	r1, [r4, #32]
 80078c4:	602b      	str	r3, [r5, #0]
 80078c6:	d030      	beq.n	800792a <__sflush_r+0x92>
 80078c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	0759      	lsls	r1, r3, #29
 80078ce:	d505      	bpl.n	80078dc <__sflush_r+0x44>
 80078d0:	6863      	ldr	r3, [r4, #4]
 80078d2:	1ad2      	subs	r2, r2, r3
 80078d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80078d6:	b10b      	cbz	r3, 80078dc <__sflush_r+0x44>
 80078d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80078da:	1ad2      	subs	r2, r2, r3
 80078dc:	2300      	movs	r3, #0
 80078de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078e0:	6a21      	ldr	r1, [r4, #32]
 80078e2:	4628      	mov	r0, r5
 80078e4:	47b0      	blx	r6
 80078e6:	1c43      	adds	r3, r0, #1
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	d106      	bne.n	80078fa <__sflush_r+0x62>
 80078ec:	6829      	ldr	r1, [r5, #0]
 80078ee:	291d      	cmp	r1, #29
 80078f0:	d82b      	bhi.n	800794a <__sflush_r+0xb2>
 80078f2:	4a2a      	ldr	r2, [pc, #168]	@ (800799c <__sflush_r+0x104>)
 80078f4:	40ca      	lsrs	r2, r1
 80078f6:	07d6      	lsls	r6, r2, #31
 80078f8:	d527      	bpl.n	800794a <__sflush_r+0xb2>
 80078fa:	2200      	movs	r2, #0
 80078fc:	6062      	str	r2, [r4, #4]
 80078fe:	04d9      	lsls	r1, r3, #19
 8007900:	6922      	ldr	r2, [r4, #16]
 8007902:	6022      	str	r2, [r4, #0]
 8007904:	d504      	bpl.n	8007910 <__sflush_r+0x78>
 8007906:	1c42      	adds	r2, r0, #1
 8007908:	d101      	bne.n	800790e <__sflush_r+0x76>
 800790a:	682b      	ldr	r3, [r5, #0]
 800790c:	b903      	cbnz	r3, 8007910 <__sflush_r+0x78>
 800790e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007910:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007912:	602f      	str	r7, [r5, #0]
 8007914:	b1b9      	cbz	r1, 8007946 <__sflush_r+0xae>
 8007916:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800791a:	4299      	cmp	r1, r3
 800791c:	d002      	beq.n	8007924 <__sflush_r+0x8c>
 800791e:	4628      	mov	r0, r5
 8007920:	f7ff f9fe 	bl	8006d20 <_free_r>
 8007924:	2300      	movs	r3, #0
 8007926:	6363      	str	r3, [r4, #52]	@ 0x34
 8007928:	e00d      	b.n	8007946 <__sflush_r+0xae>
 800792a:	2301      	movs	r3, #1
 800792c:	4628      	mov	r0, r5
 800792e:	47b0      	blx	r6
 8007930:	4602      	mov	r2, r0
 8007932:	1c50      	adds	r0, r2, #1
 8007934:	d1c9      	bne.n	80078ca <__sflush_r+0x32>
 8007936:	682b      	ldr	r3, [r5, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d0c6      	beq.n	80078ca <__sflush_r+0x32>
 800793c:	2b1d      	cmp	r3, #29
 800793e:	d001      	beq.n	8007944 <__sflush_r+0xac>
 8007940:	2b16      	cmp	r3, #22
 8007942:	d11e      	bne.n	8007982 <__sflush_r+0xea>
 8007944:	602f      	str	r7, [r5, #0]
 8007946:	2000      	movs	r0, #0
 8007948:	e022      	b.n	8007990 <__sflush_r+0xf8>
 800794a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800794e:	b21b      	sxth	r3, r3
 8007950:	e01b      	b.n	800798a <__sflush_r+0xf2>
 8007952:	690f      	ldr	r7, [r1, #16]
 8007954:	2f00      	cmp	r7, #0
 8007956:	d0f6      	beq.n	8007946 <__sflush_r+0xae>
 8007958:	0793      	lsls	r3, r2, #30
 800795a:	680e      	ldr	r6, [r1, #0]
 800795c:	bf08      	it	eq
 800795e:	694b      	ldreq	r3, [r1, #20]
 8007960:	600f      	str	r7, [r1, #0]
 8007962:	bf18      	it	ne
 8007964:	2300      	movne	r3, #0
 8007966:	eba6 0807 	sub.w	r8, r6, r7
 800796a:	608b      	str	r3, [r1, #8]
 800796c:	f1b8 0f00 	cmp.w	r8, #0
 8007970:	dde9      	ble.n	8007946 <__sflush_r+0xae>
 8007972:	6a21      	ldr	r1, [r4, #32]
 8007974:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007976:	4643      	mov	r3, r8
 8007978:	463a      	mov	r2, r7
 800797a:	4628      	mov	r0, r5
 800797c:	47b0      	blx	r6
 800797e:	2800      	cmp	r0, #0
 8007980:	dc08      	bgt.n	8007994 <__sflush_r+0xfc>
 8007982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800798a:	81a3      	strh	r3, [r4, #12]
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007994:	4407      	add	r7, r0
 8007996:	eba8 0800 	sub.w	r8, r8, r0
 800799a:	e7e7      	b.n	800796c <__sflush_r+0xd4>
 800799c:	20400001 	.word	0x20400001

080079a0 <_fflush_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	690b      	ldr	r3, [r1, #16]
 80079a4:	4605      	mov	r5, r0
 80079a6:	460c      	mov	r4, r1
 80079a8:	b913      	cbnz	r3, 80079b0 <_fflush_r+0x10>
 80079aa:	2500      	movs	r5, #0
 80079ac:	4628      	mov	r0, r5
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	b118      	cbz	r0, 80079ba <_fflush_r+0x1a>
 80079b2:	6a03      	ldr	r3, [r0, #32]
 80079b4:	b90b      	cbnz	r3, 80079ba <_fflush_r+0x1a>
 80079b6:	f7fe f95b 	bl	8005c70 <__sinit>
 80079ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d0f3      	beq.n	80079aa <_fflush_r+0xa>
 80079c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079c4:	07d0      	lsls	r0, r2, #31
 80079c6:	d404      	bmi.n	80079d2 <_fflush_r+0x32>
 80079c8:	0599      	lsls	r1, r3, #22
 80079ca:	d402      	bmi.n	80079d2 <_fflush_r+0x32>
 80079cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079ce:	f7fe fb4a 	bl	8006066 <__retarget_lock_acquire_recursive>
 80079d2:	4628      	mov	r0, r5
 80079d4:	4621      	mov	r1, r4
 80079d6:	f7ff ff5f 	bl	8007898 <__sflush_r>
 80079da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079dc:	07da      	lsls	r2, r3, #31
 80079de:	4605      	mov	r5, r0
 80079e0:	d4e4      	bmi.n	80079ac <_fflush_r+0xc>
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	059b      	lsls	r3, r3, #22
 80079e6:	d4e1      	bmi.n	80079ac <_fflush_r+0xc>
 80079e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079ea:	f7fe fb3d 	bl	8006068 <__retarget_lock_release_recursive>
 80079ee:	e7dd      	b.n	80079ac <_fflush_r+0xc>

080079f0 <__swhatbuf_r>:
 80079f0:	b570      	push	{r4, r5, r6, lr}
 80079f2:	460c      	mov	r4, r1
 80079f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f8:	2900      	cmp	r1, #0
 80079fa:	b096      	sub	sp, #88	@ 0x58
 80079fc:	4615      	mov	r5, r2
 80079fe:	461e      	mov	r6, r3
 8007a00:	da0d      	bge.n	8007a1e <__swhatbuf_r+0x2e>
 8007a02:	89a3      	ldrh	r3, [r4, #12]
 8007a04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a08:	f04f 0100 	mov.w	r1, #0
 8007a0c:	bf14      	ite	ne
 8007a0e:	2340      	movne	r3, #64	@ 0x40
 8007a10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a14:	2000      	movs	r0, #0
 8007a16:	6031      	str	r1, [r6, #0]
 8007a18:	602b      	str	r3, [r5, #0]
 8007a1a:	b016      	add	sp, #88	@ 0x58
 8007a1c:	bd70      	pop	{r4, r5, r6, pc}
 8007a1e:	466a      	mov	r2, sp
 8007a20:	f000 f848 	bl	8007ab4 <_fstat_r>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	dbec      	blt.n	8007a02 <__swhatbuf_r+0x12>
 8007a28:	9901      	ldr	r1, [sp, #4]
 8007a2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a32:	4259      	negs	r1, r3
 8007a34:	4159      	adcs	r1, r3
 8007a36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a3a:	e7eb      	b.n	8007a14 <__swhatbuf_r+0x24>

08007a3c <__smakebuf_r>:
 8007a3c:	898b      	ldrh	r3, [r1, #12]
 8007a3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a40:	079d      	lsls	r5, r3, #30
 8007a42:	4606      	mov	r6, r0
 8007a44:	460c      	mov	r4, r1
 8007a46:	d507      	bpl.n	8007a58 <__smakebuf_r+0x1c>
 8007a48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	6123      	str	r3, [r4, #16]
 8007a50:	2301      	movs	r3, #1
 8007a52:	6163      	str	r3, [r4, #20]
 8007a54:	b003      	add	sp, #12
 8007a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a58:	ab01      	add	r3, sp, #4
 8007a5a:	466a      	mov	r2, sp
 8007a5c:	f7ff ffc8 	bl	80079f0 <__swhatbuf_r>
 8007a60:	9f00      	ldr	r7, [sp, #0]
 8007a62:	4605      	mov	r5, r0
 8007a64:	4639      	mov	r1, r7
 8007a66:	4630      	mov	r0, r6
 8007a68:	f7ff f9ce 	bl	8006e08 <_malloc_r>
 8007a6c:	b948      	cbnz	r0, 8007a82 <__smakebuf_r+0x46>
 8007a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a72:	059a      	lsls	r2, r3, #22
 8007a74:	d4ee      	bmi.n	8007a54 <__smakebuf_r+0x18>
 8007a76:	f023 0303 	bic.w	r3, r3, #3
 8007a7a:	f043 0302 	orr.w	r3, r3, #2
 8007a7e:	81a3      	strh	r3, [r4, #12]
 8007a80:	e7e2      	b.n	8007a48 <__smakebuf_r+0xc>
 8007a82:	89a3      	ldrh	r3, [r4, #12]
 8007a84:	6020      	str	r0, [r4, #0]
 8007a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a8a:	81a3      	strh	r3, [r4, #12]
 8007a8c:	9b01      	ldr	r3, [sp, #4]
 8007a8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a92:	b15b      	cbz	r3, 8007aac <__smakebuf_r+0x70>
 8007a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f000 f81d 	bl	8007ad8 <_isatty_r>
 8007a9e:	b128      	cbz	r0, 8007aac <__smakebuf_r+0x70>
 8007aa0:	89a3      	ldrh	r3, [r4, #12]
 8007aa2:	f023 0303 	bic.w	r3, r3, #3
 8007aa6:	f043 0301 	orr.w	r3, r3, #1
 8007aaa:	81a3      	strh	r3, [r4, #12]
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	431d      	orrs	r5, r3
 8007ab0:	81a5      	strh	r5, [r4, #12]
 8007ab2:	e7cf      	b.n	8007a54 <__smakebuf_r+0x18>

08007ab4 <_fstat_r>:
 8007ab4:	b538      	push	{r3, r4, r5, lr}
 8007ab6:	4d07      	ldr	r5, [pc, #28]	@ (8007ad4 <_fstat_r+0x20>)
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4604      	mov	r4, r0
 8007abc:	4608      	mov	r0, r1
 8007abe:	4611      	mov	r1, r2
 8007ac0:	602b      	str	r3, [r5, #0]
 8007ac2:	f7f9 fd6c 	bl	800159e <_fstat>
 8007ac6:	1c43      	adds	r3, r0, #1
 8007ac8:	d102      	bne.n	8007ad0 <_fstat_r+0x1c>
 8007aca:	682b      	ldr	r3, [r5, #0]
 8007acc:	b103      	cbz	r3, 8007ad0 <_fstat_r+0x1c>
 8007ace:	6023      	str	r3, [r4, #0]
 8007ad0:	bd38      	pop	{r3, r4, r5, pc}
 8007ad2:	bf00      	nop
 8007ad4:	200004e8 	.word	0x200004e8

08007ad8 <_isatty_r>:
 8007ad8:	b538      	push	{r3, r4, r5, lr}
 8007ada:	4d06      	ldr	r5, [pc, #24]	@ (8007af4 <_isatty_r+0x1c>)
 8007adc:	2300      	movs	r3, #0
 8007ade:	4604      	mov	r4, r0
 8007ae0:	4608      	mov	r0, r1
 8007ae2:	602b      	str	r3, [r5, #0]
 8007ae4:	f7f9 fd6b 	bl	80015be <_isatty>
 8007ae8:	1c43      	adds	r3, r0, #1
 8007aea:	d102      	bne.n	8007af2 <_isatty_r+0x1a>
 8007aec:	682b      	ldr	r3, [r5, #0]
 8007aee:	b103      	cbz	r3, 8007af2 <_isatty_r+0x1a>
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
 8007af4:	200004e8 	.word	0x200004e8

08007af8 <_sbrk_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4d06      	ldr	r5, [pc, #24]	@ (8007b14 <_sbrk_r+0x1c>)
 8007afc:	2300      	movs	r3, #0
 8007afe:	4604      	mov	r4, r0
 8007b00:	4608      	mov	r0, r1
 8007b02:	602b      	str	r3, [r5, #0]
 8007b04:	f7f9 fd74 	bl	80015f0 <_sbrk>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d102      	bne.n	8007b12 <_sbrk_r+0x1a>
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	b103      	cbz	r3, 8007b12 <_sbrk_r+0x1a>
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	bd38      	pop	{r3, r4, r5, pc}
 8007b14:	200004e8 	.word	0x200004e8

08007b18 <memcpy>:
 8007b18:	440a      	add	r2, r1
 8007b1a:	4291      	cmp	r1, r2
 8007b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b20:	d100      	bne.n	8007b24 <memcpy+0xc>
 8007b22:	4770      	bx	lr
 8007b24:	b510      	push	{r4, lr}
 8007b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b2e:	4291      	cmp	r1, r2
 8007b30:	d1f9      	bne.n	8007b26 <memcpy+0xe>
 8007b32:	bd10      	pop	{r4, pc}

08007b34 <__assert_func>:
 8007b34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b36:	4614      	mov	r4, r2
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4b09      	ldr	r3, [pc, #36]	@ (8007b60 <__assert_func+0x2c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4605      	mov	r5, r0
 8007b40:	68d8      	ldr	r0, [r3, #12]
 8007b42:	b14c      	cbz	r4, 8007b58 <__assert_func+0x24>
 8007b44:	4b07      	ldr	r3, [pc, #28]	@ (8007b64 <__assert_func+0x30>)
 8007b46:	9100      	str	r1, [sp, #0]
 8007b48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b4c:	4906      	ldr	r1, [pc, #24]	@ (8007b68 <__assert_func+0x34>)
 8007b4e:	462b      	mov	r3, r5
 8007b50:	f000 f842 	bl	8007bd8 <fiprintf>
 8007b54:	f000 f852 	bl	8007bfc <abort>
 8007b58:	4b04      	ldr	r3, [pc, #16]	@ (8007b6c <__assert_func+0x38>)
 8007b5a:	461c      	mov	r4, r3
 8007b5c:	e7f3      	b.n	8007b46 <__assert_func+0x12>
 8007b5e:	bf00      	nop
 8007b60:	2000003c 	.word	0x2000003c
 8007b64:	08007f2d 	.word	0x08007f2d
 8007b68:	08007f3a 	.word	0x08007f3a
 8007b6c:	08007f68 	.word	0x08007f68

08007b70 <_calloc_r>:
 8007b70:	b570      	push	{r4, r5, r6, lr}
 8007b72:	fba1 5402 	umull	r5, r4, r1, r2
 8007b76:	b934      	cbnz	r4, 8007b86 <_calloc_r+0x16>
 8007b78:	4629      	mov	r1, r5
 8007b7a:	f7ff f945 	bl	8006e08 <_malloc_r>
 8007b7e:	4606      	mov	r6, r0
 8007b80:	b928      	cbnz	r0, 8007b8e <_calloc_r+0x1e>
 8007b82:	4630      	mov	r0, r6
 8007b84:	bd70      	pop	{r4, r5, r6, pc}
 8007b86:	220c      	movs	r2, #12
 8007b88:	6002      	str	r2, [r0, #0]
 8007b8a:	2600      	movs	r6, #0
 8007b8c:	e7f9      	b.n	8007b82 <_calloc_r+0x12>
 8007b8e:	462a      	mov	r2, r5
 8007b90:	4621      	mov	r1, r4
 8007b92:	f7fe f9eb 	bl	8005f6c <memset>
 8007b96:	e7f4      	b.n	8007b82 <_calloc_r+0x12>

08007b98 <__ascii_mbtowc>:
 8007b98:	b082      	sub	sp, #8
 8007b9a:	b901      	cbnz	r1, 8007b9e <__ascii_mbtowc+0x6>
 8007b9c:	a901      	add	r1, sp, #4
 8007b9e:	b142      	cbz	r2, 8007bb2 <__ascii_mbtowc+0x1a>
 8007ba0:	b14b      	cbz	r3, 8007bb6 <__ascii_mbtowc+0x1e>
 8007ba2:	7813      	ldrb	r3, [r2, #0]
 8007ba4:	600b      	str	r3, [r1, #0]
 8007ba6:	7812      	ldrb	r2, [r2, #0]
 8007ba8:	1e10      	subs	r0, r2, #0
 8007baa:	bf18      	it	ne
 8007bac:	2001      	movne	r0, #1
 8007bae:	b002      	add	sp, #8
 8007bb0:	4770      	bx	lr
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	e7fb      	b.n	8007bae <__ascii_mbtowc+0x16>
 8007bb6:	f06f 0001 	mvn.w	r0, #1
 8007bba:	e7f8      	b.n	8007bae <__ascii_mbtowc+0x16>

08007bbc <__ascii_wctomb>:
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	4608      	mov	r0, r1
 8007bc0:	b141      	cbz	r1, 8007bd4 <__ascii_wctomb+0x18>
 8007bc2:	2aff      	cmp	r2, #255	@ 0xff
 8007bc4:	d904      	bls.n	8007bd0 <__ascii_wctomb+0x14>
 8007bc6:	228a      	movs	r2, #138	@ 0x8a
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	f04f 30ff 	mov.w	r0, #4294967295
 8007bce:	4770      	bx	lr
 8007bd0:	700a      	strb	r2, [r1, #0]
 8007bd2:	2001      	movs	r0, #1
 8007bd4:	4770      	bx	lr
	...

08007bd8 <fiprintf>:
 8007bd8:	b40e      	push	{r1, r2, r3}
 8007bda:	b503      	push	{r0, r1, lr}
 8007bdc:	4601      	mov	r1, r0
 8007bde:	ab03      	add	r3, sp, #12
 8007be0:	4805      	ldr	r0, [pc, #20]	@ (8007bf8 <fiprintf+0x20>)
 8007be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be6:	6800      	ldr	r0, [r0, #0]
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	f7ff fd3d 	bl	8007668 <_vfiprintf_r>
 8007bee:	b002      	add	sp, #8
 8007bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bf4:	b003      	add	sp, #12
 8007bf6:	4770      	bx	lr
 8007bf8:	2000003c 	.word	0x2000003c

08007bfc <abort>:
 8007bfc:	b508      	push	{r3, lr}
 8007bfe:	2006      	movs	r0, #6
 8007c00:	f000 f82c 	bl	8007c5c <raise>
 8007c04:	2001      	movs	r0, #1
 8007c06:	f7f9 fc7a 	bl	80014fe <_exit>

08007c0a <_raise_r>:
 8007c0a:	291f      	cmp	r1, #31
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	4605      	mov	r5, r0
 8007c10:	460c      	mov	r4, r1
 8007c12:	d904      	bls.n	8007c1e <_raise_r+0x14>
 8007c14:	2316      	movs	r3, #22
 8007c16:	6003      	str	r3, [r0, #0]
 8007c18:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1c:	bd38      	pop	{r3, r4, r5, pc}
 8007c1e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007c20:	b112      	cbz	r2, 8007c28 <_raise_r+0x1e>
 8007c22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c26:	b94b      	cbnz	r3, 8007c3c <_raise_r+0x32>
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 f831 	bl	8007c90 <_getpid_r>
 8007c2e:	4622      	mov	r2, r4
 8007c30:	4601      	mov	r1, r0
 8007c32:	4628      	mov	r0, r5
 8007c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c38:	f000 b818 	b.w	8007c6c <_kill_r>
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d00a      	beq.n	8007c56 <_raise_r+0x4c>
 8007c40:	1c59      	adds	r1, r3, #1
 8007c42:	d103      	bne.n	8007c4c <_raise_r+0x42>
 8007c44:	2316      	movs	r3, #22
 8007c46:	6003      	str	r3, [r0, #0]
 8007c48:	2001      	movs	r0, #1
 8007c4a:	e7e7      	b.n	8007c1c <_raise_r+0x12>
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007c52:	4620      	mov	r0, r4
 8007c54:	4798      	blx	r3
 8007c56:	2000      	movs	r0, #0
 8007c58:	e7e0      	b.n	8007c1c <_raise_r+0x12>
	...

08007c5c <raise>:
 8007c5c:	4b02      	ldr	r3, [pc, #8]	@ (8007c68 <raise+0xc>)
 8007c5e:	4601      	mov	r1, r0
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	f7ff bfd2 	b.w	8007c0a <_raise_r>
 8007c66:	bf00      	nop
 8007c68:	2000003c 	.word	0x2000003c

08007c6c <_kill_r>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	4d07      	ldr	r5, [pc, #28]	@ (8007c8c <_kill_r+0x20>)
 8007c70:	2300      	movs	r3, #0
 8007c72:	4604      	mov	r4, r0
 8007c74:	4608      	mov	r0, r1
 8007c76:	4611      	mov	r1, r2
 8007c78:	602b      	str	r3, [r5, #0]
 8007c7a:	f7f9 fc30 	bl	80014de <_kill>
 8007c7e:	1c43      	adds	r3, r0, #1
 8007c80:	d102      	bne.n	8007c88 <_kill_r+0x1c>
 8007c82:	682b      	ldr	r3, [r5, #0]
 8007c84:	b103      	cbz	r3, 8007c88 <_kill_r+0x1c>
 8007c86:	6023      	str	r3, [r4, #0]
 8007c88:	bd38      	pop	{r3, r4, r5, pc}
 8007c8a:	bf00      	nop
 8007c8c:	200004e8 	.word	0x200004e8

08007c90 <_getpid_r>:
 8007c90:	f7f9 bc1d 	b.w	80014ce <_getpid>

08007c94 <_init>:
 8007c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c96:	bf00      	nop
 8007c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9a:	bc08      	pop	{r3}
 8007c9c:	469e      	mov	lr, r3
 8007c9e:	4770      	bx	lr

08007ca0 <_fini>:
 8007ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca2:	bf00      	nop
 8007ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ca6:	bc08      	pop	{r3}
 8007ca8:	469e      	mov	lr, r3
 8007caa:	4770      	bx	lr
