
SeniorProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d4  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003710  08003710  00004710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003808  08003808  00004808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003810  08003810  00004810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08003814  08003814  00004814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000028  20000008  08003818  00005008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c4  20000030  08003840  00005030  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200000f4  08003840  000050f4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00005030  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e712  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e9f  00000000  00000000  00013772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001178  00000000  00000000  00015618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d43  00000000  00000000  00016790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002151b  00000000  00000000  000174d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e814  00000000  00000000  000389ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d68c9  00000000  00000000  00047202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0011dacb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004888  00000000  00000000  0011db10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  00122398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000030 	.word	0x20000030
 8000158:	00000000 	.word	0x00000000
 800015c:	080036f8 	.word	0x080036f8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000034 	.word	0x20000034
 8000178:	080036f8 	.word	0x080036f8

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b988 	b.w	80004a4 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	468e      	mov	lr, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d962      	bls.n	8000288 <__udivmoddi4+0xdc>
 80001c2:	fab2 f682 	clz	r6, r2
 80001c6:	b14e      	cbz	r6, 80001dc <__udivmoddi4+0x30>
 80001c8:	f1c6 0320 	rsb	r3, r6, #32
 80001cc:	fa01 f806 	lsl.w	r8, r1, r6
 80001d0:	fa20 f303 	lsr.w	r3, r0, r3
 80001d4:	40b7      	lsls	r7, r6
 80001d6:	ea43 0808 	orr.w	r8, r3, r8
 80001da:	40b4      	lsls	r4, r6
 80001dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001e0:	fa1f fc87 	uxth.w	ip, r7
 80001e4:	fbb8 f1fe 	udiv	r1, r8, lr
 80001e8:	0c23      	lsrs	r3, r4, #16
 80001ea:	fb0e 8811 	mls	r8, lr, r1, r8
 80001ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f2:	fb01 f20c 	mul.w	r2, r1, ip
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d909      	bls.n	800020e <__udivmoddi4+0x62>
 80001fa:	18fb      	adds	r3, r7, r3
 80001fc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000200:	f080 80ea 	bcs.w	80003d8 <__udivmoddi4+0x22c>
 8000204:	429a      	cmp	r2, r3
 8000206:	f240 80e7 	bls.w	80003d8 <__udivmoddi4+0x22c>
 800020a:	3902      	subs	r1, #2
 800020c:	443b      	add	r3, r7
 800020e:	1a9a      	subs	r2, r3, r2
 8000210:	b2a3      	uxth	r3, r4
 8000212:	fbb2 f0fe 	udiv	r0, r2, lr
 8000216:	fb0e 2210 	mls	r2, lr, r0, r2
 800021a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800021e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000222:	459c      	cmp	ip, r3
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	18fb      	adds	r3, r7, r3
 8000228:	f100 32ff 	add.w	r2, r0, #4294967295
 800022c:	f080 80d6 	bcs.w	80003dc <__udivmoddi4+0x230>
 8000230:	459c      	cmp	ip, r3
 8000232:	f240 80d3 	bls.w	80003dc <__udivmoddi4+0x230>
 8000236:	443b      	add	r3, r7
 8000238:	3802      	subs	r0, #2
 800023a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023e:	eba3 030c 	sub.w	r3, r3, ip
 8000242:	2100      	movs	r1, #0
 8000244:	b11d      	cbz	r5, 800024e <__udivmoddi4+0xa2>
 8000246:	40f3      	lsrs	r3, r6
 8000248:	2200      	movs	r2, #0
 800024a:	e9c5 3200 	strd	r3, r2, [r5]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d905      	bls.n	8000262 <__udivmoddi4+0xb6>
 8000256:	b10d      	cbz	r5, 800025c <__udivmoddi4+0xb0>
 8000258:	e9c5 0100 	strd	r0, r1, [r5]
 800025c:	2100      	movs	r1, #0
 800025e:	4608      	mov	r0, r1
 8000260:	e7f5      	b.n	800024e <__udivmoddi4+0xa2>
 8000262:	fab3 f183 	clz	r1, r3
 8000266:	2900      	cmp	r1, #0
 8000268:	d146      	bne.n	80002f8 <__udivmoddi4+0x14c>
 800026a:	4573      	cmp	r3, lr
 800026c:	d302      	bcc.n	8000274 <__udivmoddi4+0xc8>
 800026e:	4282      	cmp	r2, r0
 8000270:	f200 8105 	bhi.w	800047e <__udivmoddi4+0x2d2>
 8000274:	1a84      	subs	r4, r0, r2
 8000276:	eb6e 0203 	sbc.w	r2, lr, r3
 800027a:	2001      	movs	r0, #1
 800027c:	4690      	mov	r8, r2
 800027e:	2d00      	cmp	r5, #0
 8000280:	d0e5      	beq.n	800024e <__udivmoddi4+0xa2>
 8000282:	e9c5 4800 	strd	r4, r8, [r5]
 8000286:	e7e2      	b.n	800024e <__udivmoddi4+0xa2>
 8000288:	2a00      	cmp	r2, #0
 800028a:	f000 8090 	beq.w	80003ae <__udivmoddi4+0x202>
 800028e:	fab2 f682 	clz	r6, r2
 8000292:	2e00      	cmp	r6, #0
 8000294:	f040 80a4 	bne.w	80003e0 <__udivmoddi4+0x234>
 8000298:	1a8a      	subs	r2, r1, r2
 800029a:	0c03      	lsrs	r3, r0, #16
 800029c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a0:	b280      	uxth	r0, r0
 80002a2:	b2bc      	uxth	r4, r7
 80002a4:	2101      	movs	r1, #1
 80002a6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002aa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb04 f20c 	mul.w	r2, r4, ip
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d907      	bls.n	80002ca <__udivmoddi4+0x11e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002c0:	d202      	bcs.n	80002c8 <__udivmoddi4+0x11c>
 80002c2:	429a      	cmp	r2, r3
 80002c4:	f200 80e0 	bhi.w	8000488 <__udivmoddi4+0x2dc>
 80002c8:	46c4      	mov	ip, r8
 80002ca:	1a9b      	subs	r3, r3, r2
 80002cc:	fbb3 f2fe 	udiv	r2, r3, lr
 80002d0:	fb0e 3312 	mls	r3, lr, r2, r3
 80002d4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002d8:	fb02 f404 	mul.w	r4, r2, r4
 80002dc:	429c      	cmp	r4, r3
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0x144>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f102 30ff 	add.w	r0, r2, #4294967295
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x142>
 80002e8:	429c      	cmp	r4, r3
 80002ea:	f200 80ca 	bhi.w	8000482 <__udivmoddi4+0x2d6>
 80002ee:	4602      	mov	r2, r0
 80002f0:	1b1b      	subs	r3, r3, r4
 80002f2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002f6:	e7a5      	b.n	8000244 <__udivmoddi4+0x98>
 80002f8:	f1c1 0620 	rsb	r6, r1, #32
 80002fc:	408b      	lsls	r3, r1
 80002fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000302:	431f      	orrs	r7, r3
 8000304:	fa0e f401 	lsl.w	r4, lr, r1
 8000308:	fa20 f306 	lsr.w	r3, r0, r6
 800030c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000310:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000314:	4323      	orrs	r3, r4
 8000316:	fa00 f801 	lsl.w	r8, r0, r1
 800031a:	fa1f fc87 	uxth.w	ip, r7
 800031e:	fbbe f0f9 	udiv	r0, lr, r9
 8000322:	0c1c      	lsrs	r4, r3, #16
 8000324:	fb09 ee10 	mls	lr, r9, r0, lr
 8000328:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800032c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000330:	45a6      	cmp	lr, r4
 8000332:	fa02 f201 	lsl.w	r2, r2, r1
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x1a0>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 3aff 	add.w	sl, r0, #4294967295
 800033e:	f080 809c 	bcs.w	800047a <__udivmoddi4+0x2ce>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8099 	bls.w	800047a <__udivmoddi4+0x2ce>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	eba4 040e 	sub.w	r4, r4, lr
 8000350:	fa1f fe83 	uxth.w	lr, r3
 8000354:	fbb4 f3f9 	udiv	r3, r4, r9
 8000358:	fb09 4413 	mls	r4, r9, r3, r4
 800035c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000360:	fb03 fc0c 	mul.w	ip, r3, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x1ce>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f103 3eff 	add.w	lr, r3, #4294967295
 800036e:	f080 8082 	bcs.w	8000476 <__udivmoddi4+0x2ca>
 8000372:	45a4      	cmp	ip, r4
 8000374:	d97f      	bls.n	8000476 <__udivmoddi4+0x2ca>
 8000376:	3b02      	subs	r3, #2
 8000378:	443c      	add	r4, r7
 800037a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800037e:	eba4 040c 	sub.w	r4, r4, ip
 8000382:	fba0 ec02 	umull	lr, ip, r0, r2
 8000386:	4564      	cmp	r4, ip
 8000388:	4673      	mov	r3, lr
 800038a:	46e1      	mov	r9, ip
 800038c:	d362      	bcc.n	8000454 <__udivmoddi4+0x2a8>
 800038e:	d05f      	beq.n	8000450 <__udivmoddi4+0x2a4>
 8000390:	b15d      	cbz	r5, 80003aa <__udivmoddi4+0x1fe>
 8000392:	ebb8 0203 	subs.w	r2, r8, r3
 8000396:	eb64 0409 	sbc.w	r4, r4, r9
 800039a:	fa04 f606 	lsl.w	r6, r4, r6
 800039e:	fa22 f301 	lsr.w	r3, r2, r1
 80003a2:	431e      	orrs	r6, r3
 80003a4:	40cc      	lsrs	r4, r1
 80003a6:	e9c5 6400 	strd	r6, r4, [r5]
 80003aa:	2100      	movs	r1, #0
 80003ac:	e74f      	b.n	800024e <__udivmoddi4+0xa2>
 80003ae:	fbb1 fcf2 	udiv	ip, r1, r2
 80003b2:	0c01      	lsrs	r1, r0, #16
 80003b4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003b8:	b280      	uxth	r0, r0
 80003ba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003be:	463b      	mov	r3, r7
 80003c0:	4638      	mov	r0, r7
 80003c2:	463c      	mov	r4, r7
 80003c4:	46b8      	mov	r8, r7
 80003c6:	46be      	mov	lr, r7
 80003c8:	2620      	movs	r6, #32
 80003ca:	fbb1 f1f7 	udiv	r1, r1, r7
 80003ce:	eba2 0208 	sub.w	r2, r2, r8
 80003d2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003d6:	e766      	b.n	80002a6 <__udivmoddi4+0xfa>
 80003d8:	4601      	mov	r1, r0
 80003da:	e718      	b.n	800020e <__udivmoddi4+0x62>
 80003dc:	4610      	mov	r0, r2
 80003de:	e72c      	b.n	800023a <__udivmoddi4+0x8e>
 80003e0:	f1c6 0220 	rsb	r2, r6, #32
 80003e4:	fa2e f302 	lsr.w	r3, lr, r2
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	40b1      	lsls	r1, r6
 80003ec:	fa20 f202 	lsr.w	r2, r0, r2
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	430a      	orrs	r2, r1
 80003f6:	fbb3 f8fe 	udiv	r8, r3, lr
 80003fa:	b2bc      	uxth	r4, r7
 80003fc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000400:	0c11      	lsrs	r1, r2, #16
 8000402:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000406:	fb08 f904 	mul.w	r9, r8, r4
 800040a:	40b0      	lsls	r0, r6
 800040c:	4589      	cmp	r9, r1
 800040e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000412:	b280      	uxth	r0, r0
 8000414:	d93e      	bls.n	8000494 <__udivmoddi4+0x2e8>
 8000416:	1879      	adds	r1, r7, r1
 8000418:	f108 3cff 	add.w	ip, r8, #4294967295
 800041c:	d201      	bcs.n	8000422 <__udivmoddi4+0x276>
 800041e:	4589      	cmp	r9, r1
 8000420:	d81f      	bhi.n	8000462 <__udivmoddi4+0x2b6>
 8000422:	eba1 0109 	sub.w	r1, r1, r9
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fb09 f804 	mul.w	r8, r9, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	b292      	uxth	r2, r2
 8000434:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000438:	4542      	cmp	r2, r8
 800043a:	d229      	bcs.n	8000490 <__udivmoddi4+0x2e4>
 800043c:	18ba      	adds	r2, r7, r2
 800043e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000442:	d2c4      	bcs.n	80003ce <__udivmoddi4+0x222>
 8000444:	4542      	cmp	r2, r8
 8000446:	d2c2      	bcs.n	80003ce <__udivmoddi4+0x222>
 8000448:	f1a9 0102 	sub.w	r1, r9, #2
 800044c:	443a      	add	r2, r7
 800044e:	e7be      	b.n	80003ce <__udivmoddi4+0x222>
 8000450:	45f0      	cmp	r8, lr
 8000452:	d29d      	bcs.n	8000390 <__udivmoddi4+0x1e4>
 8000454:	ebbe 0302 	subs.w	r3, lr, r2
 8000458:	eb6c 0c07 	sbc.w	ip, ip, r7
 800045c:	3801      	subs	r0, #1
 800045e:	46e1      	mov	r9, ip
 8000460:	e796      	b.n	8000390 <__udivmoddi4+0x1e4>
 8000462:	eba7 0909 	sub.w	r9, r7, r9
 8000466:	4449      	add	r1, r9
 8000468:	f1a8 0c02 	sub.w	ip, r8, #2
 800046c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000470:	fb09 f804 	mul.w	r8, r9, r4
 8000474:	e7db      	b.n	800042e <__udivmoddi4+0x282>
 8000476:	4673      	mov	r3, lr
 8000478:	e77f      	b.n	800037a <__udivmoddi4+0x1ce>
 800047a:	4650      	mov	r0, sl
 800047c:	e766      	b.n	800034c <__udivmoddi4+0x1a0>
 800047e:	4608      	mov	r0, r1
 8000480:	e6fd      	b.n	800027e <__udivmoddi4+0xd2>
 8000482:	443b      	add	r3, r7
 8000484:	3a02      	subs	r2, #2
 8000486:	e733      	b.n	80002f0 <__udivmoddi4+0x144>
 8000488:	f1ac 0c02 	sub.w	ip, ip, #2
 800048c:	443b      	add	r3, r7
 800048e:	e71c      	b.n	80002ca <__udivmoddi4+0x11e>
 8000490:	4649      	mov	r1, r9
 8000492:	e79c      	b.n	80003ce <__udivmoddi4+0x222>
 8000494:	eba1 0109 	sub.w	r1, r1, r9
 8000498:	46c4      	mov	ip, r8
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	e7c4      	b.n	800042e <__udivmoddi4+0x282>

080004a4 <__aeabi_idiv0>:
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop

080004a8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4313      	orrs	r3, r2
 80004be:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4013      	ands	r3, r2
 80004ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004cc:	68fb      	ldr	r3, [r7, #12]
}
 80004ce:	bf00      	nop
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
	...

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fb0e 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f838 	bl	8000558 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e8:	f000 f88e 	bl	8000608 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f8a9 	bl	8000642 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 f9c9 	bl	8000888 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80004f6:	2001      	movs	r0, #1
 80004f8:	f000 f9c6 	bl	8000888 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80004fc:	2002      	movs	r0, #2
 80004fe:	f000 f9c3 	bl	8000888 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000502:	2101      	movs	r1, #1
 8000504:	2000      	movs	r0, #0
 8000506:	f000 f9f9 	bl	80008fc <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800050a:	2101      	movs	r1, #1
 800050c:	2001      	movs	r0, #1
 800050e:	f000 f9f5 	bl	80008fc <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000512:	2101      	movs	r1, #1
 8000514:	2002      	movs	r0, #2
 8000516:	f000 f9f1 	bl	80008fc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800051a:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <main+0x78>)
 800051c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000520:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000522:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <main+0x78>)
 8000524:	2200      	movs	r2, #0
 8000526:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000528:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <main+0x78>)
 800052a:	2200      	movs	r2, #0
 800052c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800052e:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <main+0x78>)
 8000530:	2200      	movs	r2, #0
 8000532:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000534:	4b07      	ldr	r3, [pc, #28]	@ (8000554 <main+0x78>)
 8000536:	2200      	movs	r2, #0
 8000538:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800053a:	4906      	ldr	r1, [pc, #24]	@ (8000554 <main+0x78>)
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fa4d 	bl	80009dc <BSP_COM_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d002      	beq.n	800054e <main+0x72>
  {
    Error_Handler();
 8000548:	f000 f8a3 	bl	8000692 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	e7fd      	b.n	800054e <main+0x72>
 8000552:	bf00      	nop
 8000554:	2000004c 	.word	0x2000004c

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b09a      	sub	sp, #104	@ 0x68
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2248      	movs	r2, #72	@ 0x48
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 f899 	bl	800369e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]
 800057a:	615a      	str	r2, [r3, #20]
 800057c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057e:	4b21      	ldr	r3, [pc, #132]	@ (8000604 <SystemClock_Config+0xac>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000586:	4a1f      	ldr	r2, [pc, #124]	@ (8000604 <SystemClock_Config+0xac>)
 8000588:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800058c:	6013      	str	r3, [r2, #0]
 800058e:	4b1d      	ldr	r3, [pc, #116]	@ (8000604 <SystemClock_Config+0xac>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800059a:	2322      	movs	r3, #34	@ 0x22
 800059c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	2340      	movs	r3, #64	@ 0x40
 80005aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005ac:	2300      	movs	r3, #0
 80005ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80005b0:	23a0      	movs	r3, #160	@ 0xa0
 80005b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 f975 	bl	80018ac <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005c8:	f000 f863 	bl	8000692 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80005cc:	236f      	movs	r3, #111	@ 0x6f
 80005ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2101      	movs	r1, #1
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 fcd1 	bl	8001f94 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005f8:	f000 f84b 	bl	8000692 <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3768      	adds	r7, #104	@ 0x68
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	58000400 	.word	0x58000400

08000608 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2250      	movs	r2, #80	@ 0x50
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f003 f842 	bl	800369e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800061a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800061e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000620:	2300      	movs	r3, #0
 8000622:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000624:	2300      	movs	r3, #0
 8000626:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000628:	463b      	mov	r3, r7
 800062a:	4618      	mov	r0, r3
 800062c:	f002 f8ef 	bl	800280e <HAL_RCCEx_PeriphCLKConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000636:	f000 f82c 	bl	8000692 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	@ 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b086      	sub	sp, #24
 8000646:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000656:	2004      	movs	r0, #4
 8000658:	f7ff ff26 	bl	80004a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065c:	2001      	movs	r0, #1
 800065e:	f7ff ff23 	bl	80004a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	2002      	movs	r0, #2
 8000664:	f7ff ff20 	bl	80004a8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8000668:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800066c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066e:	2302      	movs	r3, #2
 8000670:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800067a:	230a      	movs	r3, #10
 800067c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4619      	mov	r1, r3
 8000682:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000686:	f000 fbf5 	bl	8000e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800068a:	bf00      	nop
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000696:	b672      	cpsid	i
}
 8000698:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800069a:	bf00      	nop
 800069c:	e7fd      	b.n	800069a <Error_Handler+0x8>

0800069e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <NMI_Handler+0x4>

080006b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <HardFault_Handler+0x4>

080006bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <MemManage_Handler+0x4>

080006c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <BusFault_Handler+0x4>

080006cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <UsageFault_Handler+0x4>

080006d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000702:	f000 fa57 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <SystemInit+0x98>)
 8000712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000716:	4a23      	ldr	r2, [pc, #140]	@ (80007a4 <SystemInit+0x98>)
 8000718:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800071c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800072a:	f043 0301 	orr.w	r3, r3, #1
 800072e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000734:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000738:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800073a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000744:	4b18      	ldr	r3, [pc, #96]	@ (80007a8 <SystemInit+0x9c>)
 8000746:	4013      	ands	r3, r2
 8000748:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800074a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800074e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000752:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000756:	f023 0305 	bic.w	r3, r3, #5
 800075a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800075e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000762:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000766:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800076a:	f023 0301 	bic.w	r3, r3, #1
 800076e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000776:	4a0d      	ldr	r2, [pc, #52]	@ (80007ac <SystemInit+0xa0>)
 8000778:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800077a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800077e:	4a0b      	ldr	r2, [pc, #44]	@ (80007ac <SystemInit+0xa0>)
 8000780:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800078c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000790:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000792:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000ed00 	.word	0xe000ed00
 80007a8:	faf6fefb 	.word	0xfaf6fefb
 80007ac:	22041000 	.word	0x22041000

080007b0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80007b0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b4:	3304      	adds	r3, #4

080007b6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80007ba:	d3f9      	bcc.n	80007b0 <CopyDataInit>
  bx lr
 80007bc:	4770      	bx	lr

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80007be:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80007c0:	3004      	adds	r0, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80007c2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>
  bx lr
 80007c6:	4770      	bx	lr

080007c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007c8:	480c      	ldr	r0, [pc, #48]	@ (80007fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007cc:	f7ff ff9e 	bl	800070c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80007d0:	480b      	ldr	r0, [pc, #44]	@ (8000800 <LoopForever+0x6>)
 80007d2:	490c      	ldr	r1, [pc, #48]	@ (8000804 <LoopForever+0xa>)
 80007d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000808 <LoopForever+0xe>)
 80007d6:	2300      	movs	r3, #0
 80007d8:	f7ff ffed 	bl	80007b6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80007dc:	480b      	ldr	r0, [pc, #44]	@ (800080c <LoopForever+0x12>)
 80007de:	490c      	ldr	r1, [pc, #48]	@ (8000810 <LoopForever+0x16>)
 80007e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000814 <LoopForever+0x1a>)
 80007e2:	2300      	movs	r3, #0
 80007e4:	f7ff ffe7 	bl	80007b6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80007e8:	480b      	ldr	r0, [pc, #44]	@ (8000818 <LoopForever+0x1e>)
 80007ea:	490c      	ldr	r1, [pc, #48]	@ (800081c <LoopForever+0x22>)
 80007ec:	2300      	movs	r3, #0
 80007ee:	f7ff ffe8 	bl	80007c2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007f2:	f002 ff5d 	bl	80036b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80007f6:	f7ff fe71 	bl	80004dc <main>

080007fa <LoopForever>:

LoopForever:
  b LoopForever
 80007fa:	e7fe      	b.n	80007fa <LoopForever>
  ldr   r0, =_estack
 80007fc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000800:	20000008 	.word	0x20000008
 8000804:	20000030 	.word	0x20000030
 8000808:	08003818 	.word	0x08003818
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800080c:	20030000 	.word	0x20030000
 8000810:	20030000 	.word	0x20030000
 8000814:	08003840 	.word	0x08003840
  INIT_BSS _sbss, _ebss
 8000818:	20000030 	.word	0x20000030
 800081c:	200000f4 	.word	0x200000f4

08000820 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_IRQHandler>

08000822 <LL_AHB2_GRP1_EnableClock>:
{
 8000822:	b480      	push	{r7}
 8000824:	b085      	sub	sp, #20
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800082a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800082e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000830:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4313      	orrs	r3, r2
 8000838:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800083a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800083e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4013      	ands	r3, r2
 8000844:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000846:	68fb      	ldr	r3, [r7, #12]
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800085c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000860:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000862:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4313      	orrs	r3, r2
 800086a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800086c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000870:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4013      	ands	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000878:	68fb      	ldr	r3, [r7, #12]
}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80008a2:	2002      	movs	r0, #2
 80008a4:	f7ff ffbd 	bl	8000822 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4a12      	ldr	r2, [pc, #72]	@ (80008f4 <BSP_LED_Init+0x6c>)
 80008ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008b0:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <BSP_LED_Init+0x70>)
 80008c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c6:	f107 020c 	add.w	r2, r7, #12
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fad1 	bl	8000e74 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	4a08      	ldr	r2, [pc, #32]	@ (80008f8 <BSP_LED_Init+0x70>)
 80008d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	4a05      	ldr	r2, [pc, #20]	@ (80008f4 <BSP_LED_Init+0x6c>)
 80008de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008e2:	2200      	movs	r2, #0
 80008e4:	4619      	mov	r1, r3
 80008e6:	f000 fc35 	bl	8001154 <HAL_GPIO_WritePin>
}
 80008ea:	bf00      	nop
 80008ec:	3720      	adds	r7, #32
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	080037dc 	.word	0x080037dc
 80008f8:	2000000c 	.word	0x2000000c

080008fc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	460a      	mov	r2, r1
 8000906:	71fb      	strb	r3, [r7, #7]
 8000908:	4613      	mov	r3, r2
 800090a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d103      	bne.n	800092a <BSP_PB_Init+0x2e>
 8000922:	2004      	movs	r0, #4
 8000924:	f7ff ff7d 	bl	8000822 <LL_AHB2_GRP1_EnableClock>
 8000928:	e00c      	b.n	8000944 <BSP_PB_Init+0x48>
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d103      	bne.n	8000938 <BSP_PB_Init+0x3c>
 8000930:	2008      	movs	r0, #8
 8000932:	f7ff ff76 	bl	8000822 <LL_AHB2_GRP1_EnableClock>
 8000936:	e005      	b.n	8000944 <BSP_PB_Init+0x48>
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b02      	cmp	r3, #2
 800093c:	d102      	bne.n	8000944 <BSP_PB_Init+0x48>
 800093e:	2008      	movs	r0, #8
 8000940:	f7ff ff6f 	bl	8000822 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d117      	bne.n	800097a <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4a20      	ldr	r2, [pc, #128]	@ (80009d0 <BSP_PB_Init+0xd4>)
 800094e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000952:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8000958:	2301      	movs	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095c:	2302      	movs	r3, #2
 800095e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	4a1c      	ldr	r2, [pc, #112]	@ (80009d4 <BSP_PB_Init+0xd8>)
 8000964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000968:	f107 020c 	add.w	r2, r7, #12
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f000 fa80 	bl	8000e74 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8000974:	2001      	movs	r0, #1
 8000976:	f000 f949 	bl	8000c0c <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800097a:	79bb      	ldrb	r3, [r7, #6]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d123      	bne.n	80009c8 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	4a13      	ldr	r2, [pc, #76]	@ (80009d0 <BSP_PB_Init+0xd4>)
 8000984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000988:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800098a:	2301      	movs	r3, #1
 800098c:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 800098e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000992:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	4a0f      	ldr	r2, [pc, #60]	@ (80009d4 <BSP_PB_Init+0xd8>)
 8000998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099c:	f107 020c 	add.w	r2, r7, #12
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 fa66 	bl	8000e74 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4a0b      	ldr	r2, [pc, #44]	@ (80009d8 <BSP_PB_Init+0xdc>)
 80009ac:	5cd3      	ldrb	r3, [r2, r3]
 80009ae:	b25b      	sxtb	r3, r3
 80009b0:	2200      	movs	r2, #0
 80009b2:	210f      	movs	r1, #15
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fa28 	bl	8000e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	4a06      	ldr	r2, [pc, #24]	@ (80009d8 <BSP_PB_Init+0xdc>)
 80009be:	5cd3      	ldrb	r3, [r2, r3]
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fa3b 	bl	8000e3e <HAL_NVIC_EnableIRQ>
  }
}
 80009c8:	bf00      	nop
 80009ca:	3720      	adds	r7, #32
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	080037e4 	.word	0x080037e4
 80009d4:	20000018 	.word	0x20000018
 80009d8:	080037ec 	.word	0x080037ec

080009dc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d903      	bls.n	80009fa <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80009f2:	f06f 0301 	mvn.w	r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	e018      	b.n	8000a2c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2294      	movs	r2, #148	@ 0x94
 80009fe:	fb02 f303 	mul.w	r3, r2, r3
 8000a02:	4a0d      	ldr	r2, [pc, #52]	@ (8000a38 <BSP_COM_Init+0x5c>)
 8000a04:	4413      	add	r3, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f84a 	bl	8000aa0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2294      	movs	r2, #148	@ 0x94
 8000a10:	fb02 f303 	mul.w	r3, r2, r3
 8000a14:	4a08      	ldr	r2, [pc, #32]	@ (8000a38 <BSP_COM_Init+0x5c>)
 8000a16:	4413      	add	r3, r2
 8000a18:	6839      	ldr	r1, [r7, #0]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f80e 	bl	8000a3c <MX_LPUART1_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d002      	beq.n	8000a2c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000a26:	f06f 0303 	mvn.w	r3, #3
 8000a2a:	e000      	b.n	8000a2e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000005c 	.word	0x2000005c

08000a3c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <MX_LPUART1_Init+0x60>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	220c      	movs	r2, #12
 8000a5a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	895b      	ldrh	r3, [r3, #10]
 8000a60:	461a      	mov	r2, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685a      	ldr	r2, [r3, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	891b      	ldrh	r3, [r3, #8]
 8000a72:	461a      	mov	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	899b      	ldrh	r3, [r3, #12]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a88:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f002 f966 	bl	8002d5c <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000024 	.word	0x20000024

08000aa0 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000aa8:	2002      	movs	r0, #2
 8000aaa:	f7ff feba 	bl	8000822 <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff feb7 	bl	8000822 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000ab4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000ab8:	f7ff fecc 	bl	8000854 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000abc:	2340      	movs	r3, #64	@ 0x40
 8000abe:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000acc:	2307      	movs	r3, #7
 8000ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4809      	ldr	r0, [pc, #36]	@ (8000afc <COM1_MspInit+0x5c>)
 8000ad8:	f000 f9cc 	bl	8000e74 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000adc:	2380      	movs	r3, #128	@ 0x80
 8000ade:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	4619      	mov	r1, r3
 8000aee:	4803      	ldr	r0, [pc, #12]	@ (8000afc <COM1_MspInit+0x5c>)
 8000af0:	f000 f9c0 	bl	8000e74 <HAL_GPIO_Init>
}
 8000af4:	bf00      	nop
 8000af6:	3720      	adds	r7, #32
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	48000400 	.word	0x48000400

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <HAL_Init+0x3c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b3c <HAL_Init+0x3c>)
 8000b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b16:	2003      	movs	r0, #3
 8000b18:	f000 f96c 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f000 f80f 	bl	8000b40 <HAL_InitTick>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d002      	beq.n	8000b2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	71fb      	strb	r3, [r7, #7]
 8000b2c:	e001      	b.n	8000b32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b2e:	f7ff fdb6 	bl	800069e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b32:	79fb      	ldrb	r3, [r7, #7]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	58004000 	.word	0x58004000

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000b4c:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <HAL_InitTick+0x6c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d024      	beq.n	8000b9e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b54:	f001 fbca 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <HAL_InitTick+0x6c>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b64:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 f974 	bl	8000e5a <HAL_SYSTICK_Config>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10f      	bne.n	8000b98 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b0f      	cmp	r3, #15
 8000b7c:	d809      	bhi.n	8000b92 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	f04f 30ff 	mov.w	r0, #4294967295
 8000b86:	f000 f940 	bl	8000e0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b8a:	4a09      	ldr	r2, [pc, #36]	@ (8000bb0 <HAL_InitTick+0x70>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	e007      	b.n	8000ba2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	e004      	b.n	8000ba2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	73fb      	strb	r3, [r7, #15]
 8000b9c:	e001      	b.n	8000ba2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000002c 	.word	0x2000002c
 8000bb0:	20000028 	.word	0x20000028

08000bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_IncTick+0x20>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_IncTick+0x24>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a04      	ldr	r2, [pc, #16]	@ (8000bd8 <HAL_IncTick+0x24>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	2000002c 	.word	0x2000002c
 8000bd8:	200000f0 	.word	0x200000f0

08000bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b03      	ldr	r3, [pc, #12]	@ (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	200000f0 	.word	0x200000f0

08000bf4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000bf8:	4b03      	ldr	r3, [pc, #12]	@ (8000c08 <HAL_GetTickPrio+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000028 	.word	0x20000028

08000c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c14:	f7ff ffe2 	bl	8000bdc <HAL_GetTick>
 8000c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c24:	d005      	beq.n	8000c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c26:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <HAL_Delay+0x44>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4413      	add	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c32:	bf00      	nop
 8000c34:	f7ff ffd2 	bl	8000bdc <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d8f7      	bhi.n	8000c34 <HAL_Delay+0x28>
  {
  }
}
 8000c44:	bf00      	nop
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000002c 	.word	0x2000002c

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c86:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	60d3      	str	r3, [r2, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db0b      	blt.n	8000ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	f003 021f 	and.w	r2, r3, #31
 8000cd0:	4907      	ldr	r1, [pc, #28]	@ (8000cf0 <__NVIC_EnableIRQ+0x38>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	2001      	movs	r0, #1
 8000cda:	fa00 f202 	lsl.w	r2, r0, r2
 8000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	@ (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	@ (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	@ 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
         );
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	@ 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dc0:	d301      	bcc.n	8000dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00f      	b.n	8000de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <SysTick_Config+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f7ff ff8e 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <SysTick_Config+0x40>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	@ (8000df0 <SysTick_Config+0x40>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff29 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff40 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff90 	bl	8000d48 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5f 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff33 	bl	8000cb8 <__NVIC_EnableIRQ>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffa4 	bl	8000db0 <SysTick_Config>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b087      	sub	sp, #28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e82:	e14c      	b.n	800111e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	2101      	movs	r1, #1
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	4013      	ands	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 813e 	beq.w	8001118 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d005      	beq.n	8000eb4 <HAL_GPIO_Init+0x40>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d130      	bne.n	8000f16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eea:	2201      	movs	r2, #1
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	091b      	lsrs	r3, r3, #4
 8000f00:	f003 0201 	and.w	r2, r3, #1
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d017      	beq.n	8000f52 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d123      	bne.n	8000fa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	08da      	lsrs	r2, r3, #3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3208      	adds	r2, #8
 8000f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	220f      	movs	r2, #15
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	691a      	ldr	r2, [r3, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3208      	adds	r2, #8
 8000fa0:	6939      	ldr	r1, [r7, #16]
 8000fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0203 	and.w	r2, r3, #3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 8098 	beq.w	8001118 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000fe8:	4a54      	ldr	r2, [pc, #336]	@ (800113c <HAL_GPIO_Init+0x2c8>)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	3302      	adds	r3, #2
 8000ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	220f      	movs	r2, #15
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001012:	d019      	beq.n	8001048 <HAL_GPIO_Init+0x1d4>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a4a      	ldr	r2, [pc, #296]	@ (8001140 <HAL_GPIO_Init+0x2cc>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d013      	beq.n	8001044 <HAL_GPIO_Init+0x1d0>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a49      	ldr	r2, [pc, #292]	@ (8001144 <HAL_GPIO_Init+0x2d0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d00d      	beq.n	8001040 <HAL_GPIO_Init+0x1cc>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a48      	ldr	r2, [pc, #288]	@ (8001148 <HAL_GPIO_Init+0x2d4>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d007      	beq.n	800103c <HAL_GPIO_Init+0x1c8>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a47      	ldr	r2, [pc, #284]	@ (800114c <HAL_GPIO_Init+0x2d8>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d101      	bne.n	8001038 <HAL_GPIO_Init+0x1c4>
 8001034:	2304      	movs	r3, #4
 8001036:	e008      	b.n	800104a <HAL_GPIO_Init+0x1d6>
 8001038:	2307      	movs	r3, #7
 800103a:	e006      	b.n	800104a <HAL_GPIO_Init+0x1d6>
 800103c:	2303      	movs	r3, #3
 800103e:	e004      	b.n	800104a <HAL_GPIO_Init+0x1d6>
 8001040:	2302      	movs	r3, #2
 8001042:	e002      	b.n	800104a <HAL_GPIO_Init+0x1d6>
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <HAL_GPIO_Init+0x1d6>
 8001048:	2300      	movs	r3, #0
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	f002 0203 	and.w	r2, r2, #3
 8001050:	0092      	lsls	r2, r2, #2
 8001052:	4093      	lsls	r3, r2
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800105a:	4938      	ldr	r1, [pc, #224]	@ (800113c <HAL_GPIO_Init+0x2c8>)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3302      	adds	r3, #2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001068:	4b39      	ldr	r3, [pc, #228]	@ (8001150 <HAL_GPIO_Init+0x2dc>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800108c:	4a30      	ldr	r2, [pc, #192]	@ (8001150 <HAL_GPIO_Init+0x2dc>)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001092:	4b2f      	ldr	r3, [pc, #188]	@ (8001150 <HAL_GPIO_Init+0x2dc>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010b6:	4a26      	ldr	r2, [pc, #152]	@ (8001150 <HAL_GPIO_Init+0x2dc>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010bc:	4b24      	ldr	r3, [pc, #144]	@ (8001150 <HAL_GPIO_Init+0x2dc>)
 80010be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001150 <HAL_GPIO_Init+0x2dc>)
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80010ea:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <HAL_GPIO_Init+0x2dc>)
 80010ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001110:	4a0f      	ldr	r2, [pc, #60]	@ (8001150 <HAL_GPIO_Init+0x2dc>)
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3301      	adds	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	fa22 f303 	lsr.w	r3, r2, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	f47f aeab 	bne.w	8000e84 <HAL_GPIO_Init+0x10>
  }
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	371c      	adds	r7, #28
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	40010000 	.word	0x40010000
 8001140:	48000400 	.word	0x48000400
 8001144:	48000800 	.word	0x48000800
 8001148:	48000c00 	.word	0x48000c00
 800114c:	48001000 	.word	0x48001000
 8001150:	58000800 	.word	0x58000800

08001154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
 8001160:	4613      	mov	r3, r2
 8001162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001164:	787b      	ldrb	r3, [r7, #1]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001170:	e002      	b.n	8001178 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001188:	4b05      	ldr	r3, [pc, #20]	@ (80011a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a04      	ldr	r2, [pc, #16]	@ (80011a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800118e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	58000400 	.word	0x58000400

080011a4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80011a8:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <HAL_PWREx_GetVoltageRange+0x18>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	58000400 	.word	0x58000400

080011c0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80011c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80011d2:	d101      	bne.n	80011d8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80011e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001214:	6013      	str	r3, [r2, #0]
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001232:	d101      	bne.n	8001238 <LL_RCC_HSE_IsReady+0x18>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <LL_RCC_HSE_IsReady+0x1a>
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001270:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001274:	6013      	str	r3, [r2, #0]
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800128e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001292:	d101      	bne.n	8001298 <LL_RCC_HSI_IsReady+0x18>
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <LL_RCC_HSI_IsReady+0x1a>
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80012ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	061b      	lsls	r3, r3, #24
 80012ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012be:	4313      	orrs	r3, r2
 80012c0:	604b      	str	r3, [r1, #4]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80012d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80012f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001300:	f023 0301 	bic.w	r3, r3, #1
 8001304:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800131a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b02      	cmp	r3, #2
 8001324:	d101      	bne.n	800132a <LL_RCC_HSI48_IsReady+0x18>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <LL_RCC_HSI48_IsReady+0x1a>
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800133a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800133e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001342:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800135c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001364:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001368:	f023 0301 	bic.w	r3, r3, #1
 800136c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800137e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001386:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80013a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013ac:	f023 0304 	bic.w	r3, r3, #4
 80013b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80013c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d101      	bne.n	80013d6 <LL_RCC_LSE_IsReady+0x18>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <LL_RCC_LSE_IsReady+0x1a>
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80013e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800140c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001410:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800142a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800142e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b02      	cmp	r3, #2
 8001438:	d101      	bne.n	800143e <LL_RCC_LSI1_IsReady+0x18>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <LL_RCC_LSI1_IsReady+0x1a>
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800144e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001456:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001474:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001478:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800147c:	f023 0304 	bic.w	r3, r3, #4
 8001480:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d101      	bne.n	80014a6 <LL_RCC_LSI2_IsReady+0x18>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <LL_RCC_LSI2_IsReady+0x1a>
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80014ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014ce:	4313      	orrs	r3, r2
 80014d0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80014e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6013      	str	r3, [r2, #0]
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	6013      	str	r3, [r2, #0]
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b02      	cmp	r3, #2
 800152c:	d101      	bne.n	8001532 <LL_RCC_MSI_IsReady+0x16>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <LL_RCC_MSI_IsReady+0x18>
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001550:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800156c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001576:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2bb0      	cmp	r3, #176	@ 0xb0
 800157c:	d901      	bls.n	8001582 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800157e:	23b0      	movs	r3, #176	@ 0xb0
 8001580:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001582:	687b      	ldr	r3, [r7, #4]
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001598:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	021b      	lsls	r3, r3, #8
 80015a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015aa:	4313      	orrs	r3, r2
 80015ac:	604b      	str	r3, [r1, #4]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80015c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f023 0203 	bic.w	r2, r3, #3
 80015cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 030c 	and.w	r3, r3, #12
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001602:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800160c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4313      	orrs	r3, r2
 8001614:	608b      	str	r3, [r1, #8]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800162a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800162e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001632:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001636:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4313      	orrs	r3, r2
 800163e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800165a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800165e:	f023 020f 	bic.w	r2, r3, #15
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800166a:	4313      	orrs	r3, r2
 800166c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800168e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4313      	orrs	r3, r2
 8001696:	608b      	str	r3, [r1, #8]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80016ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4313      	orrs	r3, r2
 80016be:	608b      	str	r3, [r1, #8]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80016d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001704:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800171c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001734:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800173e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800175c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001760:	6013      	str	r3, [r2, #0]
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800177e:	d101      	bne.n	8001784 <LL_RCC_PLL_IsReady+0x18>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <LL_RCC_PLL_IsReady+0x1a>
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001794:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	0a1b      	lsrs	r3, r3, #8
 800179c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80017ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80017c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80017de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f003 0303 	and.w	r3, r3, #3
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80017f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001804:	d101      	bne.n	800180a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800181a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800181e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001826:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800182a:	d101      	bne.n	8001830 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001844:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800184c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001850:	d101      	bne.n	8001856 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001870:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001874:	d101      	bne.n	800187a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001894:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001898:	d101      	bne.n	800189e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b08d      	sub	sp, #52	@ 0x34
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e363      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0320 	and.w	r3, r3, #32
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 808d 	beq.w	80019e6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018cc:	f7ff fe89 	bl	80015e2 <LL_RCC_GetSysClkSource>
 80018d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d2:	f7ff ff82 	bl	80017da <LL_RCC_PLL_GetMainSource>
 80018d6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80018d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_RCC_OscConfig+0x3e>
 80018de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e0:	2b0c      	cmp	r3, #12
 80018e2:	d147      	bne.n	8001974 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80018e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d144      	bne.n	8001974 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e347      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80018fa:	f7ff fe34 	bl	8001566 <LL_RCC_MSI_GetRange>
 80018fe:	4603      	mov	r3, r0
 8001900:	429c      	cmp	r4, r3
 8001902:	d914      	bls.n	800192e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001908:	4618      	mov	r0, r3
 800190a:	f000 fd2f 	bl	800236c <RCC_SetFlashLatencyFromMSIRange>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e336      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fe0e 	bl	800153e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fe32 	bl	8001590 <LL_RCC_MSI_SetCalibTrimming>
 800192c:	e013      	b.n	8001956 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fe03 	bl	800153e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fe27 	bl	8001590 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	4618      	mov	r0, r3
 8001948:	f000 fd10 	bl	800236c <RCC_SetFlashLatencyFromMSIRange>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e317      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001956:	f000 fcc9 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 800195a:	4603      	mov	r3, r0
 800195c:	4aa4      	ldr	r2, [pc, #656]	@ (8001bf0 <HAL_RCC_OscConfig+0x344>)
 800195e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001960:	4ba4      	ldr	r3, [pc, #656]	@ (8001bf4 <HAL_RCC_OscConfig+0x348>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff f8eb 	bl	8000b40 <HAL_InitTick>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d039      	beq.n	80019e4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e308      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01e      	beq.n	80019ba <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800197c:	f7ff fdb0 	bl	80014e0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001980:	f7ff f92c 	bl	8000bdc <HAL_GetTick>
 8001984:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001988:	f7ff f928 	bl	8000bdc <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e2f5      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800199a:	f7ff fdbf 	bl	800151c <LL_RCC_MSI_IsReady>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f1      	beq.n	8001988 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fdc8 	bl	800153e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fdec 	bl	8001590 <LL_RCC_MSI_SetCalibTrimming>
 80019b8:	e015      	b.n	80019e6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019ba:	f7ff fda0 	bl	80014fe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019be:	f7ff f90d 	bl	8000bdc <HAL_GetTick>
 80019c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019c6:	f7ff f909 	bl	8000bdc <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e2d6      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80019d8:	f7ff fda0 	bl	800151c <LL_RCC_MSI_IsReady>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f1      	bne.n	80019c6 <HAL_RCC_OscConfig+0x11a>
 80019e2:	e000      	b.n	80019e6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80019e4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d047      	beq.n	8001a82 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019f2:	f7ff fdf6 	bl	80015e2 <LL_RCC_GetSysClkSource>
 80019f6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f8:	f7ff feef 	bl	80017da <LL_RCC_PLL_GetMainSource>
 80019fc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_OscConfig+0x164>
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	2b0c      	cmp	r3, #12
 8001a08:	d108      	bne.n	8001a1c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d105      	bne.n	8001a1c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d134      	bne.n	8001a82 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e2b4      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a24:	d102      	bne.n	8001a2c <HAL_RCC_OscConfig+0x180>
 8001a26:	f7ff fbdd 	bl	80011e4 <LL_RCC_HSE_Enable>
 8001a2a:	e001      	b.n	8001a30 <HAL_RCC_OscConfig+0x184>
 8001a2c:	f7ff fbe9 	bl	8001202 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d012      	beq.n	8001a5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff f8d0 	bl	8000bdc <HAL_GetTick>
 8001a3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff f8cc 	bl	8000bdc <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	@ 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e299      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001a52:	f7ff fbe5 	bl	8001220 <LL_RCC_HSE_IsReady>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f1      	beq.n	8001a40 <HAL_RCC_OscConfig+0x194>
 8001a5c:	e011      	b.n	8001a82 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5e:	f7ff f8bd 	bl	8000bdc <HAL_GetTick>
 8001a62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a66:	f7ff f8b9 	bl	8000bdc <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b64      	cmp	r3, #100	@ 0x64
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e286      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001a78:	f7ff fbd2 	bl	8001220 <LL_RCC_HSE_IsReady>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f1      	bne.n	8001a66 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d04c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a8e:	f7ff fda8 	bl	80015e2 <LL_RCC_GetSysClkSource>
 8001a92:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a94:	f7ff fea1 	bl	80017da <LL_RCC_PLL_GetMainSource>
 8001a98:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_OscConfig+0x200>
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d10e      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d10b      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e266      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fbf1 	bl	80012a4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ac2:	e031      	b.n	8001b28 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d019      	beq.n	8001b00 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001acc:	f7ff fbba 	bl	8001244 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f884 	bl	8000bdc <HAL_GetTick>
 8001ad4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad8:	f7ff f880 	bl	8000bdc <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e24d      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001aea:	f7ff fbc9 	bl	8001280 <LL_RCC_HSI_IsReady>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f1      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fbd3 	bl	80012a4 <LL_RCC_HSI_SetCalibTrimming>
 8001afe:	e013      	b.n	8001b28 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b00:	f7ff fbaf 	bl	8001262 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff f86a 	bl	8000bdc <HAL_GetTick>
 8001b08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7ff f866 	bl	8000bdc <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e233      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001b1e:	f7ff fbaf 	bl	8001280 <LL_RCC_HSI_IsReady>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f1      	bne.n	8001b0c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80a3 	beq.w	8001c88 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d076      	beq.n	8001c38 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d046      	beq.n	8001be4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001b56:	f7ff fc66 	bl	8001426 <LL_RCC_LSI1_IsReady>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d113      	bne.n	8001b88 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001b60:	f7ff fc3f 	bl	80013e2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b64:	f7ff f83a 	bl	8000bdc <HAL_GetTick>
 8001b68:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001b6c:	f7ff f836 	bl	8000bdc <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e203      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001b7e:	f7ff fc52 	bl	8001426 <LL_RCC_LSI1_IsReady>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f1      	beq.n	8001b6c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001b88:	f7ff fc5f 	bl	800144a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f826 	bl	8000bdc <HAL_GetTick>
 8001b90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001b94:	f7ff f822 	bl	8000bdc <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e1ef      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001ba6:	f7ff fc72 	bl	800148e <LL_RCC_LSI2_IsReady>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f1      	beq.n	8001b94 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fc7c 	bl	80014b2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001bba:	f7ff fc23 	bl	8001404 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbe:	f7ff f80d 	bl	8000bdc <HAL_GetTick>
 8001bc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001bc6:	f7ff f809 	bl	8000bdc <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e1d6      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001bd8:	f7ff fc25 	bl	8001426 <LL_RCC_LSI1_IsReady>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f1      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x31a>
 8001be2:	e051      	b.n	8001c88 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001be4:	f7ff fbfd 	bl	80013e2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7fe fff8 	bl	8000bdc <HAL_GetTick>
 8001bec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001bee:	e00c      	b.n	8001c0a <HAL_RCC_OscConfig+0x35e>
 8001bf0:	20000008 	.word	0x20000008
 8001bf4:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001bf8:	f7fe fff0 	bl	8000bdc <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e1bd      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001c0a:	f7ff fc0c 	bl	8001426 <LL_RCC_LSI1_IsReady>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f1      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001c14:	f7ff fc2a 	bl	800146c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001c1a:	f7fe ffdf 	bl	8000bdc <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e1ac      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001c2c:	f7ff fc2f 	bl	800148e <LL_RCC_LSI2_IsReady>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f1      	bne.n	8001c1a <HAL_RCC_OscConfig+0x36e>
 8001c36:	e027      	b.n	8001c88 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001c38:	f7ff fc18 	bl	800146c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3c:	f7fe ffce 	bl	8000bdc <HAL_GetTick>
 8001c40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001c44:	f7fe ffca 	bl	8000bdc <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e197      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001c56:	f7ff fc1a 	bl	800148e <LL_RCC_LSI2_IsReady>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1f1      	bne.n	8001c44 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001c60:	f7ff fbd0 	bl	8001404 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c64:	f7fe ffba 	bl	8000bdc <HAL_GetTick>
 8001c68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001c6c:	f7fe ffb6 	bl	8000bdc <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e183      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001c7e:	f7ff fbd2 	bl	8001426 <LL_RCC_LSI1_IsReady>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f1      	bne.n	8001c6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d05b      	beq.n	8001d4c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c94:	4ba7      	ldr	r3, [pc, #668]	@ (8001f34 <HAL_RCC_OscConfig+0x688>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d114      	bne.n	8001cca <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001ca0:	f7ff fa70 	bl	8001184 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca4:	f7fe ff9a 	bl	8000bdc <HAL_GetTick>
 8001ca8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cac:	f7fe ff96 	bl	8000bdc <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e163      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cbe:	4b9d      	ldr	r3, [pc, #628]	@ (8001f34 <HAL_RCC_OscConfig+0x688>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d102      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x42c>
 8001cd2:	f7ff fb30 	bl	8001336 <LL_RCC_LSE_Enable>
 8001cd6:	e00c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x446>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d104      	bne.n	8001cea <HAL_RCC_OscConfig+0x43e>
 8001ce0:	f7ff fb4b 	bl	800137a <LL_RCC_LSE_EnableBypass>
 8001ce4:	f7ff fb27 	bl	8001336 <LL_RCC_LSE_Enable>
 8001ce8:	e003      	b.n	8001cf2 <HAL_RCC_OscConfig+0x446>
 8001cea:	f7ff fb35 	bl	8001358 <LL_RCC_LSE_Disable>
 8001cee:	f7ff fb55 	bl	800139c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d014      	beq.n	8001d24 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7fe ff6f 	bl	8000bdc <HAL_GetTick>
 8001cfe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7fe ff6b 	bl	8000bdc <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e136      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001d18:	f7ff fb51 	bl	80013be <LL_RCC_LSE_IsReady>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0ef      	beq.n	8001d02 <HAL_RCC_OscConfig+0x456>
 8001d22:	e013      	b.n	8001d4c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d24:	f7fe ff5a 	bl	8000bdc <HAL_GetTick>
 8001d28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d2a:	e00a      	b.n	8001d42 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2c:	f7fe ff56 	bl	8000bdc <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e121      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d42:	f7ff fb3c 	bl	80013be <LL_RCC_LSE_IsReady>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ef      	bne.n	8001d2c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d02c      	beq.n	8001db2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d014      	beq.n	8001d8a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d60:	f7ff fab5 	bl	80012ce <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d64:	f7fe ff3a 	bl	8000bdc <HAL_GetTick>
 8001d68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d6c:	f7fe ff36 	bl	8000bdc <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e103      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001d7e:	f7ff fac8 	bl	8001312 <LL_RCC_HSI48_IsReady>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f1      	beq.n	8001d6c <HAL_RCC_OscConfig+0x4c0>
 8001d88:	e013      	b.n	8001db2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d8a:	f7ff fab1 	bl	80012f0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8e:	f7fe ff25 	bl	8000bdc <HAL_GetTick>
 8001d92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d96:	f7fe ff21 	bl	8000bdc <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e0ee      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001da8:	f7ff fab3 	bl	8001312 <LL_RCC_HSI48_IsReady>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f1      	bne.n	8001d96 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 80e4 	beq.w	8001f84 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dbc:	f7ff fc11 	bl	80015e2 <LL_RCC_GetSysClkSource>
 8001dc0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	f040 80b4 	bne.w	8001f3c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0203 	and.w	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d123      	bne.n	8001e2a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d11c      	bne.n	8001e2a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	0a1b      	lsrs	r3, r3, #8
 8001df4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d114      	bne.n	8001e2a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d10d      	bne.n	8001e2a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d05d      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b0c      	cmp	r3, #12
 8001e2e:	d058      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e0a1      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e42:	f7ff fc84 	bl	800174e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e46:	f7fe fec9 	bl	8000bdc <HAL_GetTick>
 8001e4a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7fe fec5 	bl	8000bdc <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e092      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1ef      	bne.n	8001e4e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	4b30      	ldr	r3, [pc, #192]	@ (8001f38 <HAL_RCC_OscConfig+0x68c>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e80:	4311      	orrs	r1, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e86:	0212      	lsls	r2, r2, #8
 8001e88:	4311      	orrs	r1, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e8e:	4311      	orrs	r1, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e94:	4311      	orrs	r1, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ea4:	f7ff fc44 	bl	8001730 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eb8:	f7fe fe90 	bl	8000bdc <HAL_GetTick>
 8001ebc:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7fe fe8c 	bl	8000bdc <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e059      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0ef      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee0:	e050      	b.n	8001f84 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e04f      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d147      	bne.n	8001f84 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ef4:	f7ff fc1c 	bl	8001730 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f08:	f7fe fe68 	bl	8000bdc <HAL_GetTick>
 8001f0c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7fe fe64 	bl	8000bdc <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e031      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0ef      	beq.n	8001f10 <HAL_RCC_OscConfig+0x664>
 8001f30:	e028      	b.n	8001f84 <HAL_RCC_OscConfig+0x6d8>
 8001f32:	bf00      	nop
 8001f34:	58000400 	.word	0x58000400
 8001f38:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d01e      	beq.n	8001f80 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	f7ff fc04 	bl	800174e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f46:	f7fe fe49 	bl	8000bdc <HAL_GetTick>
 8001f4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4e:	f7fe fe45 	bl	8000bdc <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e012      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1ef      	bne.n	8001f4e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f78:	4b05      	ldr	r3, [pc, #20]	@ (8001f90 <HAL_RCC_OscConfig+0x6e4>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	60cb      	str	r3, [r1, #12]
 8001f7e:	e001      	b.n	8001f84 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3734      	adds	r7, #52	@ 0x34
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd90      	pop	{r4, r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	eefefffc 	.word	0xeefefffc

08001f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e12d      	b.n	8002204 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b98      	ldr	r3, [pc, #608]	@ (800220c <HAL_RCC_ClockConfig+0x278>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d91b      	bls.n	8001fee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b95      	ldr	r3, [pc, #596]	@ (800220c <HAL_RCC_ClockConfig+0x278>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4993      	ldr	r1, [pc, #588]	@ (800220c <HAL_RCC_ClockConfig+0x278>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc6:	f7fe fe09 	bl	8000bdc <HAL_GetTick>
 8001fca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001fce:	f7fe fe05 	bl	8000bdc <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e111      	b.n	8002204 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe0:	4b8a      	ldr	r3, [pc, #552]	@ (800220c <HAL_RCC_ClockConfig+0x278>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d1ef      	bne.n	8001fce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d016      	beq.n	8002028 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fafb 	bl	80015fa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002004:	f7fe fdea 	bl	8000bdc <HAL_GetTick>
 8002008:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800200c:	f7fe fde6 	bl	8000bdc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e0f2      	b.n	8002204 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800201e:	f7ff fbe8 	bl	80017f2 <LL_RCC_IsActiveFlag_HPRE>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f1      	beq.n	800200c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b00      	cmp	r3, #0
 8002032:	d016      	beq.n	8002062 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff faf2 	bl	8001622 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800203e:	f7fe fdcd 	bl	8000bdc <HAL_GetTick>
 8002042:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002044:	e008      	b.n	8002058 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002046:	f7fe fdc9 	bl	8000bdc <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e0d5      	b.n	8002204 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002058:	f7ff fbdd 	bl	8001816 <LL_RCC_IsActiveFlag_C2HPRE>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f1      	beq.n	8002046 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	d016      	beq.n	800209c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff faeb 	bl	800164e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002078:	f7fe fdb0 	bl	8000bdc <HAL_GetTick>
 800207c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002080:	f7fe fdac 	bl	8000bdc <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e0b8      	b.n	8002204 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002092:	f7ff fbd3 	bl	800183c <LL_RCC_IsActiveFlag_SHDHPRE>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f1      	beq.n	8002080 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d016      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fae5 	bl	800167c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80020b2:	f7fe fd93 	bl	8000bdc <HAL_GetTick>
 80020b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80020ba:	f7fe fd8f 	bl	8000bdc <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e09b      	b.n	8002204 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80020cc:	f7ff fbc9 	bl	8001862 <LL_RCC_IsActiveFlag_PPRE1>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f1      	beq.n	80020ba <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d017      	beq.n	8002112 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fadb 	bl	80016a4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80020ee:	f7fe fd75 	bl	8000bdc <HAL_GetTick>
 80020f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80020f6:	f7fe fd71 	bl	8000bdc <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e07d      	b.n	8002204 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002108:	f7ff fbbd 	bl	8001886 <LL_RCC_IsActiveFlag_PPRE2>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f1      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d043      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d106      	bne.n	8002134 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002126:	f7ff f87b 	bl	8001220 <LL_RCC_HSE_IsReady>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d11e      	bne.n	800216e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e067      	b.n	8002204 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d106      	bne.n	800214a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800213c:	f7ff fb16 	bl	800176c <LL_RCC_PLL_IsReady>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d113      	bne.n	800216e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e05c      	b.n	8002204 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002152:	f7ff f9e3 	bl	800151c <LL_RCC_MSI_IsReady>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d108      	bne.n	800216e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e051      	b.n	8002204 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002160:	f7ff f88e 	bl	8001280 <LL_RCC_HSI_IsReady>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e04a      	b.n	8002204 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fa21 	bl	80015ba <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002178:	f7fe fd30 	bl	8000bdc <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	e00a      	b.n	8002196 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f7fe fd2c 	bl	8000bdc <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e036      	b.n	8002204 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	f7ff fa24 	bl	80015e2 <LL_RCC_GetSysClkSource>
 800219a:	4602      	mov	r2, r0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d1ec      	bne.n	8002180 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021a6:	4b19      	ldr	r3, [pc, #100]	@ (800220c <HAL_RCC_ClockConfig+0x278>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d21b      	bcs.n	80021ec <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b4:	4b15      	ldr	r3, [pc, #84]	@ (800220c <HAL_RCC_ClockConfig+0x278>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f023 0207 	bic.w	r2, r3, #7
 80021bc:	4913      	ldr	r1, [pc, #76]	@ (800220c <HAL_RCC_ClockConfig+0x278>)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c4:	f7fe fd0a 	bl	8000bdc <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ca:	e008      	b.n	80021de <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80021cc:	f7fe fd06 	bl	8000bdc <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e012      	b.n	8002204 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <HAL_RCC_ClockConfig+0x278>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d1ef      	bne.n	80021cc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80021ec:	f000 f87e 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4a07      	ldr	r2, [pc, #28]	@ (8002210 <HAL_RCC_ClockConfig+0x27c>)
 80021f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80021f6:	f7fe fcfd 	bl	8000bf4 <HAL_GetTickPrio>
 80021fa:	4603      	mov	r3, r0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fc9f 	bl	8000b40 <HAL_InitTick>
 8002202:	4603      	mov	r3, r0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	58004000 	.word	0x58004000
 8002210:	20000008 	.word	0x20000008

08002214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800221a:	f7ff f9e2 	bl	80015e2 <LL_RCC_GetSysClkSource>
 800221e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10a      	bne.n	800223c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002226:	f7ff f99e 	bl	8001566 <LL_RCC_MSI_GetRange>
 800222a:	4603      	mov	r3, r0
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	4a2b      	ldr	r2, [pc, #172]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	e04b      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b04      	cmp	r3, #4
 8002240:	d102      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002242:	4b28      	ldr	r3, [pc, #160]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	e045      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b08      	cmp	r3, #8
 800224c:	d10a      	bne.n	8002264 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800224e:	f7fe ffb7 	bl	80011c0 <LL_RCC_HSE_IsEnabledDiv2>
 8002252:	4603      	mov	r3, r0
 8002254:	2b01      	cmp	r3, #1
 8002256:	d102      	bne.n	800225e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002258:	4b22      	ldr	r3, [pc, #136]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	e03a      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800225e:	4b22      	ldr	r3, [pc, #136]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	e037      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002264:	f7ff fab9 	bl	80017da <LL_RCC_PLL_GetMainSource>
 8002268:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d003      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x64>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d003      	beq.n	800227e <HAL_RCC_GetSysClockFreq+0x6a>
 8002276:	e00d      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002278:	4b1a      	ldr	r3, [pc, #104]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800227a:	60bb      	str	r3, [r7, #8]
        break;
 800227c:	e015      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800227e:	f7fe ff9f 	bl	80011c0 <LL_RCC_HSE_IsEnabledDiv2>
 8002282:	4603      	mov	r3, r0
 8002284:	2b01      	cmp	r3, #1
 8002286:	d102      	bne.n	800228e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002288:	4b16      	ldr	r3, [pc, #88]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800228a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800228c:	e00d      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800228e:	4b16      	ldr	r3, [pc, #88]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002290:	60bb      	str	r3, [r7, #8]
        break;
 8002292:	e00a      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002294:	f7ff f967 	bl	8001566 <LL_RCC_MSI_GetRange>
 8002298:	4603      	mov	r3, r0
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	4a0f      	ldr	r2, [pc, #60]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a6:	60bb      	str	r3, [r7, #8]
        break;
 80022a8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80022aa:	f7ff fa71 	bl	8001790 <LL_RCC_PLL_GetN>
 80022ae:	4602      	mov	r2, r0
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	fb03 f402 	mul.w	r4, r3, r2
 80022b6:	f7ff fa84 	bl	80017c2 <LL_RCC_PLL_GetDivider>
 80022ba:	4603      	mov	r3, r0
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	3301      	adds	r3, #1
 80022c0:	fbb4 f4f3 	udiv	r4, r4, r3
 80022c4:	f7ff fa71 	bl	80017aa <LL_RCC_PLL_GetR>
 80022c8:	4603      	mov	r3, r0
 80022ca:	0f5b      	lsrs	r3, r3, #29
 80022cc:	3301      	adds	r3, #1
 80022ce:	fbb4 f3f3 	udiv	r3, r4, r3
 80022d2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80022d4:	68fb      	ldr	r3, [r7, #12]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd90      	pop	{r4, r7, pc}
 80022de:	bf00      	nop
 80022e0:	0800379c 	.word	0x0800379c
 80022e4:	00f42400 	.word	0x00f42400
 80022e8:	01e84800 	.word	0x01e84800

080022ec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ec:	b598      	push	{r3, r4, r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80022f0:	f7ff ff90 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80022f4:	4604      	mov	r4, r0
 80022f6:	f7ff f9e9 	bl	80016cc <LL_RCC_GetAHBPrescaler>
 80022fa:	4603      	mov	r3, r0
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	4a03      	ldr	r2, [pc, #12]	@ (8002310 <HAL_RCC_GetHCLKFreq+0x24>)
 8002304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002308:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd98      	pop	{r3, r4, r7, pc}
 8002310:	0800373c 	.word	0x0800373c

08002314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002314:	b598      	push	{r3, r4, r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002318:	f7ff ffe8 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 800231c:	4604      	mov	r4, r0
 800231e:	f7ff f9ef 	bl	8001700 <LL_RCC_GetAPB1Prescaler>
 8002322:	4603      	mov	r3, r0
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	4a04      	ldr	r2, [pc, #16]	@ (800233c <HAL_RCC_GetPCLK1Freq+0x28>)
 800232c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd98      	pop	{r3, r4, r7, pc}
 800233c:	0800377c 	.word	0x0800377c

08002340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002340:	b598      	push	{r3, r4, r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002344:	f7ff ffd2 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 8002348:	4604      	mov	r4, r0
 800234a:	f7ff f9e5 	bl	8001718 <LL_RCC_GetAPB2Prescaler>
 800234e:	4603      	mov	r3, r0
 8002350:	0adb      	lsrs	r3, r3, #11
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	4a04      	ldr	r2, [pc, #16]	@ (8002368 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd98      	pop	{r3, r4, r7, pc}
 8002368:	0800377c 	.word	0x0800377c

0800236c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2bb0      	cmp	r3, #176	@ 0xb0
 8002378:	d903      	bls.n	8002382 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800237a:	4b15      	ldr	r3, [pc, #84]	@ (80023d0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800237c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	e007      	b.n	8002392 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	4a11      	ldr	r2, [pc, #68]	@ (80023d0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800238c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002390:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002392:	f7ff f9a7 	bl	80016e4 <LL_RCC_GetAHB4Prescaler>
 8002396:	4603      	mov	r3, r0
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	4a0d      	ldr	r2, [pc, #52]	@ (80023d4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80023a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4a0a      	ldr	r2, [pc, #40]	@ (80023d8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80023b0:	fba2 2303 	umull	r2, r3, r2, r3
 80023b4:	0c9c      	lsrs	r4, r3, #18
 80023b6:	f7fe fef5 	bl	80011a4 <HAL_PWREx_GetVoltageRange>
 80023ba:	4603      	mov	r3, r0
 80023bc:	4619      	mov	r1, r3
 80023be:	4620      	mov	r0, r4
 80023c0:	f000 f80c 	bl	80023dc <RCC_SetFlashLatency>
 80023c4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd90      	pop	{r4, r7, pc}
 80023ce:	bf00      	nop
 80023d0:	0800379c 	.word	0x0800379c
 80023d4:	0800373c 	.word	0x0800373c
 80023d8:	431bde83 	.word	0x431bde83

080023dc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b093      	sub	sp, #76	@ 0x4c
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80023e6:	4b37      	ldr	r3, [pc, #220]	@ (80024c4 <RCC_SetFlashLatency+0xe8>)
 80023e8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80023ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80023f2:	4a35      	ldr	r2, [pc, #212]	@ (80024c8 <RCC_SetFlashLatency+0xec>)
 80023f4:	f107 031c 	add.w	r3, r7, #28
 80023f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80023fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80023fe:	4b33      	ldr	r3, [pc, #204]	@ (80024cc <RCC_SetFlashLatency+0xf0>)
 8002400:	f107 040c 	add.w	r4, r7, #12
 8002404:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002406:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800240a:	2300      	movs	r3, #0
 800240c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002414:	d11a      	bne.n	800244c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002416:	2300      	movs	r3, #0
 8002418:	643b      	str	r3, [r7, #64]	@ 0x40
 800241a:	e013      	b.n	8002444 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800241c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	3348      	adds	r3, #72	@ 0x48
 8002422:	443b      	add	r3, r7
 8002424:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	429a      	cmp	r2, r3
 800242c:	d807      	bhi.n	800243e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800242e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	3348      	adds	r3, #72	@ 0x48
 8002434:	443b      	add	r3, r7
 8002436:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800243a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800243c:	e020      	b.n	8002480 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800243e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002440:	3301      	adds	r3, #1
 8002442:	643b      	str	r3, [r7, #64]	@ 0x40
 8002444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002446:	2b03      	cmp	r3, #3
 8002448:	d9e8      	bls.n	800241c <RCC_SetFlashLatency+0x40>
 800244a:	e019      	b.n	8002480 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800244c:	2300      	movs	r3, #0
 800244e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002450:	e013      	b.n	800247a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	3348      	adds	r3, #72	@ 0x48
 8002458:	443b      	add	r3, r7
 800245a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	429a      	cmp	r2, r3
 8002462:	d807      	bhi.n	8002474 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	3348      	adds	r3, #72	@ 0x48
 800246a:	443b      	add	r3, r7
 800246c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002470:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002472:	e005      	b.n	8002480 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002476:	3301      	adds	r3, #1
 8002478:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800247a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800247c:	2b02      	cmp	r3, #2
 800247e:	d9e8      	bls.n	8002452 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002480:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <RCC_SetFlashLatency+0xf4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 0207 	bic.w	r2, r3, #7
 8002488:	4911      	ldr	r1, [pc, #68]	@ (80024d0 <RCC_SetFlashLatency+0xf4>)
 800248a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002490:	f7fe fba4 	bl	8000bdc <HAL_GetTick>
 8002494:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002496:	e008      	b.n	80024aa <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002498:	f7fe fba0 	bl	8000bdc <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e007      	b.n	80024ba <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <RCC_SetFlashLatency+0xf4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d1ef      	bne.n	8002498 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	374c      	adds	r7, #76	@ 0x4c
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd90      	pop	{r4, r7, pc}
 80024c2:	bf00      	nop
 80024c4:	08003710 	.word	0x08003710
 80024c8:	08003720 	.word	0x08003720
 80024cc:	0800372c 	.word	0x0800372c
 80024d0:	58004000 	.word	0x58004000

080024d4 <LL_RCC_LSE_IsEnabled>:
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80024d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <LL_RCC_LSE_IsEnabled+0x18>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <LL_RCC_LSE_IsEnabled+0x1a>
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_RCC_LSE_IsReady>:
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80024fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b02      	cmp	r3, #2
 800250a:	d101      	bne.n	8002510 <LL_RCC_LSE_IsReady+0x18>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <LL_RCC_LSE_IsReady+0x1a>
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_RCC_SetRFWKPClockSource>:
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800252c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002530:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_RCC_SetSMPSClockSource>:
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	f023 0203 	bic.w	r2, r3, #3
 800255a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4313      	orrs	r3, r2
 8002562:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_RCC_SetSMPSPrescaler>:
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800257c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002582:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4313      	orrs	r3, r2
 800258a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_RCC_SetUSARTClockSource>:
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80025a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a8:	f023 0203 	bic.w	r2, r3, #3
 80025ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_RCC_SetLPUARTClockSource>:
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80025cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025d4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_RCC_SetI2CClockSource>:
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80025f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002608:	43db      	mvns	r3, r3
 800260a:	401a      	ands	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002614:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <LL_RCC_SetLPTIMClockSource>:
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002636:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	0c1b      	lsrs	r3, r3, #16
 800263e:	041b      	lsls	r3, r3, #16
 8002640:	43db      	mvns	r3, r3
 8002642:	401a      	ands	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	041b      	lsls	r3, r3, #16
 8002648:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <LL_RCC_SetSAIClockSource>:
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002672:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <LL_RCC_SetRNGClockSource>:
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800269e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <LL_RCC_SetCLK48ClockSource>:
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80026be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <LL_RCC_SetUSBClockSource>:
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ffe3 	bl	80026b6 <LL_RCC_SetCLK48ClockSource>
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <LL_RCC_SetADCClockSource>:
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002708:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800270c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <LL_RCC_SetRTCClockSource>:
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800272c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002734:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002738:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_RCC_GetRTCClockSource>:
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <LL_RCC_ForceBackupDomainReset>:
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800276e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002776:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800277a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800277e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002782:	bf00      	nop
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <LL_RCC_ReleaseBackupDomainReset>:
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002798:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800279c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <LL_RCC_PLLSAI1_Enable>:
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80027b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027c0:	6013      	str	r3, [r2, #0]
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_RCC_PLLSAI1_Disable>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80027d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027de:	6013      	str	r3, [r2, #0]
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <LL_RCC_PLLSAI1_IsReady>:
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80027ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027fc:	d101      	bne.n	8002802 <LL_RCC_PLLSAI1_IsReady+0x18>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b088      	sub	sp, #32
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002816:	2300      	movs	r3, #0
 8002818:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800281a:	2300      	movs	r3, #0
 800281c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002826:	2b00      	cmp	r3, #0
 8002828:	d034      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002832:	d021      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002834:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002838:	d81b      	bhi.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800283a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800283e:	d01d      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002840:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002844:	d815      	bhi.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800284a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800284e:	d110      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800285a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800285e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002860:	e00d      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f947 	bl	8002afa <RCCEx_PLLSAI1_ConfigNP>
 800286c:	4603      	mov	r3, r0
 800286e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002870:	e005      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	77fb      	strb	r3, [r7, #31]
        break;
 8002876:	e002      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002878:	bf00      	nop
 800287a:	e000      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800287c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800287e:	7ffb      	ldrb	r3, [r7, #31]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fee8 	bl	800265e <LL_RCC_SetSAIClockSource>
 800288e:	e001      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002890:	7ffb      	ldrb	r3, [r7, #31]
 8002892:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800289c:	2b00      	cmp	r3, #0
 800289e:	d046      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80028a0:	f7ff ff56 	bl	8002750 <LL_RCC_GetRTCClockSource>
 80028a4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d03c      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80028b0:	f7fe fc68 	bl	8001184 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ff30 	bl	8002724 <LL_RCC_SetRTCClockSource>
 80028c4:	e02e      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80028c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ce:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80028d0:	f7ff ff4b 	bl	800276a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80028d4:	f7ff ff5a 	bl	800278c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	4313      	orrs	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80028e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80028f0:	f7ff fdf0 	bl	80024d4 <LL_RCC_LSE_IsEnabled>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d114      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028fa:	f7fe f96f 	bl	8000bdc <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002900:	e00b      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002902:	f7fe f96b 	bl	8000bdc <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002910:	4293      	cmp	r3, r2
 8002912:	d902      	bls.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	77fb      	strb	r3, [r7, #31]
              break;
 8002918:	e004      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800291a:	f7ff fded 	bl	80024f8 <LL_RCC_LSE_IsReady>
 800291e:	4603      	mov	r3, r0
 8002920:	2b01      	cmp	r3, #1
 8002922:	d1ee      	bne.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002924:	7ffb      	ldrb	r3, [r7, #31]
 8002926:	77bb      	strb	r3, [r7, #30]
 8002928:	e001      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292a:	7ffb      	ldrb	r3, [r7, #31]
 800292c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d004      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fe2a 	bl	8002598 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d004      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fe35 	bl	80025c4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	d004      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fe5d 	bl	800262a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	2b00      	cmp	r3, #0
 800297a:	d004      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fe52 	bl	800262a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b00      	cmp	r3, #0
 8002990:	d004      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fe2a 	bl	80025f0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d004      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fe1f 	bl	80025f0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d022      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fe8d 	bl	80026e2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029d0:	d107      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80029d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029e0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029ea:	d10b      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 f8dd 	bl	8002bb0 <RCCEx_PLLSAI1_ConfigNQ>
 80029f6:	4603      	mov	r3, r0
 80029f8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80029fa:	7ffb      	ldrb	r3, [r7, #31]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002a00:	7ffb      	ldrb	r3, [r7, #31]
 8002a02:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d02b      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a18:	d008      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a22:	d003      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d105      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fe2a 	bl	800268a <LL_RCC_SetRNGClockSource>
 8002a36:	e00a      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	2000      	movs	r0, #0
 8002a44:	f7ff fe21 	bl	800268a <LL_RCC_SetRNGClockSource>
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f7ff fe34 	bl	80026b6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a52:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8002a56:	d107      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d022      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fe3d 	bl	80026f8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a86:	d107      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a96:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002aa0:	d10b      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 f8dd 	bl	8002c66 <RCCEx_PLLSAI1_ConfigNR>
 8002aac:	4603      	mov	r3, r0
 8002aae:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002ab0:	7ffb      	ldrb	r3, [r7, #31]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002ab6:	7ffb      	ldrb	r3, [r7, #31]
 8002ab8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fd26 	bl	800251c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d009      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fd45 	bl	8002570 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fd2c 	bl	8002548 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002af0:	7fbb      	ldrb	r3, [r7, #30]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002b06:	f7ff fe61 	bl	80027cc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b0a:	f7fe f867 	bl	8000bdc <HAL_GetTick>
 8002b0e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002b10:	e009      	b.n	8002b26 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b12:	f7fe f863 	bl	8000bdc <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d902      	bls.n	8002b26 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	73fb      	strb	r3, [r7, #15]
      break;
 8002b24:	e004      	b.n	8002b30 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002b26:	f7ff fe60 	bl	80027ea <LL_RCC_PLLSAI1_IsReady>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f0      	bne.n	8002b12 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d137      	bne.n	8002ba6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b60:	4313      	orrs	r3, r2
 8002b62:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002b64:	f7ff fe23 	bl	80027ae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b68:	f7fe f838 	bl	8000bdc <HAL_GetTick>
 8002b6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002b6e:	e009      	b.n	8002b84 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b70:	f7fe f834 	bl	8000bdc <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d902      	bls.n	8002b84 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	73fb      	strb	r3, [r7, #15]
        break;
 8002b82:	e004      	b.n	8002b8e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002b84:	f7ff fe31 	bl	80027ea <LL_RCC_PLLSAI1_IsReady>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d1f0      	bne.n	8002b70 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d108      	bne.n	8002ba6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002bbc:	f7ff fe06 	bl	80027cc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002bc0:	f7fe f80c 	bl	8000bdc <HAL_GetTick>
 8002bc4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002bc6:	e009      	b.n	8002bdc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bc8:	f7fe f808 	bl	8000bdc <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d902      	bls.n	8002bdc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8002bda:	e004      	b.n	8002be6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002bdc:	f7ff fe05 	bl	80027ea <LL_RCC_PLLSAI1_IsReady>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d137      	bne.n	8002c5c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c00:	4313      	orrs	r3, r2
 8002c02:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c16:	4313      	orrs	r3, r2
 8002c18:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002c1a:	f7ff fdc8 	bl	80027ae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c1e:	f7fd ffdd 	bl	8000bdc <HAL_GetTick>
 8002c22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002c24:	e009      	b.n	8002c3a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c26:	f7fd ffd9 	bl	8000bdc <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d902      	bls.n	8002c3a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	73fb      	strb	r3, [r7, #15]
        break;
 8002c38:	e004      	b.n	8002c44 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002c3a:	f7ff fdd6 	bl	80027ea <LL_RCC_PLLSAI1_IsReady>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d1f0      	bne.n	8002c26 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d108      	bne.n	8002c5c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002c72:	f7ff fdab 	bl	80027cc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002c76:	f7fd ffb1 	bl	8000bdc <HAL_GetTick>
 8002c7a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002c7c:	e009      	b.n	8002c92 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c7e:	f7fd ffad 	bl	8000bdc <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d902      	bls.n	8002c92 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c90:	e004      	b.n	8002c9c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002c92:	f7ff fdaa 	bl	80027ea <LL_RCC_PLLSAI1_IsReady>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1f0      	bne.n	8002c7e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d137      	bne.n	8002d12 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002ca2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002cd0:	f7ff fd6d 	bl	80027ae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd4:	f7fd ff82 	bl	8000bdc <HAL_GetTick>
 8002cd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002cda:	e009      	b.n	8002cf0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cdc:	f7fd ff7e 	bl	8000bdc <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d902      	bls.n	8002cf0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	73fb      	strb	r3, [r7, #15]
        break;
 8002cee:	e004      	b.n	8002cfa <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002cf0:	f7ff fd7b 	bl	80027ea <LL_RCC_PLLSAI1_IsReady>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d1f0      	bne.n	8002cdc <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d108      	bne.n	8002d12 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <LL_RCC_GetUSARTClockSource>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d28:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4013      	ands	r3, r2
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_RCC_GetLPUARTClockSource>:
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d48:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4013      	ands	r3, r2
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e042      	b.n	8002df4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d106      	bne.n	8002d86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f83b 	bl	8002dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2224      	movs	r2, #36	@ 0x24
 8002d8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0201 	bic.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fa5a 	bl	8003260 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f82f 	bl	8002e10 <UART_SetConfig>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e01b      	b.n	8002df4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fad9 	bl	80033a4 <UART_CheckIdleState>
 8002df2:	4603      	mov	r3, r0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e14:	b08c      	sub	sp, #48	@ 0x30
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4baf      	ldr	r3, [pc, #700]	@ (80030fc <UART_SetConfig+0x2ec>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	6812      	ldr	r2, [r2, #0]
 8002e46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4aa4      	ldr	r2, [pc, #656]	@ (8003100 <UART_SetConfig+0x2f0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d004      	beq.n	8002e7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002e86:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9a:	f023 010f 	bic.w	r1, r3, #15
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a95      	ldr	r2, [pc, #596]	@ (8003104 <UART_SetConfig+0x2f4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d125      	bne.n	8002f00 <UART_SetConfig+0xf0>
 8002eb4:	2003      	movs	r0, #3
 8002eb6:	f7ff ff31 	bl	8002d1c <LL_RCC_GetUSARTClockSource>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d81b      	bhi.n	8002ef8 <UART_SetConfig+0xe8>
 8002ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec8 <UART_SetConfig+0xb8>)
 8002ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec6:	bf00      	nop
 8002ec8:	08002ed9 	.word	0x08002ed9
 8002ecc:	08002ee9 	.word	0x08002ee9
 8002ed0:	08002ee1 	.word	0x08002ee1
 8002ed4:	08002ef1 	.word	0x08002ef1
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ede:	e042      	b.n	8002f66 <UART_SetConfig+0x156>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ee6:	e03e      	b.n	8002f66 <UART_SetConfig+0x156>
 8002ee8:	2304      	movs	r3, #4
 8002eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eee:	e03a      	b.n	8002f66 <UART_SetConfig+0x156>
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ef6:	e036      	b.n	8002f66 <UART_SetConfig+0x156>
 8002ef8:	2310      	movs	r3, #16
 8002efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002efe:	e032      	b.n	8002f66 <UART_SetConfig+0x156>
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a7e      	ldr	r2, [pc, #504]	@ (8003100 <UART_SetConfig+0x2f0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d12a      	bne.n	8002f60 <UART_SetConfig+0x150>
 8002f0a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002f0e:	f7ff ff15 	bl	8002d3c <LL_RCC_GetLPUARTClockSource>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f18:	d01a      	beq.n	8002f50 <UART_SetConfig+0x140>
 8002f1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f1e:	d81b      	bhi.n	8002f58 <UART_SetConfig+0x148>
 8002f20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f24:	d00c      	beq.n	8002f40 <UART_SetConfig+0x130>
 8002f26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f2a:	d815      	bhi.n	8002f58 <UART_SetConfig+0x148>
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <UART_SetConfig+0x128>
 8002f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f34:	d008      	beq.n	8002f48 <UART_SetConfig+0x138>
 8002f36:	e00f      	b.n	8002f58 <UART_SetConfig+0x148>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f3e:	e012      	b.n	8002f66 <UART_SetConfig+0x156>
 8002f40:	2302      	movs	r3, #2
 8002f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f46:	e00e      	b.n	8002f66 <UART_SetConfig+0x156>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f4e:	e00a      	b.n	8002f66 <UART_SetConfig+0x156>
 8002f50:	2308      	movs	r3, #8
 8002f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f56:	e006      	b.n	8002f66 <UART_SetConfig+0x156>
 8002f58:	2310      	movs	r3, #16
 8002f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f5e:	e002      	b.n	8002f66 <UART_SetConfig+0x156>
 8002f60:	2310      	movs	r3, #16
 8002f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a65      	ldr	r2, [pc, #404]	@ (8003100 <UART_SetConfig+0x2f0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	f040 8097 	bne.w	80030a0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d823      	bhi.n	8002fc2 <UART_SetConfig+0x1b2>
 8002f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f80 <UART_SetConfig+0x170>)
 8002f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f80:	08002fa5 	.word	0x08002fa5
 8002f84:	08002fc3 	.word	0x08002fc3
 8002f88:	08002fad 	.word	0x08002fad
 8002f8c:	08002fc3 	.word	0x08002fc3
 8002f90:	08002fb3 	.word	0x08002fb3
 8002f94:	08002fc3 	.word	0x08002fc3
 8002f98:	08002fc3 	.word	0x08002fc3
 8002f9c:	08002fc3 	.word	0x08002fc3
 8002fa0:	08002fbb 	.word	0x08002fbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa4:	f7ff f9b6 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8002fa8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002faa:	e010      	b.n	8002fce <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fac:	4b56      	ldr	r3, [pc, #344]	@ (8003108 <UART_SetConfig+0x2f8>)
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fb0:	e00d      	b.n	8002fce <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fb2:	f7ff f92f 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 8002fb6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fb8:	e009      	b.n	8002fce <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fc0:	e005      	b.n	8002fce <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002fcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 812b 	beq.w	800322c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	4a4c      	ldr	r2, [pc, #304]	@ (800310c <UART_SetConfig+0x2fc>)
 8002fdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d305      	bcc.n	8003006 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	429a      	cmp	r2, r3
 8003004:	d903      	bls.n	800300e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800300c:	e10e      	b.n	800322c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003010:	2200      	movs	r2, #0
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	60fa      	str	r2, [r7, #12]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301a:	4a3c      	ldr	r2, [pc, #240]	@ (800310c <UART_SetConfig+0x2fc>)
 800301c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003020:	b29b      	uxth	r3, r3
 8003022:	2200      	movs	r2, #0
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800302c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003030:	f7fd f8a4 	bl	800017c <__aeabi_uldivmod>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	020b      	lsls	r3, r1, #8
 8003046:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800304a:	0202      	lsls	r2, r0, #8
 800304c:	6979      	ldr	r1, [r7, #20]
 800304e:	6849      	ldr	r1, [r1, #4]
 8003050:	0849      	lsrs	r1, r1, #1
 8003052:	2000      	movs	r0, #0
 8003054:	460c      	mov	r4, r1
 8003056:	4605      	mov	r5, r0
 8003058:	eb12 0804 	adds.w	r8, r2, r4
 800305c:	eb43 0905 	adc.w	r9, r3, r5
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	469a      	mov	sl, r3
 8003068:	4693      	mov	fp, r2
 800306a:	4652      	mov	r2, sl
 800306c:	465b      	mov	r3, fp
 800306e:	4640      	mov	r0, r8
 8003070:	4649      	mov	r1, r9
 8003072:	f7fd f883 	bl	800017c <__aeabi_uldivmod>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4613      	mov	r3, r2
 800307c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003084:	d308      	bcc.n	8003098 <UART_SetConfig+0x288>
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800308c:	d204      	bcs.n	8003098 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6a3a      	ldr	r2, [r7, #32]
 8003094:	60da      	str	r2, [r3, #12]
 8003096:	e0c9      	b.n	800322c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800309e:	e0c5      	b.n	800322c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030a8:	d16d      	bne.n	8003186 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80030aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80030ae:	3b01      	subs	r3, #1
 80030b0:	2b07      	cmp	r3, #7
 80030b2:	d82d      	bhi.n	8003110 <UART_SetConfig+0x300>
 80030b4:	a201      	add	r2, pc, #4	@ (adr r2, 80030bc <UART_SetConfig+0x2ac>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030dd 	.word	0x080030dd
 80030c0:	080030e5 	.word	0x080030e5
 80030c4:	08003111 	.word	0x08003111
 80030c8:	080030eb 	.word	0x080030eb
 80030cc:	08003111 	.word	0x08003111
 80030d0:	08003111 	.word	0x08003111
 80030d4:	08003111 	.word	0x08003111
 80030d8:	080030f3 	.word	0x080030f3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030dc:	f7ff f930 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 80030e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030e2:	e01b      	b.n	800311c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030e4:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <UART_SetConfig+0x2f8>)
 80030e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030e8:	e018      	b.n	800311c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ea:	f7ff f893 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80030ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030f0:	e014      	b.n	800311c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030f8:	e010      	b.n	800311c <UART_SetConfig+0x30c>
 80030fa:	bf00      	nop
 80030fc:	cfff69f3 	.word	0xcfff69f3
 8003100:	40008000 	.word	0x40008000
 8003104:	40013800 	.word	0x40013800
 8003108:	00f42400 	.word	0x00f42400
 800310c:	080037f0 	.word	0x080037f0
      default:
        pclk = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800311a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8084 	beq.w	800322c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	4a4b      	ldr	r2, [pc, #300]	@ (8003258 <UART_SetConfig+0x448>)
 800312a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800312e:	461a      	mov	r2, r3
 8003130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003132:	fbb3 f3f2 	udiv	r3, r3, r2
 8003136:	005a      	lsls	r2, r3, #1
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	085b      	lsrs	r3, r3, #1
 800313e:	441a      	add	r2, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	2b0f      	cmp	r3, #15
 800314e:	d916      	bls.n	800317e <UART_SetConfig+0x36e>
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003156:	d212      	bcs.n	800317e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	b29b      	uxth	r3, r3
 800315c:	f023 030f 	bic.w	r3, r3, #15
 8003160:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	b29b      	uxth	r3, r3
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	b29a      	uxth	r2, r3
 800316e:	8bfb      	ldrh	r3, [r7, #30]
 8003170:	4313      	orrs	r3, r2
 8003172:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	8bfa      	ldrh	r2, [r7, #30]
 800317a:	60da      	str	r2, [r3, #12]
 800317c:	e056      	b.n	800322c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003184:	e052      	b.n	800322c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003186:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800318a:	3b01      	subs	r3, #1
 800318c:	2b07      	cmp	r3, #7
 800318e:	d822      	bhi.n	80031d6 <UART_SetConfig+0x3c6>
 8003190:	a201      	add	r2, pc, #4	@ (adr r2, 8003198 <UART_SetConfig+0x388>)
 8003192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003196:	bf00      	nop
 8003198:	080031b9 	.word	0x080031b9
 800319c:	080031c1 	.word	0x080031c1
 80031a0:	080031d7 	.word	0x080031d7
 80031a4:	080031c7 	.word	0x080031c7
 80031a8:	080031d7 	.word	0x080031d7
 80031ac:	080031d7 	.word	0x080031d7
 80031b0:	080031d7 	.word	0x080031d7
 80031b4:	080031cf 	.word	0x080031cf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031b8:	f7ff f8c2 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 80031bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031be:	e010      	b.n	80031e2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c0:	4b26      	ldr	r3, [pc, #152]	@ (800325c <UART_SetConfig+0x44c>)
 80031c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031c4:	e00d      	b.n	80031e2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031c6:	f7ff f825 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80031ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031cc:	e009      	b.n	80031e2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031d4:	e005      	b.n	80031e2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80031e0:	bf00      	nop
    }

    if (pclk != 0U)
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d021      	beq.n	800322c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003258 <UART_SetConfig+0x448>)
 80031ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f2:	461a      	mov	r2, r3
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	085b      	lsrs	r3, r3, #1
 8003200:	441a      	add	r2, r3
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	2b0f      	cmp	r3, #15
 8003210:	d909      	bls.n	8003226 <UART_SetConfig+0x416>
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003218:	d205      	bcs.n	8003226 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	b29a      	uxth	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60da      	str	r2, [r3, #12]
 8003224:	e002      	b.n	800322c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2201      	movs	r2, #1
 8003230:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2201      	movs	r2, #1
 8003238:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2200      	movs	r2, #0
 8003240:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2200      	movs	r2, #0
 8003246:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003248:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800324c:	4618      	mov	r0, r3
 800324e:	3730      	adds	r7, #48	@ 0x30
 8003250:	46bd      	mov	sp, r7
 8003252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003256:	bf00      	nop
 8003258:	080037f0 	.word	0x080037f0
 800325c:	00f42400 	.word	0x00f42400

08003260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01a      	beq.n	8003376 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800335e:	d10a      	bne.n	8003376 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	605a      	str	r2, [r3, #4]
  }
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b098      	sub	sp, #96	@ 0x60
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033b4:	f7fd fc12 	bl	8000bdc <HAL_GetTick>
 80033b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d12f      	bne.n	8003428 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d0:	2200      	movs	r2, #0
 80033d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f88e 	bl	80034f8 <UART_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d022      	beq.n	8003428 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003400:	647b      	str	r3, [r7, #68]	@ 0x44
 8003402:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003406:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800340e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e6      	bne.n	80033e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e063      	b.n	80034f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b04      	cmp	r3, #4
 8003434:	d149      	bne.n	80034ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003436:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800343e:	2200      	movs	r2, #0
 8003440:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f857 	bl	80034f8 <UART_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d03c      	beq.n	80034ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	e853 3f00 	ldrex	r3, [r3]
 800345c:	623b      	str	r3, [r7, #32]
   return(result);
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003464:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800346e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003470:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003472:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003476:	e841 2300 	strex	r3, r2, [r1]
 800347a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800347c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1e6      	bne.n	8003450 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3308      	adds	r3, #8
 8003488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	e853 3f00 	ldrex	r3, [r3]
 8003490:	60fb      	str	r3, [r7, #12]
   return(result);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3308      	adds	r3, #8
 80034a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034a2:	61fa      	str	r2, [r7, #28]
 80034a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	69b9      	ldr	r1, [r7, #24]
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	e841 2300 	strex	r3, r2, [r1]
 80034ae:	617b      	str	r3, [r7, #20]
   return(result);
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e5      	bne.n	8003482 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e012      	b.n	80034f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3758      	adds	r7, #88	@ 0x58
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003508:	e04f      	b.n	80035aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d04b      	beq.n	80035aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003512:	f7fd fb63 	bl	8000bdc <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	429a      	cmp	r2, r3
 8003520:	d302      	bcc.n	8003528 <UART_WaitOnFlagUntilTimeout+0x30>
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e04e      	b.n	80035ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	d037      	beq.n	80035aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b80      	cmp	r3, #128	@ 0x80
 800353e:	d034      	beq.n	80035aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b40      	cmp	r3, #64	@ 0x40
 8003544:	d031      	beq.n	80035aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b08      	cmp	r3, #8
 8003552:	d110      	bne.n	8003576 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2208      	movs	r2, #8
 800355a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f838 	bl	80035d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2208      	movs	r2, #8
 8003566:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e029      	b.n	80035ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003584:	d111      	bne.n	80035aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800358e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f81e 	bl	80035d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2220      	movs	r2, #32
 800359a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e00f      	b.n	80035ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69da      	ldr	r2, [r3, #28]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4013      	ands	r3, r2
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	bf0c      	ite	eq
 80035ba:	2301      	moveq	r3, #1
 80035bc:	2300      	movne	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d0a0      	beq.n	800350a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b095      	sub	sp, #84	@ 0x54
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e2:	e853 3f00 	ldrex	r3, [r3]
 80035e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80035fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003600:	e841 2300 	strex	r3, r2, [r1]
 8003604:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e6      	bne.n	80035da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3308      	adds	r3, #8
 8003612:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	e853 3f00 	ldrex	r3, [r3]
 800361a:	61fb      	str	r3, [r7, #28]
   return(result);
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3308      	adds	r3, #8
 800362e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003630:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003632:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003634:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003638:	e841 2300 	strex	r3, r2, [r1]
 800363c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800363e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e3      	bne.n	800360c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003648:	2b01      	cmp	r3, #1
 800364a:	d118      	bne.n	800367e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	e853 3f00 	ldrex	r3, [r3]
 8003658:	60bb      	str	r3, [r7, #8]
   return(result);
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f023 0310 	bic.w	r3, r3, #16
 8003660:	647b      	str	r3, [r7, #68]	@ 0x44
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366e:	6979      	ldr	r1, [r7, #20]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	e841 2300 	strex	r3, r2, [r1]
 8003676:	613b      	str	r3, [r7, #16]
   return(result);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e6      	bne.n	800364c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003692:	bf00      	nop
 8003694:	3754      	adds	r7, #84	@ 0x54
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <memset>:
 800369e:	4402      	add	r2, r0
 80036a0:	4603      	mov	r3, r0
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d100      	bne.n	80036a8 <memset+0xa>
 80036a6:	4770      	bx	lr
 80036a8:	f803 1b01 	strb.w	r1, [r3], #1
 80036ac:	e7f9      	b.n	80036a2 <memset+0x4>
	...

080036b0 <__libc_init_array>:
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	4d0d      	ldr	r5, [pc, #52]	@ (80036e8 <__libc_init_array+0x38>)
 80036b4:	4c0d      	ldr	r4, [pc, #52]	@ (80036ec <__libc_init_array+0x3c>)
 80036b6:	1b64      	subs	r4, r4, r5
 80036b8:	10a4      	asrs	r4, r4, #2
 80036ba:	2600      	movs	r6, #0
 80036bc:	42a6      	cmp	r6, r4
 80036be:	d109      	bne.n	80036d4 <__libc_init_array+0x24>
 80036c0:	4d0b      	ldr	r5, [pc, #44]	@ (80036f0 <__libc_init_array+0x40>)
 80036c2:	4c0c      	ldr	r4, [pc, #48]	@ (80036f4 <__libc_init_array+0x44>)
 80036c4:	f000 f818 	bl	80036f8 <_init>
 80036c8:	1b64      	subs	r4, r4, r5
 80036ca:	10a4      	asrs	r4, r4, #2
 80036cc:	2600      	movs	r6, #0
 80036ce:	42a6      	cmp	r6, r4
 80036d0:	d105      	bne.n	80036de <__libc_init_array+0x2e>
 80036d2:	bd70      	pop	{r4, r5, r6, pc}
 80036d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d8:	4798      	blx	r3
 80036da:	3601      	adds	r6, #1
 80036dc:	e7ee      	b.n	80036bc <__libc_init_array+0xc>
 80036de:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e2:	4798      	blx	r3
 80036e4:	3601      	adds	r6, #1
 80036e6:	e7f2      	b.n	80036ce <__libc_init_array+0x1e>
 80036e8:	08003810 	.word	0x08003810
 80036ec:	08003810 	.word	0x08003810
 80036f0:	08003810 	.word	0x08003810
 80036f4:	08003814 	.word	0x08003814

080036f8 <_init>:
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fa:	bf00      	nop
 80036fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fe:	bc08      	pop	{r3}
 8003700:	469e      	mov	lr, r3
 8003702:	4770      	bx	lr

08003704 <_fini>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	bf00      	nop
 8003708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370a:	bc08      	pop	{r3}
 800370c:	469e      	mov	lr, r3
 800370e:	4770      	bx	lr
