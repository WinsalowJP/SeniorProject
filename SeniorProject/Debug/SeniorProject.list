
SeniorProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009824  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  08009968  08009968  0000a968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009e9c  08009e9c  0000ae9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009ea4  08009ea4  0000aea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009ea8  08009ea8  0000aea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f0  20000008  08009eac  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003b8  200001f8  0800a09c  0000b1f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200005b0  0800a09c  0000b5b0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000b1f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ac1e  00000000  00000000  0000b228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003561  00000000  00000000  00025e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a60  00000000  00000000  000293a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001428  00000000  00000000  0002ae08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002533f  00000000  00000000  0002c230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019a6e  00000000  00000000  0005156f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000eaabd  00000000  00000000  0006afdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00155a9a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008038  00000000  00000000  00155ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0015db18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f8 	.word	0x200001f8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800994c 	.word	0x0800994c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001fc 	.word	0x200001fc
 800017c:	0800994c 	.word	0x0800994c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b988 	b.w	8000e80 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	468e      	mov	lr, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	4688      	mov	r8, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14a      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	d962      	bls.n	8000c64 <__udivmoddi4+0xdc>
 8000b9e:	fab2 f682 	clz	r6, r2
 8000ba2:	b14e      	cbz	r6, 8000bb8 <__udivmoddi4+0x30>
 8000ba4:	f1c6 0320 	rsb	r3, r6, #32
 8000ba8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bac:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb0:	40b7      	lsls	r7, r6
 8000bb2:	ea43 0808 	orr.w	r8, r3, r8
 8000bb6:	40b4      	lsls	r4, r6
 8000bb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bc4:	0c23      	lsrs	r3, r4, #16
 8000bc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bce:	fb01 f20c 	mul.w	r2, r1, ip
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0x62>
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bdc:	f080 80ea 	bcs.w	8000db4 <__udivmoddi4+0x22c>
 8000be0:	429a      	cmp	r2, r3
 8000be2:	f240 80e7 	bls.w	8000db4 <__udivmoddi4+0x22c>
 8000be6:	3902      	subs	r1, #2
 8000be8:	443b      	add	r3, r7
 8000bea:	1a9a      	subs	r2, r3, r2
 8000bec:	b2a3      	uxth	r3, r4
 8000bee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfe:	459c      	cmp	ip, r3
 8000c00:	d909      	bls.n	8000c16 <__udivmoddi4+0x8e>
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c08:	f080 80d6 	bcs.w	8000db8 <__udivmoddi4+0x230>
 8000c0c:	459c      	cmp	ip, r3
 8000c0e:	f240 80d3 	bls.w	8000db8 <__udivmoddi4+0x230>
 8000c12:	443b      	add	r3, r7
 8000c14:	3802      	subs	r0, #2
 8000c16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c1a:	eba3 030c 	sub.w	r3, r3, ip
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11d      	cbz	r5, 8000c2a <__udivmoddi4+0xa2>
 8000c22:	40f3      	lsrs	r3, r6
 8000c24:	2200      	movs	r2, #0
 8000c26:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d905      	bls.n	8000c3e <__udivmoddi4+0xb6>
 8000c32:	b10d      	cbz	r5, 8000c38 <__udivmoddi4+0xb0>
 8000c34:	e9c5 0100 	strd	r0, r1, [r5]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e7f5      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c3e:	fab3 f183 	clz	r1, r3
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d146      	bne.n	8000cd4 <__udivmoddi4+0x14c>
 8000c46:	4573      	cmp	r3, lr
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xc8>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 8105 	bhi.w	8000e5a <__udivmoddi4+0x2d2>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	4690      	mov	r8, r2
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0e5      	beq.n	8000c2a <__udivmoddi4+0xa2>
 8000c5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000c62:	e7e2      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	f000 8090 	beq.w	8000d8a <__udivmoddi4+0x202>
 8000c6a:	fab2 f682 	clz	r6, r2
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	f040 80a4 	bne.w	8000dbc <__udivmoddi4+0x234>
 8000c74:	1a8a      	subs	r2, r1, r2
 8000c76:	0c03      	lsrs	r3, r0, #16
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	b280      	uxth	r0, r0
 8000c7e:	b2bc      	uxth	r4, r7
 8000c80:	2101      	movs	r1, #1
 8000c82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x11e>
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x11c>
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	f200 80e0 	bhi.w	8000e64 <__udivmoddi4+0x2dc>
 8000ca4:	46c4      	mov	ip, r8
 8000ca6:	1a9b      	subs	r3, r3, r2
 8000ca8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cb0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cb4:	fb02 f404 	mul.w	r4, r2, r4
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x144>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x142>
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	f200 80ca 	bhi.w	8000e5e <__udivmoddi4+0x2d6>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0x98>
 8000cd4:	f1c1 0620 	rsb	r6, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 f706 	lsr.w	r7, r2, r6
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	fa0e f401 	lsl.w	r4, lr, r1
 8000ce4:	fa20 f306 	lsr.w	r3, r0, r6
 8000ce8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	fa1f fc87 	uxth.w	ip, r7
 8000cfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000cfe:	0c1c      	lsrs	r4, r3, #16
 8000d00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x1a0>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d1a:	f080 809c 	bcs.w	8000e56 <__udivmoddi4+0x2ce>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8099 	bls.w	8000e56 <__udivmoddi4+0x2ce>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	fa1f fe83 	uxth.w	lr, r3
 8000d30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d34:	fb09 4413 	mls	r4, r9, r3, r4
 8000d38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d40:	45a4      	cmp	ip, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x1ce>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d4a:	f080 8082 	bcs.w	8000e52 <__udivmoddi4+0x2ca>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	d97f      	bls.n	8000e52 <__udivmoddi4+0x2ca>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d5a:	eba4 040c 	sub.w	r4, r4, ip
 8000d5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d62:	4564      	cmp	r4, ip
 8000d64:	4673      	mov	r3, lr
 8000d66:	46e1      	mov	r9, ip
 8000d68:	d362      	bcc.n	8000e30 <__udivmoddi4+0x2a8>
 8000d6a:	d05f      	beq.n	8000e2c <__udivmoddi4+0x2a4>
 8000d6c:	b15d      	cbz	r5, 8000d86 <__udivmoddi4+0x1fe>
 8000d6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000d72:	eb64 0409 	sbc.w	r4, r4, r9
 8000d76:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d7e:	431e      	orrs	r6, r3
 8000d80:	40cc      	lsrs	r4, r1
 8000d82:	e9c5 6400 	strd	r6, r4, [r5]
 8000d86:	2100      	movs	r1, #0
 8000d88:	e74f      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000d8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d8e:	0c01      	lsrs	r1, r0, #16
 8000d90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d94:	b280      	uxth	r0, r0
 8000d96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4638      	mov	r0, r7
 8000d9e:	463c      	mov	r4, r7
 8000da0:	46b8      	mov	r8, r7
 8000da2:	46be      	mov	lr, r7
 8000da4:	2620      	movs	r6, #32
 8000da6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000daa:	eba2 0208 	sub.w	r2, r2, r8
 8000dae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000db2:	e766      	b.n	8000c82 <__udivmoddi4+0xfa>
 8000db4:	4601      	mov	r1, r0
 8000db6:	e718      	b.n	8000bea <__udivmoddi4+0x62>
 8000db8:	4610      	mov	r0, r2
 8000dba:	e72c      	b.n	8000c16 <__udivmoddi4+0x8e>
 8000dbc:	f1c6 0220 	rsb	r2, r6, #32
 8000dc0:	fa2e f302 	lsr.w	r3, lr, r2
 8000dc4:	40b7      	lsls	r7, r6
 8000dc6:	40b1      	lsls	r1, r6
 8000dc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dd6:	b2bc      	uxth	r4, r7
 8000dd8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ddc:	0c11      	lsrs	r1, r2, #16
 8000dde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de2:	fb08 f904 	mul.w	r9, r8, r4
 8000de6:	40b0      	lsls	r0, r6
 8000de8:	4589      	cmp	r9, r1
 8000dea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dee:	b280      	uxth	r0, r0
 8000df0:	d93e      	bls.n	8000e70 <__udivmoddi4+0x2e8>
 8000df2:	1879      	adds	r1, r7, r1
 8000df4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000df8:	d201      	bcs.n	8000dfe <__udivmoddi4+0x276>
 8000dfa:	4589      	cmp	r9, r1
 8000dfc:	d81f      	bhi.n	8000e3e <__udivmoddi4+0x2b6>
 8000dfe:	eba1 0109 	sub.w	r1, r1, r9
 8000e02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e06:	fb09 f804 	mul.w	r8, r9, r4
 8000e0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e0e:	b292      	uxth	r2, r2
 8000e10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e14:	4542      	cmp	r2, r8
 8000e16:	d229      	bcs.n	8000e6c <__udivmoddi4+0x2e4>
 8000e18:	18ba      	adds	r2, r7, r2
 8000e1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e1e:	d2c4      	bcs.n	8000daa <__udivmoddi4+0x222>
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d2c2      	bcs.n	8000daa <__udivmoddi4+0x222>
 8000e24:	f1a9 0102 	sub.w	r1, r9, #2
 8000e28:	443a      	add	r2, r7
 8000e2a:	e7be      	b.n	8000daa <__udivmoddi4+0x222>
 8000e2c:	45f0      	cmp	r8, lr
 8000e2e:	d29d      	bcs.n	8000d6c <__udivmoddi4+0x1e4>
 8000e30:	ebbe 0302 	subs.w	r3, lr, r2
 8000e34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e38:	3801      	subs	r0, #1
 8000e3a:	46e1      	mov	r9, ip
 8000e3c:	e796      	b.n	8000d6c <__udivmoddi4+0x1e4>
 8000e3e:	eba7 0909 	sub.w	r9, r7, r9
 8000e42:	4449      	add	r1, r9
 8000e44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4c:	fb09 f804 	mul.w	r8, r9, r4
 8000e50:	e7db      	b.n	8000e0a <__udivmoddi4+0x282>
 8000e52:	4673      	mov	r3, lr
 8000e54:	e77f      	b.n	8000d56 <__udivmoddi4+0x1ce>
 8000e56:	4650      	mov	r0, sl
 8000e58:	e766      	b.n	8000d28 <__udivmoddi4+0x1a0>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e6fd      	b.n	8000c5a <__udivmoddi4+0xd2>
 8000e5e:	443b      	add	r3, r7
 8000e60:	3a02      	subs	r2, #2
 8000e62:	e733      	b.n	8000ccc <__udivmoddi4+0x144>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	443b      	add	r3, r7
 8000e6a:	e71c      	b.n	8000ca6 <__udivmoddi4+0x11e>
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	e79c      	b.n	8000daa <__udivmoddi4+0x222>
 8000e70:	eba1 0109 	sub.w	r1, r1, r9
 8000e74:	46c4      	mov	ip, r8
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fb09 f804 	mul.w	r8, r9, r4
 8000e7e:	e7c4      	b.n	8000e0a <__udivmoddi4+0x282>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <read_adc1_channel>:
    // Stop ADC (optional for single conversion mode)
    HAL_ADC_Stop(&hadc1);

    return adcValue;
}
uint32_t read_adc1_channel(uint32_t channel) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	@ 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
 8000e9c:	615a      	str	r2, [r3, #20]
  sConfig.Channel      = channel;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]
  sConfig.Rank         = ADC_REGULAR_RANK_1;
 8000ea2:	2306      	movs	r3, #6
 8000ea4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  sConfig.SingleDiff   = ADC_SINGLE_ENDED;
 8000eaa:	237f      	movs	r3, #127	@ 0x7f
 8000eac:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	61fb      	str	r3, [r7, #28]
  sConfig.Offset       = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4811      	ldr	r0, [pc, #68]	@ (8000f04 <read_adc1_channel+0x80>)
 8000ebe:	f001 ff5d 	bl	8002d7c <HAL_ADC_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <read_adc1_channel+0x48>
	Error_Handler();
 8000ec8:	f000 fb5e 	bl	8001588 <Error_Handler>
  }

  HAL_ADC_Start(&hadc1);
 8000ecc:	480d      	ldr	r0, [pc, #52]	@ (8000f04 <read_adc1_channel+0x80>)
 8000ece:	f001 fc5f 	bl	8002790 <HAL_ADC_Start>
  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000ed2:	210a      	movs	r1, #10
 8000ed4:	480b      	ldr	r0, [pc, #44]	@ (8000f04 <read_adc1_channel+0x80>)
 8000ed6:	f001 fce2 	bl	800289e <HAL_ADC_PollForConversion>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d108      	bne.n	8000ef2 <read_adc1_channel+0x6e>
	uint32_t val = HAL_ADC_GetValue(&hadc1);
 8000ee0:	4808      	ldr	r0, [pc, #32]	@ (8000f04 <read_adc1_channel+0x80>)
 8000ee2:	f001 fd69 	bl	80029b8 <HAL_ADC_GetValue>
 8000ee6:	6278      	str	r0, [r7, #36]	@ 0x24
	HAL_ADC_Stop(&hadc1);
 8000ee8:	4806      	ldr	r0, [pc, #24]	@ (8000f04 <read_adc1_channel+0x80>)
 8000eea:	f001 fca5 	bl	8002838 <HAL_ADC_Stop>
	return val;
 8000eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef0:	e003      	b.n	8000efa <read_adc1_channel+0x76>
  }
  HAL_ADC_Stop(&hadc1);
 8000ef2:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <read_adc1_channel+0x80>)
 8000ef4:	f001 fca0 	bl	8002838 <HAL_ADC_Stop>
  return 0;  // conversion failed
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3728      	adds	r7, #40	@ 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000224 	.word	0x20000224

08000f08 <read_adc_value_avg>:
    float voltage = ((float)adc_raw / ADC_RESOLUTION) * ADC_VREF;
    return voltage;
}

uint32_t read_adc_value_avg(uint32_t channel,uint8_t numSamples)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < numSamples; i++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	72fb      	strb	r3, [r7, #11]
 8000f1c:	e00c      	b.n	8000f38 <read_adc_value_avg+0x30>
    {
        sum += read_adc1_channel(channel);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffb0 	bl	8000e84 <read_adc1_channel>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4413      	add	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
        HAL_Delay(5);
 8000f2c:	2005      	movs	r0, #5
 8000f2e:	f001 f889 	bl	8002044 <HAL_Delay>
    for (uint8_t i = 0; i < numSamples; i++)
 8000f32:	7afb      	ldrb	r3, [r7, #11]
 8000f34:	3301      	adds	r3, #1
 8000f36:	72fb      	strb	r3, [r7, #11]
 8000f38:	7afa      	ldrb	r2, [r7, #11]
 8000f3a:	78fb      	ldrb	r3, [r7, #3]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d3ee      	bcc.n	8000f1e <read_adc_value_avg+0x16>
    }
    return (sum / numSamples);
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <calculate_human_resistance>:

float calculate_human_resistance(uint32_t adcReading, uint32_t calibrationReading)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
    if (calibrationReading <= adcReading) {
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d802      	bhi.n	8000f68 <calculate_human_resistance+0x18>
        // Avoid division by zero or negative values
        return 0.0f;
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	e023      	b.n	8000fb0 <calculate_human_resistance+0x60>
    }
    float numerator = (4096.0f + 2.0f * (float)adcReading) * 10000.0f;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f76:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000fc4 <calculate_human_resistance+0x74>
 8000f7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f7e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000fc8 <calculate_human_resistance+0x78>
 8000f82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f86:	edc7 7a03 	vstr	s15, [r7, #12]
    float resistance = numerator / ((float)calibrationReading - (float)adcReading);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fa2:	edd7 6a03 	vldr	s13, [r7, #12]
 8000fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000faa:	edc7 7a02 	vstr	s15, [r7, #8]
    return resistance;
 8000fae:	68bb      	ldr	r3, [r7, #8]
}
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	45800000 	.word	0x45800000
 8000fc8:	461c4000 	.word	0x461c4000

08000fcc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fd8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fe8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4013      	ands	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
}
 8000ff2:	bf00      	nop
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001004:	b096      	sub	sp, #88	@ 0x58
 8001006:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001008:	f000 ff96 	bl	8001f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100c:	f000 f8e0 	bl	80011d0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001010:	f000 f936 	bl	8001280 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001014:	f000 fa84 	bl	8001520 <MX_GPIO_Init>
  MX_I2C3_Init();
 8001018:	f000 f9f4 	bl	8001404 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 800101c:	f000 fa32 	bl	8001484 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001020:	f000 f94c 	bl	80012bc <MX_ADC1_Init>
  MX_I2C1_Init();
 8001024:	f000 f9ae 	bl	8001384 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8001028:	2000      	movs	r0, #0
 800102a:	f000 fe2d 	bl	8001c88 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800102e:	2001      	movs	r0, #1
 8001030:	f000 fe2a 	bl	8001c88 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001034:	2002      	movs	r0, #2
 8001036:	f000 fe27 	bl	8001c88 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800103a:	2101      	movs	r1, #1
 800103c:	2000      	movs	r0, #0
 800103e:	f000 fe5d 	bl	8001cfc <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8001042:	2101      	movs	r1, #1
 8001044:	2001      	movs	r0, #1
 8001046:	f000 fe59 	bl	8001cfc <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 800104a:	2101      	movs	r1, #1
 800104c:	2002      	movs	r0, #2
 800104e:	f000 fe55 	bl	8001cfc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001052:	4b55      	ldr	r3, [pc, #340]	@ (80011a8 <main+0x1a8>)
 8001054:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001058:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800105a:	4b53      	ldr	r3, [pc, #332]	@ (80011a8 <main+0x1a8>)
 800105c:	2200      	movs	r2, #0
 800105e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001060:	4b51      	ldr	r3, [pc, #324]	@ (80011a8 <main+0x1a8>)
 8001062:	2200      	movs	r2, #0
 8001064:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001066:	4b50      	ldr	r3, [pc, #320]	@ (80011a8 <main+0x1a8>)
 8001068:	2200      	movs	r2, #0
 800106a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800106c:	4b4e      	ldr	r3, [pc, #312]	@ (80011a8 <main+0x1a8>)
 800106e:	2200      	movs	r2, #0
 8001070:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001072:	494d      	ldr	r1, [pc, #308]	@ (80011a8 <main+0x1a8>)
 8001074:	2000      	movs	r0, #0
 8001076:	f000 feb1 	bl	8001ddc <BSP_COM_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <main+0x84>
  {
    Error_Handler();
 8001080:	f000 fa82 	bl	8001588 <Error_Handler>
//	  // 2) Calibrate: this will print status each second until all = 3
//	  if (BNO055_CalibrateIMU() != 0) {
//	    printf("IMU calibration failed!\r\n");
//	    Error_Handler();
//	  }
	  printf("Time_ms,TempC,TempF,ADC,Voltage_V,Res_Ohm,Heading_deg,Roll_deg,Pitch_deg,AccX_g,AccY_g,AccZ_g,PPG\r\n");
 8001084:	4849      	ldr	r0, [pc, #292]	@ (80011ac <main+0x1ac>)
 8001086:	f006 fcef 	bl	8007a68 <puts>

	    uint32_t start = HAL_GetTick();
 800108a:	f000 ffc3 	bl	8002014 <HAL_GetTick>
 800108e:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    while ((HAL_GetTick() - start) < 30000)
 8001090:	e07c      	b.n	800118c <main+0x18c>
	    {
	      uint32_t ts = HAL_GetTick();
 8001092:	f000 ffbf 	bl	8002014 <HAL_GetTick>
 8001096:	62b8      	str	r0, [r7, #40]	@ 0x28

	      // temperature
	      float tempC = read_temperature();
 8001098:	f000 fd4e 	bl	8001b38 <read_temperature>
 800109c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	      float tempF = (tempC > -100.0f)
	                    ? (tempC * 9.0f / 5.0f + 32.0f)
	                    : -9999.0f;
 80010a0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80010a4:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80011b0 <main+0x1b0>
 80010a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b0:	dd0e      	ble.n	80010d0 <main+0xd0>
	                    ? (tempC * 9.0f / 5.0f + 32.0f)
 80010b2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80010b6:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80010ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010be:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80010c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
	                    : -9999.0f;
 80010c6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80011b4 <main+0x1b4>
 80010ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010ce:	e001      	b.n	80010d4 <main+0xd4>
 80010d0:	eddf 7a39 	vldr	s15, [pc, #228]	@ 80011b8 <main+0x1b8>
	      float tempF = (tempC > -100.0f)
 80010d4:	edc7 7a08 	vstr	s15, [r7, #32]

	      // GSR
//		  uint32_t adcRaw5   = read_adc1_channel(ADC_CHANNEL_5);
//		  float    volt5     = ((float)adcRaw5 / ADC_RESOLUTION) * ADC_VREF;
	      uint32_t adcRaw = read_adc_value_avg(ADC_CHANNEL_5,5);
 80010d8:	2105      	movs	r1, #5
 80010da:	4838      	ldr	r0, [pc, #224]	@ (80011bc <main+0x1bc>)
 80010dc:	f7ff ff14 	bl	8000f08 <read_adc_value_avg>
 80010e0:	61f8      	str	r0, [r7, #28]
	      float adcVoltage     = ((float)adcRaw / ADC_RESOLUTION) * ADC_VREF;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ec:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80011c0 <main+0x1c0>
 80010f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80010f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fc:	edc7 7a06 	vstr	s15, [r7, #24]
	      float humanResistance = calculate_human_resistance(adcRaw, SERIAL_CALIBRATION);
 8001100:	f640 4144 	movw	r1, #3140	@ 0xc44
 8001104:	69f8      	ldr	r0, [r7, #28]
 8001106:	f7ff ff23 	bl	8000f50 <calculate_human_resistance>
 800110a:	ed87 0a05 	vstr	s0, [r7, #20]
//	        gz = az / 1000.0f;
//	      }


	      //PPG
	      uint32_t adcRaw3   = read_adc1_channel(ADC_CHANNEL_3);
 800110e:	482d      	ldr	r0, [pc, #180]	@ (80011c4 <main+0x1c4>)
 8001110:	f7ff feb8 	bl	8000e84 <read_adc1_channel>
 8001114:	6138      	str	r0, [r7, #16]
		  float    volt3     = ((float)adcRaw3 / ADC_RESOLUTION) * ADC_VREF;
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	ee07 3a90 	vmov	s15, r3
 800111c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001120:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80011c0 <main+0x1c0>
 8001124:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001128:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800112c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001130:	edc7 7a03 	vstr	s15, [r7, #12]

	      // one CSV row
	      printf("%lu,%.3f,%.3f,%lu,%.3f,%.3f,%.3f\r\n",
 8001134:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001136:	f7ff f9df 	bl	80004f8 <__aeabi_f2d>
 800113a:	e9c7 0100 	strd	r0, r1, [r7]
 800113e:	6a38      	ldr	r0, [r7, #32]
 8001140:	f7ff f9da 	bl	80004f8 <__aeabi_f2d>
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	69b8      	ldr	r0, [r7, #24]
 800114a:	f7ff f9d5 	bl	80004f8 <__aeabi_f2d>
 800114e:	4680      	mov	r8, r0
 8001150:	4689      	mov	r9, r1
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f7ff f9d0 	bl	80004f8 <__aeabi_f2d>
 8001158:	4682      	mov	sl, r0
 800115a:	468b      	mov	fp, r1
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f7ff f9cb 	bl	80004f8 <__aeabi_f2d>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800116a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800116e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	e9cd 4500 	strd	r4, r5, [sp]
 800117a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800117e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001180:	4811      	ldr	r0, [pc, #68]	@ (80011c8 <main+0x1c8>)
 8001182:	f006 fc09 	bl	8007998 <iprintf>
	             tempF,
	             adcRaw,
	             adcVoltage,
	             humanResistance,volt3);

	      HAL_Delay(10);
 8001186:	200a      	movs	r0, #10
 8001188:	f000 ff5c 	bl	8002044 <HAL_Delay>
	    while ((HAL_GetTick() - start) < 30000)
 800118c:	f000 ff42 	bl	8002014 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	f247 522f 	movw	r2, #29999	@ 0x752f
 800119a:	4293      	cmp	r3, r2
 800119c:	f67f af79 	bls.w	8001092 <main+0x92>
	    }

	    printf("=== 30 s log complete ===\r\n");
 80011a0:	480a      	ldr	r0, [pc, #40]	@ (80011cc <main+0x1cc>)
 80011a2:	f006 fc61 	bl	8007a68 <puts>
  {
 80011a6:	e76d      	b.n	8001084 <main+0x84>
 80011a8:	20000214 	.word	0x20000214
 80011ac:	08009968 	.word	0x08009968
 80011b0:	c2c80000 	.word	0xc2c80000
 80011b4:	42000000 	.word	0x42000000
 80011b8:	c61c3c00 	.word	0xc61c3c00
 80011bc:	14f00020 	.word	0x14f00020
 80011c0:	457ff000 	.word	0x457ff000
 80011c4:	0c900008 	.word	0x0c900008
 80011c8:	080099cc 	.word	0x080099cc
 80011cc:	080099f0 	.word	0x080099f0

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b09a      	sub	sp, #104	@ 0x68
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	2248      	movs	r2, #72	@ 0x48
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f006 fd22 	bl	8007c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
 80011f2:	615a      	str	r2, [r3, #20]
 80011f4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f6:	4b21      	ldr	r3, [pc, #132]	@ (800127c <SystemClock_Config+0xac>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011fe:	4a1f      	ldr	r2, [pc, #124]	@ (800127c <SystemClock_Config+0xac>)
 8001200:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <SystemClock_Config+0xac>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001212:	2322      	movs	r3, #34	@ 0x22
 8001214:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001216:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800121a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800121c:	2301      	movs	r3, #1
 800121e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001220:	2340      	movs	r3, #64	@ 0x40
 8001222:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001224:	2300      	movs	r3, #0
 8001226:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001228:	23a0      	movs	r3, #160	@ 0xa0
 800122a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800122c:	2300      	movs	r3, #0
 800122e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	f107 0320 	add.w	r3, r7, #32
 8001234:	4618      	mov	r0, r3
 8001236:	f003 fe17 	bl	8004e68 <HAL_RCC_OscConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001240:	f000 f9a2 	bl	8001588 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001244:	236f      	movs	r3, #111	@ 0x6f
 8001246:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	2101      	movs	r1, #1
 8001264:	4618      	mov	r0, r3
 8001266:	f004 f973 	bl	8005550 <HAL_RCC_ClockConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001270:	f000 f98a 	bl	8001588 <Error_Handler>
  }
}
 8001274:	bf00      	nop
 8001276:	3768      	adds	r7, #104	@ 0x68
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	58000400 	.word	0x58000400

08001280 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b094      	sub	sp, #80	@ 0x50
 8001284:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001286:	463b      	mov	r3, r7
 8001288:	2250      	movs	r2, #80	@ 0x50
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f006 fccb 	bl	8007c28 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001292:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001296:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001298:	2300      	movs	r3, #0
 800129a:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800129c:	2300      	movs	r3, #0
 800129e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4618      	mov	r0, r3
 80012a4:	f004 fd91 	bl	8005dca <HAL_RCCEx_PeriphCLKConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80012ae:	f000 f96b 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80012b2:	bf00      	nop
 80012b4:	3750      	adds	r7, #80	@ 0x50
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012c2:	463b      	mov	r3, r7
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
 80012d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012d2:	4b29      	ldr	r3, [pc, #164]	@ (8001378 <MX_ADC1_Init+0xbc>)
 80012d4:	4a29      	ldr	r2, [pc, #164]	@ (800137c <MX_ADC1_Init+0xc0>)
 80012d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80012d8:	4b27      	ldr	r3, [pc, #156]	@ (8001378 <MX_ADC1_Init+0xbc>)
 80012da:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80012de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012e0:	4b25      	ldr	r3, [pc, #148]	@ (8001378 <MX_ADC1_Init+0xbc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012e6:	4b24      	ldr	r3, [pc, #144]	@ (8001378 <MX_ADC1_Init+0xbc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012ec:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <MX_ADC1_Init+0xbc>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012f2:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <MX_ADC1_Init+0xbc>)
 80012f4:	2204      	movs	r2, #4
 80012f6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <MX_ADC1_Init+0xbc>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <MX_ADC1_Init+0xbc>)
 8001300:	2201      	movs	r2, #1
 8001302:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001304:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <MX_ADC1_Init+0xbc>)
 8001306:	2201      	movs	r2, #1
 8001308:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800130a:	4b1b      	ldr	r3, [pc, #108]	@ (8001378 <MX_ADC1_Init+0xbc>)
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001312:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <MX_ADC1_Init+0xbc>)
 8001314:	2200      	movs	r2, #0
 8001316:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001318:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <MX_ADC1_Init+0xbc>)
 800131a:	2200      	movs	r2, #0
 800131c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800131e:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <MX_ADC1_Init+0xbc>)
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001326:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <MX_ADC1_Init+0xbc>)
 8001328:	2200      	movs	r2, #0
 800132a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <MX_ADC1_Init+0xbc>)
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001334:	4810      	ldr	r0, [pc, #64]	@ (8001378 <MX_ADC1_Init+0xbc>)
 8001336:	f001 f8df 	bl	80024f8 <HAL_ADC_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001340:	f000 f922 	bl	8001588 <Error_Handler>
  }

  /** Configure Regular Channel*/
  sConfig.Channel = ADC_CHANNEL_5;
 8001344:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <MX_ADC1_Init+0xc4>)
 8001346:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001348:	2306      	movs	r3, #6
 800134a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001350:	237f      	movs	r3, #127	@ 0x7f
 8001352:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001354:	2304      	movs	r3, #4
 8001356:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135c:	463b      	mov	r3, r7
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	@ (8001378 <MX_ADC1_Init+0xbc>)
 8001362:	f001 fd0b 	bl	8002d7c <HAL_ADC_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800136c:	f000 f90c 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000224 	.word	0x20000224
 800137c:	50040000 	.word	0x50040000
 8001380:	14f00020 	.word	0x14f00020

08001384 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001388:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <MX_I2C1_Init+0x74>)
 800138a:	4a1c      	ldr	r2, [pc, #112]	@ (80013fc <MX_I2C1_Init+0x78>)
 800138c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 800138e:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <MX_I2C1_Init+0x74>)
 8001390:	4a1b      	ldr	r2, [pc, #108]	@ (8001400 <MX_I2C1_Init+0x7c>)
 8001392:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001394:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <MX_I2C1_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800139a:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <MX_I2C1_Init+0x74>)
 800139c:	2201      	movs	r2, #1
 800139e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a0:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <MX_I2C1_Init+0x74>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013a6:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <MX_I2C1_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <MX_I2C1_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b2:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <MX_I2C1_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <MX_I2C1_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013be:	480e      	ldr	r0, [pc, #56]	@ (80013f8 <MX_I2C1_Init+0x74>)
 80013c0:	f002 fd02 	bl	8003dc8 <HAL_I2C_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013ca:	f000 f8dd 	bl	8001588 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ce:	2100      	movs	r1, #0
 80013d0:	4809      	ldr	r0, [pc, #36]	@ (80013f8 <MX_I2C1_Init+0x74>)
 80013d2:	f003 f91d 	bl	8004610 <HAL_I2CEx_ConfigAnalogFilter>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013dc:	f000 f8d4 	bl	8001588 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013e0:	2100      	movs	r1, #0
 80013e2:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <MX_I2C1_Init+0x74>)
 80013e4:	f003 f95f 	bl	80046a6 <HAL_I2CEx_ConfigDigitalFilter>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013ee:	f000 f8cb 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000288 	.word	0x20000288
 80013fc:	40005400 	.word	0x40005400
 8001400:	00b07cb4 	.word	0x00b07cb4

08001404 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <MX_I2C3_Init+0x74>)
 800140a:	4a1c      	ldr	r2, [pc, #112]	@ (800147c <MX_I2C3_Init+0x78>)
 800140c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B07CB4;
 800140e:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_I2C3_Init+0x74>)
 8001410:	4a1b      	ldr	r2, [pc, #108]	@ (8001480 <MX_I2C3_Init+0x7c>)
 8001412:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001414:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <MX_I2C3_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141a:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <MX_I2C3_Init+0x74>)
 800141c:	2201      	movs	r2, #1
 800141e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <MX_I2C3_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001426:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <MX_I2C3_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <MX_I2C3_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001432:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <MX_I2C3_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001438:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <MX_I2C3_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800143e:	480e      	ldr	r0, [pc, #56]	@ (8001478 <MX_I2C3_Init+0x74>)
 8001440:	f002 fcc2 	bl	8003dc8 <HAL_I2C_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800144a:	f000 f89d 	bl	8001588 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800144e:	2100      	movs	r1, #0
 8001450:	4809      	ldr	r0, [pc, #36]	@ (8001478 <MX_I2C3_Init+0x74>)
 8001452:	f003 f8dd 	bl	8004610 <HAL_I2CEx_ConfigAnalogFilter>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800145c:	f000 f894 	bl	8001588 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001460:	2100      	movs	r1, #0
 8001462:	4805      	ldr	r0, [pc, #20]	@ (8001478 <MX_I2C3_Init+0x74>)
 8001464:	f003 f91f 	bl	80046a6 <HAL_I2CEx_ConfigDigitalFilter>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800146e:	f000 f88b 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200002dc 	.word	0x200002dc
 800147c:	40005c00 	.word	0x40005c00
 8001480:	00b07cb4 	.word	0x00b07cb4

08001484 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001488:	4b23      	ldr	r3, [pc, #140]	@ (8001518 <MX_LPUART1_UART_Init+0x94>)
 800148a:	4a24      	ldr	r2, [pc, #144]	@ (800151c <MX_LPUART1_UART_Init+0x98>)
 800148c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800148e:	4b22      	ldr	r3, [pc, #136]	@ (8001518 <MX_LPUART1_UART_Init+0x94>)
 8001490:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001494:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b20      	ldr	r3, [pc, #128]	@ (8001518 <MX_LPUART1_UART_Init+0x94>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <MX_LPUART1_UART_Init+0x94>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001518 <MX_LPUART1_UART_Init+0x94>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <MX_LPUART1_UART_Init+0x94>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80014ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001518 <MX_LPUART1_UART_Init+0x94>)
 80014b0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80014b4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b6:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <MX_LPUART1_UART_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014bc:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <MX_LPUART1_UART_Init+0x94>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <MX_LPUART1_UART_Init+0x94>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80014c8:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <MX_LPUART1_UART_Init+0x94>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80014ce:	4812      	ldr	r0, [pc, #72]	@ (8001518 <MX_LPUART1_UART_Init+0x94>)
 80014d0:	f004 ff22 	bl	8006318 <HAL_UART_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 80014da:	f000 f855 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014de:	2100      	movs	r1, #0
 80014e0:	480d      	ldr	r0, [pc, #52]	@ (8001518 <MX_LPUART1_UART_Init+0x94>)
 80014e2:	f005 fc77 	bl	8006dd4 <HAL_UARTEx_SetTxFifoThreshold>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 80014ec:	f000 f84c 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f0:	2100      	movs	r1, #0
 80014f2:	4809      	ldr	r0, [pc, #36]	@ (8001518 <MX_LPUART1_UART_Init+0x94>)
 80014f4:	f005 fcac 	bl	8006e50 <HAL_UARTEx_SetRxFifoThreshold>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 80014fe:	f000 f843 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	@ (8001518 <MX_LPUART1_UART_Init+0x94>)
 8001504:	f005 fc2d 	bl	8006d62 <HAL_UARTEx_DisableFifoMode>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 800150e:	f000 f83b 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000330 	.word	0x20000330
 800151c:	40008000 	.word	0x40008000

08001520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001534:	2004      	movs	r0, #4
 8001536:	f7ff fd49 	bl	8000fcc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	2002      	movs	r0, #2
 800153c:	f7ff fd46 	bl	8000fcc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	2001      	movs	r0, #1
 8001542:	f7ff fd43 	bl	8000fcc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8001546:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800154a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001558:	230a      	movs	r3, #10
 800155a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001564:	f002 faa8 	bl	8003ab8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* PA3 for ADC1_IN3 */
  GPIO_InitStruct.Pin  = GPIO_PIN_3;
 8001568:	2308      	movs	r3, #8
 800156a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800156c:	2303      	movs	r3, #3
 800156e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4619      	mov	r1, r3
 8001578:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800157c:	f002 fa9c 	bl	8003ab8 <HAL_GPIO_Init>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001580:	bf00      	nop
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <Error_Handler+0x8>

08001594 <LL_AHB2_GRP1_EnableClock>:
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800159c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4013      	ands	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015b8:	68fb      	ldr	r3, [r7, #12]
}
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b085      	sub	sp, #20
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80015ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80015d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4313      	orrs	r3, r2
 80015dc:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80015de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4013      	ands	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001604:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001606:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4313      	orrs	r3, r2
 800160e:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001614:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4013      	ands	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800161c:	68fb      	ldr	r3, [r7, #12]
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b09c      	sub	sp, #112	@ 0x70
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	2250      	movs	r2, #80	@ 0x50
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f006 fae5 	bl	8007c28 <memset>
  if(hadc->Instance==ADC1)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a21      	ldr	r2, [pc, #132]	@ (80016e8 <HAL_ADC_MspInit+0xb0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d13a      	bne.n	80016de <HAL_ADC_MspInit+0xa6>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001668:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800166c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800166e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001672:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	4618      	mov	r0, r3
 800167a:	f004 fba6 	bl	8005dca <HAL_RCCEx_PeriphCLKConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001684:	f7ff ff80 	bl	8001588 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001688:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800168c:	f7ff ff82 	bl	8001594 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001690:	2004      	movs	r0, #4
 8001692:	f7ff ff7f 	bl	8001594 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	2001      	movs	r0, #1
 8001698:	f7ff ff7c 	bl	8001594 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800169c:	2304      	movs	r3, #4
 800169e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a0:	2303      	movs	r3, #3
 80016a2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80016ac:	4619      	mov	r1, r3
 80016ae:	480f      	ldr	r0, [pc, #60]	@ (80016ec <HAL_ADC_MspInit+0xb4>)
 80016b0:	f002 fa02 	bl	8003ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016b4:	2301      	movs	r3, #1
 80016b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b8:	2303      	movs	r3, #3
 80016ba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80016c4:	4619      	mov	r1, r3
 80016c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ca:	f002 f9f5 	bl	8003ab8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2012      	movs	r0, #18
 80016d4:	f002 f9bb 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80016d8:	2012      	movs	r0, #18
 80016da:	f002 f9d2 	bl	8003a82 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80016de:	bf00      	nop
 80016e0:	3770      	adds	r7, #112	@ 0x70
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	50040000 	.word	0x50040000
 80016ec:	48000800 	.word	0x48000800

080016f0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b09c      	sub	sp, #112	@ 0x70
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2250      	movs	r2, #80	@ 0x50
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f006 fa89 	bl	8007c28 <memset>
  if(hi2c->Instance==I2C1)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a2d      	ldr	r2, [pc, #180]	@ (80017d0 <HAL_I2C_MspInit+0xe0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d127      	bne.n	8001770 <HAL_I2C_MspInit+0x80>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001720:	2304      	movs	r3, #4
 8001722:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001724:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001728:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	4618      	mov	r0, r3
 8001730:	f004 fb4b 	bl	8005dca <HAL_RCCEx_PeriphCLKConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800173a:	f7ff ff25 	bl	8001588 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	2002      	movs	r0, #2
 8001740:	f7ff ff28 	bl	8001594 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001744:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001748:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800174a:	2312      	movs	r3, #18
 800174c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001756:	2304      	movs	r3, #4
 8001758:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800175e:	4619      	mov	r1, r3
 8001760:	481c      	ldr	r0, [pc, #112]	@ (80017d4 <HAL_I2C_MspInit+0xe4>)
 8001762:	f002 f9a9 	bl	8003ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001766:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800176a:	f7ff ff2c 	bl	80015c6 <LL_APB1_GRP1_EnableClock>
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800176e:	e02a      	b.n	80017c6 <HAL_I2C_MspInit+0xd6>
  else if(hi2c->Instance==I2C3)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a18      	ldr	r2, [pc, #96]	@ (80017d8 <HAL_I2C_MspInit+0xe8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d125      	bne.n	80017c6 <HAL_I2C_MspInit+0xd6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800177a:	2308      	movs	r3, #8
 800177c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800177e:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001782:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	4618      	mov	r0, r3
 800178a:	f004 fb1e 	bl	8005dca <HAL_RCCEx_PeriphCLKConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8001794:	f7ff fef8 	bl	8001588 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001798:	2004      	movs	r0, #4
 800179a:	f7ff fefb 	bl	8001594 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800179e:	2303      	movs	r3, #3
 80017a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a2:	2312      	movs	r3, #18
 80017a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017aa:	2302      	movs	r3, #2
 80017ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017ae:	2304      	movs	r3, #4
 80017b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80017b6:	4619      	mov	r1, r3
 80017b8:	4808      	ldr	r0, [pc, #32]	@ (80017dc <HAL_I2C_MspInit+0xec>)
 80017ba:	f002 f97d 	bl	8003ab8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80017be:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80017c2:	f7ff ff00 	bl	80015c6 <LL_APB1_GRP1_EnableClock>
}
 80017c6:	bf00      	nop
 80017c8:	3770      	adds	r7, #112	@ 0x70
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40005400 	.word	0x40005400
 80017d4:	48000400 	.word	0x48000400
 80017d8:	40005c00 	.word	0x40005c00
 80017dc:	48000800 	.word	0x48000800

080017e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b09c      	sub	sp, #112	@ 0x70
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	2250      	movs	r2, #80	@ 0x50
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f006 fa11 	bl	8007c28 <memset>
  if(huart->Instance==LPUART1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a20      	ldr	r2, [pc, #128]	@ (800188c <HAL_UART_MspInit+0xac>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d138      	bne.n	8001882 <HAL_UART_MspInit+0xa2>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001810:	2302      	movs	r3, #2
 8001812:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001814:	2300      	movs	r3, #0
 8001816:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4618      	mov	r0, r3
 800181e:	f004 fad4 	bl	8005dca <HAL_RCCEx_PeriphCLKConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001828:	f7ff feae 	bl	8001588 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800182c:	2001      	movs	r0, #1
 800182e:	f7ff fee3 	bl	80015f8 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	2001      	movs	r0, #1
 8001834:	f7ff feae 	bl	8001594 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001838:	2002      	movs	r0, #2
 800183a:	f7ff feab 	bl	8001594 <LL_AHB2_GRP1_EnableClock>
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PA6     ------> LPUART1_CTS
    PB12     ------> LPUART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 800183e:	234c      	movs	r3, #76	@ 0x4c
 8001840:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800184e:	2308      	movs	r3, #8
 8001850:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001856:	4619      	mov	r1, r3
 8001858:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800185c:	f002 f92c 	bl	8003ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001860:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001864:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001872:	2308      	movs	r3, #8
 8001874:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800187a:	4619      	mov	r1, r3
 800187c:	4804      	ldr	r0, [pc, #16]	@ (8001890 <HAL_UART_MspInit+0xb0>)
 800187e:	f002 f91b 	bl	8003ab8 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001882:	bf00      	nop
 8001884:	3770      	adds	r7, #112	@ 0x70
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40008000 	.word	0x40008000
 8001890:	48000400 	.word	0x48000400

08001894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <NMI_Handler+0x4>

0800189c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <HardFault_Handler+0x4>

080018a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <MemManage_Handler+0x4>

080018ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <UsageFault_Handler+0x4>

080018bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ea:	f000 fb7f 	bl	8001fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018f8:	4802      	ldr	r0, [pc, #8]	@ (8001904 <ADC1_IRQHandler+0x10>)
 80018fa:	f001 f86a 	bl	80029d2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000224 	.word	0x20000224

08001908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return 1;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_kill>:

int _kill(int pid, int sig)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001922:	f006 f9d3 	bl	8007ccc <__errno>
 8001926:	4603      	mov	r3, r0
 8001928:	2216      	movs	r2, #22
 800192a:	601a      	str	r2, [r3, #0]
  return -1;
 800192c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_exit>:

void _exit (int status)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ffe7 	bl	8001918 <_kill>
  while (1) {}    /* Make sure we hang here */
 800194a:	bf00      	nop
 800194c:	e7fd      	b.n	800194a <_exit+0x12>

0800194e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e00a      	b.n	8001976 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001960:	f3af 8000 	nop.w
 8001964:	4601      	mov	r1, r0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	60ba      	str	r2, [r7, #8]
 800196c:	b2ca      	uxtb	r2, r1
 800196e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	3301      	adds	r3, #1
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	dbf0      	blt.n	8001960 <_read+0x12>
  }

  return len;
 800197e:	687b      	ldr	r3, [r7, #4]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	e009      	b.n	80019ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	60ba      	str	r2, [r7, #8]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fa7c 	bl	8001ea0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3301      	adds	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	dbf1      	blt.n	800199a <_write+0x12>
  }
  return len;
 80019b6:	687b      	ldr	r3, [r7, #4]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_close>:

int _close(int file)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019e8:	605a      	str	r2, [r3, #4]
  return 0;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_isatty>:

int _isatty(int file)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a00:	2301      	movs	r3, #1
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b085      	sub	sp, #20
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a30:	4a14      	ldr	r2, [pc, #80]	@ (8001a84 <_sbrk+0x5c>)
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <_sbrk+0x60>)
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <_sbrk+0x64>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	@ (8001a90 <_sbrk+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d207      	bcs.n	8001a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a58:	f006 f938 	bl	8007ccc <__errno>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	220c      	movs	r2, #12
 8001a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	e009      	b.n	8001a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a68:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	@ (8001a8c <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	4a05      	ldr	r2, [pc, #20]	@ (8001a8c <_sbrk+0x64>)
 8001a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20030000 	.word	0x20030000
 8001a88:	00000400 	.word	0x00000400
 8001a8c:	200003c4 	.word	0x200003c4
 8001a90:	200005b0 	.word	0x200005b0

08001a94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001a98:	4b24      	ldr	r3, [pc, #144]	@ (8001b2c <SystemInit+0x98>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a9e:	4a23      	ldr	r2, [pc, #140]	@ (8001b2c <SystemInit+0x98>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001ab8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001abc:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001ac0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001ac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001acc:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <SystemInit+0x9c>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ada:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ade:	f023 0305 	bic.w	r3, r3, #5
 8001ae2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001ae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001af2:	f023 0301 	bic.w	r3, r3, #1
 8001af6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001afa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001afe:	4a0d      	ldr	r2, [pc, #52]	@ (8001b34 <SystemInit+0xa0>)
 8001b00:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b06:	4a0b      	ldr	r2, [pc, #44]	@ (8001b34 <SystemInit+0xa0>)
 8001b08:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00
 8001b30:	faf6fefb 	.word	0xfaf6fefb
 8001b34:	22041000 	.word	0x22041000

08001b38 <read_temperature>:
#include "tmp.h"
#include <stdint.h>
extern I2C_HandleTypeDef hi2c3;

float read_temperature(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af04      	add	r7, sp, #16
    uint8_t tempData[2];

    // Read 2 bytes from the temperature register
    if (HAL_I2C_Mem_Read(&hi2c3, TMP117_ADDR, TMP117_TEMP_REG, I2C_MEMADD_SIZE_8BIT, tempData, 2, HAL_MAX_DELAY) != HAL_OK)
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	9302      	str	r3, [sp, #8]
 8001b44:	2302      	movs	r3, #2
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2190      	movs	r1, #144	@ 0x90
 8001b52:	4813      	ldr	r0, [pc, #76]	@ (8001ba0 <read_temperature+0x68>)
 8001b54:	f002 f9d4 	bl	8003f00 <HAL_I2C_Mem_Read>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d004      	beq.n	8001b68 <read_temperature+0x30>
    {
        printf("TMP117 read error!\n");
 8001b5e:	4811      	ldr	r0, [pc, #68]	@ (8001ba4 <read_temperature+0x6c>)
 8001b60:	f005 ff82 	bl	8007a68 <puts>
        return -999.0f;  // Return a clearly erroneous value to indicate a failure
 8001b64:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <read_temperature+0x70>)
 8001b66:	e014      	b.n	8001b92 <read_temperature+0x5a>
    }

    // Combine the two bytes into a 16-bit value (big-endian format)
    int16_t rawTemp = (int16_t)((tempData[0] << 8) | tempData[1]);
 8001b68:	793b      	ldrb	r3, [r7, #4]
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	797b      	ldrb	r3, [r7, #5]
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	81fb      	strh	r3, [r7, #14]

    // Convert the raw value to temperature in Celsius.
    // Each LSB represents 0.0078125°C
    float temperature = rawTemp * 0.0078125f;
 8001b78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b84:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001bac <read_temperature+0x74>
 8001b88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b8c:	edc7 7a02 	vstr	s15, [r7, #8]

    return temperature;
 8001b90:	68bb      	ldr	r3, [r7, #8]
}
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200002dc 	.word	0x200002dc
 8001ba4:	08009a0c 	.word	0x08009a0c
 8001ba8:	c479c000 	.word	0xc479c000
 8001bac:	3c000000 	.word	0x3c000000

08001bb0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001bb0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb4:	3304      	adds	r3, #4

08001bb6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001bba:	d3f9      	bcc.n	8001bb0 <CopyDataInit>
  bx lr
 8001bbc:	4770      	bx	lr

08001bbe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001bbe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001bc0:	3004      	adds	r0, #4

08001bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001bc2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001bc4:	d3fb      	bcc.n	8001bbe <FillZerobss>
  bx lr
 8001bc6:	4770      	bx	lr

08001bc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bc8:	480c      	ldr	r0, [pc, #48]	@ (8001bfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bcc:	f7ff ff62 	bl	8001a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001bd0:	480b      	ldr	r0, [pc, #44]	@ (8001c00 <LoopForever+0x6>)
 8001bd2:	490c      	ldr	r1, [pc, #48]	@ (8001c04 <LoopForever+0xa>)
 8001bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001c08 <LoopForever+0xe>)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f7ff ffed 	bl	8001bb6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001bdc:	480b      	ldr	r0, [pc, #44]	@ (8001c0c <LoopForever+0x12>)
 8001bde:	490c      	ldr	r1, [pc, #48]	@ (8001c10 <LoopForever+0x16>)
 8001be0:	4a0c      	ldr	r2, [pc, #48]	@ (8001c14 <LoopForever+0x1a>)
 8001be2:	2300      	movs	r3, #0
 8001be4:	f7ff ffe7 	bl	8001bb6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001be8:	480b      	ldr	r0, [pc, #44]	@ (8001c18 <LoopForever+0x1e>)
 8001bea:	490c      	ldr	r1, [pc, #48]	@ (8001c1c <LoopForever+0x22>)
 8001bec:	2300      	movs	r3, #0
 8001bee:	f7ff ffe8 	bl	8001bc2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bf2:	f006 f871 	bl	8007cd8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001bf6:	f7ff fa03 	bl	8001000 <main>

08001bfa <LoopForever>:

LoopForever:
  b LoopForever
 8001bfa:	e7fe      	b.n	8001bfa <LoopForever>
  ldr   r0, =_estack
 8001bfc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001c00:	20000008 	.word	0x20000008
 8001c04:	200001f8 	.word	0x200001f8
 8001c08:	08009eac 	.word	0x08009eac
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001c0c:	20030000 	.word	0x20030000
 8001c10:	20030000 	.word	0x20030000
 8001c14:	0800a09c 	.word	0x0800a09c
  INIT_BSS _sbss, _ebss
 8001c18:	200001f8 	.word	0x200001f8
 8001c1c:	200005b0 	.word	0x200005b0

08001c20 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c20:	e7fe      	b.n	8001c20 <AES1_IRQHandler>

08001c22 <LL_AHB2_GRP1_EnableClock>:
{
 8001c22:	b480      	push	{r7}
 8001c24:	b085      	sub	sp, #20
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4013      	ands	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c46:	68fb      	ldr	r3, [r7, #12]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c60:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c70:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c78:	68fb      	ldr	r3, [r7, #12]
}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001ca2:	2002      	movs	r0, #2
 8001ca4:	f7ff ffbd 	bl	8001c22 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	4a12      	ldr	r2, [pc, #72]	@ (8001cf4 <BSP_LED_Init+0x6c>)
 8001cac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cb0:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf8 <BSP_LED_Init+0x70>)
 8001cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc6:	f107 020c 	add.w	r2, r7, #12
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f001 fef3 	bl	8003ab8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	4a08      	ldr	r2, [pc, #32]	@ (8001cf8 <BSP_LED_Init+0x70>)
 8001cd6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	4a05      	ldr	r2, [pc, #20]	@ (8001cf4 <BSP_LED_Init+0x6c>)
 8001cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f002 f857 	bl	8003d98 <HAL_GPIO_WritePin>
}
 8001cea:	bf00      	nop
 8001cec:	3720      	adds	r7, #32
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	08009aec 	.word	0x08009aec
 8001cf8:	2000000c 	.word	0x2000000c

08001cfc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	460a      	mov	r2, r1
 8001d06:	71fb      	strb	r3, [r7, #7]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d103      	bne.n	8001d2a <BSP_PB_Init+0x2e>
 8001d22:	2004      	movs	r0, #4
 8001d24:	f7ff ff7d 	bl	8001c22 <LL_AHB2_GRP1_EnableClock>
 8001d28:	e00c      	b.n	8001d44 <BSP_PB_Init+0x48>
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d103      	bne.n	8001d38 <BSP_PB_Init+0x3c>
 8001d30:	2008      	movs	r0, #8
 8001d32:	f7ff ff76 	bl	8001c22 <LL_AHB2_GRP1_EnableClock>
 8001d36:	e005      	b.n	8001d44 <BSP_PB_Init+0x48>
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d102      	bne.n	8001d44 <BSP_PB_Init+0x48>
 8001d3e:	2008      	movs	r0, #8
 8001d40:	f7ff ff6f 	bl	8001c22 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001d44:	79bb      	ldrb	r3, [r7, #6]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d117      	bne.n	8001d7a <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	4a20      	ldr	r2, [pc, #128]	@ (8001dd0 <BSP_PB_Init+0xd4>)
 8001d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d52:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd4 <BSP_PB_Init+0xd8>)
 8001d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d68:	f107 020c 	add.w	r2, r7, #12
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f001 fea2 	bl	8003ab8 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8001d74:	2001      	movs	r0, #1
 8001d76:	f000 f965 	bl	8002044 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001d7a:	79bb      	ldrb	r3, [r7, #6]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d123      	bne.n	8001dc8 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	4a13      	ldr	r2, [pc, #76]	@ (8001dd0 <BSP_PB_Init+0xd4>)
 8001d84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d88:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8001d8e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d92:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd4 <BSP_PB_Init+0xd8>)
 8001d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9c:	f107 020c 	add.w	r2, r7, #12
 8001da0:	4611      	mov	r1, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f001 fe88 	bl	8003ab8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd8 <BSP_PB_Init+0xdc>)
 8001dac:	5cd3      	ldrb	r3, [r2, r3]
 8001dae:	b25b      	sxtb	r3, r3
 8001db0:	2200      	movs	r2, #0
 8001db2:	210f      	movs	r1, #15
 8001db4:	4618      	mov	r0, r3
 8001db6:	f001 fe4a 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	4a06      	ldr	r2, [pc, #24]	@ (8001dd8 <BSP_PB_Init+0xdc>)
 8001dbe:	5cd3      	ldrb	r3, [r2, r3]
 8001dc0:	b25b      	sxtb	r3, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f001 fe5d 	bl	8003a82 <HAL_NVIC_EnableIRQ>
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	08009af4 	.word	0x08009af4
 8001dd4:	20000018 	.word	0x20000018
 8001dd8:	08009afc 	.word	0x08009afc

08001ddc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d903      	bls.n	8001dfa <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001df2:	f06f 0301 	mvn.w	r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	e018      	b.n	8001e2c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2294      	movs	r2, #148	@ 0x94
 8001dfe:	fb02 f303 	mul.w	r3, r2, r3
 8001e02:	4a0d      	ldr	r2, [pc, #52]	@ (8001e38 <BSP_COM_Init+0x5c>)
 8001e04:	4413      	add	r3, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f866 	bl	8001ed8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	2294      	movs	r2, #148	@ 0x94
 8001e10:	fb02 f303 	mul.w	r3, r2, r3
 8001e14:	4a08      	ldr	r2, [pc, #32]	@ (8001e38 <BSP_COM_Init+0x5c>)
 8001e16:	4413      	add	r3, r2
 8001e18:	6839      	ldr	r1, [r7, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f80e 	bl	8001e3c <MX_LPUART1_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001e26:	f06f 0303 	mvn.w	r3, #3
 8001e2a:	e000      	b.n	8001e2e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200003c8 	.word	0x200003c8

08001e3c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001e46:	4b15      	ldr	r3, [pc, #84]	@ (8001e9c <MX_LPUART1_Init+0x60>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	220c      	movs	r2, #12
 8001e5a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	895b      	ldrh	r3, [r3, #10]
 8001e60:	461a      	mov	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	891b      	ldrh	r3, [r3, #8]
 8001e72:	461a      	mov	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	899b      	ldrh	r3, [r3, #12]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e88:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f004 fa44 	bl	8006318 <HAL_UART_Init>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000024 	.word	0x20000024

08001ea0 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001ea8:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <__io_putchar+0x30>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	2394      	movs	r3, #148	@ 0x94
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
 8001eb4:	4a07      	ldr	r2, [pc, #28]	@ (8001ed4 <__io_putchar+0x34>)
 8001eb6:	1898      	adds	r0, r3, r2
 8001eb8:	1d39      	adds	r1, r7, #4
 8001eba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f004 fa7a 	bl	80063b8 <HAL_UART_Transmit>
  return ch;
 8001ec4:	687b      	ldr	r3, [r7, #4]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	2000045c 	.word	0x2000045c
 8001ed4:	200003c8 	.word	0x200003c8

08001ed8 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	f7ff fe9e 	bl	8001c22 <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	f7ff fe9b 	bl	8001c22 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001eec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001ef0:	f7ff feb0 	bl	8001c54 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001ef4:	2340      	movs	r3, #64	@ 0x40
 8001ef6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001efc:	2302      	movs	r3, #2
 8001efe:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001f04:	2307      	movs	r3, #7
 8001f06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4809      	ldr	r0, [pc, #36]	@ (8001f34 <COM1_MspInit+0x5c>)
 8001f10:	f001 fdd2 	bl	8003ab8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001f14:	2380      	movs	r3, #128	@ 0x80
 8001f16:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001f1c:	2307      	movs	r3, #7
 8001f1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	4619      	mov	r1, r3
 8001f26:	4803      	ldr	r0, [pc, #12]	@ (8001f34 <COM1_MspInit+0x5c>)
 8001f28:	f001 fdc6 	bl	8003ab8 <HAL_GPIO_Init>
}
 8001f2c:	bf00      	nop
 8001f2e:	3720      	adds	r7, #32
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	48000400 	.word	0x48000400

08001f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f42:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <HAL_Init+0x3c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a0b      	ldr	r2, [pc, #44]	@ (8001f74 <HAL_Init+0x3c>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4e:	2003      	movs	r0, #3
 8001f50:	f001 fd72 	bl	8003a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f54:	2000      	movs	r0, #0
 8001f56:	f000 f80f 	bl	8001f78 <HAL_InitTick>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	71fb      	strb	r3, [r7, #7]
 8001f64:	e001      	b.n	8001f6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f66:	f7ff fb60 	bl	800162a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	58004000 	.word	0x58004000

08001f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001f84:	4b17      	ldr	r3, [pc, #92]	@ (8001fe4 <HAL_InitTick+0x6c>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d024      	beq.n	8001fd6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f8c:	f003 fc8c 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <HAL_InitTick+0x6c>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	4619      	mov	r1, r3
 8001f98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f001 fd7a 	bl	8003a9e <HAL_SYSTICK_Config>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10f      	bne.n	8001fd0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b0f      	cmp	r3, #15
 8001fb4:	d809      	bhi.n	8001fca <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbe:	f001 fd46 	bl	8003a4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fc2:	4a09      	ldr	r2, [pc, #36]	@ (8001fe8 <HAL_InitTick+0x70>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	e007      	b.n	8001fda <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
 8001fce:	e004      	b.n	8001fda <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e001      	b.n	8001fda <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	2000002c 	.word	0x2000002c
 8001fe8:	20000028 	.word	0x20000028

08001fec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	@ (800200c <HAL_IncTick+0x20>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <HAL_IncTick+0x24>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	4a04      	ldr	r2, [pc, #16]	@ (8002010 <HAL_IncTick+0x24>)
 8001ffe:	6013      	str	r3, [r2, #0]
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	2000002c 	.word	0x2000002c
 8002010:	20000460 	.word	0x20000460

08002014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return uwTick;
 8002018:	4b03      	ldr	r3, [pc, #12]	@ (8002028 <HAL_GetTick+0x14>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000460 	.word	0x20000460

0800202c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002030:	4b03      	ldr	r3, [pc, #12]	@ (8002040 <HAL_GetTickPrio+0x14>)
 8002032:	681b      	ldr	r3, [r3, #0]
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000028 	.word	0x20000028

08002044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800204c:	f7ff ffe2 	bl	8002014 <HAL_GetTick>
 8002050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d005      	beq.n	800206a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800205e:	4b0a      	ldr	r3, [pc, #40]	@ (8002088 <HAL_Delay+0x44>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800206a:	bf00      	nop
 800206c:	f7ff ffd2 	bl	8002014 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	429a      	cmp	r2, r3
 800207a:	d8f7      	bhi.n	800206c <HAL_Delay+0x28>
  {
  }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2000002c 	.word	0x2000002c

0800208c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	609a      	str	r2, [r3, #8]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	3360      	adds	r3, #96	@ 0x60
 8002106:	461a      	mov	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <LL_ADC_SetOffset+0x44>)
 8002116:	4013      	ands	r3, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	4313      	orrs	r3, r2
 8002124:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800212c:	bf00      	nop
 800212e:	371c      	adds	r7, #28
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	03fff000 	.word	0x03fff000

0800213c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3360      	adds	r3, #96	@ 0x60
 800214a:	461a      	mov	r2, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3360      	adds	r3, #96	@ 0x60
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	431a      	orrs	r2, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002192:	bf00      	nop
 8002194:	371c      	adds	r7, #28
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021b6:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	3330      	adds	r3, #48	@ 0x30
 80021d4:	461a      	mov	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	4413      	add	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	211f      	movs	r1, #31
 80021f0:	fa01 f303 	lsl.w	r3, r1, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	401a      	ands	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	0e9b      	lsrs	r3, r3, #26
 80021fc:	f003 011f 	and.w	r1, r3, #31
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	431a      	orrs	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002210:	bf00      	nop
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002244:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800225e:	b480      	push	{r7}
 8002260:	b087      	sub	sp, #28
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3314      	adds	r3, #20
 800226e:	461a      	mov	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	0e5b      	lsrs	r3, r3, #25
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	4413      	add	r3, r2
 800227c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	0d1b      	lsrs	r3, r3, #20
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	2107      	movs	r1, #7
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	401a      	ands	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	0d1b      	lsrs	r3, r3, #20
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	431a      	orrs	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80022a8:	bf00      	nop
 80022aa:	371c      	adds	r7, #28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022cc:	43db      	mvns	r3, r3
 80022ce:	401a      	ands	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0318 	and.w	r3, r3, #24
 80022d6:	4908      	ldr	r1, [pc, #32]	@ (80022f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022d8:	40d9      	lsrs	r1, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	400b      	ands	r3, r1
 80022de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e2:	431a      	orrs	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	0007ffff 	.word	0x0007ffff

080022fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800230c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6093      	str	r3, [r2, #8]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002330:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002334:	d101      	bne.n	800233a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002358:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800235c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002380:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002384:	d101      	bne.n	800238a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023ac:	f043 0201 	orr.w	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023d4:	f043 0202 	orr.w	r2, r3, #2
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <LL_ADC_IsEnabled+0x18>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <LL_ADC_IsEnabled+0x1a>
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b02      	cmp	r3, #2
 8002420:	d101      	bne.n	8002426 <LL_ADC_IsDisableOngoing+0x18>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <LL_ADC_IsDisableOngoing+0x1a>
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002444:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002448:	f043 0204 	orr.w	r2, r3, #4
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800246c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002470:	f043 0210 	orr.w	r2, r3, #16
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b04      	cmp	r3, #4
 8002496:	d101      	bne.n	800249c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024ba:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024be:	f043 0220 	orr.w	r2, r3, #32
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d101      	bne.n	80024ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002504:	2300      	movs	r3, #0
 8002506:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e12e      	b.n	8002774 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff f887 	bl	8001638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff feef 	bl	8002320 <LL_ADC_IsDeepPowerDownEnabled>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fed5 	bl	80022fc <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff0a 	bl	8002370 <LL_ADC_IsInternalRegulatorEnabled>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d115      	bne.n	800258e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff feee 	bl	8002348 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800256c:	4b83      	ldr	r3, [pc, #524]	@ (800277c <HAL_ADC_Init+0x284>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	099b      	lsrs	r3, r3, #6
 8002572:	4a83      	ldr	r2, [pc, #524]	@ (8002780 <HAL_ADC_Init+0x288>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	099b      	lsrs	r3, r3, #6
 800257a:	3301      	adds	r3, #1
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002580:	e002      	b.n	8002588 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	3b01      	subs	r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f9      	bne.n	8002582 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff feec 	bl	8002370 <LL_ADC_IsInternalRegulatorEnabled>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10d      	bne.n	80025ba <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a2:	f043 0210 	orr.w	r2, r3, #16
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ae:	f043 0201 	orr.w	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ff60 	bl	8002484 <LL_ADC_REG_IsConversionOngoing>
 80025c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 80c7 	bne.w	8002762 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 80c3 	bne.w	8002762 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80025e4:	f043 0202 	orr.w	r2, r3, #2
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fef9 	bl	80023e8 <LL_ADC_IsEnabled>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10b      	bne.n	8002614 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025fc:	4861      	ldr	r0, [pc, #388]	@ (8002784 <HAL_ADC_Init+0x28c>)
 80025fe:	f7ff fef3 	bl	80023e8 <LL_ADC_IsEnabled>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4619      	mov	r1, r3
 800260e:	485e      	ldr	r0, [pc, #376]	@ (8002788 <HAL_ADC_Init+0x290>)
 8002610:	f7ff fd3c 	bl	800208c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	7e5b      	ldrb	r3, [r3, #25]
 8002618:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800261e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002624:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800262a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002632:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002634:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d106      	bne.n	8002654 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	3b01      	subs	r3, #1
 800264c:	045b      	lsls	r3, r3, #17
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	d009      	beq.n	8002670 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002660:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002668:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	4b45      	ldr	r3, [pc, #276]	@ (800278c <HAL_ADC_Init+0x294>)
 8002678:	4013      	ands	r3, r2
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	69b9      	ldr	r1, [r7, #24]
 8002680:	430b      	orrs	r3, r1
 8002682:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fefb 	bl	8002484 <LL_ADC_REG_IsConversionOngoing>
 800268e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff1c 	bl	80024d2 <LL_ADC_INJ_IsConversionOngoing>
 800269a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d13d      	bne.n	800271e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d13a      	bne.n	800271e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026ac:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026b4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026c4:	f023 0302 	bic.w	r3, r3, #2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	69b9      	ldr	r1, [r7, #24]
 80026ce:	430b      	orrs	r3, r1
 80026d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d118      	bne.n	800270e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80026e6:	f023 0304 	bic.w	r3, r3, #4
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026f2:	4311      	orrs	r1, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80026f8:	4311      	orrs	r1, r2
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026fe:	430a      	orrs	r2, r1
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	611a      	str	r2, [r3, #16]
 800270c:	e007      	b.n	800271e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0201 	bic.w	r2, r2, #1
 800271c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d10c      	bne.n	8002740 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272c:	f023 010f 	bic.w	r1, r3, #15
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	1e5a      	subs	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	631a      	str	r2, [r3, #48]	@ 0x30
 800273e:	e007      	b.n	8002750 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 020f 	bic.w	r2, r2, #15
 800274e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002754:	f023 0303 	bic.w	r3, r3, #3
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002760:	e007      	b.n	8002772 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002766:	f043 0210 	orr.w	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002772:	7ffb      	ldrb	r3, [r7, #31]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3720      	adds	r7, #32
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000008 	.word	0x20000008
 8002780:	053e2d63 	.word	0x053e2d63
 8002784:	50040000 	.word	0x50040000
 8002788:	50040300 	.word	0x50040300
 800278c:	fff0c007 	.word	0xfff0c007

08002790 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fe71 	bl	8002484 <LL_ADC_REG_IsConversionOngoing>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d140      	bne.n	800282a <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_Start+0x26>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e03c      	b.n	8002830 <HAL_ADC_Start+0xa0>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 ff5e 	bl	8003680 <ADC_Enable>
 80027c4:	4603      	mov	r3, r0
 80027c6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d128      	bne.n	8002820 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80027d6:	f023 0301 	bic.w	r3, r3, #1
 80027da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ee:	d106      	bne.n	80027fe <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f4:	f023 0206 	bic.w	r2, r3, #6
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80027fc:	e002      	b.n	8002804 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	221c      	movs	r2, #28
 800280a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fe0b 	bl	8002434 <LL_ADC_REG_StartConversion>
 800281e:	e006      	b.n	800282e <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002828:	e001      	b.n	800282e <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800282a:	2302      	movs	r3, #2
 800282c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800282e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_ADC_Stop+0x16>
 800284a:	2302      	movs	r3, #2
 800284c:	e023      	b.n	8002896 <HAL_ADC_Stop+0x5e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002856:	2103      	movs	r1, #3
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fe55 	bl	8003508 <ADC_ConversionStop>
 800285e:	4603      	mov	r3, r0
 8002860:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d111      	bne.n	800288c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 ff83 	bl	8003774 <ADC_Disable>
 800286e:	4603      	mov	r3, r0
 8002870:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d109      	bne.n	800288c <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	f043 0201 	orr.w	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	655a      	str	r2, [r3, #84]	@ 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d102      	bne.n	80028b6 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80028b0:	2308      	movs	r3, #8
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	e010      	b.n	80028d8 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d007      	beq.n	80028d4 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c8:	f043 0220 	orr.w	r2, r3, #32
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	655a      	str	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e06d      	b.n	80029b0 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80028d4:	2304      	movs	r3, #4
 80028d6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80028d8:	f7ff fb9c 	bl	8002014 <HAL_GetTick>
 80028dc:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028de:	e021      	b.n	8002924 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e6:	d01d      	beq.n	8002924 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80028e8:	f7ff fb94 	bl	8002014 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d302      	bcc.n	80028fe <HAL_ADC_PollForConversion+0x60>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d112      	bne.n	8002924 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10b      	bne.n	8002924 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002910:	f043 0204 	orr.w	r2, r3, #4
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e045      	b.n	80029b0 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0d6      	beq.n	80028e0 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002936:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fc2b 	bl	800219e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d01c      	beq.n	8002988 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7e5b      	ldrb	r3, [r3, #25]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d118      	bne.n	8002988 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b08      	cmp	r3, #8
 8002962:	d111      	bne.n	8002988 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002968:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002974:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d105      	bne.n	8002988 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002980:	f043 0201 	orr.w	r2, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b08      	cmp	r3, #8
 800298c:	d104      	bne.n	8002998 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2208      	movs	r2, #8
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e00a      	b.n	80029ae <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d103      	bne.n	80029ae <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	220c      	movs	r2, #12
 80029ac:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b088      	sub	sp, #32
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d017      	beq.n	8002a28 <HAL_ADC_IRQHandler+0x56>
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d012      	beq.n	8002a28 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d105      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a12:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 ff31 	bl	8003882 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2202      	movs	r2, #2
 8002a26:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <HAL_ADC_IRQHandler+0x6a>
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d05d      	beq.n	8002b02 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d058      	beq.n	8002b02 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d105      	bne.n	8002a68 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a60:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fb96 	bl	800219e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d03d      	beq.n	8002af4 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a86:	d035      	beq.n	8002af4 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d12e      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fcf2 	bl	8002484 <LL_ADC_REG_IsConversionOngoing>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d11a      	bne.n	8002adc <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 020c 	bic.w	r2, r2, #12
 8002ab4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d112      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad2:	f043 0201 	orr.w	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ada:	e00b      	b.n	8002af4 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae0:	f043 0210 	orr.w	r2, r3, #16
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aec:	f043 0201 	orr.w	r2, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f922 	bl	8002d3e <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	220c      	movs	r2, #12
 8002b00:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d004      	beq.n	8002b16 <HAL_ADC_IRQHandler+0x144>
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d074      	beq.n	8002c0a <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d06f      	beq.n	8002c0a <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d105      	bne.n	8002b42 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fb76 	bl	8002238 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002b4c:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fb23 	bl	800219e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b58:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d049      	beq.n	8002bfc <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <HAL_ADC_IRQHandler+0x1b0>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d041      	beq.n	8002bfc <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d13c      	bne.n	8002bfc <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b8c:	2b40      	cmp	r3, #64	@ 0x40
 8002b8e:	d135      	bne.n	8002bfc <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d12e      	bne.n	8002bfc <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fc95 	bl	80024d2 <LL_ADC_INJ_IsConversionOngoing>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d11a      	bne.n	8002be4 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002bbc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d112      	bne.n	8002bfc <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	655a      	str	r2, [r3, #84]	@ 0x54
 8002be2:	e00b      	b.n	8002bfc <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be8:	f043 0210 	orr.w	r2, r3, #16
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf4:	f043 0201 	orr.w	r2, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fe18 	bl	8003832 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2260      	movs	r2, #96	@ 0x60
 8002c08:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d011      	beq.n	8002c38 <HAL_ADC_IRQHandler+0x266>
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00c      	beq.n	8002c38 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c22:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f891 	bl	8002d52 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2280      	movs	r2, #128	@ 0x80
 8002c36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d012      	beq.n	8002c68 <HAL_ADC_IRQHandler+0x296>
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00d      	beq.n	8002c68 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c50:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fdfe 	bl	800385a <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d012      	beq.n	8002c98 <HAL_ADC_IRQHandler+0x2c6>
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00d      	beq.n	8002c98 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c80:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fdf0 	bl	800386e <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d02b      	beq.n	8002cfa <HAL_ADC_IRQHandler+0x328>
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d026      	beq.n	8002cfa <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d102      	bne.n	8002cba <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	61fb      	str	r3, [r7, #28]
 8002cb8:	e009      	b.n	8002cce <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff faac 	bl	800221c <LL_ADC_REG_GetDMATransfer>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d10e      	bne.n	8002cf2 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce4:	f043 0202 	orr.w	r2, r3, #2
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f83a 	bl	8002d66 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2210      	movs	r2, #16
 8002cf8:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d018      	beq.n	8002d36 <HAL_ADC_IRQHandler+0x364>
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d013      	beq.n	8002d36 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d12:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1e:	f043 0208 	orr.w	r2, r3, #8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d2e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fd88 	bl	8003846 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8002d36:	bf00      	nop
 8002d38:	3720      	adds	r7, #32
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b0b6      	sub	sp, #216	@ 0xd8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x22>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e39f      	b.n	80034de <HAL_ADC_ConfigChannel+0x762>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fb6a 	bl	8002484 <LL_ADC_REG_IsConversionOngoing>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f040 8384 	bne.w	80034c0 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	6859      	ldr	r1, [r3, #4]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f7ff f9fd 	bl	80021c4 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fb58 	bl	8002484 <LL_ADC_REG_IsConversionOngoing>
 8002dd4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fb78 	bl	80024d2 <LL_ADC_INJ_IsConversionOngoing>
 8002de2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002de6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f040 81a6 	bne.w	800313c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002df0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f040 81a1 	bne.w	800313c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6819      	ldr	r1, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	461a      	mov	r2, r3
 8002e08:	f7ff fa29 	bl	800225e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	08db      	lsrs	r3, r3, #3
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d00a      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6919      	ldr	r1, [r3, #16]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e3e:	f7ff f959 	bl	80020f4 <LL_ADC_SetOffset>
 8002e42:	e17b      	b.n	800313c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff f976 	bl	800213c <LL_ADC_GetOffsetChannel>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0xf4>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2100      	movs	r1, #0
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff f96b 	bl	800213c <LL_ADC_GetOffsetChannel>
 8002e66:	4603      	mov	r3, r0
 8002e68:	0e9b      	lsrs	r3, r3, #26
 8002e6a:	f003 021f 	and.w	r2, r3, #31
 8002e6e:	e01e      	b.n	8002eae <HAL_ADC_ConfigChannel+0x132>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff f960 	bl	800213c <LL_ADC_GetOffsetChannel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	e004      	b.n	8002eac <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8002ea2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d105      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x14a>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	0e9b      	lsrs	r3, r3, #26
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	e018      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x17c>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002eda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ede:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002ee2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002eea:	2320      	movs	r3, #32
 8002eec:	e004      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002eee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ef2:	fab3 f383 	clz	r3, r3
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d106      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2200      	movs	r2, #0
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff f92f 	bl	8002168 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2101      	movs	r1, #1
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff f913 	bl	800213c <LL_ADC_GetOffsetChannel>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10a      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x1ba>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2101      	movs	r1, #1
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff f908 	bl	800213c <LL_ADC_GetOffsetChannel>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	0e9b      	lsrs	r3, r3, #26
 8002f30:	f003 021f 	and.w	r2, r3, #31
 8002f34:	e01e      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x1f8>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff f8fd 	bl	800213c <LL_ADC_GetOffsetChannel>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002f54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002f5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002f64:	2320      	movs	r3, #32
 8002f66:	e004      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002f68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x210>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	0e9b      	lsrs	r3, r3, #26
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	e018      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x242>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f98:	fa93 f3a3 	rbit	r3, r3
 8002f9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002fa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fa4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002fa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002fb0:	2320      	movs	r3, #32
 8002fb2:	e004      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002fb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fb8:	fab3 f383 	clz	r3, r3
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d106      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2101      	movs	r1, #1
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff f8cc 	bl	8002168 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2102      	movs	r1, #2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff f8b0 	bl	800213c <LL_ADC_GetOffsetChannel>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10a      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x280>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2102      	movs	r1, #2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff f8a5 	bl	800213c <LL_ADC_GetOffsetChannel>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	0e9b      	lsrs	r3, r3, #26
 8002ff6:	f003 021f 	and.w	r2, r3, #31
 8002ffa:	e01e      	b.n	800303a <HAL_ADC_ConfigChannel+0x2be>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2102      	movs	r1, #2
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff f89a 	bl	800213c <LL_ADC_GetOffsetChannel>
 8003008:	4603      	mov	r3, r0
 800300a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800301a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800301e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003022:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800302a:	2320      	movs	r3, #32
 800302c:	e004      	b.n	8003038 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800302e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003042:	2b00      	cmp	r3, #0
 8003044:	d105      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x2d6>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	0e9b      	lsrs	r3, r3, #26
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	e016      	b.n	8003080 <HAL_ADC_ConfigChannel+0x304>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003064:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003066:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800306a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003072:	2320      	movs	r3, #32
 8003074:	e004      	b.n	8003080 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003076:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	429a      	cmp	r2, r3
 8003082:	d106      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2200      	movs	r2, #0
 800308a:	2102      	movs	r1, #2
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff f86b 	bl	8002168 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2103      	movs	r1, #3
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff f84f 	bl	800213c <LL_ADC_GetOffsetChannel>
 800309e:	4603      	mov	r3, r0
 80030a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10a      	bne.n	80030be <HAL_ADC_ConfigChannel+0x342>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2103      	movs	r1, #3
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff f844 	bl	800213c <LL_ADC_GetOffsetChannel>
 80030b4:	4603      	mov	r3, r0
 80030b6:	0e9b      	lsrs	r3, r3, #26
 80030b8:	f003 021f 	and.w	r2, r3, #31
 80030bc:	e017      	b.n	80030ee <HAL_ADC_ConfigChannel+0x372>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2103      	movs	r1, #3
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff f839 	bl	800213c <LL_ADC_GetOffsetChannel>
 80030ca:	4603      	mov	r3, r0
 80030cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030d0:	fa93 f3a3 	rbit	r3, r3
 80030d4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80030d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030d8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80030da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80030e0:	2320      	movs	r3, #32
 80030e2:	e003      	b.n	80030ec <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80030e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d105      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x38a>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	0e9b      	lsrs	r3, r3, #26
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	e011      	b.n	800312a <HAL_ADC_ConfigChannel+0x3ae>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003116:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800311e:	2320      	movs	r3, #32
 8003120:	e003      	b.n	800312a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003124:	fab3 f383 	clz	r3, r3
 8003128:	b2db      	uxtb	r3, r3
 800312a:	429a      	cmp	r2, r3
 800312c:	d106      	bne.n	800313c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2200      	movs	r2, #0
 8003134:	2103      	movs	r1, #3
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff f816 	bl	8002168 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff f951 	bl	80023e8 <LL_ADC_IsEnabled>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	f040 81c2 	bne.w	80034d2 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6819      	ldr	r1, [r3, #0]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	461a      	mov	r2, r3
 800315c:	f7ff f8aa 	bl	80022b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4a8e      	ldr	r2, [pc, #568]	@ (80033a0 <HAL_ADC_ConfigChannel+0x624>)
 8003166:	4293      	cmp	r3, r2
 8003168:	f040 8130 	bne.w	80033cc <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10b      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x418>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	0e9b      	lsrs	r3, r3, #26
 8003182:	3301      	adds	r3, #1
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	2b09      	cmp	r3, #9
 800318a:	bf94      	ite	ls
 800318c:	2301      	movls	r3, #1
 800318e:	2300      	movhi	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	e019      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x44c>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800319c:	fa93 f3a3 	rbit	r3, r3
 80031a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80031a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031a4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80031a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80031ac:	2320      	movs	r3, #32
 80031ae:	e003      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80031b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	3301      	adds	r3, #1
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	2b09      	cmp	r3, #9
 80031c0:	bf94      	ite	ls
 80031c2:	2301      	movls	r3, #1
 80031c4:	2300      	movhi	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d079      	beq.n	80032c0 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d107      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x46c>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	0e9b      	lsrs	r3, r3, #26
 80031de:	3301      	adds	r3, #1
 80031e0:	069b      	lsls	r3, r3, #26
 80031e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031e6:	e015      	b.n	8003214 <HAL_ADC_ConfigChannel+0x498>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031f0:	fa93 f3a3 	rbit	r3, r3
 80031f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80031f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031f8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80031fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003200:	2320      	movs	r3, #32
 8003202:	e003      	b.n	800320c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	3301      	adds	r3, #1
 800320e:	069b      	lsls	r3, r3, #26
 8003210:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x4b8>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	0e9b      	lsrs	r3, r3, #26
 8003226:	3301      	adds	r3, #1
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	2101      	movs	r1, #1
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	e017      	b.n	8003264 <HAL_ADC_ConfigChannel+0x4e8>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003244:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 800324c:	2320      	movs	r3, #32
 800324e:	e003      	b.n	8003258 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	3301      	adds	r3, #1
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	2101      	movs	r1, #1
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	ea42 0103 	orr.w	r1, r2, r3
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10a      	bne.n	800328a <HAL_ADC_ConfigChannel+0x50e>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	0e9b      	lsrs	r3, r3, #26
 800327a:	3301      	adds	r3, #1
 800327c:	f003 021f 	and.w	r2, r3, #31
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	051b      	lsls	r3, r3, #20
 8003288:	e018      	b.n	80032bc <HAL_ADC_ConfigChannel+0x540>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800329a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800329c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80032a2:	2320      	movs	r3, #32
 80032a4:	e003      	b.n	80032ae <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80032a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	3301      	adds	r3, #1
 80032b0:	f003 021f 	and.w	r2, r3, #31
 80032b4:	4613      	mov	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4413      	add	r3, r2
 80032ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032bc:	430b      	orrs	r3, r1
 80032be:	e080      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d107      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x560>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	0e9b      	lsrs	r3, r3, #26
 80032d2:	3301      	adds	r3, #1
 80032d4:	069b      	lsls	r3, r3, #26
 80032d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032da:	e015      	b.n	8003308 <HAL_ADC_ConfigChannel+0x58c>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80032ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ec:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80032ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80032f4:	2320      	movs	r3, #32
 80032f6:	e003      	b.n	8003300 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80032f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	3301      	adds	r3, #1
 8003302:	069b      	lsls	r3, r3, #26
 8003304:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003310:	2b00      	cmp	r3, #0
 8003312:	d109      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x5ac>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	0e9b      	lsrs	r3, r3, #26
 800331a:	3301      	adds	r3, #1
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	2101      	movs	r1, #1
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	e017      	b.n	8003358 <HAL_ADC_ConfigChannel+0x5dc>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	61fb      	str	r3, [r7, #28]
  return result;
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003340:	2320      	movs	r3, #32
 8003342:	e003      	b.n	800334c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	fab3 f383 	clz	r3, r3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	3301      	adds	r3, #1
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	2101      	movs	r1, #1
 8003354:	fa01 f303 	lsl.w	r3, r1, r3
 8003358:	ea42 0103 	orr.w	r1, r2, r3
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10d      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x608>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	0e9b      	lsrs	r3, r3, #26
 800336e:	3301      	adds	r3, #1
 8003370:	f003 021f 	and.w	r2, r3, #31
 8003374:	4613      	mov	r3, r2
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	4413      	add	r3, r2
 800337a:	3b1e      	subs	r3, #30
 800337c:	051b      	lsls	r3, r3, #20
 800337e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003382:	e01d      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x644>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	fa93 f3a3 	rbit	r3, r3
 8003390:	613b      	str	r3, [r7, #16]
  return result;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d103      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800339c:	2320      	movs	r3, #32
 800339e:	e005      	b.n	80033ac <HAL_ADC_ConfigChannel+0x630>
 80033a0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	3301      	adds	r3, #1
 80033ae:	f003 021f 	and.w	r2, r3, #31
 80033b2:	4613      	mov	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4413      	add	r3, r2
 80033b8:	3b1e      	subs	r3, #30
 80033ba:	051b      	lsls	r3, r3, #20
 80033bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033c0:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033c6:	4619      	mov	r1, r3
 80033c8:	f7fe ff49 	bl	800225e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b45      	ldr	r3, [pc, #276]	@ (80034e8 <HAL_ADC_ConfigChannel+0x76c>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d07c      	beq.n	80034d2 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033d8:	4844      	ldr	r0, [pc, #272]	@ (80034ec <HAL_ADC_ConfigChannel+0x770>)
 80033da:	f7fe fe7d 	bl	80020d8 <LL_ADC_GetCommonPathInternalCh>
 80033de:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033e2:	4843      	ldr	r0, [pc, #268]	@ (80034f0 <HAL_ADC_ConfigChannel+0x774>)
 80033e4:	f7ff f800 	bl	80023e8 <LL_ADC_IsEnabled>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d15e      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a40      	ldr	r2, [pc, #256]	@ (80034f4 <HAL_ADC_ConfigChannel+0x778>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d127      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x6cc>
 80033f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d121      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a39      	ldr	r2, [pc, #228]	@ (80034f0 <HAL_ADC_ConfigChannel+0x774>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d161      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800340e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003412:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003416:	4619      	mov	r1, r3
 8003418:	4834      	ldr	r0, [pc, #208]	@ (80034ec <HAL_ADC_ConfigChannel+0x770>)
 800341a:	f7fe fe4a 	bl	80020b2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800341e:	4b36      	ldr	r3, [pc, #216]	@ (80034f8 <HAL_ADC_ConfigChannel+0x77c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	099b      	lsrs	r3, r3, #6
 8003424:	4a35      	ldr	r2, [pc, #212]	@ (80034fc <HAL_ADC_ConfigChannel+0x780>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	099b      	lsrs	r3, r3, #6
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003438:	e002      	b.n	8003440 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3b01      	subs	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f9      	bne.n	800343a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003446:	e044      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a2c      	ldr	r2, [pc, #176]	@ (8003500 <HAL_ADC_ConfigChannel+0x784>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d113      	bne.n	800347a <HAL_ADC_ConfigChannel+0x6fe>
 8003452:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003456:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10d      	bne.n	800347a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a23      	ldr	r2, [pc, #140]	@ (80034f0 <HAL_ADC_ConfigChannel+0x774>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d134      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003468:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800346c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003470:	4619      	mov	r1, r3
 8003472:	481e      	ldr	r0, [pc, #120]	@ (80034ec <HAL_ADC_ConfigChannel+0x770>)
 8003474:	f7fe fe1d 	bl	80020b2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003478:	e02b      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a21      	ldr	r2, [pc, #132]	@ (8003504 <HAL_ADC_ConfigChannel+0x788>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d126      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x756>
 8003484:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003488:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d120      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a16      	ldr	r2, [pc, #88]	@ (80034f0 <HAL_ADC_ConfigChannel+0x774>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d11b      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800349a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800349e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034a2:	4619      	mov	r1, r3
 80034a4:	4811      	ldr	r0, [pc, #68]	@ (80034ec <HAL_ADC_ConfigChannel+0x770>)
 80034a6:	f7fe fe04 	bl	80020b2 <LL_ADC_SetCommonPathInternalCh>
 80034aa:	e012      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80034be:	e008      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c4:	f043 0220 	orr.w	r2, r3, #32
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80034da:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034de:	4618      	mov	r0, r3
 80034e0:	37d8      	adds	r7, #216	@ 0xd8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	80080000 	.word	0x80080000
 80034ec:	50040300 	.word	0x50040300
 80034f0:	50040000 	.word	0x50040000
 80034f4:	c7520000 	.word	0xc7520000
 80034f8:	20000008 	.word	0x20000008
 80034fc:	053e2d63 	.word	0x053e2d63
 8003500:	cb840000 	.word	0xcb840000
 8003504:	80000001 	.word	0x80000001

08003508 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe ffb0 	bl	8002484 <LL_ADC_REG_IsConversionOngoing>
 8003524:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe ffd1 	bl	80024d2 <LL_ADC_INJ_IsConversionOngoing>
 8003530:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d103      	bne.n	8003540 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 8098 	beq.w	8003670 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d02a      	beq.n	80035a4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	7e5b      	ldrb	r3, [r3, #25]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d126      	bne.n	80035a4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	7e1b      	ldrb	r3, [r3, #24]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d122      	bne.n	80035a4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800355e:	2301      	movs	r3, #1
 8003560:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003562:	e014      	b.n	800358e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	4a45      	ldr	r2, [pc, #276]	@ (800367c <ADC_ConversionStop+0x174>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d90d      	bls.n	8003588 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003570:	f043 0210 	orr.w	r2, r3, #16
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357c:	f043 0201 	orr.w	r2, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e074      	b.n	8003672 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	3301      	adds	r3, #1
 800358c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003598:	2b40      	cmp	r3, #64	@ 0x40
 800359a:	d1e3      	bne.n	8003564 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2240      	movs	r2, #64	@ 0x40
 80035a2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d014      	beq.n	80035d4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe ff68 	bl	8002484 <LL_ADC_REG_IsConversionOngoing>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00c      	beq.n	80035d4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe ff25 	bl	800240e <LL_ADC_IsDisableOngoing>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d104      	bne.n	80035d4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe ff44 	bl	800245c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d014      	beq.n	8003604 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe ff77 	bl	80024d2 <LL_ADC_INJ_IsConversionOngoing>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00c      	beq.n	8003604 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe ff0d 	bl	800240e <LL_ADC_IsDisableOngoing>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d104      	bne.n	8003604 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fe ff53 	bl	80024aa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d005      	beq.n	8003616 <ADC_ConversionStop+0x10e>
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d105      	bne.n	800361c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003610:	230c      	movs	r3, #12
 8003612:	617b      	str	r3, [r7, #20]
        break;
 8003614:	e005      	b.n	8003622 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003616:	2308      	movs	r3, #8
 8003618:	617b      	str	r3, [r7, #20]
        break;
 800361a:	e002      	b.n	8003622 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800361c:	2304      	movs	r3, #4
 800361e:	617b      	str	r3, [r7, #20]
        break;
 8003620:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003622:	f7fe fcf7 	bl	8002014 <HAL_GetTick>
 8003626:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003628:	e01b      	b.n	8003662 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800362a:	f7fe fcf3 	bl	8002014 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b05      	cmp	r3, #5
 8003636:	d914      	bls.n	8003662 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00d      	beq.n	8003662 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800364a:	f043 0210 	orr.w	r2, r3, #16
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003656:	f043 0201 	orr.w	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e007      	b.n	8003672 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1dc      	bne.n	800362a <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3720      	adds	r7, #32
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	a33fffff 	.word	0xa33fffff

08003680 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003688:	2300      	movs	r3, #0
 800368a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7fe fea9 	bl	80023e8 <LL_ADC_IsEnabled>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d15e      	bne.n	800375a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	4b30      	ldr	r3, [pc, #192]	@ (8003764 <ADC_Enable+0xe4>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00d      	beq.n	80036c6 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ae:	f043 0210 	orr.w	r2, r3, #16
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ba:	f043 0201 	orr.w	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e04a      	b.n	800375c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe fe64 	bl	8002398 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80036d0:	4825      	ldr	r0, [pc, #148]	@ (8003768 <ADC_Enable+0xe8>)
 80036d2:	f7fe fd01 	bl	80020d8 <LL_ADC_GetCommonPathInternalCh>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00f      	beq.n	8003700 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036e0:	4b22      	ldr	r3, [pc, #136]	@ (800376c <ADC_Enable+0xec>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	099b      	lsrs	r3, r3, #6
 80036e6:	4a22      	ldr	r2, [pc, #136]	@ (8003770 <ADC_Enable+0xf0>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	099b      	lsrs	r3, r3, #6
 80036ee:	3301      	adds	r3, #1
 80036f0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80036f2:	e002      	b.n	80036fa <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1f9      	bne.n	80036f4 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003700:	f7fe fc88 	bl	8002014 <HAL_GetTick>
 8003704:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003706:	e021      	b.n	800374c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f7fe fe6b 	bl	80023e8 <LL_ADC_IsEnabled>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d104      	bne.n	8003722 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fe fe3b 	bl	8002398 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003722:	f7fe fc77 	bl	8002014 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d90d      	bls.n	800374c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003734:	f043 0210 	orr.w	r2, r3, #16
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003740:	f043 0201 	orr.w	r2, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e007      	b.n	800375c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b01      	cmp	r3, #1
 8003758:	d1d6      	bne.n	8003708 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	8000003f 	.word	0x8000003f
 8003768:	50040300 	.word	0x50040300
 800376c:	20000008 	.word	0x20000008
 8003770:	053e2d63 	.word	0x053e2d63

08003774 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7fe fe44 	bl	800240e <LL_ADC_IsDisableOngoing>
 8003786:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7fe fe2b 	bl	80023e8 <LL_ADC_IsEnabled>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d047      	beq.n	8003828 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d144      	bne.n	8003828 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 030d 	and.w	r3, r3, #13
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d10c      	bne.n	80037c6 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe fe05 	bl	80023c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2203      	movs	r2, #3
 80037bc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037be:	f7fe fc29 	bl	8002014 <HAL_GetTick>
 80037c2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037c4:	e029      	b.n	800381a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ca:	f043 0210 	orr.w	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d6:	f043 0201 	orr.w	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e023      	b.n	800382a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037e2:	f7fe fc17 	bl	8002014 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d914      	bls.n	800381a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00d      	beq.n	800381a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003802:	f043 0210 	orr.w	r2, r3, #16
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380e:	f043 0201 	orr.w	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e007      	b.n	800382a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1dc      	bne.n	80037e2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038a8:	4b0c      	ldr	r3, [pc, #48]	@ (80038dc <__NVIC_SetPriorityGrouping+0x44>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038b4:	4013      	ands	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ca:	4a04      	ldr	r2, [pc, #16]	@ (80038dc <__NVIC_SetPriorityGrouping+0x44>)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	60d3      	str	r3, [r2, #12]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038e4:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <__NVIC_GetPriorityGrouping+0x18>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	f003 0307 	and.w	r3, r3, #7
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	2b00      	cmp	r3, #0
 800390c:	db0b      	blt.n	8003926 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	f003 021f 	and.w	r2, r3, #31
 8003914:	4907      	ldr	r1, [pc, #28]	@ (8003934 <__NVIC_EnableIRQ+0x38>)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	2001      	movs	r0, #1
 800391e:	fa00 f202 	lsl.w	r2, r0, r2
 8003922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000e100 	.word	0xe000e100

08003938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	6039      	str	r1, [r7, #0]
 8003942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003948:	2b00      	cmp	r3, #0
 800394a:	db0a      	blt.n	8003962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	b2da      	uxtb	r2, r3
 8003950:	490c      	ldr	r1, [pc, #48]	@ (8003984 <__NVIC_SetPriority+0x4c>)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	0112      	lsls	r2, r2, #4
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	440b      	add	r3, r1
 800395c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003960:	e00a      	b.n	8003978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	b2da      	uxtb	r2, r3
 8003966:	4908      	ldr	r1, [pc, #32]	@ (8003988 <__NVIC_SetPriority+0x50>)
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	3b04      	subs	r3, #4
 8003970:	0112      	lsls	r2, r2, #4
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	440b      	add	r3, r1
 8003976:	761a      	strb	r2, [r3, #24]
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000e100 	.word	0xe000e100
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800398c:	b480      	push	{r7}
 800398e:	b089      	sub	sp, #36	@ 0x24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f1c3 0307 	rsb	r3, r3, #7
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	bf28      	it	cs
 80039aa:	2304      	movcs	r3, #4
 80039ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3304      	adds	r3, #4
 80039b2:	2b06      	cmp	r3, #6
 80039b4:	d902      	bls.n	80039bc <NVIC_EncodePriority+0x30>
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3b03      	subs	r3, #3
 80039ba:	e000      	b.n	80039be <NVIC_EncodePriority+0x32>
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c0:	f04f 32ff 	mov.w	r2, #4294967295
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43da      	mvns	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	401a      	ands	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039d4:	f04f 31ff 	mov.w	r1, #4294967295
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	43d9      	mvns	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	4313      	orrs	r3, r2
         );
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3724      	adds	r7, #36	@ 0x24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a04:	d301      	bcc.n	8003a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a06:	2301      	movs	r3, #1
 8003a08:	e00f      	b.n	8003a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a34 <SysTick_Config+0x40>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a12:	210f      	movs	r1, #15
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295
 8003a18:	f7ff ff8e 	bl	8003938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a1c:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <SysTick_Config+0x40>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a22:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <SysTick_Config+0x40>)
 8003a24:	2207      	movs	r2, #7
 8003a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	e000e010 	.word	0xe000e010

08003a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ff29 	bl	8003898 <__NVIC_SetPriorityGrouping>
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b086      	sub	sp, #24
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	4603      	mov	r3, r0
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a5c:	f7ff ff40 	bl	80038e0 <__NVIC_GetPriorityGrouping>
 8003a60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	6978      	ldr	r0, [r7, #20]
 8003a68:	f7ff ff90 	bl	800398c <NVIC_EncodePriority>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a72:	4611      	mov	r1, r2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff ff5f 	bl	8003938 <__NVIC_SetPriority>
}
 8003a7a:	bf00      	nop
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	4603      	mov	r3, r0
 8003a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ff33 	bl	80038fc <__NVIC_EnableIRQ>
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff ffa4 	bl	80039f4 <SysTick_Config>
 8003aac:	4603      	mov	r3, r0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ac6:	e14c      	b.n	8003d62 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	2101      	movs	r1, #1
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 813e 	beq.w	8003d5c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d005      	beq.n	8003af8 <HAL_GPIO_Init+0x40>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d130      	bne.n	8003b5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	2203      	movs	r2, #3
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b2e:	2201      	movs	r2, #1
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	091b      	lsrs	r3, r3, #4
 8003b44:	f003 0201 	and.w	r2, r3, #1
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d017      	beq.n	8003b96 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	2203      	movs	r2, #3
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43db      	mvns	r3, r3
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d123      	bne.n	8003bea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	08da      	lsrs	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3208      	adds	r2, #8
 8003baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	220f      	movs	r2, #15
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	08da      	lsrs	r2, r3, #3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3208      	adds	r2, #8
 8003be4:	6939      	ldr	r1, [r7, #16]
 8003be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f003 0203 	and.w	r2, r3, #3
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 8098 	beq.w	8003d5c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003c2c:	4a54      	ldr	r2, [pc, #336]	@ (8003d80 <HAL_GPIO_Init+0x2c8>)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	089b      	lsrs	r3, r3, #2
 8003c32:	3302      	adds	r3, #2
 8003c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	220f      	movs	r2, #15
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003c56:	d019      	beq.n	8003c8c <HAL_GPIO_Init+0x1d4>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a4a      	ldr	r2, [pc, #296]	@ (8003d84 <HAL_GPIO_Init+0x2cc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d013      	beq.n	8003c88 <HAL_GPIO_Init+0x1d0>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a49      	ldr	r2, [pc, #292]	@ (8003d88 <HAL_GPIO_Init+0x2d0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d00d      	beq.n	8003c84 <HAL_GPIO_Init+0x1cc>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a48      	ldr	r2, [pc, #288]	@ (8003d8c <HAL_GPIO_Init+0x2d4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d007      	beq.n	8003c80 <HAL_GPIO_Init+0x1c8>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a47      	ldr	r2, [pc, #284]	@ (8003d90 <HAL_GPIO_Init+0x2d8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d101      	bne.n	8003c7c <HAL_GPIO_Init+0x1c4>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	e008      	b.n	8003c8e <HAL_GPIO_Init+0x1d6>
 8003c7c:	2307      	movs	r3, #7
 8003c7e:	e006      	b.n	8003c8e <HAL_GPIO_Init+0x1d6>
 8003c80:	2303      	movs	r3, #3
 8003c82:	e004      	b.n	8003c8e <HAL_GPIO_Init+0x1d6>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e002      	b.n	8003c8e <HAL_GPIO_Init+0x1d6>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <HAL_GPIO_Init+0x1d6>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	f002 0203 	and.w	r2, r2, #3
 8003c94:	0092      	lsls	r2, r2, #2
 8003c96:	4093      	lsls	r3, r2
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c9e:	4938      	ldr	r1, [pc, #224]	@ (8003d80 <HAL_GPIO_Init+0x2c8>)
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	089b      	lsrs	r3, r3, #2
 8003ca4:	3302      	adds	r3, #2
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cac:	4b39      	ldr	r3, [pc, #228]	@ (8003d94 <HAL_GPIO_Init+0x2dc>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cd0:	4a30      	ldr	r2, [pc, #192]	@ (8003d94 <HAL_GPIO_Init+0x2dc>)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8003d94 <HAL_GPIO_Init+0x2dc>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cfa:	4a26      	ldr	r2, [pc, #152]	@ (8003d94 <HAL_GPIO_Init+0x2dc>)
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d00:	4b24      	ldr	r3, [pc, #144]	@ (8003d94 <HAL_GPIO_Init+0x2dc>)
 8003d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d26:	4a1b      	ldr	r2, [pc, #108]	@ (8003d94 <HAL_GPIO_Init+0x2dc>)
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003d2e:	4b19      	ldr	r3, [pc, #100]	@ (8003d94 <HAL_GPIO_Init+0x2dc>)
 8003d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d54:	4a0f      	ldr	r2, [pc, #60]	@ (8003d94 <HAL_GPIO_Init+0x2dc>)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f47f aeab 	bne.w	8003ac8 <HAL_GPIO_Init+0x10>
  }
}
 8003d72:	bf00      	nop
 8003d74:	bf00      	nop
 8003d76:	371c      	adds	r7, #28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	40010000 	.word	0x40010000
 8003d84:	48000400 	.word	0x48000400
 8003d88:	48000800 	.word	0x48000800
 8003d8c:	48000c00 	.word	0x48000c00
 8003d90:	48001000 	.word	0x48001000
 8003d94:	58000800 	.word	0x58000800

08003d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	807b      	strh	r3, [r7, #2]
 8003da4:	4613      	mov	r3, r2
 8003da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003da8:	787b      	ldrb	r3, [r7, #1]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dae:	887a      	ldrh	r2, [r7, #2]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003db4:	e002      	b.n	8003dbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003db6:	887a      	ldrh	r2, [r7, #2]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e08d      	b.n	8003ef6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fd fc7e 	bl	80016f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2224      	movs	r2, #36	@ 0x24
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0201 	bic.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d107      	bne.n	8003e42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	e006      	b.n	8003e50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003e4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d108      	bne.n	8003e6a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e66:	605a      	str	r2, [r3, #4]
 8003e68:	e007      	b.n	8003e7a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69d9      	ldr	r1, [r3, #28]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1a      	ldr	r2, [r3, #32]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	4608      	mov	r0, r1
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4603      	mov	r3, r0
 8003f10:	817b      	strh	r3, [r7, #10]
 8003f12:	460b      	mov	r3, r1
 8003f14:	813b      	strh	r3, [r7, #8]
 8003f16:	4613      	mov	r3, r2
 8003f18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	f040 80fd 	bne.w	8004122 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_I2C_Mem_Read+0x34>
 8003f2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f3a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0f1      	b.n	8004124 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_I2C_Mem_Read+0x4e>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e0ea      	b.n	8004124 <HAL_I2C_Mem_Read+0x224>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f56:	f7fe f85d 	bl	8002014 <HAL_GetTick>
 8003f5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	2319      	movs	r3, #25
 8003f62:	2201      	movs	r2, #1
 8003f64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f95b 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0d5      	b.n	8004124 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2222      	movs	r2, #34	@ 0x22
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2240      	movs	r2, #64	@ 0x40
 8003f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a3a      	ldr	r2, [r7, #32]
 8003f92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fa0:	88f8      	ldrh	r0, [r7, #6]
 8003fa2:	893a      	ldrh	r2, [r7, #8]
 8003fa4:	8979      	ldrh	r1, [r7, #10]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	9301      	str	r3, [sp, #4]
 8003faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	4603      	mov	r3, r0
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f8bf 	bl	8004134 <I2C_RequestMemoryRead>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0ad      	b.n	8004124 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2bff      	cmp	r3, #255	@ 0xff
 8003fd0:	d90e      	bls.n	8003ff0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	22ff      	movs	r2, #255	@ 0xff
 8003fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	8979      	ldrh	r1, [r7, #10]
 8003fe0:	4b52      	ldr	r3, [pc, #328]	@ (800412c <HAL_I2C_Mem_Read+0x22c>)
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 fadf 	bl	80045ac <I2C_TransferConfig>
 8003fee:	e00f      	b.n	8004010 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	8979      	ldrh	r1, [r7, #10]
 8004002:	4b4a      	ldr	r3, [pc, #296]	@ (800412c <HAL_I2C_Mem_Read+0x22c>)
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 face 	bl	80045ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004016:	2200      	movs	r2, #0
 8004018:	2104      	movs	r1, #4
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f902 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e07c      	b.n	8004124 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d034      	beq.n	80040d0 <HAL_I2C_Mem_Read+0x1d0>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406a:	2b00      	cmp	r3, #0
 800406c:	d130      	bne.n	80040d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004074:	2200      	movs	r2, #0
 8004076:	2180      	movs	r1, #128	@ 0x80
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f8d3 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e04d      	b.n	8004124 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	2bff      	cmp	r3, #255	@ 0xff
 8004090:	d90e      	bls.n	80040b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	22ff      	movs	r2, #255	@ 0xff
 8004096:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409c:	b2da      	uxtb	r2, r3
 800409e:	8979      	ldrh	r1, [r7, #10]
 80040a0:	2300      	movs	r3, #0
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fa7f 	bl	80045ac <I2C_TransferConfig>
 80040ae:	e00f      	b.n	80040d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	8979      	ldrh	r1, [r7, #10]
 80040c2:	2300      	movs	r3, #0
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fa6e 	bl	80045ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d19a      	bne.n	8004010 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f940 	bl	8004364 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e01a      	b.n	8004124 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2220      	movs	r2, #32
 80040f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <HAL_I2C_Mem_Read+0x230>)
 8004102:	400b      	ands	r3, r1
 8004104:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	e000      	b.n	8004124 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004122:	2302      	movs	r3, #2
  }
}
 8004124:	4618      	mov	r0, r3
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	80002400 	.word	0x80002400
 8004130:	fe00e800 	.word	0xfe00e800

08004134 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	4608      	mov	r0, r1
 800413e:	4611      	mov	r1, r2
 8004140:	461a      	mov	r2, r3
 8004142:	4603      	mov	r3, r0
 8004144:	817b      	strh	r3, [r7, #10]
 8004146:	460b      	mov	r3, r1
 8004148:	813b      	strh	r3, [r7, #8]
 800414a:	4613      	mov	r3, r2
 800414c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	b2da      	uxtb	r2, r3
 8004152:	8979      	ldrh	r1, [r7, #10]
 8004154:	4b20      	ldr	r3, [pc, #128]	@ (80041d8 <I2C_RequestMemoryRead+0xa4>)
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	2300      	movs	r3, #0
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 fa26 	bl	80045ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	69b9      	ldr	r1, [r7, #24]
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f8b6 	bl	80042d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e02c      	b.n	80041ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d105      	bne.n	8004186 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800417a:	893b      	ldrh	r3, [r7, #8]
 800417c:	b2da      	uxtb	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	629a      	str	r2, [r3, #40]	@ 0x28
 8004184:	e015      	b.n	80041b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004186:	893b      	ldrh	r3, [r7, #8]
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	b29b      	uxth	r3, r3
 800418c:	b2da      	uxtb	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	69b9      	ldr	r1, [r7, #24]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f89c 	bl	80042d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e012      	b.n	80041ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041a8:	893b      	ldrh	r3, [r7, #8]
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	2200      	movs	r2, #0
 80041ba:	2140      	movs	r1, #64	@ 0x40
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f831 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	80002000 	.word	0x80002000

080041dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d103      	bne.n	80041fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2200      	movs	r2, #0
 80041f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	d007      	beq.n	8004218 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	619a      	str	r2, [r3, #24]
  }
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004234:	e03b      	b.n	80042ae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	6839      	ldr	r1, [r7, #0]
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 f8d6 	bl	80043ec <I2C_IsErrorOccurred>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e041      	b.n	80042ce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004250:	d02d      	beq.n	80042ae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004252:	f7fd fedf 	bl	8002014 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d302      	bcc.n	8004268 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d122      	bne.n	80042ae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699a      	ldr	r2, [r3, #24]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	4013      	ands	r3, r2
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	429a      	cmp	r2, r3
 8004276:	bf0c      	ite	eq
 8004278:	2301      	moveq	r3, #1
 800427a:	2300      	movne	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	461a      	mov	r2, r3
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	429a      	cmp	r2, r3
 8004284:	d113      	bne.n	80042ae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428a:	f043 0220 	orr.w	r2, r3, #32
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e00f      	b.n	80042ce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699a      	ldr	r2, [r3, #24]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4013      	ands	r3, r2
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	bf0c      	ite	eq
 80042be:	2301      	moveq	r3, #1
 80042c0:	2300      	movne	r3, #0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	461a      	mov	r2, r3
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d0b4      	beq.n	8004236 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042e2:	e033      	b.n	800434c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f87f 	bl	80043ec <I2C_IsErrorOccurred>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e031      	b.n	800435c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fe:	d025      	beq.n	800434c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004300:	f7fd fe88 	bl	8002014 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	429a      	cmp	r2, r3
 800430e:	d302      	bcc.n	8004316 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d11a      	bne.n	800434c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b02      	cmp	r3, #2
 8004322:	d013      	beq.n	800434c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004328:	f043 0220 	orr.w	r2, r3, #32
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e007      	b.n	800435c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b02      	cmp	r3, #2
 8004358:	d1c4      	bne.n	80042e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004370:	e02f      	b.n	80043d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	68b9      	ldr	r1, [r7, #8]
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f838 	bl	80043ec <I2C_IsErrorOccurred>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e02d      	b.n	80043e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004386:	f7fd fe45 	bl	8002014 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	429a      	cmp	r2, r3
 8004394:	d302      	bcc.n	800439c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d11a      	bne.n	80043d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b20      	cmp	r3, #32
 80043a8:	d013      	beq.n	80043d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ae:	f043 0220 	orr.w	r2, r3, #32
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e007      	b.n	80043e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d1c8      	bne.n	8004372 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08a      	sub	sp, #40	@ 0x28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	f003 0310 	and.w	r3, r3, #16
 8004414:	2b00      	cmp	r3, #0
 8004416:	d068      	beq.n	80044ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2210      	movs	r2, #16
 800441e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004420:	e049      	b.n	80044b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d045      	beq.n	80044b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800442a:	f7fd fdf3 	bl	8002014 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <I2C_IsErrorOccurred+0x54>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d13a      	bne.n	80044b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800444a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004452:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800445e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004462:	d121      	bne.n	80044a8 <I2C_IsErrorOccurred+0xbc>
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800446a:	d01d      	beq.n	80044a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800446c:	7cfb      	ldrb	r3, [r7, #19]
 800446e:	2b20      	cmp	r3, #32
 8004470:	d01a      	beq.n	80044a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004480:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004482:	f7fd fdc7 	bl	8002014 <HAL_GetTick>
 8004486:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004488:	e00e      	b.n	80044a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800448a:	f7fd fdc3 	bl	8002014 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b19      	cmp	r3, #25
 8004496:	d907      	bls.n	80044a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	f043 0320 	orr.w	r3, r3, #32
 800449e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80044a6:	e006      	b.n	80044b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d1e9      	bne.n	800448a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d003      	beq.n	80044cc <I2C_IsErrorOccurred+0xe0>
 80044c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0aa      	beq.n	8004422 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80044cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d103      	bne.n	80044dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2220      	movs	r2, #32
 80044da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	f043 0304 	orr.w	r3, r3, #4
 80044e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00b      	beq.n	8004514 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	f043 0301 	orr.w	r3, r3, #1
 8004502:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800450c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	f043 0308 	orr.w	r3, r3, #8
 8004524:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800452e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00b      	beq.n	8004558 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	f043 0302 	orr.w	r3, r3, #2
 8004546:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004550:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800455c:	2b00      	cmp	r3, #0
 800455e:	d01c      	beq.n	800459a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f7ff fe3b 	bl	80041dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6859      	ldr	r1, [r3, #4]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	4b0d      	ldr	r3, [pc, #52]	@ (80045a8 <I2C_IsErrorOccurred+0x1bc>)
 8004572:	400b      	ands	r3, r1
 8004574:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	431a      	orrs	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800459a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3728      	adds	r7, #40	@ 0x28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	fe00e800 	.word	0xfe00e800

080045ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	607b      	str	r3, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	817b      	strh	r3, [r7, #10]
 80045ba:	4613      	mov	r3, r2
 80045bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045be:	897b      	ldrh	r3, [r7, #10]
 80045c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045c4:	7a7b      	ldrb	r3, [r7, #9]
 80045c6:	041b      	lsls	r3, r3, #16
 80045c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	0d5b      	lsrs	r3, r3, #21
 80045e6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80045ea:	4b08      	ldr	r3, [pc, #32]	@ (800460c <I2C_TransferConfig+0x60>)
 80045ec:	430b      	orrs	r3, r1
 80045ee:	43db      	mvns	r3, r3
 80045f0:	ea02 0103 	and.w	r1, r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80045fe:	bf00      	nop
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	03ff63ff 	.word	0x03ff63ff

08004610 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b20      	cmp	r3, #32
 8004624:	d138      	bne.n	8004698 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800462c:	2b01      	cmp	r3, #1
 800462e:	d101      	bne.n	8004634 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004630:	2302      	movs	r3, #2
 8004632:	e032      	b.n	800469a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2224      	movs	r2, #36	@ 0x24
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0201 	bic.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004662:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6819      	ldr	r1, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004694:	2300      	movs	r3, #0
 8004696:	e000      	b.n	800469a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004698:	2302      	movs	r3, #2
  }
}
 800469a:	4618      	mov	r0, r3
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b085      	sub	sp, #20
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d139      	bne.n	8004730 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e033      	b.n	8004732 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2224      	movs	r2, #36	@ 0x24
 80046d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0201 	bic.w	r2, r2, #1
 80046e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80046f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	021b      	lsls	r3, r3, #8
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	e000      	b.n	8004732 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004730:	2302      	movs	r3, #2
  }
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004744:	4b05      	ldr	r3, [pc, #20]	@ (800475c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a04      	ldr	r2, [pc, #16]	@ (800475c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800474a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800474e:	6013      	str	r3, [r2, #0]
}
 8004750:	bf00      	nop
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	58000400 	.word	0x58000400

08004760 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004764:	4b04      	ldr	r3, [pc, #16]	@ (8004778 <HAL_PWREx_GetVoltageRange+0x18>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800476c:	4618      	mov	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	58000400 	.word	0x58000400

0800477c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800478a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800478e:	d101      	bne.n	8004794 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80047a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047b2:	6013      	str	r3, [r2, #0]
}
 80047b4:	bf00      	nop
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80047be:	b480      	push	{r7}
 80047c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80047c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047d0:	6013      	str	r3, [r2, #0]
}
 80047d2:	bf00      	nop
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80047e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047ee:	d101      	bne.n	80047f4 <LL_RCC_HSE_IsReady+0x18>
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <LL_RCC_HSE_IsReady+0x1a>
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800480e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004812:	6013      	str	r3, [r2, #0]
}
 8004814:	bf00      	nop
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800481e:	b480      	push	{r7}
 8004820:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800482c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004830:	6013      	str	r3, [r2, #0]
}
 8004832:	bf00      	nop
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800484a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800484e:	d101      	bne.n	8004854 <LL_RCC_HSI_IsReady+0x18>
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <LL_RCC_HSI_IsReady+0x1a>
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	061b      	lsls	r3, r3, #24
 8004876:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800487a:	4313      	orrs	r3, r2
 800487c:	604b      	str	r3, [r1, #4]
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800488a:	b480      	push	{r7}
 800488c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800488e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004892:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004896:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800489a:	f043 0301 	orr.w	r3, r3, #1
 800489e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80048a2:	bf00      	nop
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80048b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048bc:	f023 0301 	bic.w	r3, r3, #1
 80048c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80048c4:	bf00      	nop
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80048ce:	b480      	push	{r7}
 80048d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80048d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d101      	bne.n	80048e6 <LL_RCC_HSI48_IsReady+0x18>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <LL_RCC_HSI48_IsReady+0x1a>
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80048f2:	b480      	push	{r7}
 80048f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004902:	f043 0301 	orr.w	r3, r3, #1
 8004906:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800490a:	bf00      	nop
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004920:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800492c:	bf00      	nop
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8004936:	b480      	push	{r7}
 8004938:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800493a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004942:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004946:	f043 0304 	orr.w	r3, r3, #4
 800494a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800494e:	bf00      	nop
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800495c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004964:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004968:	f023 0304 	bic.w	r3, r3, #4
 800496c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004970:	bf00      	nop
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800497a:	b480      	push	{r7}
 800497c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800497e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b02      	cmp	r3, #2
 800498c:	d101      	bne.n	8004992 <LL_RCC_LSE_IsReady+0x18>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <LL_RCC_LSE_IsReady+0x1a>
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80049a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80049b6:	bf00      	nop
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80049c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80049d8:	bf00      	nop
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80049e2:	b480      	push	{r7}
 80049e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80049e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d101      	bne.n	80049fa <LL_RCC_LSI1_IsReady+0x18>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <LL_RCC_LSI1_IsReady+0x1a>
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004a06:	b480      	push	{r7}
 8004a08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a16:	f043 0304 	orr.w	r3, r3, #4
 8004a1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004a1e:	bf00      	nop
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a38:	f023 0304 	bic.w	r3, r3, #4
 8004a3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004a40:	bf00      	nop
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d101      	bne.n	8004a62 <LL_RCC_LSI2_IsReady+0x18>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e000      	b.n	8004a64 <LL_RCC_LSI2_IsReady+0x1a>
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a7e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	6013      	str	r3, [r2, #0]
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004aba:	b480      	push	{r7}
 8004abc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ac8:	f023 0301 	bic.w	r3, r3, #1
 8004acc:	6013      	str	r3, [r2, #0]
}
 8004ace:	bf00      	nop
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d101      	bne.n	8004aee <LL_RCC_MSI_IsReady+0x16>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <LL_RCC_MSI_IsReady+0x18>
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004b28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b32:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2bb0      	cmp	r3, #176	@ 0xb0
 8004b38:	d901      	bls.n	8004b3e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004b3a:	23b0      	movs	r3, #176	@ 0xb0
 8004b3c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004b3e:	687b      	ldr	r3, [r7, #4]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	021b      	lsls	r3, r3, #8
 8004b62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b66:	4313      	orrs	r3, r2
 8004b68:	604b      	str	r3, [r1, #4]
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f023 0203 	bic.w	r2, r3, #3
 8004b88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	608b      	str	r3, [r1, #8]
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 030c 	and.w	r3, r3, #12
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	608b      	str	r3, [r1, #8]
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004bee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bf2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c16:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004c1a:	f023 020f 	bic.w	r2, r3, #15
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	091b      	lsrs	r3, r3, #4
 8004c22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	608b      	str	r3, [r1, #8]
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	608b      	str	r3, [r1, #8]
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ca8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004cc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004cf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cfe:	6013      	str	r3, [r2, #0]
}
 8004d00:	bf00      	nop
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d1c:	6013      	str	r3, [r2, #0]
}
 8004d1e:	bf00      	nop
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d3a:	d101      	bne.n	8004d40 <LL_RCC_PLL_IsReady+0x18>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <LL_RCC_PLL_IsReady+0x1a>
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	0a1b      	lsrs	r3, r3, #8
 8004d58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004d66:	b480      	push	{r7}
 8004d68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004d96:	b480      	push	{r7}
 8004d98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f003 0303 	and.w	r3, r3, #3
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004dae:	b480      	push	{r7}
 8004db0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc0:	d101      	bne.n	8004dc6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dda:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004de6:	d101      	bne.n	8004dec <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e00:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e0c:	d101      	bne.n	8004e12 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004e22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e30:	d101      	bne.n	8004e36 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004e42:	b480      	push	{r7}
 8004e44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e54:	d101      	bne.n	8004e5a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e68:	b590      	push	{r4, r7, lr}
 8004e6a:	b08d      	sub	sp, #52	@ 0x34
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e363      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0320 	and.w	r3, r3, #32
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 808d 	beq.w	8004fa2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e88:	f7ff fe89 	bl	8004b9e <LL_RCC_GetSysClkSource>
 8004e8c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e8e:	f7ff ff82 	bl	8004d96 <LL_RCC_PLL_GetMainSource>
 8004e92:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d005      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x3e>
 8004e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9c:	2b0c      	cmp	r3, #12
 8004e9e:	d147      	bne.n	8004f30 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d144      	bne.n	8004f30 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e347      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004eb6:	f7ff fe34 	bl	8004b22 <LL_RCC_MSI_GetRange>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	429c      	cmp	r4, r3
 8004ebe:	d914      	bls.n	8004eea <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fd2f 	bl	8005928 <RCC_SetFlashLatencyFromMSIRange>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e336      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fe0e 	bl	8004afa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff fe32 	bl	8004b4c <LL_RCC_MSI_SetCalibTrimming>
 8004ee8:	e013      	b.n	8004f12 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff fe03 	bl	8004afa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff fe27 	bl	8004b4c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fd10 	bl	8005928 <RCC_SetFlashLatencyFromMSIRange>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e317      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004f12:	f000 fcc9 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 8004f16:	4603      	mov	r3, r0
 8004f18:	4aa4      	ldr	r2, [pc, #656]	@ (80051ac <HAL_RCC_OscConfig+0x344>)
 8004f1a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f1c:	4ba4      	ldr	r3, [pc, #656]	@ (80051b0 <HAL_RCC_OscConfig+0x348>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fd f829 	bl	8001f78 <HAL_InitTick>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d039      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e308      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01e      	beq.n	8004f76 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f38:	f7ff fdb0 	bl	8004a9c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f3c:	f7fd f86a 	bl	8002014 <HAL_GetTick>
 8004f40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f44:	f7fd f866 	bl	8002014 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e2f5      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004f56:	f7ff fdbf 	bl	8004ad8 <LL_RCC_MSI_IsReady>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0f1      	beq.n	8004f44 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff fdc8 	bl	8004afa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff fdec 	bl	8004b4c <LL_RCC_MSI_SetCalibTrimming>
 8004f74:	e015      	b.n	8004fa2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f76:	f7ff fda0 	bl	8004aba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f7a:	f7fd f84b 	bl	8002014 <HAL_GetTick>
 8004f7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f82:	f7fd f847 	bl	8002014 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e2d6      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004f94:	f7ff fda0 	bl	8004ad8 <LL_RCC_MSI_IsReady>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f1      	bne.n	8004f82 <HAL_RCC_OscConfig+0x11a>
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004fa0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d047      	beq.n	800503e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fae:	f7ff fdf6 	bl	8004b9e <LL_RCC_GetSysClkSource>
 8004fb2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fb4:	f7ff feef 	bl	8004d96 <LL_RCC_PLL_GetMainSource>
 8004fb8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d005      	beq.n	8004fcc <HAL_RCC_OscConfig+0x164>
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	2b0c      	cmp	r3, #12
 8004fc4:	d108      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d105      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d134      	bne.n	800503e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e2b4      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fe0:	d102      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x180>
 8004fe2:	f7ff fbdd 	bl	80047a0 <LL_RCC_HSE_Enable>
 8004fe6:	e001      	b.n	8004fec <HAL_RCC_OscConfig+0x184>
 8004fe8:	f7ff fbe9 	bl	80047be <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d012      	beq.n	800501a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff4:	f7fd f80e 	bl	8002014 <HAL_GetTick>
 8004ff8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ffc:	f7fd f80a 	bl	8002014 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b64      	cmp	r3, #100	@ 0x64
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e299      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800500e:	f7ff fbe5 	bl	80047dc <LL_RCC_HSE_IsReady>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0f1      	beq.n	8004ffc <HAL_RCC_OscConfig+0x194>
 8005018:	e011      	b.n	800503e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501a:	f7fc fffb 	bl	8002014 <HAL_GetTick>
 800501e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005022:	f7fc fff7 	bl	8002014 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b64      	cmp	r3, #100	@ 0x64
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e286      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005034:	f7ff fbd2 	bl	80047dc <LL_RCC_HSE_IsReady>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f1      	bne.n	8005022 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d04c      	beq.n	80050e4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800504a:	f7ff fda8 	bl	8004b9e <LL_RCC_GetSysClkSource>
 800504e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005050:	f7ff fea1 	bl	8004d96 <LL_RCC_PLL_GetMainSource>
 8005054:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	2b04      	cmp	r3, #4
 800505a:	d005      	beq.n	8005068 <HAL_RCC_OscConfig+0x200>
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2b0c      	cmp	r3, #12
 8005060:	d10e      	bne.n	8005080 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d10b      	bne.n	8005080 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e266      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff fbf1 	bl	8004860 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800507e:	e031      	b.n	80050e4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d019      	beq.n	80050bc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005088:	f7ff fbba 	bl	8004800 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508c:	f7fc ffc2 	bl	8002014 <HAL_GetTick>
 8005090:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005094:	f7fc ffbe 	bl	8002014 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e24d      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80050a6:	f7ff fbc9 	bl	800483c <LL_RCC_HSI_IsReady>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f1      	beq.n	8005094 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff fbd3 	bl	8004860 <LL_RCC_HSI_SetCalibTrimming>
 80050ba:	e013      	b.n	80050e4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050bc:	f7ff fbaf 	bl	800481e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fc ffa8 	bl	8002014 <HAL_GetTick>
 80050c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050c8:	f7fc ffa4 	bl	8002014 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e233      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80050da:	f7ff fbaf 	bl	800483c <LL_RCC_HSI_IsReady>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1f1      	bne.n	80050c8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0308 	and.w	r3, r3, #8
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d106      	bne.n	80050fe <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 80a3 	beq.w	8005244 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d076      	beq.n	80051f4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	2b00      	cmp	r3, #0
 8005110:	d046      	beq.n	80051a0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005112:	f7ff fc66 	bl	80049e2 <LL_RCC_LSI1_IsReady>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d113      	bne.n	8005144 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800511c:	f7ff fc3f 	bl	800499e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005120:	f7fc ff78 	bl	8002014 <HAL_GetTick>
 8005124:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005128:	f7fc ff74 	bl	8002014 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e203      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800513a:	f7ff fc52 	bl	80049e2 <LL_RCC_LSI1_IsReady>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0f1      	beq.n	8005128 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005144:	f7ff fc5f 	bl	8004a06 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005148:	f7fc ff64 	bl	8002014 <HAL_GetTick>
 800514c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005150:	f7fc ff60 	bl	8002014 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b03      	cmp	r3, #3
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e1ef      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005162:	f7ff fc72 	bl	8004a4a <LL_RCC_LSI2_IsReady>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0f1      	beq.n	8005150 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff fc7c 	bl	8004a6e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005176:	f7ff fc23 	bl	80049c0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517a:	f7fc ff4b 	bl	8002014 <HAL_GetTick>
 800517e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005182:	f7fc ff47 	bl	8002014 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e1d6      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005194:	f7ff fc25 	bl	80049e2 <LL_RCC_LSI1_IsReady>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f1      	bne.n	8005182 <HAL_RCC_OscConfig+0x31a>
 800519e:	e051      	b.n	8005244 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80051a0:	f7ff fbfd 	bl	800499e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fc ff36 	bl	8002014 <HAL_GetTick>
 80051a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80051aa:	e00c      	b.n	80051c6 <HAL_RCC_OscConfig+0x35e>
 80051ac:	20000008 	.word	0x20000008
 80051b0:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80051b4:	f7fc ff2e 	bl	8002014 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e1bd      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80051c6:	f7ff fc0c 	bl	80049e2 <LL_RCC_LSI1_IsReady>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0f1      	beq.n	80051b4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80051d0:	f7ff fc2a 	bl	8004a28 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80051d4:	e008      	b.n	80051e8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80051d6:	f7fc ff1d 	bl	8002014 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e1ac      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80051e8:	f7ff fc2f 	bl	8004a4a <LL_RCC_LSI2_IsReady>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f1      	bne.n	80051d6 <HAL_RCC_OscConfig+0x36e>
 80051f2:	e027      	b.n	8005244 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80051f4:	f7ff fc18 	bl	8004a28 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f8:	f7fc ff0c 	bl	8002014 <HAL_GetTick>
 80051fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005200:	f7fc ff08 	bl	8002014 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b03      	cmp	r3, #3
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e197      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005212:	f7ff fc1a 	bl	8004a4a <LL_RCC_LSI2_IsReady>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1f1      	bne.n	8005200 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800521c:	f7ff fbd0 	bl	80049c0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005220:	f7fc fef8 	bl	8002014 <HAL_GetTick>
 8005224:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005228:	f7fc fef4 	bl	8002014 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e183      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800523a:	f7ff fbd2 	bl	80049e2 <LL_RCC_LSI1_IsReady>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1f1      	bne.n	8005228 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d05b      	beq.n	8005308 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005250:	4ba7      	ldr	r3, [pc, #668]	@ (80054f0 <HAL_RCC_OscConfig+0x688>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d114      	bne.n	8005286 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800525c:	f7ff fa70 	bl	8004740 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005260:	f7fc fed8 	bl	8002014 <HAL_GetTick>
 8005264:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005268:	f7fc fed4 	bl	8002014 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e163      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800527a:	4b9d      	ldr	r3, [pc, #628]	@ (80054f0 <HAL_RCC_OscConfig+0x688>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d102      	bne.n	8005294 <HAL_RCC_OscConfig+0x42c>
 800528e:	f7ff fb30 	bl	80048f2 <LL_RCC_LSE_Enable>
 8005292:	e00c      	b.n	80052ae <HAL_RCC_OscConfig+0x446>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b05      	cmp	r3, #5
 800529a:	d104      	bne.n	80052a6 <HAL_RCC_OscConfig+0x43e>
 800529c:	f7ff fb4b 	bl	8004936 <LL_RCC_LSE_EnableBypass>
 80052a0:	f7ff fb27 	bl	80048f2 <LL_RCC_LSE_Enable>
 80052a4:	e003      	b.n	80052ae <HAL_RCC_OscConfig+0x446>
 80052a6:	f7ff fb35 	bl	8004914 <LL_RCC_LSE_Disable>
 80052aa:	f7ff fb55 	bl	8004958 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d014      	beq.n	80052e0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b6:	f7fc fead 	bl	8002014 <HAL_GetTick>
 80052ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80052bc:	e00a      	b.n	80052d4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052be:	f7fc fea9 	bl	8002014 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e136      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80052d4:	f7ff fb51 	bl	800497a <LL_RCC_LSE_IsReady>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0ef      	beq.n	80052be <HAL_RCC_OscConfig+0x456>
 80052de:	e013      	b.n	8005308 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e0:	f7fc fe98 	bl	8002014 <HAL_GetTick>
 80052e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80052e6:	e00a      	b.n	80052fe <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052e8:	f7fc fe94 	bl	8002014 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e121      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80052fe:	f7ff fb3c 	bl	800497a <LL_RCC_LSE_IsReady>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1ef      	bne.n	80052e8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005310:	2b00      	cmp	r3, #0
 8005312:	d02c      	beq.n	800536e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005318:	2b00      	cmp	r3, #0
 800531a:	d014      	beq.n	8005346 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800531c:	f7ff fab5 	bl	800488a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005320:	f7fc fe78 	bl	8002014 <HAL_GetTick>
 8005324:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005328:	f7fc fe74 	bl	8002014 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e103      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800533a:	f7ff fac8 	bl	80048ce <LL_RCC_HSI48_IsReady>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0f1      	beq.n	8005328 <HAL_RCC_OscConfig+0x4c0>
 8005344:	e013      	b.n	800536e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005346:	f7ff fab1 	bl	80048ac <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534a:	f7fc fe63 	bl	8002014 <HAL_GetTick>
 800534e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005352:	f7fc fe5f 	bl	8002014 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e0ee      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005364:	f7ff fab3 	bl	80048ce <LL_RCC_HSI48_IsReady>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f1      	bne.n	8005352 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 80e4 	beq.w	8005540 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005378:	f7ff fc11 	bl	8004b9e <LL_RCC_GetSysClkSource>
 800537c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800537e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538a:	2b02      	cmp	r3, #2
 800538c:	f040 80b4 	bne.w	80054f8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 0203 	and.w	r2, r3, #3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539a:	429a      	cmp	r2, r3
 800539c:	d123      	bne.n	80053e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d11c      	bne.n	80053e6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	0a1b      	lsrs	r3, r3, #8
 80053b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d114      	bne.n	80053e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d10d      	bne.n	80053e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d106      	bne.n	80053e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d05d      	beq.n	80054a2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2b0c      	cmp	r3, #12
 80053ea:	d058      	beq.n	800549e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80053ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e0a1      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80053fe:	f7ff fc84 	bl	8004d0a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005402:	f7fc fe07 	bl	8002014 <HAL_GetTick>
 8005406:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800540a:	f7fc fe03 	bl	8002014 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e092      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800541c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1ef      	bne.n	800540a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800542a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	4b30      	ldr	r3, [pc, #192]	@ (80054f4 <HAL_RCC_OscConfig+0x68c>)
 8005432:	4013      	ands	r3, r2
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800543c:	4311      	orrs	r1, r2
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005442:	0212      	lsls	r2, r2, #8
 8005444:	4311      	orrs	r1, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800544a:	4311      	orrs	r1, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005450:	4311      	orrs	r1, r2
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005456:	430a      	orrs	r2, r1
 8005458:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800545c:	4313      	orrs	r3, r2
 800545e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005460:	f7ff fc44 	bl	8004cec <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800546e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005472:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005474:	f7fc fdce 	bl	8002014 <HAL_GetTick>
 8005478:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800547c:	f7fc fdca 	bl	8002014 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e059      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800548e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0ef      	beq.n	800547c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800549c:	e050      	b.n	8005540 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e04f      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d147      	bne.n	8005540 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80054b0:	f7ff fc1c 	bl	8004cec <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054c4:	f7fc fda6 	bl	8002014 <HAL_GetTick>
 80054c8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054cc:	f7fc fda2 	bl	8002014 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e031      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0ef      	beq.n	80054cc <HAL_RCC_OscConfig+0x664>
 80054ec:	e028      	b.n	8005540 <HAL_RCC_OscConfig+0x6d8>
 80054ee:	bf00      	nop
 80054f0:	58000400 	.word	0x58000400
 80054f4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	2b0c      	cmp	r3, #12
 80054fc:	d01e      	beq.n	800553c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054fe:	f7ff fc04 	bl	8004d0a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005502:	f7fc fd87 	bl	8002014 <HAL_GetTick>
 8005506:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800550a:	f7fc fd83 	bl	8002014 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e012      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800551c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1ef      	bne.n	800550a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800552a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005534:	4b05      	ldr	r3, [pc, #20]	@ (800554c <HAL_RCC_OscConfig+0x6e4>)
 8005536:	4013      	ands	r3, r2
 8005538:	60cb      	str	r3, [r1, #12]
 800553a:	e001      	b.n	8005540 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3734      	adds	r7, #52	@ 0x34
 8005546:	46bd      	mov	sp, r7
 8005548:	bd90      	pop	{r4, r7, pc}
 800554a:	bf00      	nop
 800554c:	eefefffc 	.word	0xeefefffc

08005550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e12d      	b.n	80057c0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005564:	4b98      	ldr	r3, [pc, #608]	@ (80057c8 <HAL_RCC_ClockConfig+0x278>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d91b      	bls.n	80055aa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005572:	4b95      	ldr	r3, [pc, #596]	@ (80057c8 <HAL_RCC_ClockConfig+0x278>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f023 0207 	bic.w	r2, r3, #7
 800557a:	4993      	ldr	r1, [pc, #588]	@ (80057c8 <HAL_RCC_ClockConfig+0x278>)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	4313      	orrs	r3, r2
 8005580:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005582:	f7fc fd47 	bl	8002014 <HAL_GetTick>
 8005586:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005588:	e008      	b.n	800559c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800558a:	f7fc fd43 	bl	8002014 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e111      	b.n	80057c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800559c:	4b8a      	ldr	r3, [pc, #552]	@ (80057c8 <HAL_RCC_ClockConfig+0x278>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d1ef      	bne.n	800558a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d016      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff fafb 	bl	8004bb6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80055c0:	f7fc fd28 	bl	8002014 <HAL_GetTick>
 80055c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80055c6:	e008      	b.n	80055da <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80055c8:	f7fc fd24 	bl	8002014 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e0f2      	b.n	80057c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80055da:	f7ff fbe8 	bl	8004dae <LL_RCC_IsActiveFlag_HPRE>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0f1      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d016      	beq.n	800561e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff faf2 	bl	8004bde <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80055fa:	f7fc fd0b 	bl	8002014 <HAL_GetTick>
 80055fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005600:	e008      	b.n	8005614 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005602:	f7fc fd07 	bl	8002014 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e0d5      	b.n	80057c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005614:	f7ff fbdd 	bl	8004dd2 <LL_RCC_IsActiveFlag_C2HPRE>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f1      	beq.n	8005602 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d016      	beq.n	8005658 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff faeb 	bl	8004c0a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005634:	f7fc fcee 	bl	8002014 <HAL_GetTick>
 8005638:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800563c:	f7fc fcea 	bl	8002014 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e0b8      	b.n	80057c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800564e:	f7ff fbd3 	bl	8004df8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0f1      	beq.n	800563c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d016      	beq.n	8005692 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff fae5 	bl	8004c38 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800566e:	f7fc fcd1 	bl	8002014 <HAL_GetTick>
 8005672:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005674:	e008      	b.n	8005688 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005676:	f7fc fccd 	bl	8002014 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d901      	bls.n	8005688 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e09b      	b.n	80057c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005688:	f7ff fbc9 	bl	8004e1e <LL_RCC_IsActiveFlag_PPRE1>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f1      	beq.n	8005676 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b00      	cmp	r3, #0
 800569c:	d017      	beq.n	80056ce <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff fadb 	bl	8004c60 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80056aa:	f7fc fcb3 	bl	8002014 <HAL_GetTick>
 80056ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80056b2:	f7fc fcaf 	bl	8002014 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e07d      	b.n	80057c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80056c4:	f7ff fbbd 	bl	8004e42 <LL_RCC_IsActiveFlag_PPRE2>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0f1      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d043      	beq.n	8005762 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d106      	bne.n	80056f0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80056e2:	f7ff f87b 	bl	80047dc <LL_RCC_HSE_IsReady>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d11e      	bne.n	800572a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e067      	b.n	80057c0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d106      	bne.n	8005706 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80056f8:	f7ff fb16 	bl	8004d28 <LL_RCC_PLL_IsReady>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d113      	bne.n	800572a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e05c      	b.n	80057c0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800570e:	f7ff f9e3 	bl	8004ad8 <LL_RCC_MSI_IsReady>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d108      	bne.n	800572a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e051      	b.n	80057c0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800571c:	f7ff f88e 	bl	800483c <LL_RCC_HSI_IsReady>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e04a      	b.n	80057c0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff fa21 	bl	8004b76 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005734:	f7fc fc6e 	bl	8002014 <HAL_GetTick>
 8005738:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800573a:	e00a      	b.n	8005752 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800573c:	f7fc fc6a 	bl	8002014 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800574a:	4293      	cmp	r3, r2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e036      	b.n	80057c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005752:	f7ff fa24 	bl	8004b9e <LL_RCC_GetSysClkSource>
 8005756:	4602      	mov	r2, r0
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	429a      	cmp	r2, r3
 8005760:	d1ec      	bne.n	800573c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005762:	4b19      	ldr	r3, [pc, #100]	@ (80057c8 <HAL_RCC_ClockConfig+0x278>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d21b      	bcs.n	80057a8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005770:	4b15      	ldr	r3, [pc, #84]	@ (80057c8 <HAL_RCC_ClockConfig+0x278>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f023 0207 	bic.w	r2, r3, #7
 8005778:	4913      	ldr	r1, [pc, #76]	@ (80057c8 <HAL_RCC_ClockConfig+0x278>)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	4313      	orrs	r3, r2
 800577e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005780:	f7fc fc48 	bl	8002014 <HAL_GetTick>
 8005784:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005786:	e008      	b.n	800579a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005788:	f7fc fc44 	bl	8002014 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d901      	bls.n	800579a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e012      	b.n	80057c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800579a:	4b0b      	ldr	r3, [pc, #44]	@ (80057c8 <HAL_RCC_ClockConfig+0x278>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d1ef      	bne.n	8005788 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80057a8:	f000 f87e 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 80057ac:	4603      	mov	r3, r0
 80057ae:	4a07      	ldr	r2, [pc, #28]	@ (80057cc <HAL_RCC_ClockConfig+0x27c>)
 80057b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80057b2:	f7fc fc3b 	bl	800202c <HAL_GetTickPrio>
 80057b6:	4603      	mov	r3, r0
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fc fbdd 	bl	8001f78 <HAL_InitTick>
 80057be:	4603      	mov	r3, r0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	58004000 	.word	0x58004000
 80057cc:	20000008 	.word	0x20000008

080057d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057d0:	b590      	push	{r4, r7, lr}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057d6:	f7ff f9e2 	bl	8004b9e <LL_RCC_GetSysClkSource>
 80057da:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80057e2:	f7ff f99e 	bl	8004b22 <LL_RCC_MSI_GetRange>
 80057e6:	4603      	mov	r3, r0
 80057e8:	091b      	lsrs	r3, r3, #4
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	4a2b      	ldr	r2, [pc, #172]	@ (800589c <HAL_RCC_GetSysClockFreq+0xcc>)
 80057f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	e04b      	b.n	8005890 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d102      	bne.n	8005804 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057fe:	4b28      	ldr	r3, [pc, #160]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	e045      	b.n	8005890 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b08      	cmp	r3, #8
 8005808:	d10a      	bne.n	8005820 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800580a:	f7fe ffb7 	bl	800477c <LL_RCC_HSE_IsEnabledDiv2>
 800580e:	4603      	mov	r3, r0
 8005810:	2b01      	cmp	r3, #1
 8005812:	d102      	bne.n	800581a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005814:	4b22      	ldr	r3, [pc, #136]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	e03a      	b.n	8005890 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800581a:	4b22      	ldr	r3, [pc, #136]	@ (80058a4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	e037      	b.n	8005890 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005820:	f7ff fab9 	bl	8004d96 <LL_RCC_PLL_GetMainSource>
 8005824:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b02      	cmp	r3, #2
 800582a:	d003      	beq.n	8005834 <HAL_RCC_GetSysClockFreq+0x64>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2b03      	cmp	r3, #3
 8005830:	d003      	beq.n	800583a <HAL_RCC_GetSysClockFreq+0x6a>
 8005832:	e00d      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005834:	4b1a      	ldr	r3, [pc, #104]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005836:	60bb      	str	r3, [r7, #8]
        break;
 8005838:	e015      	b.n	8005866 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800583a:	f7fe ff9f 	bl	800477c <LL_RCC_HSE_IsEnabledDiv2>
 800583e:	4603      	mov	r3, r0
 8005840:	2b01      	cmp	r3, #1
 8005842:	d102      	bne.n	800584a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005844:	4b16      	ldr	r3, [pc, #88]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005846:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005848:	e00d      	b.n	8005866 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800584a:	4b16      	ldr	r3, [pc, #88]	@ (80058a4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800584c:	60bb      	str	r3, [r7, #8]
        break;
 800584e:	e00a      	b.n	8005866 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005850:	f7ff f967 	bl	8004b22 <LL_RCC_MSI_GetRange>
 8005854:	4603      	mov	r3, r0
 8005856:	091b      	lsrs	r3, r3, #4
 8005858:	f003 030f 	and.w	r3, r3, #15
 800585c:	4a0f      	ldr	r2, [pc, #60]	@ (800589c <HAL_RCC_GetSysClockFreq+0xcc>)
 800585e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005862:	60bb      	str	r3, [r7, #8]
        break;
 8005864:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005866:	f7ff fa71 	bl	8004d4c <LL_RCC_PLL_GetN>
 800586a:	4602      	mov	r2, r0
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	fb03 f402 	mul.w	r4, r3, r2
 8005872:	f7ff fa84 	bl	8004d7e <LL_RCC_PLL_GetDivider>
 8005876:	4603      	mov	r3, r0
 8005878:	091b      	lsrs	r3, r3, #4
 800587a:	3301      	adds	r3, #1
 800587c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005880:	f7ff fa71 	bl	8004d66 <LL_RCC_PLL_GetR>
 8005884:	4603      	mov	r3, r0
 8005886:	0f5b      	lsrs	r3, r3, #29
 8005888:	3301      	adds	r3, #1
 800588a:	fbb4 f3f3 	udiv	r3, r4, r3
 800588e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005890:	68fb      	ldr	r3, [r7, #12]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	bd90      	pop	{r4, r7, pc}
 800589a:	bf00      	nop
 800589c:	08009aac 	.word	0x08009aac
 80058a0:	00f42400 	.word	0x00f42400
 80058a4:	01e84800 	.word	0x01e84800

080058a8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058a8:	b598      	push	{r3, r4, r7, lr}
 80058aa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80058ac:	f7ff ff90 	bl	80057d0 <HAL_RCC_GetSysClockFreq>
 80058b0:	4604      	mov	r4, r0
 80058b2:	f7ff f9e9 	bl	8004c88 <LL_RCC_GetAHBPrescaler>
 80058b6:	4603      	mov	r3, r0
 80058b8:	091b      	lsrs	r3, r3, #4
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	4a03      	ldr	r2, [pc, #12]	@ (80058cc <HAL_RCC_GetHCLKFreq+0x24>)
 80058c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	bd98      	pop	{r3, r4, r7, pc}
 80058cc:	08009a4c 	.word	0x08009a4c

080058d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058d0:	b598      	push	{r3, r4, r7, lr}
 80058d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80058d4:	f7ff ffe8 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 80058d8:	4604      	mov	r4, r0
 80058da:	f7ff f9ef 	bl	8004cbc <LL_RCC_GetAPB1Prescaler>
 80058de:	4603      	mov	r3, r0
 80058e0:	0a1b      	lsrs	r3, r3, #8
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	4a04      	ldr	r2, [pc, #16]	@ (80058f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ec:	f003 031f 	and.w	r3, r3, #31
 80058f0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	bd98      	pop	{r3, r4, r7, pc}
 80058f8:	08009a8c 	.word	0x08009a8c

080058fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058fc:	b598      	push	{r3, r4, r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005900:	f7ff ffd2 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 8005904:	4604      	mov	r4, r0
 8005906:	f7ff f9e5 	bl	8004cd4 <LL_RCC_GetAPB2Prescaler>
 800590a:	4603      	mov	r3, r0
 800590c:	0adb      	lsrs	r3, r3, #11
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	4a04      	ldr	r2, [pc, #16]	@ (8005924 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005918:	f003 031f 	and.w	r3, r3, #31
 800591c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005920:	4618      	mov	r0, r3
 8005922:	bd98      	pop	{r3, r4, r7, pc}
 8005924:	08009a8c 	.word	0x08009a8c

08005928 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005928:	b590      	push	{r4, r7, lr}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2bb0      	cmp	r3, #176	@ 0xb0
 8005934:	d903      	bls.n	800593e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005936:	4b15      	ldr	r3, [pc, #84]	@ (800598c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	e007      	b.n	800594e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	091b      	lsrs	r3, r3, #4
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	4a11      	ldr	r2, [pc, #68]	@ (800598c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800594c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800594e:	f7ff f9a7 	bl	8004ca0 <LL_RCC_GetAHB4Prescaler>
 8005952:	4603      	mov	r3, r0
 8005954:	091b      	lsrs	r3, r3, #4
 8005956:	f003 030f 	and.w	r3, r3, #15
 800595a:	4a0d      	ldr	r2, [pc, #52]	@ (8005990 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800595c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	fbb2 f3f3 	udiv	r3, r2, r3
 8005966:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4a0a      	ldr	r2, [pc, #40]	@ (8005994 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800596c:	fba2 2303 	umull	r2, r3, r2, r3
 8005970:	0c9c      	lsrs	r4, r3, #18
 8005972:	f7fe fef5 	bl	8004760 <HAL_PWREx_GetVoltageRange>
 8005976:	4603      	mov	r3, r0
 8005978:	4619      	mov	r1, r3
 800597a:	4620      	mov	r0, r4
 800597c:	f000 f80c 	bl	8005998 <RCC_SetFlashLatency>
 8005980:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	bd90      	pop	{r4, r7, pc}
 800598a:	bf00      	nop
 800598c:	08009aac 	.word	0x08009aac
 8005990:	08009a4c 	.word	0x08009a4c
 8005994:	431bde83 	.word	0x431bde83

08005998 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005998:	b590      	push	{r4, r7, lr}
 800599a:	b093      	sub	sp, #76	@ 0x4c
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80059a2:	4b37      	ldr	r3, [pc, #220]	@ (8005a80 <RCC_SetFlashLatency+0xe8>)
 80059a4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80059a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80059aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80059ae:	4a35      	ldr	r2, [pc, #212]	@ (8005a84 <RCC_SetFlashLatency+0xec>)
 80059b0:	f107 031c 	add.w	r3, r7, #28
 80059b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80059b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80059ba:	4b33      	ldr	r3, [pc, #204]	@ (8005a88 <RCC_SetFlashLatency+0xf0>)
 80059bc:	f107 040c 	add.w	r4, r7, #12
 80059c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80059c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80059c6:	2300      	movs	r3, #0
 80059c8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059d0:	d11a      	bne.n	8005a08 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80059d2:	2300      	movs	r3, #0
 80059d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80059d6:	e013      	b.n	8005a00 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80059d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	3348      	adds	r3, #72	@ 0x48
 80059de:	443b      	add	r3, r7
 80059e0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d807      	bhi.n	80059fa <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80059ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	3348      	adds	r3, #72	@ 0x48
 80059f0:	443b      	add	r3, r7
 80059f2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80059f6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80059f8:	e020      	b.n	8005a3c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80059fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059fc:	3301      	adds	r3, #1
 80059fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d9e8      	bls.n	80059d8 <RCC_SetFlashLatency+0x40>
 8005a06:	e019      	b.n	8005a3c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005a08:	2300      	movs	r3, #0
 8005a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a0c:	e013      	b.n	8005a36 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	3348      	adds	r3, #72	@ 0x48
 8005a14:	443b      	add	r3, r7
 8005a16:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d807      	bhi.n	8005a30 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	3348      	adds	r3, #72	@ 0x48
 8005a26:	443b      	add	r3, r7
 8005a28:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005a2c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005a2e:	e005      	b.n	8005a3c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a32:	3301      	adds	r3, #1
 8005a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d9e8      	bls.n	8005a0e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005a3c:	4b13      	ldr	r3, [pc, #76]	@ (8005a8c <RCC_SetFlashLatency+0xf4>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f023 0207 	bic.w	r2, r3, #7
 8005a44:	4911      	ldr	r1, [pc, #68]	@ (8005a8c <RCC_SetFlashLatency+0xf4>)
 8005a46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a4c:	f7fc fae2 	bl	8002014 <HAL_GetTick>
 8005a50:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005a52:	e008      	b.n	8005a66 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005a54:	f7fc fade 	bl	8002014 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e007      	b.n	8005a76 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005a66:	4b09      	ldr	r3, [pc, #36]	@ (8005a8c <RCC_SetFlashLatency+0xf4>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d1ef      	bne.n	8005a54 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	374c      	adds	r7, #76	@ 0x4c
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd90      	pop	{r4, r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	08009a20 	.word	0x08009a20
 8005a84:	08009a30 	.word	0x08009a30
 8005a88:	08009a3c 	.word	0x08009a3c
 8005a8c:	58004000 	.word	0x58004000

08005a90 <LL_RCC_LSE_IsEnabled>:
{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <LL_RCC_LSE_IsEnabled+0x18>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e000      	b.n	8005aaa <LL_RCC_LSE_IsEnabled+0x1a>
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <LL_RCC_LSE_IsReady>:
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005ab8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d101      	bne.n	8005acc <LL_RCC_LSE_IsReady+0x18>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <LL_RCC_LSE_IsReady+0x1a>
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <LL_RCC_SetRFWKPClockSource>:
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ae8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005aec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <LL_RCC_SetSMPSClockSource>:
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b12:	f023 0203 	bic.w	r2, r3, #3
 8005b16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <LL_RCC_SetSMPSPrescaler>:
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005b34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <LL_RCC_SetUSARTClockSource>:
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b64:	f023 0203 	bic.w	r2, r3, #3
 8005b68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <LL_RCC_SetLPUARTClockSource>:
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b90:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <LL_RCC_SetI2CClockSource>:
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	091b      	lsrs	r3, r3, #4
 8005bc0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005bc4:	43db      	mvns	r3, r3
 8005bc6:	401a      	ands	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005bd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <LL_RCC_SetLPTIMClockSource>:
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005bee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bf2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	0c1b      	lsrs	r3, r3, #16
 8005bfa:	041b      	lsls	r3, r3, #16
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	401a      	ands	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	041b      	lsls	r3, r3, #16
 8005c04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <LL_RCC_SetSAIClockSource>:
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c2a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005c2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <LL_RCC_SetRNGClockSource>:
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c56:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005c5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <LL_RCC_SetCLK48ClockSource>:
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <LL_RCC_SetUSBClockSource>:
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b082      	sub	sp, #8
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff ffe3 	bl	8005c72 <LL_RCC_SetCLK48ClockSource>
}
 8005cac:	bf00      	nop
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <LL_RCC_SetADCClockSource>:
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005cc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <LL_RCC_SetRTCClockSource>:
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <LL_RCC_GetRTCClockSource>:
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <LL_RCC_ForceBackupDomainReset>:
{
 8005d26:	b480      	push	{r7}
 8005d28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005d3e:	bf00      	nop
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005d48:	b480      	push	{r7}
 8005d4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005d60:	bf00      	nop
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <LL_RCC_PLLSAI1_Enable>:
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d7c:	6013      	str	r3, [r2, #0]
}
 8005d7e:	bf00      	nop
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <LL_RCC_PLLSAI1_Disable>:
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d9a:	6013      	str	r3, [r2, #0]
}
 8005d9c:	bf00      	nop
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <LL_RCC_PLLSAI1_IsReady>:
{
 8005da6:	b480      	push	{r7}
 8005da8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005db4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005db8:	d101      	bne.n	8005dbe <LL_RCC_PLLSAI1_IsReady+0x18>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b088      	sub	sp, #32
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d034      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005dee:	d021      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005df0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005df4:	d81b      	bhi.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005df6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005dfa:	d01d      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005dfc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e00:	d815      	bhi.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00b      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005e06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e0a:	d110      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e1a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e1c:	e00d      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3304      	adds	r3, #4
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 f947 	bl	80060b6 <RCCEx_PLLSAI1_ConfigNP>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e2c:	e005      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	77fb      	strb	r3, [r7, #31]
        break;
 8005e32:	e002      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005e34:	bf00      	nop
 8005e36:	e000      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e3a:	7ffb      	ldrb	r3, [r7, #31]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d105      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff fee8 	bl	8005c1a <LL_RCC_SetSAIClockSource>
 8005e4a:	e001      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4c:	7ffb      	ldrb	r3, [r7, #31]
 8005e4e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d046      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005e5c:	f7ff ff56 	bl	8005d0c <LL_RCC_GetRTCClockSource>
 8005e60:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d03c      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005e6c:	f7fe fc68 	bl	8004740 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d105      	bne.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff ff30 	bl	8005ce0 <LL_RCC_SetRTCClockSource>
 8005e80:	e02e      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e8a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005e8c:	f7ff ff4b 	bl	8005d26 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005e90:	f7ff ff5a 	bl	8005d48 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005ea2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005eac:	f7ff fdf0 	bl	8005a90 <LL_RCC_LSE_IsEnabled>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d114      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005eb6:	f7fc f8ad 	bl	8002014 <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ebc:	e00b      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ebe:	f7fc f8a9 	bl	8002014 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d902      	bls.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	77fb      	strb	r3, [r7, #31]
              break;
 8005ed4:	e004      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ed6:	f7ff fded 	bl	8005ab4 <LL_RCC_LSE_IsReady>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d1ee      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005ee0:	7ffb      	ldrb	r3, [r7, #31]
 8005ee2:	77bb      	strb	r3, [r7, #30]
 8005ee4:	e001      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee6:	7ffb      	ldrb	r3, [r7, #31]
 8005ee8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d004      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff fe2a 	bl	8005b54 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d004      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7ff fe35 	bl	8005b80 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0310 	and.w	r3, r3, #16
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d004      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff fe5d 	bl	8005be6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7ff fe52 	bl	8005be6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d004      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff fe2a 	bl	8005bac <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d004      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7ff fe1f 	bl	8005bac <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d022      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff fe8d 	bl	8005c9e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f8c:	d107      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005f8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f9c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fa2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fa6:	d10b      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3304      	adds	r3, #4
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 f8dd 	bl	800616c <RCCEx_PLLSAI1_ConfigNQ>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005fb6:	7ffb      	ldrb	r3, [r7, #31]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005fbc:	7ffb      	ldrb	r3, [r7, #31]
 8005fbe:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d02b      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd4:	d008      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fde:	d003      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d105      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff fe2a 	bl	8005c46 <LL_RCC_SetRNGClockSource>
 8005ff2:	e00a      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	2000      	movs	r0, #0
 8006000:	f7ff fe21 	bl	8005c46 <LL_RCC_SetRNGClockSource>
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f7ff fe34 	bl	8005c72 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006012:	d107      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800601e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006022:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800602c:	2b00      	cmp	r3, #0
 800602e:	d022      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff fe3d 	bl	8005cb4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006042:	d107      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800604e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006052:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006058:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800605c:	d10b      	bne.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3304      	adds	r3, #4
 8006062:	4618      	mov	r0, r3
 8006064:	f000 f8dd 	bl	8006222 <RCCEx_PLLSAI1_ConfigNR>
 8006068:	4603      	mov	r3, r0
 800606a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800606c:	7ffb      	ldrb	r3, [r7, #31]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006072:	7ffb      	ldrb	r3, [r7, #31]
 8006074:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d004      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006086:	4618      	mov	r0, r3
 8006088:	f7ff fd26 	bl	8005ad8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d009      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800609c:	4618      	mov	r0, r3
 800609e:	f7ff fd45 	bl	8005b2c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7ff fd2c 	bl	8005b04 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80060ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3720      	adds	r7, #32
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80060c2:	f7ff fe61 	bl	8005d88 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060c6:	f7fb ffa5 	bl	8002014 <HAL_GetTick>
 80060ca:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80060cc:	e009      	b.n	80060e2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060ce:	f7fb ffa1 	bl	8002014 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d902      	bls.n	80060e2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	73fb      	strb	r3, [r7, #15]
      break;
 80060e0:	e004      	b.n	80060ec <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80060e2:	f7ff fe60 	bl	8005da6 <LL_RCC_PLLSAI1_IsReady>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1f0      	bne.n	80060ce <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d137      	bne.n	8006162 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80060f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	021b      	lsls	r3, r3, #8
 8006102:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006106:	4313      	orrs	r3, r2
 8006108:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800610a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800611c:	4313      	orrs	r3, r2
 800611e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006120:	f7ff fe23 	bl	8005d6a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006124:	f7fb ff76 	bl	8002014 <HAL_GetTick>
 8006128:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800612a:	e009      	b.n	8006140 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800612c:	f7fb ff72 	bl	8002014 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d902      	bls.n	8006140 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	73fb      	strb	r3, [r7, #15]
        break;
 800613e:	e004      	b.n	800614a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006140:	f7ff fe31 	bl	8005da6 <LL_RCC_PLLSAI1_IsReady>
 8006144:	4603      	mov	r3, r0
 8006146:	2b01      	cmp	r3, #1
 8006148:	d1f0      	bne.n	800612c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d108      	bne.n	8006162 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006154:	691a      	ldr	r2, [r3, #16]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800615e:	4313      	orrs	r3, r2
 8006160:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006178:	f7ff fe06 	bl	8005d88 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800617c:	f7fb ff4a 	bl	8002014 <HAL_GetTick>
 8006180:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006182:	e009      	b.n	8006198 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006184:	f7fb ff46 	bl	8002014 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b02      	cmp	r3, #2
 8006190:	d902      	bls.n	8006198 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	73fb      	strb	r3, [r7, #15]
      break;
 8006196:	e004      	b.n	80061a2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006198:	f7ff fe05 	bl	8005da6 <LL_RCC_PLLSAI1_IsReady>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1f0      	bne.n	8006184 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d137      	bne.n	8006218 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80061a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061bc:	4313      	orrs	r3, r2
 80061be:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80061c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061d2:	4313      	orrs	r3, r2
 80061d4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80061d6:	f7ff fdc8 	bl	8005d6a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061da:	f7fb ff1b 	bl	8002014 <HAL_GetTick>
 80061de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80061e0:	e009      	b.n	80061f6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061e2:	f7fb ff17 	bl	8002014 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d902      	bls.n	80061f6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	73fb      	strb	r3, [r7, #15]
        break;
 80061f4:	e004      	b.n	8006200 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80061f6:	f7ff fdd6 	bl	8005da6 <LL_RCC_PLLSAI1_IsReady>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d1f0      	bne.n	80061e2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d108      	bne.n	8006218 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006214:	4313      	orrs	r3, r2
 8006216:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006218:	7bfb      	ldrb	r3, [r7, #15]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b084      	sub	sp, #16
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800622e:	f7ff fdab 	bl	8005d88 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006232:	f7fb feef 	bl	8002014 <HAL_GetTick>
 8006236:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006238:	e009      	b.n	800624e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800623a:	f7fb feeb 	bl	8002014 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d902      	bls.n	800624e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	73fb      	strb	r3, [r7, #15]
      break;
 800624c:	e004      	b.n	8006258 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800624e:	f7ff fdaa 	bl	8005da6 <LL_RCC_PLLSAI1_IsReady>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1f0      	bne.n	800623a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d137      	bne.n	80062ce <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800625e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	021b      	lsls	r3, r3, #8
 800626e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006272:	4313      	orrs	r3, r2
 8006274:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006288:	4313      	orrs	r3, r2
 800628a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800628c:	f7ff fd6d 	bl	8005d6a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006290:	f7fb fec0 	bl	8002014 <HAL_GetTick>
 8006294:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006296:	e009      	b.n	80062ac <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006298:	f7fb febc 	bl	8002014 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d902      	bls.n	80062ac <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	73fb      	strb	r3, [r7, #15]
        break;
 80062aa:	e004      	b.n	80062b6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80062ac:	f7ff fd7b 	bl	8005da6 <LL_RCC_PLLSAI1_IsReady>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d1f0      	bne.n	8006298 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d108      	bne.n	80062ce <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80062bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062ca:	4313      	orrs	r3, r2
 80062cc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <LL_RCC_GetUSARTClockSource>:
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80062e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4013      	ands	r3, r2
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <LL_RCC_GetLPUARTClockSource>:
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006304:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4013      	ands	r3, r2
}
 800630c:	4618      	mov	r0, r3
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e042      	b.n	80063b0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006330:	2b00      	cmp	r3, #0
 8006332:	d106      	bne.n	8006342 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7fb fa4f 	bl	80017e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2224      	movs	r2, #36	@ 0x24
 8006346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0201 	bic.w	r2, r2, #1
 8006358:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fade 	bl	8006924 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f8b3 	bl	80064d4 <UART_SetConfig>
 800636e:	4603      	mov	r3, r0
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e01b      	b.n	80063b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006386:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006396:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fb5d 	bl	8006a68 <UART_CheckIdleState>
 80063ae:	4603      	mov	r3, r0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08a      	sub	sp, #40	@ 0x28
 80063bc:	af02      	add	r7, sp, #8
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	603b      	str	r3, [r7, #0]
 80063c4:	4613      	mov	r3, r2
 80063c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	d17b      	bne.n	80064ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <HAL_UART_Transmit+0x26>
 80063d8:	88fb      	ldrh	r3, [r7, #6]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e074      	b.n	80064cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2221      	movs	r2, #33	@ 0x21
 80063ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063f2:	f7fb fe0f 	bl	8002014 <HAL_GetTick>
 80063f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	88fa      	ldrh	r2, [r7, #6]
 80063fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	88fa      	ldrh	r2, [r7, #6]
 8006404:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006410:	d108      	bne.n	8006424 <HAL_UART_Transmit+0x6c>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d104      	bne.n	8006424 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800641a:	2300      	movs	r3, #0
 800641c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	e003      	b.n	800642c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006428:	2300      	movs	r3, #0
 800642a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800642c:	e030      	b.n	8006490 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2200      	movs	r2, #0
 8006436:	2180      	movs	r1, #128	@ 0x80
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 fbbf 	bl	8006bbc <UART_WaitOnFlagUntilTimeout>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d005      	beq.n	8006450 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2220      	movs	r2, #32
 8006448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e03d      	b.n	80064cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10b      	bne.n	800646e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006464:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	3302      	adds	r3, #2
 800646a:	61bb      	str	r3, [r7, #24]
 800646c:	e007      	b.n	800647e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	781a      	ldrb	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	3301      	adds	r3, #1
 800647c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006484:	b29b      	uxth	r3, r3
 8006486:	3b01      	subs	r3, #1
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006496:	b29b      	uxth	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1c8      	bne.n	800642e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2200      	movs	r2, #0
 80064a4:	2140      	movs	r1, #64	@ 0x40
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 fb88 	bl	8006bbc <UART_WaitOnFlagUntilTimeout>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d005      	beq.n	80064be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e006      	b.n	80064cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2220      	movs	r2, #32
 80064c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	e000      	b.n	80064cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80064ca:	2302      	movs	r3, #2
  }
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3720      	adds	r7, #32
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064d8:	b08c      	sub	sp, #48	@ 0x30
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	431a      	orrs	r2, r3
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	4baf      	ldr	r3, [pc, #700]	@ (80067c0 <UART_SetConfig+0x2ec>)
 8006504:	4013      	ands	r3, r2
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	6812      	ldr	r2, [r2, #0]
 800650a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800650c:	430b      	orrs	r3, r1
 800650e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4aa4      	ldr	r2, [pc, #656]	@ (80067c4 <UART_SetConfig+0x2f0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d004      	beq.n	8006540 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800653c:	4313      	orrs	r3, r2
 800653e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800654a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	6812      	ldr	r2, [r2, #0]
 8006552:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006554:	430b      	orrs	r3, r1
 8006556:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655e:	f023 010f 	bic.w	r1, r3, #15
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a95      	ldr	r2, [pc, #596]	@ (80067c8 <UART_SetConfig+0x2f4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d125      	bne.n	80065c4 <UART_SetConfig+0xf0>
 8006578:	2003      	movs	r0, #3
 800657a:	f7ff fead 	bl	80062d8 <LL_RCC_GetUSARTClockSource>
 800657e:	4603      	mov	r3, r0
 8006580:	2b03      	cmp	r3, #3
 8006582:	d81b      	bhi.n	80065bc <UART_SetConfig+0xe8>
 8006584:	a201      	add	r2, pc, #4	@ (adr r2, 800658c <UART_SetConfig+0xb8>)
 8006586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658a:	bf00      	nop
 800658c:	0800659d 	.word	0x0800659d
 8006590:	080065ad 	.word	0x080065ad
 8006594:	080065a5 	.word	0x080065a5
 8006598:	080065b5 	.word	0x080065b5
 800659c:	2301      	movs	r3, #1
 800659e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065a2:	e042      	b.n	800662a <UART_SetConfig+0x156>
 80065a4:	2302      	movs	r3, #2
 80065a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065aa:	e03e      	b.n	800662a <UART_SetConfig+0x156>
 80065ac:	2304      	movs	r3, #4
 80065ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065b2:	e03a      	b.n	800662a <UART_SetConfig+0x156>
 80065b4:	2308      	movs	r3, #8
 80065b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ba:	e036      	b.n	800662a <UART_SetConfig+0x156>
 80065bc:	2310      	movs	r3, #16
 80065be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065c2:	e032      	b.n	800662a <UART_SetConfig+0x156>
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a7e      	ldr	r2, [pc, #504]	@ (80067c4 <UART_SetConfig+0x2f0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d12a      	bne.n	8006624 <UART_SetConfig+0x150>
 80065ce:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80065d2:	f7ff fe91 	bl	80062f8 <LL_RCC_GetLPUARTClockSource>
 80065d6:	4603      	mov	r3, r0
 80065d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065dc:	d01a      	beq.n	8006614 <UART_SetConfig+0x140>
 80065de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065e2:	d81b      	bhi.n	800661c <UART_SetConfig+0x148>
 80065e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065e8:	d00c      	beq.n	8006604 <UART_SetConfig+0x130>
 80065ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065ee:	d815      	bhi.n	800661c <UART_SetConfig+0x148>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <UART_SetConfig+0x128>
 80065f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065f8:	d008      	beq.n	800660c <UART_SetConfig+0x138>
 80065fa:	e00f      	b.n	800661c <UART_SetConfig+0x148>
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006602:	e012      	b.n	800662a <UART_SetConfig+0x156>
 8006604:	2302      	movs	r3, #2
 8006606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800660a:	e00e      	b.n	800662a <UART_SetConfig+0x156>
 800660c:	2304      	movs	r3, #4
 800660e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006612:	e00a      	b.n	800662a <UART_SetConfig+0x156>
 8006614:	2308      	movs	r3, #8
 8006616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800661a:	e006      	b.n	800662a <UART_SetConfig+0x156>
 800661c:	2310      	movs	r3, #16
 800661e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006622:	e002      	b.n	800662a <UART_SetConfig+0x156>
 8006624:	2310      	movs	r3, #16
 8006626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a65      	ldr	r2, [pc, #404]	@ (80067c4 <UART_SetConfig+0x2f0>)
 8006630:	4293      	cmp	r3, r2
 8006632:	f040 8097 	bne.w	8006764 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006636:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800663a:	2b08      	cmp	r3, #8
 800663c:	d823      	bhi.n	8006686 <UART_SetConfig+0x1b2>
 800663e:	a201      	add	r2, pc, #4	@ (adr r2, 8006644 <UART_SetConfig+0x170>)
 8006640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006644:	08006669 	.word	0x08006669
 8006648:	08006687 	.word	0x08006687
 800664c:	08006671 	.word	0x08006671
 8006650:	08006687 	.word	0x08006687
 8006654:	08006677 	.word	0x08006677
 8006658:	08006687 	.word	0x08006687
 800665c:	08006687 	.word	0x08006687
 8006660:	08006687 	.word	0x08006687
 8006664:	0800667f 	.word	0x0800667f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006668:	f7ff f932 	bl	80058d0 <HAL_RCC_GetPCLK1Freq>
 800666c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800666e:	e010      	b.n	8006692 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006670:	4b56      	ldr	r3, [pc, #344]	@ (80067cc <UART_SetConfig+0x2f8>)
 8006672:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006674:	e00d      	b.n	8006692 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006676:	f7ff f8ab 	bl	80057d0 <HAL_RCC_GetSysClockFreq>
 800667a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800667c:	e009      	b.n	8006692 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800667e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006684:	e005      	b.n	8006692 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006690:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 812b 	beq.w	80068f0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669e:	4a4c      	ldr	r2, [pc, #304]	@ (80067d0 <UART_SetConfig+0x2fc>)
 80066a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066a4:	461a      	mov	r2, r3
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80066ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	4413      	add	r3, r2
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d305      	bcc.n	80066ca <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d903      	bls.n	80066d2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80066d0:	e10e      	b.n	80068f0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d4:	2200      	movs	r2, #0
 80066d6:	60bb      	str	r3, [r7, #8]
 80066d8:	60fa      	str	r2, [r7, #12]
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066de:	4a3c      	ldr	r2, [pc, #240]	@ (80067d0 <UART_SetConfig+0x2fc>)
 80066e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	2200      	movs	r2, #0
 80066e8:	603b      	str	r3, [r7, #0]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80066f4:	f7fa fa30 	bl	8000b58 <__aeabi_uldivmod>
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	4610      	mov	r0, r2
 80066fe:	4619      	mov	r1, r3
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	020b      	lsls	r3, r1, #8
 800670a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800670e:	0202      	lsls	r2, r0, #8
 8006710:	6979      	ldr	r1, [r7, #20]
 8006712:	6849      	ldr	r1, [r1, #4]
 8006714:	0849      	lsrs	r1, r1, #1
 8006716:	2000      	movs	r0, #0
 8006718:	460c      	mov	r4, r1
 800671a:	4605      	mov	r5, r0
 800671c:	eb12 0804 	adds.w	r8, r2, r4
 8006720:	eb43 0905 	adc.w	r9, r3, r5
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	469a      	mov	sl, r3
 800672c:	4693      	mov	fp, r2
 800672e:	4652      	mov	r2, sl
 8006730:	465b      	mov	r3, fp
 8006732:	4640      	mov	r0, r8
 8006734:	4649      	mov	r1, r9
 8006736:	f7fa fa0f 	bl	8000b58 <__aeabi_uldivmod>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4613      	mov	r3, r2
 8006740:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006748:	d308      	bcc.n	800675c <UART_SetConfig+0x288>
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006750:	d204      	bcs.n	800675c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6a3a      	ldr	r2, [r7, #32]
 8006758:	60da      	str	r2, [r3, #12]
 800675a:	e0c9      	b.n	80068f0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006762:	e0c5      	b.n	80068f0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800676c:	d16d      	bne.n	800684a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800676e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006772:	3b01      	subs	r3, #1
 8006774:	2b07      	cmp	r3, #7
 8006776:	d82d      	bhi.n	80067d4 <UART_SetConfig+0x300>
 8006778:	a201      	add	r2, pc, #4	@ (adr r2, 8006780 <UART_SetConfig+0x2ac>)
 800677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677e:	bf00      	nop
 8006780:	080067a1 	.word	0x080067a1
 8006784:	080067a9 	.word	0x080067a9
 8006788:	080067d5 	.word	0x080067d5
 800678c:	080067af 	.word	0x080067af
 8006790:	080067d5 	.word	0x080067d5
 8006794:	080067d5 	.word	0x080067d5
 8006798:	080067d5 	.word	0x080067d5
 800679c:	080067b7 	.word	0x080067b7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067a0:	f7ff f8ac 	bl	80058fc <HAL_RCC_GetPCLK2Freq>
 80067a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067a6:	e01b      	b.n	80067e0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067a8:	4b08      	ldr	r3, [pc, #32]	@ (80067cc <UART_SetConfig+0x2f8>)
 80067aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067ac:	e018      	b.n	80067e0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ae:	f7ff f80f 	bl	80057d0 <HAL_RCC_GetSysClockFreq>
 80067b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067b4:	e014      	b.n	80067e0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067bc:	e010      	b.n	80067e0 <UART_SetConfig+0x30c>
 80067be:	bf00      	nop
 80067c0:	cfff69f3 	.word	0xcfff69f3
 80067c4:	40008000 	.word	0x40008000
 80067c8:	40013800 	.word	0x40013800
 80067cc:	00f42400 	.word	0x00f42400
 80067d0:	08009b00 	.word	0x08009b00
      default:
        pclk = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80067de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 8084 	beq.w	80068f0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ec:	4a4b      	ldr	r2, [pc, #300]	@ (800691c <UART_SetConfig+0x448>)
 80067ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067f2:	461a      	mov	r2, r3
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80067fa:	005a      	lsls	r2, r3, #1
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	085b      	lsrs	r3, r3, #1
 8006802:	441a      	add	r2, r3
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	fbb2 f3f3 	udiv	r3, r2, r3
 800680c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800680e:	6a3b      	ldr	r3, [r7, #32]
 8006810:	2b0f      	cmp	r3, #15
 8006812:	d916      	bls.n	8006842 <UART_SetConfig+0x36e>
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800681a:	d212      	bcs.n	8006842 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	b29b      	uxth	r3, r3
 8006820:	f023 030f 	bic.w	r3, r3, #15
 8006824:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	085b      	lsrs	r3, r3, #1
 800682a:	b29b      	uxth	r3, r3
 800682c:	f003 0307 	and.w	r3, r3, #7
 8006830:	b29a      	uxth	r2, r3
 8006832:	8bfb      	ldrh	r3, [r7, #30]
 8006834:	4313      	orrs	r3, r2
 8006836:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	8bfa      	ldrh	r2, [r7, #30]
 800683e:	60da      	str	r2, [r3, #12]
 8006840:	e056      	b.n	80068f0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006848:	e052      	b.n	80068f0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800684a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800684e:	3b01      	subs	r3, #1
 8006850:	2b07      	cmp	r3, #7
 8006852:	d822      	bhi.n	800689a <UART_SetConfig+0x3c6>
 8006854:	a201      	add	r2, pc, #4	@ (adr r2, 800685c <UART_SetConfig+0x388>)
 8006856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685a:	bf00      	nop
 800685c:	0800687d 	.word	0x0800687d
 8006860:	08006885 	.word	0x08006885
 8006864:	0800689b 	.word	0x0800689b
 8006868:	0800688b 	.word	0x0800688b
 800686c:	0800689b 	.word	0x0800689b
 8006870:	0800689b 	.word	0x0800689b
 8006874:	0800689b 	.word	0x0800689b
 8006878:	08006893 	.word	0x08006893
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800687c:	f7ff f83e 	bl	80058fc <HAL_RCC_GetPCLK2Freq>
 8006880:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006882:	e010      	b.n	80068a6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006884:	4b26      	ldr	r3, [pc, #152]	@ (8006920 <UART_SetConfig+0x44c>)
 8006886:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006888:	e00d      	b.n	80068a6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800688a:	f7fe ffa1 	bl	80057d0 <HAL_RCC_GetSysClockFreq>
 800688e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006890:	e009      	b.n	80068a6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006896:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006898:	e005      	b.n	80068a6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80068a4:	bf00      	nop
    }

    if (pclk != 0U)
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d021      	beq.n	80068f0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b0:	4a1a      	ldr	r2, [pc, #104]	@ (800691c <UART_SetConfig+0x448>)
 80068b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068b6:	461a      	mov	r2, r3
 80068b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	085b      	lsrs	r3, r3, #1
 80068c4:	441a      	add	r2, r3
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	2b0f      	cmp	r3, #15
 80068d4:	d909      	bls.n	80068ea <UART_SetConfig+0x416>
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068dc:	d205      	bcs.n	80068ea <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60da      	str	r2, [r3, #12]
 80068e8:	e002      	b.n	80068f0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2200      	movs	r2, #0
 8006904:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2200      	movs	r2, #0
 800690a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800690c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006910:	4618      	mov	r0, r3
 8006912:	3730      	adds	r7, #48	@ 0x30
 8006914:	46bd      	mov	sp, r7
 8006916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800691a:	bf00      	nop
 800691c:	08009b00 	.word	0x08009b00
 8006920:	00f42400 	.word	0x00f42400

08006924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00a      	beq.n	8006992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006996:	f003 0304 	and.w	r3, r3, #4
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b8:	f003 0310 	and.w	r3, r3, #16
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00a      	beq.n	80069d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069da:	f003 0320 	and.w	r3, r3, #32
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01a      	beq.n	8006a3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a22:	d10a      	bne.n	8006a3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	605a      	str	r2, [r3, #4]
  }
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b098      	sub	sp, #96	@ 0x60
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a78:	f7fb facc 	bl	8002014 <HAL_GetTick>
 8006a7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0308 	and.w	r3, r3, #8
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d12f      	bne.n	8006aec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a94:	2200      	movs	r2, #0
 8006a96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f88e 	bl	8006bbc <UART_WaitOnFlagUntilTimeout>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d022      	beq.n	8006aec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aba:	653b      	str	r3, [r7, #80]	@ 0x50
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ac6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006aca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e6      	bne.n	8006aa6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e063      	b.n	8006bb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0304 	and.w	r3, r3, #4
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d149      	bne.n	8006b8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006afa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b02:	2200      	movs	r2, #0
 8006b04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f857 	bl	8006bbc <UART_WaitOnFlagUntilTimeout>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d03c      	beq.n	8006b8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	623b      	str	r3, [r7, #32]
   return(result);
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b32:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e6      	bne.n	8006b14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	e853 3f00 	ldrex	r3, [r3]
 8006b54:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f023 0301 	bic.w	r3, r3, #1
 8006b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3308      	adds	r3, #8
 8006b64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b66:	61fa      	str	r2, [r7, #28]
 8006b68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	69b9      	ldr	r1, [r7, #24]
 8006b6c:	69fa      	ldr	r2, [r7, #28]
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	617b      	str	r3, [r7, #20]
   return(result);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e5      	bne.n	8006b46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e012      	b.n	8006bb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2220      	movs	r2, #32
 8006b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3758      	adds	r7, #88	@ 0x58
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bcc:	e04f      	b.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd4:	d04b      	beq.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd6:	f7fb fa1d 	bl	8002014 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d302      	bcc.n	8006bec <UART_WaitOnFlagUntilTimeout+0x30>
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e04e      	b.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d037      	beq.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2b80      	cmp	r3, #128	@ 0x80
 8006c02:	d034      	beq.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2b40      	cmp	r3, #64	@ 0x40
 8006c08:	d031      	beq.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d110      	bne.n	8006c3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2208      	movs	r2, #8
 8006c1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 f838 	bl	8006c96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2208      	movs	r2, #8
 8006c2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e029      	b.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c48:	d111      	bne.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 f81e 	bl	8006c96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e00f      	b.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69da      	ldr	r2, [r3, #28]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	4013      	ands	r3, r2
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	bf0c      	ite	eq
 8006c7e:	2301      	moveq	r3, #1
 8006c80:	2300      	movne	r3, #0
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d0a0      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b095      	sub	sp, #84	@ 0x54
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca6:	e853 3f00 	ldrex	r3, [r3]
 8006caa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cbe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cc4:	e841 2300 	strex	r3, r2, [r1]
 8006cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e6      	bne.n	8006c9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	e853 3f00 	ldrex	r3, [r3]
 8006cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ce6:	f023 0301 	bic.w	r3, r3, #1
 8006cea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	3308      	adds	r3, #8
 8006cf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cfc:	e841 2300 	strex	r3, r2, [r1]
 8006d00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e3      	bne.n	8006cd0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d118      	bne.n	8006d42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	e853 3f00 	ldrex	r3, [r3]
 8006d1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f023 0310 	bic.w	r3, r3, #16
 8006d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d2e:	61bb      	str	r3, [r7, #24]
 8006d30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d32:	6979      	ldr	r1, [r7, #20]
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	e841 2300 	strex	r3, r2, [r1]
 8006d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1e6      	bne.n	8006d10 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006d56:	bf00      	nop
 8006d58:	3754      	adds	r7, #84	@ 0x54
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b085      	sub	sp, #20
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d101      	bne.n	8006d78 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d74:	2302      	movs	r3, #2
 8006d76:	e027      	b.n	8006dc8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2224      	movs	r2, #36	@ 0x24
 8006d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0201 	bic.w	r2, r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006da6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2220      	movs	r2, #32
 8006dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006de8:	2302      	movs	r3, #2
 8006dea:	e02d      	b.n	8006e48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2224      	movs	r2, #36	@ 0x24
 8006df8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0201 	bic.w	r2, r2, #1
 8006e12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	430a      	orrs	r2, r1
 8006e26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f84f 	bl	8006ecc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e02d      	b.n	8006ec4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2224      	movs	r2, #36	@ 0x24
 8006e74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0201 	bic.w	r2, r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f811 	bl	8006ecc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d108      	bne.n	8006eee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006eec:	e031      	b.n	8006f52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006eee:	2308      	movs	r3, #8
 8006ef0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ef2:	2308      	movs	r3, #8
 8006ef4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	0e5b      	lsrs	r3, r3, #25
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	f003 0307 	and.w	r3, r3, #7
 8006f04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	0f5b      	lsrs	r3, r3, #29
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	f003 0307 	and.w	r3, r3, #7
 8006f14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f16:	7bbb      	ldrb	r3, [r7, #14]
 8006f18:	7b3a      	ldrb	r2, [r7, #12]
 8006f1a:	4911      	ldr	r1, [pc, #68]	@ (8006f60 <UARTEx_SetNbDataToProcess+0x94>)
 8006f1c:	5c8a      	ldrb	r2, [r1, r2]
 8006f1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f22:	7b3a      	ldrb	r2, [r7, #12]
 8006f24:	490f      	ldr	r1, [pc, #60]	@ (8006f64 <UARTEx_SetNbDataToProcess+0x98>)
 8006f26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f28:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
 8006f36:	7b7a      	ldrb	r2, [r7, #13]
 8006f38:	4909      	ldr	r1, [pc, #36]	@ (8006f60 <UARTEx_SetNbDataToProcess+0x94>)
 8006f3a:	5c8a      	ldrb	r2, [r1, r2]
 8006f3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f40:	7b7a      	ldrb	r2, [r7, #13]
 8006f42:	4908      	ldr	r1, [pc, #32]	@ (8006f64 <UARTEx_SetNbDataToProcess+0x98>)
 8006f44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f46:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006f52:	bf00      	nop
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	08009b18 	.word	0x08009b18
 8006f64:	08009b20 	.word	0x08009b20

08006f68 <__cvt>:
 8006f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f6c:	ec57 6b10 	vmov	r6, r7, d0
 8006f70:	2f00      	cmp	r7, #0
 8006f72:	460c      	mov	r4, r1
 8006f74:	4619      	mov	r1, r3
 8006f76:	463b      	mov	r3, r7
 8006f78:	bfbb      	ittet	lt
 8006f7a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006f7e:	461f      	movlt	r7, r3
 8006f80:	2300      	movge	r3, #0
 8006f82:	232d      	movlt	r3, #45	@ 0x2d
 8006f84:	700b      	strb	r3, [r1, #0]
 8006f86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f88:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006f8c:	4691      	mov	r9, r2
 8006f8e:	f023 0820 	bic.w	r8, r3, #32
 8006f92:	bfbc      	itt	lt
 8006f94:	4632      	movlt	r2, r6
 8006f96:	4616      	movlt	r6, r2
 8006f98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f9c:	d005      	beq.n	8006faa <__cvt+0x42>
 8006f9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006fa2:	d100      	bne.n	8006fa6 <__cvt+0x3e>
 8006fa4:	3401      	adds	r4, #1
 8006fa6:	2102      	movs	r1, #2
 8006fa8:	e000      	b.n	8006fac <__cvt+0x44>
 8006faa:	2103      	movs	r1, #3
 8006fac:	ab03      	add	r3, sp, #12
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	ab02      	add	r3, sp, #8
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	ec47 6b10 	vmov	d0, r6, r7
 8006fb8:	4653      	mov	r3, sl
 8006fba:	4622      	mov	r2, r4
 8006fbc:	f000 ff3c 	bl	8007e38 <_dtoa_r>
 8006fc0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	d119      	bne.n	8006ffc <__cvt+0x94>
 8006fc8:	f019 0f01 	tst.w	r9, #1
 8006fcc:	d00e      	beq.n	8006fec <__cvt+0x84>
 8006fce:	eb00 0904 	add.w	r9, r0, r4
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	4639      	mov	r1, r7
 8006fda:	f7f9 fd4d 	bl	8000a78 <__aeabi_dcmpeq>
 8006fde:	b108      	cbz	r0, 8006fe4 <__cvt+0x7c>
 8006fe0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fe4:	2230      	movs	r2, #48	@ 0x30
 8006fe6:	9b03      	ldr	r3, [sp, #12]
 8006fe8:	454b      	cmp	r3, r9
 8006fea:	d31e      	bcc.n	800702a <__cvt+0xc2>
 8006fec:	9b03      	ldr	r3, [sp, #12]
 8006fee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ff0:	1b5b      	subs	r3, r3, r5
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	b004      	add	sp, #16
 8006ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ffc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007000:	eb00 0904 	add.w	r9, r0, r4
 8007004:	d1e5      	bne.n	8006fd2 <__cvt+0x6a>
 8007006:	7803      	ldrb	r3, [r0, #0]
 8007008:	2b30      	cmp	r3, #48	@ 0x30
 800700a:	d10a      	bne.n	8007022 <__cvt+0xba>
 800700c:	2200      	movs	r2, #0
 800700e:	2300      	movs	r3, #0
 8007010:	4630      	mov	r0, r6
 8007012:	4639      	mov	r1, r7
 8007014:	f7f9 fd30 	bl	8000a78 <__aeabi_dcmpeq>
 8007018:	b918      	cbnz	r0, 8007022 <__cvt+0xba>
 800701a:	f1c4 0401 	rsb	r4, r4, #1
 800701e:	f8ca 4000 	str.w	r4, [sl]
 8007022:	f8da 3000 	ldr.w	r3, [sl]
 8007026:	4499      	add	r9, r3
 8007028:	e7d3      	b.n	8006fd2 <__cvt+0x6a>
 800702a:	1c59      	adds	r1, r3, #1
 800702c:	9103      	str	r1, [sp, #12]
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	e7d9      	b.n	8006fe6 <__cvt+0x7e>

08007032 <__exponent>:
 8007032:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007034:	2900      	cmp	r1, #0
 8007036:	bfba      	itte	lt
 8007038:	4249      	neglt	r1, r1
 800703a:	232d      	movlt	r3, #45	@ 0x2d
 800703c:	232b      	movge	r3, #43	@ 0x2b
 800703e:	2909      	cmp	r1, #9
 8007040:	7002      	strb	r2, [r0, #0]
 8007042:	7043      	strb	r3, [r0, #1]
 8007044:	dd29      	ble.n	800709a <__exponent+0x68>
 8007046:	f10d 0307 	add.w	r3, sp, #7
 800704a:	461d      	mov	r5, r3
 800704c:	270a      	movs	r7, #10
 800704e:	461a      	mov	r2, r3
 8007050:	fbb1 f6f7 	udiv	r6, r1, r7
 8007054:	fb07 1416 	mls	r4, r7, r6, r1
 8007058:	3430      	adds	r4, #48	@ 0x30
 800705a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800705e:	460c      	mov	r4, r1
 8007060:	2c63      	cmp	r4, #99	@ 0x63
 8007062:	f103 33ff 	add.w	r3, r3, #4294967295
 8007066:	4631      	mov	r1, r6
 8007068:	dcf1      	bgt.n	800704e <__exponent+0x1c>
 800706a:	3130      	adds	r1, #48	@ 0x30
 800706c:	1e94      	subs	r4, r2, #2
 800706e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007072:	1c41      	adds	r1, r0, #1
 8007074:	4623      	mov	r3, r4
 8007076:	42ab      	cmp	r3, r5
 8007078:	d30a      	bcc.n	8007090 <__exponent+0x5e>
 800707a:	f10d 0309 	add.w	r3, sp, #9
 800707e:	1a9b      	subs	r3, r3, r2
 8007080:	42ac      	cmp	r4, r5
 8007082:	bf88      	it	hi
 8007084:	2300      	movhi	r3, #0
 8007086:	3302      	adds	r3, #2
 8007088:	4403      	add	r3, r0
 800708a:	1a18      	subs	r0, r3, r0
 800708c:	b003      	add	sp, #12
 800708e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007090:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007094:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007098:	e7ed      	b.n	8007076 <__exponent+0x44>
 800709a:	2330      	movs	r3, #48	@ 0x30
 800709c:	3130      	adds	r1, #48	@ 0x30
 800709e:	7083      	strb	r3, [r0, #2]
 80070a0:	70c1      	strb	r1, [r0, #3]
 80070a2:	1d03      	adds	r3, r0, #4
 80070a4:	e7f1      	b.n	800708a <__exponent+0x58>
	...

080070a8 <_printf_float>:
 80070a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ac:	b08d      	sub	sp, #52	@ 0x34
 80070ae:	460c      	mov	r4, r1
 80070b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80070b4:	4616      	mov	r6, r2
 80070b6:	461f      	mov	r7, r3
 80070b8:	4605      	mov	r5, r0
 80070ba:	f000 fdbd 	bl	8007c38 <_localeconv_r>
 80070be:	6803      	ldr	r3, [r0, #0]
 80070c0:	9304      	str	r3, [sp, #16]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7f9 f8ac 	bl	8000220 <strlen>
 80070c8:	2300      	movs	r3, #0
 80070ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80070cc:	f8d8 3000 	ldr.w	r3, [r8]
 80070d0:	9005      	str	r0, [sp, #20]
 80070d2:	3307      	adds	r3, #7
 80070d4:	f023 0307 	bic.w	r3, r3, #7
 80070d8:	f103 0208 	add.w	r2, r3, #8
 80070dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80070e0:	f8d4 b000 	ldr.w	fp, [r4]
 80070e4:	f8c8 2000 	str.w	r2, [r8]
 80070e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80070f0:	9307      	str	r3, [sp, #28]
 80070f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80070f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80070fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070fe:	4b9c      	ldr	r3, [pc, #624]	@ (8007370 <_printf_float+0x2c8>)
 8007100:	f04f 32ff 	mov.w	r2, #4294967295
 8007104:	f7f9 fcea 	bl	8000adc <__aeabi_dcmpun>
 8007108:	bb70      	cbnz	r0, 8007168 <_printf_float+0xc0>
 800710a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800710e:	4b98      	ldr	r3, [pc, #608]	@ (8007370 <_printf_float+0x2c8>)
 8007110:	f04f 32ff 	mov.w	r2, #4294967295
 8007114:	f7f9 fcc4 	bl	8000aa0 <__aeabi_dcmple>
 8007118:	bb30      	cbnz	r0, 8007168 <_printf_float+0xc0>
 800711a:	2200      	movs	r2, #0
 800711c:	2300      	movs	r3, #0
 800711e:	4640      	mov	r0, r8
 8007120:	4649      	mov	r1, r9
 8007122:	f7f9 fcb3 	bl	8000a8c <__aeabi_dcmplt>
 8007126:	b110      	cbz	r0, 800712e <_printf_float+0x86>
 8007128:	232d      	movs	r3, #45	@ 0x2d
 800712a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800712e:	4a91      	ldr	r2, [pc, #580]	@ (8007374 <_printf_float+0x2cc>)
 8007130:	4b91      	ldr	r3, [pc, #580]	@ (8007378 <_printf_float+0x2d0>)
 8007132:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007136:	bf8c      	ite	hi
 8007138:	4690      	movhi	r8, r2
 800713a:	4698      	movls	r8, r3
 800713c:	2303      	movs	r3, #3
 800713e:	6123      	str	r3, [r4, #16]
 8007140:	f02b 0304 	bic.w	r3, fp, #4
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	f04f 0900 	mov.w	r9, #0
 800714a:	9700      	str	r7, [sp, #0]
 800714c:	4633      	mov	r3, r6
 800714e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007150:	4621      	mov	r1, r4
 8007152:	4628      	mov	r0, r5
 8007154:	f000 f9d2 	bl	80074fc <_printf_common>
 8007158:	3001      	adds	r0, #1
 800715a:	f040 808d 	bne.w	8007278 <_printf_float+0x1d0>
 800715e:	f04f 30ff 	mov.w	r0, #4294967295
 8007162:	b00d      	add	sp, #52	@ 0x34
 8007164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007168:	4642      	mov	r2, r8
 800716a:	464b      	mov	r3, r9
 800716c:	4640      	mov	r0, r8
 800716e:	4649      	mov	r1, r9
 8007170:	f7f9 fcb4 	bl	8000adc <__aeabi_dcmpun>
 8007174:	b140      	cbz	r0, 8007188 <_printf_float+0xe0>
 8007176:	464b      	mov	r3, r9
 8007178:	2b00      	cmp	r3, #0
 800717a:	bfbc      	itt	lt
 800717c:	232d      	movlt	r3, #45	@ 0x2d
 800717e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007182:	4a7e      	ldr	r2, [pc, #504]	@ (800737c <_printf_float+0x2d4>)
 8007184:	4b7e      	ldr	r3, [pc, #504]	@ (8007380 <_printf_float+0x2d8>)
 8007186:	e7d4      	b.n	8007132 <_printf_float+0x8a>
 8007188:	6863      	ldr	r3, [r4, #4]
 800718a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800718e:	9206      	str	r2, [sp, #24]
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	d13b      	bne.n	800720c <_printf_float+0x164>
 8007194:	2306      	movs	r3, #6
 8007196:	6063      	str	r3, [r4, #4]
 8007198:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800719c:	2300      	movs	r3, #0
 800719e:	6022      	str	r2, [r4, #0]
 80071a0:	9303      	str	r3, [sp, #12]
 80071a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80071a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80071a8:	ab09      	add	r3, sp, #36	@ 0x24
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	6861      	ldr	r1, [r4, #4]
 80071ae:	ec49 8b10 	vmov	d0, r8, r9
 80071b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80071b6:	4628      	mov	r0, r5
 80071b8:	f7ff fed6 	bl	8006f68 <__cvt>
 80071bc:	9b06      	ldr	r3, [sp, #24]
 80071be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071c0:	2b47      	cmp	r3, #71	@ 0x47
 80071c2:	4680      	mov	r8, r0
 80071c4:	d129      	bne.n	800721a <_printf_float+0x172>
 80071c6:	1cc8      	adds	r0, r1, #3
 80071c8:	db02      	blt.n	80071d0 <_printf_float+0x128>
 80071ca:	6863      	ldr	r3, [r4, #4]
 80071cc:	4299      	cmp	r1, r3
 80071ce:	dd41      	ble.n	8007254 <_printf_float+0x1ac>
 80071d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80071d4:	fa5f fa8a 	uxtb.w	sl, sl
 80071d8:	3901      	subs	r1, #1
 80071da:	4652      	mov	r2, sl
 80071dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80071e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80071e2:	f7ff ff26 	bl	8007032 <__exponent>
 80071e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071e8:	1813      	adds	r3, r2, r0
 80071ea:	2a01      	cmp	r2, #1
 80071ec:	4681      	mov	r9, r0
 80071ee:	6123      	str	r3, [r4, #16]
 80071f0:	dc02      	bgt.n	80071f8 <_printf_float+0x150>
 80071f2:	6822      	ldr	r2, [r4, #0]
 80071f4:	07d2      	lsls	r2, r2, #31
 80071f6:	d501      	bpl.n	80071fc <_printf_float+0x154>
 80071f8:	3301      	adds	r3, #1
 80071fa:	6123      	str	r3, [r4, #16]
 80071fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0a2      	beq.n	800714a <_printf_float+0xa2>
 8007204:	232d      	movs	r3, #45	@ 0x2d
 8007206:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800720a:	e79e      	b.n	800714a <_printf_float+0xa2>
 800720c:	9a06      	ldr	r2, [sp, #24]
 800720e:	2a47      	cmp	r2, #71	@ 0x47
 8007210:	d1c2      	bne.n	8007198 <_printf_float+0xf0>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1c0      	bne.n	8007198 <_printf_float+0xf0>
 8007216:	2301      	movs	r3, #1
 8007218:	e7bd      	b.n	8007196 <_printf_float+0xee>
 800721a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800721e:	d9db      	bls.n	80071d8 <_printf_float+0x130>
 8007220:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007224:	d118      	bne.n	8007258 <_printf_float+0x1b0>
 8007226:	2900      	cmp	r1, #0
 8007228:	6863      	ldr	r3, [r4, #4]
 800722a:	dd0b      	ble.n	8007244 <_printf_float+0x19c>
 800722c:	6121      	str	r1, [r4, #16]
 800722e:	b913      	cbnz	r3, 8007236 <_printf_float+0x18e>
 8007230:	6822      	ldr	r2, [r4, #0]
 8007232:	07d0      	lsls	r0, r2, #31
 8007234:	d502      	bpl.n	800723c <_printf_float+0x194>
 8007236:	3301      	adds	r3, #1
 8007238:	440b      	add	r3, r1
 800723a:	6123      	str	r3, [r4, #16]
 800723c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800723e:	f04f 0900 	mov.w	r9, #0
 8007242:	e7db      	b.n	80071fc <_printf_float+0x154>
 8007244:	b913      	cbnz	r3, 800724c <_printf_float+0x1a4>
 8007246:	6822      	ldr	r2, [r4, #0]
 8007248:	07d2      	lsls	r2, r2, #31
 800724a:	d501      	bpl.n	8007250 <_printf_float+0x1a8>
 800724c:	3302      	adds	r3, #2
 800724e:	e7f4      	b.n	800723a <_printf_float+0x192>
 8007250:	2301      	movs	r3, #1
 8007252:	e7f2      	b.n	800723a <_printf_float+0x192>
 8007254:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800725a:	4299      	cmp	r1, r3
 800725c:	db05      	blt.n	800726a <_printf_float+0x1c2>
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	6121      	str	r1, [r4, #16]
 8007262:	07d8      	lsls	r0, r3, #31
 8007264:	d5ea      	bpl.n	800723c <_printf_float+0x194>
 8007266:	1c4b      	adds	r3, r1, #1
 8007268:	e7e7      	b.n	800723a <_printf_float+0x192>
 800726a:	2900      	cmp	r1, #0
 800726c:	bfd4      	ite	le
 800726e:	f1c1 0202 	rsble	r2, r1, #2
 8007272:	2201      	movgt	r2, #1
 8007274:	4413      	add	r3, r2
 8007276:	e7e0      	b.n	800723a <_printf_float+0x192>
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	055a      	lsls	r2, r3, #21
 800727c:	d407      	bmi.n	800728e <_printf_float+0x1e6>
 800727e:	6923      	ldr	r3, [r4, #16]
 8007280:	4642      	mov	r2, r8
 8007282:	4631      	mov	r1, r6
 8007284:	4628      	mov	r0, r5
 8007286:	47b8      	blx	r7
 8007288:	3001      	adds	r0, #1
 800728a:	d12b      	bne.n	80072e4 <_printf_float+0x23c>
 800728c:	e767      	b.n	800715e <_printf_float+0xb6>
 800728e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007292:	f240 80dd 	bls.w	8007450 <_printf_float+0x3a8>
 8007296:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800729a:	2200      	movs	r2, #0
 800729c:	2300      	movs	r3, #0
 800729e:	f7f9 fbeb 	bl	8000a78 <__aeabi_dcmpeq>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d033      	beq.n	800730e <_printf_float+0x266>
 80072a6:	4a37      	ldr	r2, [pc, #220]	@ (8007384 <_printf_float+0x2dc>)
 80072a8:	2301      	movs	r3, #1
 80072aa:	4631      	mov	r1, r6
 80072ac:	4628      	mov	r0, r5
 80072ae:	47b8      	blx	r7
 80072b0:	3001      	adds	r0, #1
 80072b2:	f43f af54 	beq.w	800715e <_printf_float+0xb6>
 80072b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80072ba:	4543      	cmp	r3, r8
 80072bc:	db02      	blt.n	80072c4 <_printf_float+0x21c>
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	07d8      	lsls	r0, r3, #31
 80072c2:	d50f      	bpl.n	80072e4 <_printf_float+0x23c>
 80072c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072c8:	4631      	mov	r1, r6
 80072ca:	4628      	mov	r0, r5
 80072cc:	47b8      	blx	r7
 80072ce:	3001      	adds	r0, #1
 80072d0:	f43f af45 	beq.w	800715e <_printf_float+0xb6>
 80072d4:	f04f 0900 	mov.w	r9, #0
 80072d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80072dc:	f104 0a1a 	add.w	sl, r4, #26
 80072e0:	45c8      	cmp	r8, r9
 80072e2:	dc09      	bgt.n	80072f8 <_printf_float+0x250>
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	079b      	lsls	r3, r3, #30
 80072e8:	f100 8103 	bmi.w	80074f2 <_printf_float+0x44a>
 80072ec:	68e0      	ldr	r0, [r4, #12]
 80072ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072f0:	4298      	cmp	r0, r3
 80072f2:	bfb8      	it	lt
 80072f4:	4618      	movlt	r0, r3
 80072f6:	e734      	b.n	8007162 <_printf_float+0xba>
 80072f8:	2301      	movs	r3, #1
 80072fa:	4652      	mov	r2, sl
 80072fc:	4631      	mov	r1, r6
 80072fe:	4628      	mov	r0, r5
 8007300:	47b8      	blx	r7
 8007302:	3001      	adds	r0, #1
 8007304:	f43f af2b 	beq.w	800715e <_printf_float+0xb6>
 8007308:	f109 0901 	add.w	r9, r9, #1
 800730c:	e7e8      	b.n	80072e0 <_printf_float+0x238>
 800730e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007310:	2b00      	cmp	r3, #0
 8007312:	dc39      	bgt.n	8007388 <_printf_float+0x2e0>
 8007314:	4a1b      	ldr	r2, [pc, #108]	@ (8007384 <_printf_float+0x2dc>)
 8007316:	2301      	movs	r3, #1
 8007318:	4631      	mov	r1, r6
 800731a:	4628      	mov	r0, r5
 800731c:	47b8      	blx	r7
 800731e:	3001      	adds	r0, #1
 8007320:	f43f af1d 	beq.w	800715e <_printf_float+0xb6>
 8007324:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007328:	ea59 0303 	orrs.w	r3, r9, r3
 800732c:	d102      	bne.n	8007334 <_printf_float+0x28c>
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	07d9      	lsls	r1, r3, #31
 8007332:	d5d7      	bpl.n	80072e4 <_printf_float+0x23c>
 8007334:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007338:	4631      	mov	r1, r6
 800733a:	4628      	mov	r0, r5
 800733c:	47b8      	blx	r7
 800733e:	3001      	adds	r0, #1
 8007340:	f43f af0d 	beq.w	800715e <_printf_float+0xb6>
 8007344:	f04f 0a00 	mov.w	sl, #0
 8007348:	f104 0b1a 	add.w	fp, r4, #26
 800734c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800734e:	425b      	negs	r3, r3
 8007350:	4553      	cmp	r3, sl
 8007352:	dc01      	bgt.n	8007358 <_printf_float+0x2b0>
 8007354:	464b      	mov	r3, r9
 8007356:	e793      	b.n	8007280 <_printf_float+0x1d8>
 8007358:	2301      	movs	r3, #1
 800735a:	465a      	mov	r2, fp
 800735c:	4631      	mov	r1, r6
 800735e:	4628      	mov	r0, r5
 8007360:	47b8      	blx	r7
 8007362:	3001      	adds	r0, #1
 8007364:	f43f aefb 	beq.w	800715e <_printf_float+0xb6>
 8007368:	f10a 0a01 	add.w	sl, sl, #1
 800736c:	e7ee      	b.n	800734c <_printf_float+0x2a4>
 800736e:	bf00      	nop
 8007370:	7fefffff 	.word	0x7fefffff
 8007374:	08009b2c 	.word	0x08009b2c
 8007378:	08009b28 	.word	0x08009b28
 800737c:	08009b34 	.word	0x08009b34
 8007380:	08009b30 	.word	0x08009b30
 8007384:	08009b38 	.word	0x08009b38
 8007388:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800738a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800738e:	4553      	cmp	r3, sl
 8007390:	bfa8      	it	ge
 8007392:	4653      	movge	r3, sl
 8007394:	2b00      	cmp	r3, #0
 8007396:	4699      	mov	r9, r3
 8007398:	dc36      	bgt.n	8007408 <_printf_float+0x360>
 800739a:	f04f 0b00 	mov.w	fp, #0
 800739e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073a2:	f104 021a 	add.w	r2, r4, #26
 80073a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80073a8:	9306      	str	r3, [sp, #24]
 80073aa:	eba3 0309 	sub.w	r3, r3, r9
 80073ae:	455b      	cmp	r3, fp
 80073b0:	dc31      	bgt.n	8007416 <_printf_float+0x36e>
 80073b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073b4:	459a      	cmp	sl, r3
 80073b6:	dc3a      	bgt.n	800742e <_printf_float+0x386>
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	07da      	lsls	r2, r3, #31
 80073bc:	d437      	bmi.n	800742e <_printf_float+0x386>
 80073be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073c0:	ebaa 0903 	sub.w	r9, sl, r3
 80073c4:	9b06      	ldr	r3, [sp, #24]
 80073c6:	ebaa 0303 	sub.w	r3, sl, r3
 80073ca:	4599      	cmp	r9, r3
 80073cc:	bfa8      	it	ge
 80073ce:	4699      	movge	r9, r3
 80073d0:	f1b9 0f00 	cmp.w	r9, #0
 80073d4:	dc33      	bgt.n	800743e <_printf_float+0x396>
 80073d6:	f04f 0800 	mov.w	r8, #0
 80073da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073de:	f104 0b1a 	add.w	fp, r4, #26
 80073e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e4:	ebaa 0303 	sub.w	r3, sl, r3
 80073e8:	eba3 0309 	sub.w	r3, r3, r9
 80073ec:	4543      	cmp	r3, r8
 80073ee:	f77f af79 	ble.w	80072e4 <_printf_float+0x23c>
 80073f2:	2301      	movs	r3, #1
 80073f4:	465a      	mov	r2, fp
 80073f6:	4631      	mov	r1, r6
 80073f8:	4628      	mov	r0, r5
 80073fa:	47b8      	blx	r7
 80073fc:	3001      	adds	r0, #1
 80073fe:	f43f aeae 	beq.w	800715e <_printf_float+0xb6>
 8007402:	f108 0801 	add.w	r8, r8, #1
 8007406:	e7ec      	b.n	80073e2 <_printf_float+0x33a>
 8007408:	4642      	mov	r2, r8
 800740a:	4631      	mov	r1, r6
 800740c:	4628      	mov	r0, r5
 800740e:	47b8      	blx	r7
 8007410:	3001      	adds	r0, #1
 8007412:	d1c2      	bne.n	800739a <_printf_float+0x2f2>
 8007414:	e6a3      	b.n	800715e <_printf_float+0xb6>
 8007416:	2301      	movs	r3, #1
 8007418:	4631      	mov	r1, r6
 800741a:	4628      	mov	r0, r5
 800741c:	9206      	str	r2, [sp, #24]
 800741e:	47b8      	blx	r7
 8007420:	3001      	adds	r0, #1
 8007422:	f43f ae9c 	beq.w	800715e <_printf_float+0xb6>
 8007426:	9a06      	ldr	r2, [sp, #24]
 8007428:	f10b 0b01 	add.w	fp, fp, #1
 800742c:	e7bb      	b.n	80073a6 <_printf_float+0x2fe>
 800742e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007432:	4631      	mov	r1, r6
 8007434:	4628      	mov	r0, r5
 8007436:	47b8      	blx	r7
 8007438:	3001      	adds	r0, #1
 800743a:	d1c0      	bne.n	80073be <_printf_float+0x316>
 800743c:	e68f      	b.n	800715e <_printf_float+0xb6>
 800743e:	9a06      	ldr	r2, [sp, #24]
 8007440:	464b      	mov	r3, r9
 8007442:	4442      	add	r2, r8
 8007444:	4631      	mov	r1, r6
 8007446:	4628      	mov	r0, r5
 8007448:	47b8      	blx	r7
 800744a:	3001      	adds	r0, #1
 800744c:	d1c3      	bne.n	80073d6 <_printf_float+0x32e>
 800744e:	e686      	b.n	800715e <_printf_float+0xb6>
 8007450:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007454:	f1ba 0f01 	cmp.w	sl, #1
 8007458:	dc01      	bgt.n	800745e <_printf_float+0x3b6>
 800745a:	07db      	lsls	r3, r3, #31
 800745c:	d536      	bpl.n	80074cc <_printf_float+0x424>
 800745e:	2301      	movs	r3, #1
 8007460:	4642      	mov	r2, r8
 8007462:	4631      	mov	r1, r6
 8007464:	4628      	mov	r0, r5
 8007466:	47b8      	blx	r7
 8007468:	3001      	adds	r0, #1
 800746a:	f43f ae78 	beq.w	800715e <_printf_float+0xb6>
 800746e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007472:	4631      	mov	r1, r6
 8007474:	4628      	mov	r0, r5
 8007476:	47b8      	blx	r7
 8007478:	3001      	adds	r0, #1
 800747a:	f43f ae70 	beq.w	800715e <_printf_float+0xb6>
 800747e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007482:	2200      	movs	r2, #0
 8007484:	2300      	movs	r3, #0
 8007486:	f10a 3aff 	add.w	sl, sl, #4294967295
 800748a:	f7f9 faf5 	bl	8000a78 <__aeabi_dcmpeq>
 800748e:	b9c0      	cbnz	r0, 80074c2 <_printf_float+0x41a>
 8007490:	4653      	mov	r3, sl
 8007492:	f108 0201 	add.w	r2, r8, #1
 8007496:	4631      	mov	r1, r6
 8007498:	4628      	mov	r0, r5
 800749a:	47b8      	blx	r7
 800749c:	3001      	adds	r0, #1
 800749e:	d10c      	bne.n	80074ba <_printf_float+0x412>
 80074a0:	e65d      	b.n	800715e <_printf_float+0xb6>
 80074a2:	2301      	movs	r3, #1
 80074a4:	465a      	mov	r2, fp
 80074a6:	4631      	mov	r1, r6
 80074a8:	4628      	mov	r0, r5
 80074aa:	47b8      	blx	r7
 80074ac:	3001      	adds	r0, #1
 80074ae:	f43f ae56 	beq.w	800715e <_printf_float+0xb6>
 80074b2:	f108 0801 	add.w	r8, r8, #1
 80074b6:	45d0      	cmp	r8, sl
 80074b8:	dbf3      	blt.n	80074a2 <_printf_float+0x3fa>
 80074ba:	464b      	mov	r3, r9
 80074bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80074c0:	e6df      	b.n	8007282 <_printf_float+0x1da>
 80074c2:	f04f 0800 	mov.w	r8, #0
 80074c6:	f104 0b1a 	add.w	fp, r4, #26
 80074ca:	e7f4      	b.n	80074b6 <_printf_float+0x40e>
 80074cc:	2301      	movs	r3, #1
 80074ce:	4642      	mov	r2, r8
 80074d0:	e7e1      	b.n	8007496 <_printf_float+0x3ee>
 80074d2:	2301      	movs	r3, #1
 80074d4:	464a      	mov	r2, r9
 80074d6:	4631      	mov	r1, r6
 80074d8:	4628      	mov	r0, r5
 80074da:	47b8      	blx	r7
 80074dc:	3001      	adds	r0, #1
 80074de:	f43f ae3e 	beq.w	800715e <_printf_float+0xb6>
 80074e2:	f108 0801 	add.w	r8, r8, #1
 80074e6:	68e3      	ldr	r3, [r4, #12]
 80074e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074ea:	1a5b      	subs	r3, r3, r1
 80074ec:	4543      	cmp	r3, r8
 80074ee:	dcf0      	bgt.n	80074d2 <_printf_float+0x42a>
 80074f0:	e6fc      	b.n	80072ec <_printf_float+0x244>
 80074f2:	f04f 0800 	mov.w	r8, #0
 80074f6:	f104 0919 	add.w	r9, r4, #25
 80074fa:	e7f4      	b.n	80074e6 <_printf_float+0x43e>

080074fc <_printf_common>:
 80074fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007500:	4616      	mov	r6, r2
 8007502:	4698      	mov	r8, r3
 8007504:	688a      	ldr	r2, [r1, #8]
 8007506:	690b      	ldr	r3, [r1, #16]
 8007508:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800750c:	4293      	cmp	r3, r2
 800750e:	bfb8      	it	lt
 8007510:	4613      	movlt	r3, r2
 8007512:	6033      	str	r3, [r6, #0]
 8007514:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007518:	4607      	mov	r7, r0
 800751a:	460c      	mov	r4, r1
 800751c:	b10a      	cbz	r2, 8007522 <_printf_common+0x26>
 800751e:	3301      	adds	r3, #1
 8007520:	6033      	str	r3, [r6, #0]
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	0699      	lsls	r1, r3, #26
 8007526:	bf42      	ittt	mi
 8007528:	6833      	ldrmi	r3, [r6, #0]
 800752a:	3302      	addmi	r3, #2
 800752c:	6033      	strmi	r3, [r6, #0]
 800752e:	6825      	ldr	r5, [r4, #0]
 8007530:	f015 0506 	ands.w	r5, r5, #6
 8007534:	d106      	bne.n	8007544 <_printf_common+0x48>
 8007536:	f104 0a19 	add.w	sl, r4, #25
 800753a:	68e3      	ldr	r3, [r4, #12]
 800753c:	6832      	ldr	r2, [r6, #0]
 800753e:	1a9b      	subs	r3, r3, r2
 8007540:	42ab      	cmp	r3, r5
 8007542:	dc26      	bgt.n	8007592 <_printf_common+0x96>
 8007544:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007548:	6822      	ldr	r2, [r4, #0]
 800754a:	3b00      	subs	r3, #0
 800754c:	bf18      	it	ne
 800754e:	2301      	movne	r3, #1
 8007550:	0692      	lsls	r2, r2, #26
 8007552:	d42b      	bmi.n	80075ac <_printf_common+0xb0>
 8007554:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007558:	4641      	mov	r1, r8
 800755a:	4638      	mov	r0, r7
 800755c:	47c8      	blx	r9
 800755e:	3001      	adds	r0, #1
 8007560:	d01e      	beq.n	80075a0 <_printf_common+0xa4>
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	6922      	ldr	r2, [r4, #16]
 8007566:	f003 0306 	and.w	r3, r3, #6
 800756a:	2b04      	cmp	r3, #4
 800756c:	bf02      	ittt	eq
 800756e:	68e5      	ldreq	r5, [r4, #12]
 8007570:	6833      	ldreq	r3, [r6, #0]
 8007572:	1aed      	subeq	r5, r5, r3
 8007574:	68a3      	ldr	r3, [r4, #8]
 8007576:	bf0c      	ite	eq
 8007578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800757c:	2500      	movne	r5, #0
 800757e:	4293      	cmp	r3, r2
 8007580:	bfc4      	itt	gt
 8007582:	1a9b      	subgt	r3, r3, r2
 8007584:	18ed      	addgt	r5, r5, r3
 8007586:	2600      	movs	r6, #0
 8007588:	341a      	adds	r4, #26
 800758a:	42b5      	cmp	r5, r6
 800758c:	d11a      	bne.n	80075c4 <_printf_common+0xc8>
 800758e:	2000      	movs	r0, #0
 8007590:	e008      	b.n	80075a4 <_printf_common+0xa8>
 8007592:	2301      	movs	r3, #1
 8007594:	4652      	mov	r2, sl
 8007596:	4641      	mov	r1, r8
 8007598:	4638      	mov	r0, r7
 800759a:	47c8      	blx	r9
 800759c:	3001      	adds	r0, #1
 800759e:	d103      	bne.n	80075a8 <_printf_common+0xac>
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295
 80075a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a8:	3501      	adds	r5, #1
 80075aa:	e7c6      	b.n	800753a <_printf_common+0x3e>
 80075ac:	18e1      	adds	r1, r4, r3
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	2030      	movs	r0, #48	@ 0x30
 80075b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075b6:	4422      	add	r2, r4
 80075b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075c0:	3302      	adds	r3, #2
 80075c2:	e7c7      	b.n	8007554 <_printf_common+0x58>
 80075c4:	2301      	movs	r3, #1
 80075c6:	4622      	mov	r2, r4
 80075c8:	4641      	mov	r1, r8
 80075ca:	4638      	mov	r0, r7
 80075cc:	47c8      	blx	r9
 80075ce:	3001      	adds	r0, #1
 80075d0:	d0e6      	beq.n	80075a0 <_printf_common+0xa4>
 80075d2:	3601      	adds	r6, #1
 80075d4:	e7d9      	b.n	800758a <_printf_common+0x8e>
	...

080075d8 <_printf_i>:
 80075d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075dc:	7e0f      	ldrb	r7, [r1, #24]
 80075de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075e0:	2f78      	cmp	r7, #120	@ 0x78
 80075e2:	4691      	mov	r9, r2
 80075e4:	4680      	mov	r8, r0
 80075e6:	460c      	mov	r4, r1
 80075e8:	469a      	mov	sl, r3
 80075ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075ee:	d807      	bhi.n	8007600 <_printf_i+0x28>
 80075f0:	2f62      	cmp	r7, #98	@ 0x62
 80075f2:	d80a      	bhi.n	800760a <_printf_i+0x32>
 80075f4:	2f00      	cmp	r7, #0
 80075f6:	f000 80d1 	beq.w	800779c <_printf_i+0x1c4>
 80075fa:	2f58      	cmp	r7, #88	@ 0x58
 80075fc:	f000 80b8 	beq.w	8007770 <_printf_i+0x198>
 8007600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007604:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007608:	e03a      	b.n	8007680 <_printf_i+0xa8>
 800760a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800760e:	2b15      	cmp	r3, #21
 8007610:	d8f6      	bhi.n	8007600 <_printf_i+0x28>
 8007612:	a101      	add	r1, pc, #4	@ (adr r1, 8007618 <_printf_i+0x40>)
 8007614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007618:	08007671 	.word	0x08007671
 800761c:	08007685 	.word	0x08007685
 8007620:	08007601 	.word	0x08007601
 8007624:	08007601 	.word	0x08007601
 8007628:	08007601 	.word	0x08007601
 800762c:	08007601 	.word	0x08007601
 8007630:	08007685 	.word	0x08007685
 8007634:	08007601 	.word	0x08007601
 8007638:	08007601 	.word	0x08007601
 800763c:	08007601 	.word	0x08007601
 8007640:	08007601 	.word	0x08007601
 8007644:	08007783 	.word	0x08007783
 8007648:	080076af 	.word	0x080076af
 800764c:	0800773d 	.word	0x0800773d
 8007650:	08007601 	.word	0x08007601
 8007654:	08007601 	.word	0x08007601
 8007658:	080077a5 	.word	0x080077a5
 800765c:	08007601 	.word	0x08007601
 8007660:	080076af 	.word	0x080076af
 8007664:	08007601 	.word	0x08007601
 8007668:	08007601 	.word	0x08007601
 800766c:	08007745 	.word	0x08007745
 8007670:	6833      	ldr	r3, [r6, #0]
 8007672:	1d1a      	adds	r2, r3, #4
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6032      	str	r2, [r6, #0]
 8007678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800767c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007680:	2301      	movs	r3, #1
 8007682:	e09c      	b.n	80077be <_printf_i+0x1e6>
 8007684:	6833      	ldr	r3, [r6, #0]
 8007686:	6820      	ldr	r0, [r4, #0]
 8007688:	1d19      	adds	r1, r3, #4
 800768a:	6031      	str	r1, [r6, #0]
 800768c:	0606      	lsls	r6, r0, #24
 800768e:	d501      	bpl.n	8007694 <_printf_i+0xbc>
 8007690:	681d      	ldr	r5, [r3, #0]
 8007692:	e003      	b.n	800769c <_printf_i+0xc4>
 8007694:	0645      	lsls	r5, r0, #25
 8007696:	d5fb      	bpl.n	8007690 <_printf_i+0xb8>
 8007698:	f9b3 5000 	ldrsh.w	r5, [r3]
 800769c:	2d00      	cmp	r5, #0
 800769e:	da03      	bge.n	80076a8 <_printf_i+0xd0>
 80076a0:	232d      	movs	r3, #45	@ 0x2d
 80076a2:	426d      	negs	r5, r5
 80076a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076a8:	4858      	ldr	r0, [pc, #352]	@ (800780c <_printf_i+0x234>)
 80076aa:	230a      	movs	r3, #10
 80076ac:	e011      	b.n	80076d2 <_printf_i+0xfa>
 80076ae:	6821      	ldr	r1, [r4, #0]
 80076b0:	6833      	ldr	r3, [r6, #0]
 80076b2:	0608      	lsls	r0, r1, #24
 80076b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80076b8:	d402      	bmi.n	80076c0 <_printf_i+0xe8>
 80076ba:	0649      	lsls	r1, r1, #25
 80076bc:	bf48      	it	mi
 80076be:	b2ad      	uxthmi	r5, r5
 80076c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80076c2:	4852      	ldr	r0, [pc, #328]	@ (800780c <_printf_i+0x234>)
 80076c4:	6033      	str	r3, [r6, #0]
 80076c6:	bf14      	ite	ne
 80076c8:	230a      	movne	r3, #10
 80076ca:	2308      	moveq	r3, #8
 80076cc:	2100      	movs	r1, #0
 80076ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076d2:	6866      	ldr	r6, [r4, #4]
 80076d4:	60a6      	str	r6, [r4, #8]
 80076d6:	2e00      	cmp	r6, #0
 80076d8:	db05      	blt.n	80076e6 <_printf_i+0x10e>
 80076da:	6821      	ldr	r1, [r4, #0]
 80076dc:	432e      	orrs	r6, r5
 80076de:	f021 0104 	bic.w	r1, r1, #4
 80076e2:	6021      	str	r1, [r4, #0]
 80076e4:	d04b      	beq.n	800777e <_printf_i+0x1a6>
 80076e6:	4616      	mov	r6, r2
 80076e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80076ec:	fb03 5711 	mls	r7, r3, r1, r5
 80076f0:	5dc7      	ldrb	r7, [r0, r7]
 80076f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076f6:	462f      	mov	r7, r5
 80076f8:	42bb      	cmp	r3, r7
 80076fa:	460d      	mov	r5, r1
 80076fc:	d9f4      	bls.n	80076e8 <_printf_i+0x110>
 80076fe:	2b08      	cmp	r3, #8
 8007700:	d10b      	bne.n	800771a <_printf_i+0x142>
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	07df      	lsls	r7, r3, #31
 8007706:	d508      	bpl.n	800771a <_printf_i+0x142>
 8007708:	6923      	ldr	r3, [r4, #16]
 800770a:	6861      	ldr	r1, [r4, #4]
 800770c:	4299      	cmp	r1, r3
 800770e:	bfde      	ittt	le
 8007710:	2330      	movle	r3, #48	@ 0x30
 8007712:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007716:	f106 36ff 	addle.w	r6, r6, #4294967295
 800771a:	1b92      	subs	r2, r2, r6
 800771c:	6122      	str	r2, [r4, #16]
 800771e:	f8cd a000 	str.w	sl, [sp]
 8007722:	464b      	mov	r3, r9
 8007724:	aa03      	add	r2, sp, #12
 8007726:	4621      	mov	r1, r4
 8007728:	4640      	mov	r0, r8
 800772a:	f7ff fee7 	bl	80074fc <_printf_common>
 800772e:	3001      	adds	r0, #1
 8007730:	d14a      	bne.n	80077c8 <_printf_i+0x1f0>
 8007732:	f04f 30ff 	mov.w	r0, #4294967295
 8007736:	b004      	add	sp, #16
 8007738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	f043 0320 	orr.w	r3, r3, #32
 8007742:	6023      	str	r3, [r4, #0]
 8007744:	4832      	ldr	r0, [pc, #200]	@ (8007810 <_printf_i+0x238>)
 8007746:	2778      	movs	r7, #120	@ 0x78
 8007748:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	6831      	ldr	r1, [r6, #0]
 8007750:	061f      	lsls	r7, r3, #24
 8007752:	f851 5b04 	ldr.w	r5, [r1], #4
 8007756:	d402      	bmi.n	800775e <_printf_i+0x186>
 8007758:	065f      	lsls	r7, r3, #25
 800775a:	bf48      	it	mi
 800775c:	b2ad      	uxthmi	r5, r5
 800775e:	6031      	str	r1, [r6, #0]
 8007760:	07d9      	lsls	r1, r3, #31
 8007762:	bf44      	itt	mi
 8007764:	f043 0320 	orrmi.w	r3, r3, #32
 8007768:	6023      	strmi	r3, [r4, #0]
 800776a:	b11d      	cbz	r5, 8007774 <_printf_i+0x19c>
 800776c:	2310      	movs	r3, #16
 800776e:	e7ad      	b.n	80076cc <_printf_i+0xf4>
 8007770:	4826      	ldr	r0, [pc, #152]	@ (800780c <_printf_i+0x234>)
 8007772:	e7e9      	b.n	8007748 <_printf_i+0x170>
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	f023 0320 	bic.w	r3, r3, #32
 800777a:	6023      	str	r3, [r4, #0]
 800777c:	e7f6      	b.n	800776c <_printf_i+0x194>
 800777e:	4616      	mov	r6, r2
 8007780:	e7bd      	b.n	80076fe <_printf_i+0x126>
 8007782:	6833      	ldr	r3, [r6, #0]
 8007784:	6825      	ldr	r5, [r4, #0]
 8007786:	6961      	ldr	r1, [r4, #20]
 8007788:	1d18      	adds	r0, r3, #4
 800778a:	6030      	str	r0, [r6, #0]
 800778c:	062e      	lsls	r6, r5, #24
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	d501      	bpl.n	8007796 <_printf_i+0x1be>
 8007792:	6019      	str	r1, [r3, #0]
 8007794:	e002      	b.n	800779c <_printf_i+0x1c4>
 8007796:	0668      	lsls	r0, r5, #25
 8007798:	d5fb      	bpl.n	8007792 <_printf_i+0x1ba>
 800779a:	8019      	strh	r1, [r3, #0]
 800779c:	2300      	movs	r3, #0
 800779e:	6123      	str	r3, [r4, #16]
 80077a0:	4616      	mov	r6, r2
 80077a2:	e7bc      	b.n	800771e <_printf_i+0x146>
 80077a4:	6833      	ldr	r3, [r6, #0]
 80077a6:	1d1a      	adds	r2, r3, #4
 80077a8:	6032      	str	r2, [r6, #0]
 80077aa:	681e      	ldr	r6, [r3, #0]
 80077ac:	6862      	ldr	r2, [r4, #4]
 80077ae:	2100      	movs	r1, #0
 80077b0:	4630      	mov	r0, r6
 80077b2:	f7f8 fce5 	bl	8000180 <memchr>
 80077b6:	b108      	cbz	r0, 80077bc <_printf_i+0x1e4>
 80077b8:	1b80      	subs	r0, r0, r6
 80077ba:	6060      	str	r0, [r4, #4]
 80077bc:	6863      	ldr	r3, [r4, #4]
 80077be:	6123      	str	r3, [r4, #16]
 80077c0:	2300      	movs	r3, #0
 80077c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077c6:	e7aa      	b.n	800771e <_printf_i+0x146>
 80077c8:	6923      	ldr	r3, [r4, #16]
 80077ca:	4632      	mov	r2, r6
 80077cc:	4649      	mov	r1, r9
 80077ce:	4640      	mov	r0, r8
 80077d0:	47d0      	blx	sl
 80077d2:	3001      	adds	r0, #1
 80077d4:	d0ad      	beq.n	8007732 <_printf_i+0x15a>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	079b      	lsls	r3, r3, #30
 80077da:	d413      	bmi.n	8007804 <_printf_i+0x22c>
 80077dc:	68e0      	ldr	r0, [r4, #12]
 80077de:	9b03      	ldr	r3, [sp, #12]
 80077e0:	4298      	cmp	r0, r3
 80077e2:	bfb8      	it	lt
 80077e4:	4618      	movlt	r0, r3
 80077e6:	e7a6      	b.n	8007736 <_printf_i+0x15e>
 80077e8:	2301      	movs	r3, #1
 80077ea:	4632      	mov	r2, r6
 80077ec:	4649      	mov	r1, r9
 80077ee:	4640      	mov	r0, r8
 80077f0:	47d0      	blx	sl
 80077f2:	3001      	adds	r0, #1
 80077f4:	d09d      	beq.n	8007732 <_printf_i+0x15a>
 80077f6:	3501      	adds	r5, #1
 80077f8:	68e3      	ldr	r3, [r4, #12]
 80077fa:	9903      	ldr	r1, [sp, #12]
 80077fc:	1a5b      	subs	r3, r3, r1
 80077fe:	42ab      	cmp	r3, r5
 8007800:	dcf2      	bgt.n	80077e8 <_printf_i+0x210>
 8007802:	e7eb      	b.n	80077dc <_printf_i+0x204>
 8007804:	2500      	movs	r5, #0
 8007806:	f104 0619 	add.w	r6, r4, #25
 800780a:	e7f5      	b.n	80077f8 <_printf_i+0x220>
 800780c:	08009b3a 	.word	0x08009b3a
 8007810:	08009b4b 	.word	0x08009b4b

08007814 <std>:
 8007814:	2300      	movs	r3, #0
 8007816:	b510      	push	{r4, lr}
 8007818:	4604      	mov	r4, r0
 800781a:	e9c0 3300 	strd	r3, r3, [r0]
 800781e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007822:	6083      	str	r3, [r0, #8]
 8007824:	8181      	strh	r1, [r0, #12]
 8007826:	6643      	str	r3, [r0, #100]	@ 0x64
 8007828:	81c2      	strh	r2, [r0, #14]
 800782a:	6183      	str	r3, [r0, #24]
 800782c:	4619      	mov	r1, r3
 800782e:	2208      	movs	r2, #8
 8007830:	305c      	adds	r0, #92	@ 0x5c
 8007832:	f000 f9f9 	bl	8007c28 <memset>
 8007836:	4b0d      	ldr	r3, [pc, #52]	@ (800786c <std+0x58>)
 8007838:	6263      	str	r3, [r4, #36]	@ 0x24
 800783a:	4b0d      	ldr	r3, [pc, #52]	@ (8007870 <std+0x5c>)
 800783c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800783e:	4b0d      	ldr	r3, [pc, #52]	@ (8007874 <std+0x60>)
 8007840:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007842:	4b0d      	ldr	r3, [pc, #52]	@ (8007878 <std+0x64>)
 8007844:	6323      	str	r3, [r4, #48]	@ 0x30
 8007846:	4b0d      	ldr	r3, [pc, #52]	@ (800787c <std+0x68>)
 8007848:	6224      	str	r4, [r4, #32]
 800784a:	429c      	cmp	r4, r3
 800784c:	d006      	beq.n	800785c <std+0x48>
 800784e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007852:	4294      	cmp	r4, r2
 8007854:	d002      	beq.n	800785c <std+0x48>
 8007856:	33d0      	adds	r3, #208	@ 0xd0
 8007858:	429c      	cmp	r4, r3
 800785a:	d105      	bne.n	8007868 <std+0x54>
 800785c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007864:	f000 ba5c 	b.w	8007d20 <__retarget_lock_init_recursive>
 8007868:	bd10      	pop	{r4, pc}
 800786a:	bf00      	nop
 800786c:	08007a79 	.word	0x08007a79
 8007870:	08007a9b 	.word	0x08007a9b
 8007874:	08007ad3 	.word	0x08007ad3
 8007878:	08007af7 	.word	0x08007af7
 800787c:	20000464 	.word	0x20000464

08007880 <stdio_exit_handler>:
 8007880:	4a02      	ldr	r2, [pc, #8]	@ (800788c <stdio_exit_handler+0xc>)
 8007882:	4903      	ldr	r1, [pc, #12]	@ (8007890 <stdio_exit_handler+0x10>)
 8007884:	4803      	ldr	r0, [pc, #12]	@ (8007894 <stdio_exit_handler+0x14>)
 8007886:	f000 b869 	b.w	800795c <_fwalk_sglue>
 800788a:	bf00      	nop
 800788c:	20000030 	.word	0x20000030
 8007890:	08009659 	.word	0x08009659
 8007894:	20000040 	.word	0x20000040

08007898 <cleanup_stdio>:
 8007898:	6841      	ldr	r1, [r0, #4]
 800789a:	4b0c      	ldr	r3, [pc, #48]	@ (80078cc <cleanup_stdio+0x34>)
 800789c:	4299      	cmp	r1, r3
 800789e:	b510      	push	{r4, lr}
 80078a0:	4604      	mov	r4, r0
 80078a2:	d001      	beq.n	80078a8 <cleanup_stdio+0x10>
 80078a4:	f001 fed8 	bl	8009658 <_fflush_r>
 80078a8:	68a1      	ldr	r1, [r4, #8]
 80078aa:	4b09      	ldr	r3, [pc, #36]	@ (80078d0 <cleanup_stdio+0x38>)
 80078ac:	4299      	cmp	r1, r3
 80078ae:	d002      	beq.n	80078b6 <cleanup_stdio+0x1e>
 80078b0:	4620      	mov	r0, r4
 80078b2:	f001 fed1 	bl	8009658 <_fflush_r>
 80078b6:	68e1      	ldr	r1, [r4, #12]
 80078b8:	4b06      	ldr	r3, [pc, #24]	@ (80078d4 <cleanup_stdio+0x3c>)
 80078ba:	4299      	cmp	r1, r3
 80078bc:	d004      	beq.n	80078c8 <cleanup_stdio+0x30>
 80078be:	4620      	mov	r0, r4
 80078c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c4:	f001 bec8 	b.w	8009658 <_fflush_r>
 80078c8:	bd10      	pop	{r4, pc}
 80078ca:	bf00      	nop
 80078cc:	20000464 	.word	0x20000464
 80078d0:	200004cc 	.word	0x200004cc
 80078d4:	20000534 	.word	0x20000534

080078d8 <global_stdio_init.part.0>:
 80078d8:	b510      	push	{r4, lr}
 80078da:	4b0b      	ldr	r3, [pc, #44]	@ (8007908 <global_stdio_init.part.0+0x30>)
 80078dc:	4c0b      	ldr	r4, [pc, #44]	@ (800790c <global_stdio_init.part.0+0x34>)
 80078de:	4a0c      	ldr	r2, [pc, #48]	@ (8007910 <global_stdio_init.part.0+0x38>)
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	4620      	mov	r0, r4
 80078e4:	2200      	movs	r2, #0
 80078e6:	2104      	movs	r1, #4
 80078e8:	f7ff ff94 	bl	8007814 <std>
 80078ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078f0:	2201      	movs	r2, #1
 80078f2:	2109      	movs	r1, #9
 80078f4:	f7ff ff8e 	bl	8007814 <std>
 80078f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80078fc:	2202      	movs	r2, #2
 80078fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007902:	2112      	movs	r1, #18
 8007904:	f7ff bf86 	b.w	8007814 <std>
 8007908:	2000059c 	.word	0x2000059c
 800790c:	20000464 	.word	0x20000464
 8007910:	08007881 	.word	0x08007881

08007914 <__sfp_lock_acquire>:
 8007914:	4801      	ldr	r0, [pc, #4]	@ (800791c <__sfp_lock_acquire+0x8>)
 8007916:	f000 ba04 	b.w	8007d22 <__retarget_lock_acquire_recursive>
 800791a:	bf00      	nop
 800791c:	200005a5 	.word	0x200005a5

08007920 <__sfp_lock_release>:
 8007920:	4801      	ldr	r0, [pc, #4]	@ (8007928 <__sfp_lock_release+0x8>)
 8007922:	f000 b9ff 	b.w	8007d24 <__retarget_lock_release_recursive>
 8007926:	bf00      	nop
 8007928:	200005a5 	.word	0x200005a5

0800792c <__sinit>:
 800792c:	b510      	push	{r4, lr}
 800792e:	4604      	mov	r4, r0
 8007930:	f7ff fff0 	bl	8007914 <__sfp_lock_acquire>
 8007934:	6a23      	ldr	r3, [r4, #32]
 8007936:	b11b      	cbz	r3, 8007940 <__sinit+0x14>
 8007938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800793c:	f7ff bff0 	b.w	8007920 <__sfp_lock_release>
 8007940:	4b04      	ldr	r3, [pc, #16]	@ (8007954 <__sinit+0x28>)
 8007942:	6223      	str	r3, [r4, #32]
 8007944:	4b04      	ldr	r3, [pc, #16]	@ (8007958 <__sinit+0x2c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1f5      	bne.n	8007938 <__sinit+0xc>
 800794c:	f7ff ffc4 	bl	80078d8 <global_stdio_init.part.0>
 8007950:	e7f2      	b.n	8007938 <__sinit+0xc>
 8007952:	bf00      	nop
 8007954:	08007899 	.word	0x08007899
 8007958:	2000059c 	.word	0x2000059c

0800795c <_fwalk_sglue>:
 800795c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007960:	4607      	mov	r7, r0
 8007962:	4688      	mov	r8, r1
 8007964:	4614      	mov	r4, r2
 8007966:	2600      	movs	r6, #0
 8007968:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800796c:	f1b9 0901 	subs.w	r9, r9, #1
 8007970:	d505      	bpl.n	800797e <_fwalk_sglue+0x22>
 8007972:	6824      	ldr	r4, [r4, #0]
 8007974:	2c00      	cmp	r4, #0
 8007976:	d1f7      	bne.n	8007968 <_fwalk_sglue+0xc>
 8007978:	4630      	mov	r0, r6
 800797a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800797e:	89ab      	ldrh	r3, [r5, #12]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d907      	bls.n	8007994 <_fwalk_sglue+0x38>
 8007984:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007988:	3301      	adds	r3, #1
 800798a:	d003      	beq.n	8007994 <_fwalk_sglue+0x38>
 800798c:	4629      	mov	r1, r5
 800798e:	4638      	mov	r0, r7
 8007990:	47c0      	blx	r8
 8007992:	4306      	orrs	r6, r0
 8007994:	3568      	adds	r5, #104	@ 0x68
 8007996:	e7e9      	b.n	800796c <_fwalk_sglue+0x10>

08007998 <iprintf>:
 8007998:	b40f      	push	{r0, r1, r2, r3}
 800799a:	b507      	push	{r0, r1, r2, lr}
 800799c:	4906      	ldr	r1, [pc, #24]	@ (80079b8 <iprintf+0x20>)
 800799e:	ab04      	add	r3, sp, #16
 80079a0:	6808      	ldr	r0, [r1, #0]
 80079a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80079a6:	6881      	ldr	r1, [r0, #8]
 80079a8:	9301      	str	r3, [sp, #4]
 80079aa:	f001 fcb9 	bl	8009320 <_vfiprintf_r>
 80079ae:	b003      	add	sp, #12
 80079b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079b4:	b004      	add	sp, #16
 80079b6:	4770      	bx	lr
 80079b8:	2000003c 	.word	0x2000003c

080079bc <_puts_r>:
 80079bc:	6a03      	ldr	r3, [r0, #32]
 80079be:	b570      	push	{r4, r5, r6, lr}
 80079c0:	6884      	ldr	r4, [r0, #8]
 80079c2:	4605      	mov	r5, r0
 80079c4:	460e      	mov	r6, r1
 80079c6:	b90b      	cbnz	r3, 80079cc <_puts_r+0x10>
 80079c8:	f7ff ffb0 	bl	800792c <__sinit>
 80079cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079ce:	07db      	lsls	r3, r3, #31
 80079d0:	d405      	bmi.n	80079de <_puts_r+0x22>
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	0598      	lsls	r0, r3, #22
 80079d6:	d402      	bmi.n	80079de <_puts_r+0x22>
 80079d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079da:	f000 f9a2 	bl	8007d22 <__retarget_lock_acquire_recursive>
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	0719      	lsls	r1, r3, #28
 80079e2:	d502      	bpl.n	80079ea <_puts_r+0x2e>
 80079e4:	6923      	ldr	r3, [r4, #16]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d135      	bne.n	8007a56 <_puts_r+0x9a>
 80079ea:	4621      	mov	r1, r4
 80079ec:	4628      	mov	r0, r5
 80079ee:	f000 f8c5 	bl	8007b7c <__swsetup_r>
 80079f2:	b380      	cbz	r0, 8007a56 <_puts_r+0x9a>
 80079f4:	f04f 35ff 	mov.w	r5, #4294967295
 80079f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079fa:	07da      	lsls	r2, r3, #31
 80079fc:	d405      	bmi.n	8007a0a <_puts_r+0x4e>
 80079fe:	89a3      	ldrh	r3, [r4, #12]
 8007a00:	059b      	lsls	r3, r3, #22
 8007a02:	d402      	bmi.n	8007a0a <_puts_r+0x4e>
 8007a04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a06:	f000 f98d 	bl	8007d24 <__retarget_lock_release_recursive>
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	bd70      	pop	{r4, r5, r6, pc}
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	da04      	bge.n	8007a1c <_puts_r+0x60>
 8007a12:	69a2      	ldr	r2, [r4, #24]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	dc17      	bgt.n	8007a48 <_puts_r+0x8c>
 8007a18:	290a      	cmp	r1, #10
 8007a1a:	d015      	beq.n	8007a48 <_puts_r+0x8c>
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	1c5a      	adds	r2, r3, #1
 8007a20:	6022      	str	r2, [r4, #0]
 8007a22:	7019      	strb	r1, [r3, #0]
 8007a24:	68a3      	ldr	r3, [r4, #8]
 8007a26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	60a3      	str	r3, [r4, #8]
 8007a2e:	2900      	cmp	r1, #0
 8007a30:	d1ed      	bne.n	8007a0e <_puts_r+0x52>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	da11      	bge.n	8007a5a <_puts_r+0x9e>
 8007a36:	4622      	mov	r2, r4
 8007a38:	210a      	movs	r1, #10
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f000 f85f 	bl	8007afe <__swbuf_r>
 8007a40:	3001      	adds	r0, #1
 8007a42:	d0d7      	beq.n	80079f4 <_puts_r+0x38>
 8007a44:	250a      	movs	r5, #10
 8007a46:	e7d7      	b.n	80079f8 <_puts_r+0x3c>
 8007a48:	4622      	mov	r2, r4
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f000 f857 	bl	8007afe <__swbuf_r>
 8007a50:	3001      	adds	r0, #1
 8007a52:	d1e7      	bne.n	8007a24 <_puts_r+0x68>
 8007a54:	e7ce      	b.n	80079f4 <_puts_r+0x38>
 8007a56:	3e01      	subs	r6, #1
 8007a58:	e7e4      	b.n	8007a24 <_puts_r+0x68>
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	6022      	str	r2, [r4, #0]
 8007a60:	220a      	movs	r2, #10
 8007a62:	701a      	strb	r2, [r3, #0]
 8007a64:	e7ee      	b.n	8007a44 <_puts_r+0x88>
	...

08007a68 <puts>:
 8007a68:	4b02      	ldr	r3, [pc, #8]	@ (8007a74 <puts+0xc>)
 8007a6a:	4601      	mov	r1, r0
 8007a6c:	6818      	ldr	r0, [r3, #0]
 8007a6e:	f7ff bfa5 	b.w	80079bc <_puts_r>
 8007a72:	bf00      	nop
 8007a74:	2000003c 	.word	0x2000003c

08007a78 <__sread>:
 8007a78:	b510      	push	{r4, lr}
 8007a7a:	460c      	mov	r4, r1
 8007a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a80:	f000 f900 	bl	8007c84 <_read_r>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	bfab      	itete	ge
 8007a88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a8c:	181b      	addge	r3, r3, r0
 8007a8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a92:	bfac      	ite	ge
 8007a94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a96:	81a3      	strhlt	r3, [r4, #12]
 8007a98:	bd10      	pop	{r4, pc}

08007a9a <__swrite>:
 8007a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a9e:	461f      	mov	r7, r3
 8007aa0:	898b      	ldrh	r3, [r1, #12]
 8007aa2:	05db      	lsls	r3, r3, #23
 8007aa4:	4605      	mov	r5, r0
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	4616      	mov	r6, r2
 8007aaa:	d505      	bpl.n	8007ab8 <__swrite+0x1e>
 8007aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f000 f8d4 	bl	8007c60 <_lseek_r>
 8007ab8:	89a3      	ldrh	r3, [r4, #12]
 8007aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007abe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ac2:	81a3      	strh	r3, [r4, #12]
 8007ac4:	4632      	mov	r2, r6
 8007ac6:	463b      	mov	r3, r7
 8007ac8:	4628      	mov	r0, r5
 8007aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ace:	f000 b8eb 	b.w	8007ca8 <_write_r>

08007ad2 <__sseek>:
 8007ad2:	b510      	push	{r4, lr}
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ada:	f000 f8c1 	bl	8007c60 <_lseek_r>
 8007ade:	1c43      	adds	r3, r0, #1
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	bf15      	itete	ne
 8007ae4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ae6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007aea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007aee:	81a3      	strheq	r3, [r4, #12]
 8007af0:	bf18      	it	ne
 8007af2:	81a3      	strhne	r3, [r4, #12]
 8007af4:	bd10      	pop	{r4, pc}

08007af6 <__sclose>:
 8007af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007afa:	f000 b8a1 	b.w	8007c40 <_close_r>

08007afe <__swbuf_r>:
 8007afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b00:	460e      	mov	r6, r1
 8007b02:	4614      	mov	r4, r2
 8007b04:	4605      	mov	r5, r0
 8007b06:	b118      	cbz	r0, 8007b10 <__swbuf_r+0x12>
 8007b08:	6a03      	ldr	r3, [r0, #32]
 8007b0a:	b90b      	cbnz	r3, 8007b10 <__swbuf_r+0x12>
 8007b0c:	f7ff ff0e 	bl	800792c <__sinit>
 8007b10:	69a3      	ldr	r3, [r4, #24]
 8007b12:	60a3      	str	r3, [r4, #8]
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	071a      	lsls	r2, r3, #28
 8007b18:	d501      	bpl.n	8007b1e <__swbuf_r+0x20>
 8007b1a:	6923      	ldr	r3, [r4, #16]
 8007b1c:	b943      	cbnz	r3, 8007b30 <__swbuf_r+0x32>
 8007b1e:	4621      	mov	r1, r4
 8007b20:	4628      	mov	r0, r5
 8007b22:	f000 f82b 	bl	8007b7c <__swsetup_r>
 8007b26:	b118      	cbz	r0, 8007b30 <__swbuf_r+0x32>
 8007b28:	f04f 37ff 	mov.w	r7, #4294967295
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	6922      	ldr	r2, [r4, #16]
 8007b34:	1a98      	subs	r0, r3, r2
 8007b36:	6963      	ldr	r3, [r4, #20]
 8007b38:	b2f6      	uxtb	r6, r6
 8007b3a:	4283      	cmp	r3, r0
 8007b3c:	4637      	mov	r7, r6
 8007b3e:	dc05      	bgt.n	8007b4c <__swbuf_r+0x4e>
 8007b40:	4621      	mov	r1, r4
 8007b42:	4628      	mov	r0, r5
 8007b44:	f001 fd88 	bl	8009658 <_fflush_r>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d1ed      	bne.n	8007b28 <__swbuf_r+0x2a>
 8007b4c:	68a3      	ldr	r3, [r4, #8]
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	60a3      	str	r3, [r4, #8]
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	1c5a      	adds	r2, r3, #1
 8007b56:	6022      	str	r2, [r4, #0]
 8007b58:	701e      	strb	r6, [r3, #0]
 8007b5a:	6962      	ldr	r2, [r4, #20]
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d004      	beq.n	8007b6c <__swbuf_r+0x6e>
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	07db      	lsls	r3, r3, #31
 8007b66:	d5e1      	bpl.n	8007b2c <__swbuf_r+0x2e>
 8007b68:	2e0a      	cmp	r6, #10
 8007b6a:	d1df      	bne.n	8007b2c <__swbuf_r+0x2e>
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f001 fd72 	bl	8009658 <_fflush_r>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	d0d9      	beq.n	8007b2c <__swbuf_r+0x2e>
 8007b78:	e7d6      	b.n	8007b28 <__swbuf_r+0x2a>
	...

08007b7c <__swsetup_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4b29      	ldr	r3, [pc, #164]	@ (8007c24 <__swsetup_r+0xa8>)
 8007b80:	4605      	mov	r5, r0
 8007b82:	6818      	ldr	r0, [r3, #0]
 8007b84:	460c      	mov	r4, r1
 8007b86:	b118      	cbz	r0, 8007b90 <__swsetup_r+0x14>
 8007b88:	6a03      	ldr	r3, [r0, #32]
 8007b8a:	b90b      	cbnz	r3, 8007b90 <__swsetup_r+0x14>
 8007b8c:	f7ff fece 	bl	800792c <__sinit>
 8007b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b94:	0719      	lsls	r1, r3, #28
 8007b96:	d422      	bmi.n	8007bde <__swsetup_r+0x62>
 8007b98:	06da      	lsls	r2, r3, #27
 8007b9a:	d407      	bmi.n	8007bac <__swsetup_r+0x30>
 8007b9c:	2209      	movs	r2, #9
 8007b9e:	602a      	str	r2, [r5, #0]
 8007ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ba4:	81a3      	strh	r3, [r4, #12]
 8007ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8007baa:	e033      	b.n	8007c14 <__swsetup_r+0x98>
 8007bac:	0758      	lsls	r0, r3, #29
 8007bae:	d512      	bpl.n	8007bd6 <__swsetup_r+0x5a>
 8007bb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bb2:	b141      	cbz	r1, 8007bc6 <__swsetup_r+0x4a>
 8007bb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bb8:	4299      	cmp	r1, r3
 8007bba:	d002      	beq.n	8007bc2 <__swsetup_r+0x46>
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f000 ff0b 	bl	80089d8 <_free_r>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007bcc:	81a3      	strh	r3, [r4, #12]
 8007bce:	2300      	movs	r3, #0
 8007bd0:	6063      	str	r3, [r4, #4]
 8007bd2:	6923      	ldr	r3, [r4, #16]
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	f043 0308 	orr.w	r3, r3, #8
 8007bdc:	81a3      	strh	r3, [r4, #12]
 8007bde:	6923      	ldr	r3, [r4, #16]
 8007be0:	b94b      	cbnz	r3, 8007bf6 <__swsetup_r+0x7a>
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bec:	d003      	beq.n	8007bf6 <__swsetup_r+0x7a>
 8007bee:	4621      	mov	r1, r4
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	f001 fd7f 	bl	80096f4 <__smakebuf_r>
 8007bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bfa:	f013 0201 	ands.w	r2, r3, #1
 8007bfe:	d00a      	beq.n	8007c16 <__swsetup_r+0x9a>
 8007c00:	2200      	movs	r2, #0
 8007c02:	60a2      	str	r2, [r4, #8]
 8007c04:	6962      	ldr	r2, [r4, #20]
 8007c06:	4252      	negs	r2, r2
 8007c08:	61a2      	str	r2, [r4, #24]
 8007c0a:	6922      	ldr	r2, [r4, #16]
 8007c0c:	b942      	cbnz	r2, 8007c20 <__swsetup_r+0xa4>
 8007c0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c12:	d1c5      	bne.n	8007ba0 <__swsetup_r+0x24>
 8007c14:	bd38      	pop	{r3, r4, r5, pc}
 8007c16:	0799      	lsls	r1, r3, #30
 8007c18:	bf58      	it	pl
 8007c1a:	6962      	ldrpl	r2, [r4, #20]
 8007c1c:	60a2      	str	r2, [r4, #8]
 8007c1e:	e7f4      	b.n	8007c0a <__swsetup_r+0x8e>
 8007c20:	2000      	movs	r0, #0
 8007c22:	e7f7      	b.n	8007c14 <__swsetup_r+0x98>
 8007c24:	2000003c 	.word	0x2000003c

08007c28 <memset>:
 8007c28:	4402      	add	r2, r0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d100      	bne.n	8007c32 <memset+0xa>
 8007c30:	4770      	bx	lr
 8007c32:	f803 1b01 	strb.w	r1, [r3], #1
 8007c36:	e7f9      	b.n	8007c2c <memset+0x4>

08007c38 <_localeconv_r>:
 8007c38:	4800      	ldr	r0, [pc, #0]	@ (8007c3c <_localeconv_r+0x4>)
 8007c3a:	4770      	bx	lr
 8007c3c:	2000017c 	.word	0x2000017c

08007c40 <_close_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	4d06      	ldr	r5, [pc, #24]	@ (8007c5c <_close_r+0x1c>)
 8007c44:	2300      	movs	r3, #0
 8007c46:	4604      	mov	r4, r0
 8007c48:	4608      	mov	r0, r1
 8007c4a:	602b      	str	r3, [r5, #0]
 8007c4c:	f7f9 feb8 	bl	80019c0 <_close>
 8007c50:	1c43      	adds	r3, r0, #1
 8007c52:	d102      	bne.n	8007c5a <_close_r+0x1a>
 8007c54:	682b      	ldr	r3, [r5, #0]
 8007c56:	b103      	cbz	r3, 8007c5a <_close_r+0x1a>
 8007c58:	6023      	str	r3, [r4, #0]
 8007c5a:	bd38      	pop	{r3, r4, r5, pc}
 8007c5c:	200005a0 	.word	0x200005a0

08007c60 <_lseek_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4d07      	ldr	r5, [pc, #28]	@ (8007c80 <_lseek_r+0x20>)
 8007c64:	4604      	mov	r4, r0
 8007c66:	4608      	mov	r0, r1
 8007c68:	4611      	mov	r1, r2
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	602a      	str	r2, [r5, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f7f9 fecd 	bl	8001a0e <_lseek>
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	d102      	bne.n	8007c7e <_lseek_r+0x1e>
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	b103      	cbz	r3, 8007c7e <_lseek_r+0x1e>
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	200005a0 	.word	0x200005a0

08007c84 <_read_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	4d07      	ldr	r5, [pc, #28]	@ (8007ca4 <_read_r+0x20>)
 8007c88:	4604      	mov	r4, r0
 8007c8a:	4608      	mov	r0, r1
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	2200      	movs	r2, #0
 8007c90:	602a      	str	r2, [r5, #0]
 8007c92:	461a      	mov	r2, r3
 8007c94:	f7f9 fe5b 	bl	800194e <_read>
 8007c98:	1c43      	adds	r3, r0, #1
 8007c9a:	d102      	bne.n	8007ca2 <_read_r+0x1e>
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	b103      	cbz	r3, 8007ca2 <_read_r+0x1e>
 8007ca0:	6023      	str	r3, [r4, #0]
 8007ca2:	bd38      	pop	{r3, r4, r5, pc}
 8007ca4:	200005a0 	.word	0x200005a0

08007ca8 <_write_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4d07      	ldr	r5, [pc, #28]	@ (8007cc8 <_write_r+0x20>)
 8007cac:	4604      	mov	r4, r0
 8007cae:	4608      	mov	r0, r1
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	602a      	str	r2, [r5, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f7f9 fe66 	bl	8001988 <_write>
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	d102      	bne.n	8007cc6 <_write_r+0x1e>
 8007cc0:	682b      	ldr	r3, [r5, #0]
 8007cc2:	b103      	cbz	r3, 8007cc6 <_write_r+0x1e>
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	bd38      	pop	{r3, r4, r5, pc}
 8007cc8:	200005a0 	.word	0x200005a0

08007ccc <__errno>:
 8007ccc:	4b01      	ldr	r3, [pc, #4]	@ (8007cd4 <__errno+0x8>)
 8007cce:	6818      	ldr	r0, [r3, #0]
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	2000003c 	.word	0x2000003c

08007cd8 <__libc_init_array>:
 8007cd8:	b570      	push	{r4, r5, r6, lr}
 8007cda:	4d0d      	ldr	r5, [pc, #52]	@ (8007d10 <__libc_init_array+0x38>)
 8007cdc:	4c0d      	ldr	r4, [pc, #52]	@ (8007d14 <__libc_init_array+0x3c>)
 8007cde:	1b64      	subs	r4, r4, r5
 8007ce0:	10a4      	asrs	r4, r4, #2
 8007ce2:	2600      	movs	r6, #0
 8007ce4:	42a6      	cmp	r6, r4
 8007ce6:	d109      	bne.n	8007cfc <__libc_init_array+0x24>
 8007ce8:	4d0b      	ldr	r5, [pc, #44]	@ (8007d18 <__libc_init_array+0x40>)
 8007cea:	4c0c      	ldr	r4, [pc, #48]	@ (8007d1c <__libc_init_array+0x44>)
 8007cec:	f001 fe2e 	bl	800994c <_init>
 8007cf0:	1b64      	subs	r4, r4, r5
 8007cf2:	10a4      	asrs	r4, r4, #2
 8007cf4:	2600      	movs	r6, #0
 8007cf6:	42a6      	cmp	r6, r4
 8007cf8:	d105      	bne.n	8007d06 <__libc_init_array+0x2e>
 8007cfa:	bd70      	pop	{r4, r5, r6, pc}
 8007cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d00:	4798      	blx	r3
 8007d02:	3601      	adds	r6, #1
 8007d04:	e7ee      	b.n	8007ce4 <__libc_init_array+0xc>
 8007d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d0a:	4798      	blx	r3
 8007d0c:	3601      	adds	r6, #1
 8007d0e:	e7f2      	b.n	8007cf6 <__libc_init_array+0x1e>
 8007d10:	08009ea4 	.word	0x08009ea4
 8007d14:	08009ea4 	.word	0x08009ea4
 8007d18:	08009ea4 	.word	0x08009ea4
 8007d1c:	08009ea8 	.word	0x08009ea8

08007d20 <__retarget_lock_init_recursive>:
 8007d20:	4770      	bx	lr

08007d22 <__retarget_lock_acquire_recursive>:
 8007d22:	4770      	bx	lr

08007d24 <__retarget_lock_release_recursive>:
 8007d24:	4770      	bx	lr

08007d26 <quorem>:
 8007d26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2a:	6903      	ldr	r3, [r0, #16]
 8007d2c:	690c      	ldr	r4, [r1, #16]
 8007d2e:	42a3      	cmp	r3, r4
 8007d30:	4607      	mov	r7, r0
 8007d32:	db7e      	blt.n	8007e32 <quorem+0x10c>
 8007d34:	3c01      	subs	r4, #1
 8007d36:	f101 0814 	add.w	r8, r1, #20
 8007d3a:	00a3      	lsls	r3, r4, #2
 8007d3c:	f100 0514 	add.w	r5, r0, #20
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d46:	9301      	str	r3, [sp, #4]
 8007d48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d50:	3301      	adds	r3, #1
 8007d52:	429a      	cmp	r2, r3
 8007d54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d58:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d5c:	d32e      	bcc.n	8007dbc <quorem+0x96>
 8007d5e:	f04f 0a00 	mov.w	sl, #0
 8007d62:	46c4      	mov	ip, r8
 8007d64:	46ae      	mov	lr, r5
 8007d66:	46d3      	mov	fp, sl
 8007d68:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d6c:	b298      	uxth	r0, r3
 8007d6e:	fb06 a000 	mla	r0, r6, r0, sl
 8007d72:	0c02      	lsrs	r2, r0, #16
 8007d74:	0c1b      	lsrs	r3, r3, #16
 8007d76:	fb06 2303 	mla	r3, r6, r3, r2
 8007d7a:	f8de 2000 	ldr.w	r2, [lr]
 8007d7e:	b280      	uxth	r0, r0
 8007d80:	b292      	uxth	r2, r2
 8007d82:	1a12      	subs	r2, r2, r0
 8007d84:	445a      	add	r2, fp
 8007d86:	f8de 0000 	ldr.w	r0, [lr]
 8007d8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007d94:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007d98:	b292      	uxth	r2, r2
 8007d9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007d9e:	45e1      	cmp	r9, ip
 8007da0:	f84e 2b04 	str.w	r2, [lr], #4
 8007da4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007da8:	d2de      	bcs.n	8007d68 <quorem+0x42>
 8007daa:	9b00      	ldr	r3, [sp, #0]
 8007dac:	58eb      	ldr	r3, [r5, r3]
 8007dae:	b92b      	cbnz	r3, 8007dbc <quorem+0x96>
 8007db0:	9b01      	ldr	r3, [sp, #4]
 8007db2:	3b04      	subs	r3, #4
 8007db4:	429d      	cmp	r5, r3
 8007db6:	461a      	mov	r2, r3
 8007db8:	d32f      	bcc.n	8007e1a <quorem+0xf4>
 8007dba:	613c      	str	r4, [r7, #16]
 8007dbc:	4638      	mov	r0, r7
 8007dbe:	f001 f97d 	bl	80090bc <__mcmp>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	db25      	blt.n	8007e12 <quorem+0xec>
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	2000      	movs	r0, #0
 8007dca:	f858 2b04 	ldr.w	r2, [r8], #4
 8007dce:	f8d1 c000 	ldr.w	ip, [r1]
 8007dd2:	fa1f fe82 	uxth.w	lr, r2
 8007dd6:	fa1f f38c 	uxth.w	r3, ip
 8007dda:	eba3 030e 	sub.w	r3, r3, lr
 8007dde:	4403      	add	r3, r0
 8007de0:	0c12      	lsrs	r2, r2, #16
 8007de2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007de6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007df0:	45c1      	cmp	r9, r8
 8007df2:	f841 3b04 	str.w	r3, [r1], #4
 8007df6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007dfa:	d2e6      	bcs.n	8007dca <quorem+0xa4>
 8007dfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e04:	b922      	cbnz	r2, 8007e10 <quorem+0xea>
 8007e06:	3b04      	subs	r3, #4
 8007e08:	429d      	cmp	r5, r3
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	d30b      	bcc.n	8007e26 <quorem+0x100>
 8007e0e:	613c      	str	r4, [r7, #16]
 8007e10:	3601      	adds	r6, #1
 8007e12:	4630      	mov	r0, r6
 8007e14:	b003      	add	sp, #12
 8007e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1a:	6812      	ldr	r2, [r2, #0]
 8007e1c:	3b04      	subs	r3, #4
 8007e1e:	2a00      	cmp	r2, #0
 8007e20:	d1cb      	bne.n	8007dba <quorem+0x94>
 8007e22:	3c01      	subs	r4, #1
 8007e24:	e7c6      	b.n	8007db4 <quorem+0x8e>
 8007e26:	6812      	ldr	r2, [r2, #0]
 8007e28:	3b04      	subs	r3, #4
 8007e2a:	2a00      	cmp	r2, #0
 8007e2c:	d1ef      	bne.n	8007e0e <quorem+0xe8>
 8007e2e:	3c01      	subs	r4, #1
 8007e30:	e7ea      	b.n	8007e08 <quorem+0xe2>
 8007e32:	2000      	movs	r0, #0
 8007e34:	e7ee      	b.n	8007e14 <quorem+0xee>
	...

08007e38 <_dtoa_r>:
 8007e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	69c7      	ldr	r7, [r0, #28]
 8007e3e:	b097      	sub	sp, #92	@ 0x5c
 8007e40:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007e44:	ec55 4b10 	vmov	r4, r5, d0
 8007e48:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007e4a:	9107      	str	r1, [sp, #28]
 8007e4c:	4681      	mov	r9, r0
 8007e4e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007e50:	9311      	str	r3, [sp, #68]	@ 0x44
 8007e52:	b97f      	cbnz	r7, 8007e74 <_dtoa_r+0x3c>
 8007e54:	2010      	movs	r0, #16
 8007e56:	f000 fe09 	bl	8008a6c <malloc>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007e60:	b920      	cbnz	r0, 8007e6c <_dtoa_r+0x34>
 8007e62:	4ba9      	ldr	r3, [pc, #676]	@ (8008108 <_dtoa_r+0x2d0>)
 8007e64:	21ef      	movs	r1, #239	@ 0xef
 8007e66:	48a9      	ldr	r0, [pc, #676]	@ (800810c <_dtoa_r+0x2d4>)
 8007e68:	f001 fcc0 	bl	80097ec <__assert_func>
 8007e6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007e70:	6007      	str	r7, [r0, #0]
 8007e72:	60c7      	str	r7, [r0, #12]
 8007e74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e78:	6819      	ldr	r1, [r3, #0]
 8007e7a:	b159      	cbz	r1, 8007e94 <_dtoa_r+0x5c>
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	604a      	str	r2, [r1, #4]
 8007e80:	2301      	movs	r3, #1
 8007e82:	4093      	lsls	r3, r2
 8007e84:	608b      	str	r3, [r1, #8]
 8007e86:	4648      	mov	r0, r9
 8007e88:	f000 fee6 	bl	8008c58 <_Bfree>
 8007e8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e90:	2200      	movs	r2, #0
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	1e2b      	subs	r3, r5, #0
 8007e96:	bfb9      	ittee	lt
 8007e98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007e9c:	9305      	strlt	r3, [sp, #20]
 8007e9e:	2300      	movge	r3, #0
 8007ea0:	6033      	strge	r3, [r6, #0]
 8007ea2:	9f05      	ldr	r7, [sp, #20]
 8007ea4:	4b9a      	ldr	r3, [pc, #616]	@ (8008110 <_dtoa_r+0x2d8>)
 8007ea6:	bfbc      	itt	lt
 8007ea8:	2201      	movlt	r2, #1
 8007eaa:	6032      	strlt	r2, [r6, #0]
 8007eac:	43bb      	bics	r3, r7
 8007eae:	d112      	bne.n	8007ed6 <_dtoa_r+0x9e>
 8007eb0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007eb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007eb6:	6013      	str	r3, [r2, #0]
 8007eb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ebc:	4323      	orrs	r3, r4
 8007ebe:	f000 855a 	beq.w	8008976 <_dtoa_r+0xb3e>
 8007ec2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ec4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008124 <_dtoa_r+0x2ec>
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 855c 	beq.w	8008986 <_dtoa_r+0xb4e>
 8007ece:	f10a 0303 	add.w	r3, sl, #3
 8007ed2:	f000 bd56 	b.w	8008982 <_dtoa_r+0xb4a>
 8007ed6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007eda:	2200      	movs	r2, #0
 8007edc:	ec51 0b17 	vmov	r0, r1, d7
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007ee6:	f7f8 fdc7 	bl	8000a78 <__aeabi_dcmpeq>
 8007eea:	4680      	mov	r8, r0
 8007eec:	b158      	cbz	r0, 8007f06 <_dtoa_r+0xce>
 8007eee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ef6:	b113      	cbz	r3, 8007efe <_dtoa_r+0xc6>
 8007ef8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007efa:	4b86      	ldr	r3, [pc, #536]	@ (8008114 <_dtoa_r+0x2dc>)
 8007efc:	6013      	str	r3, [r2, #0]
 8007efe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008128 <_dtoa_r+0x2f0>
 8007f02:	f000 bd40 	b.w	8008986 <_dtoa_r+0xb4e>
 8007f06:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007f0a:	aa14      	add	r2, sp, #80	@ 0x50
 8007f0c:	a915      	add	r1, sp, #84	@ 0x54
 8007f0e:	4648      	mov	r0, r9
 8007f10:	f001 f984 	bl	800921c <__d2b>
 8007f14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007f18:	9002      	str	r0, [sp, #8]
 8007f1a:	2e00      	cmp	r6, #0
 8007f1c:	d078      	beq.n	8008010 <_dtoa_r+0x1d8>
 8007f1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f20:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007f2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007f34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007f38:	4619      	mov	r1, r3
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	4b76      	ldr	r3, [pc, #472]	@ (8008118 <_dtoa_r+0x2e0>)
 8007f3e:	f7f8 f97b 	bl	8000238 <__aeabi_dsub>
 8007f42:	a36b      	add	r3, pc, #428	@ (adr r3, 80080f0 <_dtoa_r+0x2b8>)
 8007f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f48:	f7f8 fb2e 	bl	80005a8 <__aeabi_dmul>
 8007f4c:	a36a      	add	r3, pc, #424	@ (adr r3, 80080f8 <_dtoa_r+0x2c0>)
 8007f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f52:	f7f8 f973 	bl	800023c <__adddf3>
 8007f56:	4604      	mov	r4, r0
 8007f58:	4630      	mov	r0, r6
 8007f5a:	460d      	mov	r5, r1
 8007f5c:	f7f8 faba 	bl	80004d4 <__aeabi_i2d>
 8007f60:	a367      	add	r3, pc, #412	@ (adr r3, 8008100 <_dtoa_r+0x2c8>)
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	f7f8 fb1f 	bl	80005a8 <__aeabi_dmul>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	4620      	mov	r0, r4
 8007f70:	4629      	mov	r1, r5
 8007f72:	f7f8 f963 	bl	800023c <__adddf3>
 8007f76:	4604      	mov	r4, r0
 8007f78:	460d      	mov	r5, r1
 8007f7a:	f7f8 fdc5 	bl	8000b08 <__aeabi_d2iz>
 8007f7e:	2200      	movs	r2, #0
 8007f80:	4607      	mov	r7, r0
 8007f82:	2300      	movs	r3, #0
 8007f84:	4620      	mov	r0, r4
 8007f86:	4629      	mov	r1, r5
 8007f88:	f7f8 fd80 	bl	8000a8c <__aeabi_dcmplt>
 8007f8c:	b140      	cbz	r0, 8007fa0 <_dtoa_r+0x168>
 8007f8e:	4638      	mov	r0, r7
 8007f90:	f7f8 faa0 	bl	80004d4 <__aeabi_i2d>
 8007f94:	4622      	mov	r2, r4
 8007f96:	462b      	mov	r3, r5
 8007f98:	f7f8 fd6e 	bl	8000a78 <__aeabi_dcmpeq>
 8007f9c:	b900      	cbnz	r0, 8007fa0 <_dtoa_r+0x168>
 8007f9e:	3f01      	subs	r7, #1
 8007fa0:	2f16      	cmp	r7, #22
 8007fa2:	d852      	bhi.n	800804a <_dtoa_r+0x212>
 8007fa4:	4b5d      	ldr	r3, [pc, #372]	@ (800811c <_dtoa_r+0x2e4>)
 8007fa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007fb2:	f7f8 fd6b 	bl	8000a8c <__aeabi_dcmplt>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d049      	beq.n	800804e <_dtoa_r+0x216>
 8007fba:	3f01      	subs	r7, #1
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8007fc0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007fc2:	1b9b      	subs	r3, r3, r6
 8007fc4:	1e5a      	subs	r2, r3, #1
 8007fc6:	bf45      	ittet	mi
 8007fc8:	f1c3 0301 	rsbmi	r3, r3, #1
 8007fcc:	9300      	strmi	r3, [sp, #0]
 8007fce:	2300      	movpl	r3, #0
 8007fd0:	2300      	movmi	r3, #0
 8007fd2:	9206      	str	r2, [sp, #24]
 8007fd4:	bf54      	ite	pl
 8007fd6:	9300      	strpl	r3, [sp, #0]
 8007fd8:	9306      	strmi	r3, [sp, #24]
 8007fda:	2f00      	cmp	r7, #0
 8007fdc:	db39      	blt.n	8008052 <_dtoa_r+0x21a>
 8007fde:	9b06      	ldr	r3, [sp, #24]
 8007fe0:	970d      	str	r7, [sp, #52]	@ 0x34
 8007fe2:	443b      	add	r3, r7
 8007fe4:	9306      	str	r3, [sp, #24]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	9308      	str	r3, [sp, #32]
 8007fea:	9b07      	ldr	r3, [sp, #28]
 8007fec:	2b09      	cmp	r3, #9
 8007fee:	d863      	bhi.n	80080b8 <_dtoa_r+0x280>
 8007ff0:	2b05      	cmp	r3, #5
 8007ff2:	bfc4      	itt	gt
 8007ff4:	3b04      	subgt	r3, #4
 8007ff6:	9307      	strgt	r3, [sp, #28]
 8007ff8:	9b07      	ldr	r3, [sp, #28]
 8007ffa:	f1a3 0302 	sub.w	r3, r3, #2
 8007ffe:	bfcc      	ite	gt
 8008000:	2400      	movgt	r4, #0
 8008002:	2401      	movle	r4, #1
 8008004:	2b03      	cmp	r3, #3
 8008006:	d863      	bhi.n	80080d0 <_dtoa_r+0x298>
 8008008:	e8df f003 	tbb	[pc, r3]
 800800c:	2b375452 	.word	0x2b375452
 8008010:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008014:	441e      	add	r6, r3
 8008016:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800801a:	2b20      	cmp	r3, #32
 800801c:	bfc1      	itttt	gt
 800801e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008022:	409f      	lslgt	r7, r3
 8008024:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008028:	fa24 f303 	lsrgt.w	r3, r4, r3
 800802c:	bfd6      	itet	le
 800802e:	f1c3 0320 	rsble	r3, r3, #32
 8008032:	ea47 0003 	orrgt.w	r0, r7, r3
 8008036:	fa04 f003 	lslle.w	r0, r4, r3
 800803a:	f7f8 fa3b 	bl	80004b4 <__aeabi_ui2d>
 800803e:	2201      	movs	r2, #1
 8008040:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008044:	3e01      	subs	r6, #1
 8008046:	9212      	str	r2, [sp, #72]	@ 0x48
 8008048:	e776      	b.n	8007f38 <_dtoa_r+0x100>
 800804a:	2301      	movs	r3, #1
 800804c:	e7b7      	b.n	8007fbe <_dtoa_r+0x186>
 800804e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008050:	e7b6      	b.n	8007fc0 <_dtoa_r+0x188>
 8008052:	9b00      	ldr	r3, [sp, #0]
 8008054:	1bdb      	subs	r3, r3, r7
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	427b      	negs	r3, r7
 800805a:	9308      	str	r3, [sp, #32]
 800805c:	2300      	movs	r3, #0
 800805e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008060:	e7c3      	b.n	8007fea <_dtoa_r+0x1b2>
 8008062:	2301      	movs	r3, #1
 8008064:	9309      	str	r3, [sp, #36]	@ 0x24
 8008066:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008068:	eb07 0b03 	add.w	fp, r7, r3
 800806c:	f10b 0301 	add.w	r3, fp, #1
 8008070:	2b01      	cmp	r3, #1
 8008072:	9303      	str	r3, [sp, #12]
 8008074:	bfb8      	it	lt
 8008076:	2301      	movlt	r3, #1
 8008078:	e006      	b.n	8008088 <_dtoa_r+0x250>
 800807a:	2301      	movs	r3, #1
 800807c:	9309      	str	r3, [sp, #36]	@ 0x24
 800807e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008080:	2b00      	cmp	r3, #0
 8008082:	dd28      	ble.n	80080d6 <_dtoa_r+0x29e>
 8008084:	469b      	mov	fp, r3
 8008086:	9303      	str	r3, [sp, #12]
 8008088:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800808c:	2100      	movs	r1, #0
 800808e:	2204      	movs	r2, #4
 8008090:	f102 0514 	add.w	r5, r2, #20
 8008094:	429d      	cmp	r5, r3
 8008096:	d926      	bls.n	80080e6 <_dtoa_r+0x2ae>
 8008098:	6041      	str	r1, [r0, #4]
 800809a:	4648      	mov	r0, r9
 800809c:	f000 fd9c 	bl	8008bd8 <_Balloc>
 80080a0:	4682      	mov	sl, r0
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d142      	bne.n	800812c <_dtoa_r+0x2f4>
 80080a6:	4b1e      	ldr	r3, [pc, #120]	@ (8008120 <_dtoa_r+0x2e8>)
 80080a8:	4602      	mov	r2, r0
 80080aa:	f240 11af 	movw	r1, #431	@ 0x1af
 80080ae:	e6da      	b.n	8007e66 <_dtoa_r+0x2e>
 80080b0:	2300      	movs	r3, #0
 80080b2:	e7e3      	b.n	800807c <_dtoa_r+0x244>
 80080b4:	2300      	movs	r3, #0
 80080b6:	e7d5      	b.n	8008064 <_dtoa_r+0x22c>
 80080b8:	2401      	movs	r4, #1
 80080ba:	2300      	movs	r3, #0
 80080bc:	9307      	str	r3, [sp, #28]
 80080be:	9409      	str	r4, [sp, #36]	@ 0x24
 80080c0:	f04f 3bff 	mov.w	fp, #4294967295
 80080c4:	2200      	movs	r2, #0
 80080c6:	f8cd b00c 	str.w	fp, [sp, #12]
 80080ca:	2312      	movs	r3, #18
 80080cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80080ce:	e7db      	b.n	8008088 <_dtoa_r+0x250>
 80080d0:	2301      	movs	r3, #1
 80080d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80080d4:	e7f4      	b.n	80080c0 <_dtoa_r+0x288>
 80080d6:	f04f 0b01 	mov.w	fp, #1
 80080da:	f8cd b00c 	str.w	fp, [sp, #12]
 80080de:	465b      	mov	r3, fp
 80080e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80080e4:	e7d0      	b.n	8008088 <_dtoa_r+0x250>
 80080e6:	3101      	adds	r1, #1
 80080e8:	0052      	lsls	r2, r2, #1
 80080ea:	e7d1      	b.n	8008090 <_dtoa_r+0x258>
 80080ec:	f3af 8000 	nop.w
 80080f0:	636f4361 	.word	0x636f4361
 80080f4:	3fd287a7 	.word	0x3fd287a7
 80080f8:	8b60c8b3 	.word	0x8b60c8b3
 80080fc:	3fc68a28 	.word	0x3fc68a28
 8008100:	509f79fb 	.word	0x509f79fb
 8008104:	3fd34413 	.word	0x3fd34413
 8008108:	08009b69 	.word	0x08009b69
 800810c:	08009b80 	.word	0x08009b80
 8008110:	7ff00000 	.word	0x7ff00000
 8008114:	08009b39 	.word	0x08009b39
 8008118:	3ff80000 	.word	0x3ff80000
 800811c:	08009cd0 	.word	0x08009cd0
 8008120:	08009bd8 	.word	0x08009bd8
 8008124:	08009b65 	.word	0x08009b65
 8008128:	08009b38 	.word	0x08009b38
 800812c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008130:	6018      	str	r0, [r3, #0]
 8008132:	9b03      	ldr	r3, [sp, #12]
 8008134:	2b0e      	cmp	r3, #14
 8008136:	f200 80a1 	bhi.w	800827c <_dtoa_r+0x444>
 800813a:	2c00      	cmp	r4, #0
 800813c:	f000 809e 	beq.w	800827c <_dtoa_r+0x444>
 8008140:	2f00      	cmp	r7, #0
 8008142:	dd33      	ble.n	80081ac <_dtoa_r+0x374>
 8008144:	4b9c      	ldr	r3, [pc, #624]	@ (80083b8 <_dtoa_r+0x580>)
 8008146:	f007 020f 	and.w	r2, r7, #15
 800814a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800814e:	ed93 7b00 	vldr	d7, [r3]
 8008152:	05f8      	lsls	r0, r7, #23
 8008154:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008158:	ea4f 1427 	mov.w	r4, r7, asr #4
 800815c:	d516      	bpl.n	800818c <_dtoa_r+0x354>
 800815e:	4b97      	ldr	r3, [pc, #604]	@ (80083bc <_dtoa_r+0x584>)
 8008160:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008164:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008168:	f7f8 fb48 	bl	80007fc <__aeabi_ddiv>
 800816c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008170:	f004 040f 	and.w	r4, r4, #15
 8008174:	2603      	movs	r6, #3
 8008176:	4d91      	ldr	r5, [pc, #580]	@ (80083bc <_dtoa_r+0x584>)
 8008178:	b954      	cbnz	r4, 8008190 <_dtoa_r+0x358>
 800817a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800817e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008182:	f7f8 fb3b 	bl	80007fc <__aeabi_ddiv>
 8008186:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800818a:	e028      	b.n	80081de <_dtoa_r+0x3a6>
 800818c:	2602      	movs	r6, #2
 800818e:	e7f2      	b.n	8008176 <_dtoa_r+0x33e>
 8008190:	07e1      	lsls	r1, r4, #31
 8008192:	d508      	bpl.n	80081a6 <_dtoa_r+0x36e>
 8008194:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008198:	e9d5 2300 	ldrd	r2, r3, [r5]
 800819c:	f7f8 fa04 	bl	80005a8 <__aeabi_dmul>
 80081a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80081a4:	3601      	adds	r6, #1
 80081a6:	1064      	asrs	r4, r4, #1
 80081a8:	3508      	adds	r5, #8
 80081aa:	e7e5      	b.n	8008178 <_dtoa_r+0x340>
 80081ac:	f000 80af 	beq.w	800830e <_dtoa_r+0x4d6>
 80081b0:	427c      	negs	r4, r7
 80081b2:	4b81      	ldr	r3, [pc, #516]	@ (80083b8 <_dtoa_r+0x580>)
 80081b4:	4d81      	ldr	r5, [pc, #516]	@ (80083bc <_dtoa_r+0x584>)
 80081b6:	f004 020f 	and.w	r2, r4, #15
 80081ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80081c6:	f7f8 f9ef 	bl	80005a8 <__aeabi_dmul>
 80081ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081ce:	1124      	asrs	r4, r4, #4
 80081d0:	2300      	movs	r3, #0
 80081d2:	2602      	movs	r6, #2
 80081d4:	2c00      	cmp	r4, #0
 80081d6:	f040 808f 	bne.w	80082f8 <_dtoa_r+0x4c0>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1d3      	bne.n	8008186 <_dtoa_r+0x34e>
 80081de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80081e0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8094 	beq.w	8008312 <_dtoa_r+0x4da>
 80081ea:	4b75      	ldr	r3, [pc, #468]	@ (80083c0 <_dtoa_r+0x588>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	4620      	mov	r0, r4
 80081f0:	4629      	mov	r1, r5
 80081f2:	f7f8 fc4b 	bl	8000a8c <__aeabi_dcmplt>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	f000 808b 	beq.w	8008312 <_dtoa_r+0x4da>
 80081fc:	9b03      	ldr	r3, [sp, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 8087 	beq.w	8008312 <_dtoa_r+0x4da>
 8008204:	f1bb 0f00 	cmp.w	fp, #0
 8008208:	dd34      	ble.n	8008274 <_dtoa_r+0x43c>
 800820a:	4620      	mov	r0, r4
 800820c:	4b6d      	ldr	r3, [pc, #436]	@ (80083c4 <_dtoa_r+0x58c>)
 800820e:	2200      	movs	r2, #0
 8008210:	4629      	mov	r1, r5
 8008212:	f7f8 f9c9 	bl	80005a8 <__aeabi_dmul>
 8008216:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800821a:	f107 38ff 	add.w	r8, r7, #4294967295
 800821e:	3601      	adds	r6, #1
 8008220:	465c      	mov	r4, fp
 8008222:	4630      	mov	r0, r6
 8008224:	f7f8 f956 	bl	80004d4 <__aeabi_i2d>
 8008228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800822c:	f7f8 f9bc 	bl	80005a8 <__aeabi_dmul>
 8008230:	4b65      	ldr	r3, [pc, #404]	@ (80083c8 <_dtoa_r+0x590>)
 8008232:	2200      	movs	r2, #0
 8008234:	f7f8 f802 	bl	800023c <__adddf3>
 8008238:	4605      	mov	r5, r0
 800823a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800823e:	2c00      	cmp	r4, #0
 8008240:	d16a      	bne.n	8008318 <_dtoa_r+0x4e0>
 8008242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008246:	4b61      	ldr	r3, [pc, #388]	@ (80083cc <_dtoa_r+0x594>)
 8008248:	2200      	movs	r2, #0
 800824a:	f7f7 fff5 	bl	8000238 <__aeabi_dsub>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008256:	462a      	mov	r2, r5
 8008258:	4633      	mov	r3, r6
 800825a:	f7f8 fc35 	bl	8000ac8 <__aeabi_dcmpgt>
 800825e:	2800      	cmp	r0, #0
 8008260:	f040 8298 	bne.w	8008794 <_dtoa_r+0x95c>
 8008264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008268:	462a      	mov	r2, r5
 800826a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800826e:	f7f8 fc0d 	bl	8000a8c <__aeabi_dcmplt>
 8008272:	bb38      	cbnz	r0, 80082c4 <_dtoa_r+0x48c>
 8008274:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008278:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800827c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800827e:	2b00      	cmp	r3, #0
 8008280:	f2c0 8157 	blt.w	8008532 <_dtoa_r+0x6fa>
 8008284:	2f0e      	cmp	r7, #14
 8008286:	f300 8154 	bgt.w	8008532 <_dtoa_r+0x6fa>
 800828a:	4b4b      	ldr	r3, [pc, #300]	@ (80083b8 <_dtoa_r+0x580>)
 800828c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008290:	ed93 7b00 	vldr	d7, [r3]
 8008294:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008296:	2b00      	cmp	r3, #0
 8008298:	ed8d 7b00 	vstr	d7, [sp]
 800829c:	f280 80e5 	bge.w	800846a <_dtoa_r+0x632>
 80082a0:	9b03      	ldr	r3, [sp, #12]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f300 80e1 	bgt.w	800846a <_dtoa_r+0x632>
 80082a8:	d10c      	bne.n	80082c4 <_dtoa_r+0x48c>
 80082aa:	4b48      	ldr	r3, [pc, #288]	@ (80083cc <_dtoa_r+0x594>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	ec51 0b17 	vmov	r0, r1, d7
 80082b2:	f7f8 f979 	bl	80005a8 <__aeabi_dmul>
 80082b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082ba:	f7f8 fbfb 	bl	8000ab4 <__aeabi_dcmpge>
 80082be:	2800      	cmp	r0, #0
 80082c0:	f000 8266 	beq.w	8008790 <_dtoa_r+0x958>
 80082c4:	2400      	movs	r4, #0
 80082c6:	4625      	mov	r5, r4
 80082c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082ca:	4656      	mov	r6, sl
 80082cc:	ea6f 0803 	mvn.w	r8, r3
 80082d0:	2700      	movs	r7, #0
 80082d2:	4621      	mov	r1, r4
 80082d4:	4648      	mov	r0, r9
 80082d6:	f000 fcbf 	bl	8008c58 <_Bfree>
 80082da:	2d00      	cmp	r5, #0
 80082dc:	f000 80bd 	beq.w	800845a <_dtoa_r+0x622>
 80082e0:	b12f      	cbz	r7, 80082ee <_dtoa_r+0x4b6>
 80082e2:	42af      	cmp	r7, r5
 80082e4:	d003      	beq.n	80082ee <_dtoa_r+0x4b6>
 80082e6:	4639      	mov	r1, r7
 80082e8:	4648      	mov	r0, r9
 80082ea:	f000 fcb5 	bl	8008c58 <_Bfree>
 80082ee:	4629      	mov	r1, r5
 80082f0:	4648      	mov	r0, r9
 80082f2:	f000 fcb1 	bl	8008c58 <_Bfree>
 80082f6:	e0b0      	b.n	800845a <_dtoa_r+0x622>
 80082f8:	07e2      	lsls	r2, r4, #31
 80082fa:	d505      	bpl.n	8008308 <_dtoa_r+0x4d0>
 80082fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008300:	f7f8 f952 	bl	80005a8 <__aeabi_dmul>
 8008304:	3601      	adds	r6, #1
 8008306:	2301      	movs	r3, #1
 8008308:	1064      	asrs	r4, r4, #1
 800830a:	3508      	adds	r5, #8
 800830c:	e762      	b.n	80081d4 <_dtoa_r+0x39c>
 800830e:	2602      	movs	r6, #2
 8008310:	e765      	b.n	80081de <_dtoa_r+0x3a6>
 8008312:	9c03      	ldr	r4, [sp, #12]
 8008314:	46b8      	mov	r8, r7
 8008316:	e784      	b.n	8008222 <_dtoa_r+0x3ea>
 8008318:	4b27      	ldr	r3, [pc, #156]	@ (80083b8 <_dtoa_r+0x580>)
 800831a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800831c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008320:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008324:	4454      	add	r4, sl
 8008326:	2900      	cmp	r1, #0
 8008328:	d054      	beq.n	80083d4 <_dtoa_r+0x59c>
 800832a:	4929      	ldr	r1, [pc, #164]	@ (80083d0 <_dtoa_r+0x598>)
 800832c:	2000      	movs	r0, #0
 800832e:	f7f8 fa65 	bl	80007fc <__aeabi_ddiv>
 8008332:	4633      	mov	r3, r6
 8008334:	462a      	mov	r2, r5
 8008336:	f7f7 ff7f 	bl	8000238 <__aeabi_dsub>
 800833a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800833e:	4656      	mov	r6, sl
 8008340:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008344:	f7f8 fbe0 	bl	8000b08 <__aeabi_d2iz>
 8008348:	4605      	mov	r5, r0
 800834a:	f7f8 f8c3 	bl	80004d4 <__aeabi_i2d>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008356:	f7f7 ff6f 	bl	8000238 <__aeabi_dsub>
 800835a:	3530      	adds	r5, #48	@ 0x30
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008364:	f806 5b01 	strb.w	r5, [r6], #1
 8008368:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800836c:	f7f8 fb8e 	bl	8000a8c <__aeabi_dcmplt>
 8008370:	2800      	cmp	r0, #0
 8008372:	d172      	bne.n	800845a <_dtoa_r+0x622>
 8008374:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008378:	4911      	ldr	r1, [pc, #68]	@ (80083c0 <_dtoa_r+0x588>)
 800837a:	2000      	movs	r0, #0
 800837c:	f7f7 ff5c 	bl	8000238 <__aeabi_dsub>
 8008380:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008384:	f7f8 fb82 	bl	8000a8c <__aeabi_dcmplt>
 8008388:	2800      	cmp	r0, #0
 800838a:	f040 80b4 	bne.w	80084f6 <_dtoa_r+0x6be>
 800838e:	42a6      	cmp	r6, r4
 8008390:	f43f af70 	beq.w	8008274 <_dtoa_r+0x43c>
 8008394:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008398:	4b0a      	ldr	r3, [pc, #40]	@ (80083c4 <_dtoa_r+0x58c>)
 800839a:	2200      	movs	r2, #0
 800839c:	f7f8 f904 	bl	80005a8 <__aeabi_dmul>
 80083a0:	4b08      	ldr	r3, [pc, #32]	@ (80083c4 <_dtoa_r+0x58c>)
 80083a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80083a6:	2200      	movs	r2, #0
 80083a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083ac:	f7f8 f8fc 	bl	80005a8 <__aeabi_dmul>
 80083b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083b4:	e7c4      	b.n	8008340 <_dtoa_r+0x508>
 80083b6:	bf00      	nop
 80083b8:	08009cd0 	.word	0x08009cd0
 80083bc:	08009ca8 	.word	0x08009ca8
 80083c0:	3ff00000 	.word	0x3ff00000
 80083c4:	40240000 	.word	0x40240000
 80083c8:	401c0000 	.word	0x401c0000
 80083cc:	40140000 	.word	0x40140000
 80083d0:	3fe00000 	.word	0x3fe00000
 80083d4:	4631      	mov	r1, r6
 80083d6:	4628      	mov	r0, r5
 80083d8:	f7f8 f8e6 	bl	80005a8 <__aeabi_dmul>
 80083dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80083e0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80083e2:	4656      	mov	r6, sl
 80083e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083e8:	f7f8 fb8e 	bl	8000b08 <__aeabi_d2iz>
 80083ec:	4605      	mov	r5, r0
 80083ee:	f7f8 f871 	bl	80004d4 <__aeabi_i2d>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083fa:	f7f7 ff1d 	bl	8000238 <__aeabi_dsub>
 80083fe:	3530      	adds	r5, #48	@ 0x30
 8008400:	f806 5b01 	strb.w	r5, [r6], #1
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	42a6      	cmp	r6, r4
 800840a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800840e:	f04f 0200 	mov.w	r2, #0
 8008412:	d124      	bne.n	800845e <_dtoa_r+0x626>
 8008414:	4baf      	ldr	r3, [pc, #700]	@ (80086d4 <_dtoa_r+0x89c>)
 8008416:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800841a:	f7f7 ff0f 	bl	800023c <__adddf3>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008426:	f7f8 fb4f 	bl	8000ac8 <__aeabi_dcmpgt>
 800842a:	2800      	cmp	r0, #0
 800842c:	d163      	bne.n	80084f6 <_dtoa_r+0x6be>
 800842e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008432:	49a8      	ldr	r1, [pc, #672]	@ (80086d4 <_dtoa_r+0x89c>)
 8008434:	2000      	movs	r0, #0
 8008436:	f7f7 feff 	bl	8000238 <__aeabi_dsub>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008442:	f7f8 fb23 	bl	8000a8c <__aeabi_dcmplt>
 8008446:	2800      	cmp	r0, #0
 8008448:	f43f af14 	beq.w	8008274 <_dtoa_r+0x43c>
 800844c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800844e:	1e73      	subs	r3, r6, #1
 8008450:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008452:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008456:	2b30      	cmp	r3, #48	@ 0x30
 8008458:	d0f8      	beq.n	800844c <_dtoa_r+0x614>
 800845a:	4647      	mov	r7, r8
 800845c:	e03b      	b.n	80084d6 <_dtoa_r+0x69e>
 800845e:	4b9e      	ldr	r3, [pc, #632]	@ (80086d8 <_dtoa_r+0x8a0>)
 8008460:	f7f8 f8a2 	bl	80005a8 <__aeabi_dmul>
 8008464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008468:	e7bc      	b.n	80083e4 <_dtoa_r+0x5ac>
 800846a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800846e:	4656      	mov	r6, sl
 8008470:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008474:	4620      	mov	r0, r4
 8008476:	4629      	mov	r1, r5
 8008478:	f7f8 f9c0 	bl	80007fc <__aeabi_ddiv>
 800847c:	f7f8 fb44 	bl	8000b08 <__aeabi_d2iz>
 8008480:	4680      	mov	r8, r0
 8008482:	f7f8 f827 	bl	80004d4 <__aeabi_i2d>
 8008486:	e9dd 2300 	ldrd	r2, r3, [sp]
 800848a:	f7f8 f88d 	bl	80005a8 <__aeabi_dmul>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	4620      	mov	r0, r4
 8008494:	4629      	mov	r1, r5
 8008496:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800849a:	f7f7 fecd 	bl	8000238 <__aeabi_dsub>
 800849e:	f806 4b01 	strb.w	r4, [r6], #1
 80084a2:	9d03      	ldr	r5, [sp, #12]
 80084a4:	eba6 040a 	sub.w	r4, r6, sl
 80084a8:	42a5      	cmp	r5, r4
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	d133      	bne.n	8008518 <_dtoa_r+0x6e0>
 80084b0:	f7f7 fec4 	bl	800023c <__adddf3>
 80084b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084b8:	4604      	mov	r4, r0
 80084ba:	460d      	mov	r5, r1
 80084bc:	f7f8 fb04 	bl	8000ac8 <__aeabi_dcmpgt>
 80084c0:	b9c0      	cbnz	r0, 80084f4 <_dtoa_r+0x6bc>
 80084c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084c6:	4620      	mov	r0, r4
 80084c8:	4629      	mov	r1, r5
 80084ca:	f7f8 fad5 	bl	8000a78 <__aeabi_dcmpeq>
 80084ce:	b110      	cbz	r0, 80084d6 <_dtoa_r+0x69e>
 80084d0:	f018 0f01 	tst.w	r8, #1
 80084d4:	d10e      	bne.n	80084f4 <_dtoa_r+0x6bc>
 80084d6:	9902      	ldr	r1, [sp, #8]
 80084d8:	4648      	mov	r0, r9
 80084da:	f000 fbbd 	bl	8008c58 <_Bfree>
 80084de:	2300      	movs	r3, #0
 80084e0:	7033      	strb	r3, [r6, #0]
 80084e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80084e4:	3701      	adds	r7, #1
 80084e6:	601f      	str	r7, [r3, #0]
 80084e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 824b 	beq.w	8008986 <_dtoa_r+0xb4e>
 80084f0:	601e      	str	r6, [r3, #0]
 80084f2:	e248      	b.n	8008986 <_dtoa_r+0xb4e>
 80084f4:	46b8      	mov	r8, r7
 80084f6:	4633      	mov	r3, r6
 80084f8:	461e      	mov	r6, r3
 80084fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084fe:	2a39      	cmp	r2, #57	@ 0x39
 8008500:	d106      	bne.n	8008510 <_dtoa_r+0x6d8>
 8008502:	459a      	cmp	sl, r3
 8008504:	d1f8      	bne.n	80084f8 <_dtoa_r+0x6c0>
 8008506:	2230      	movs	r2, #48	@ 0x30
 8008508:	f108 0801 	add.w	r8, r8, #1
 800850c:	f88a 2000 	strb.w	r2, [sl]
 8008510:	781a      	ldrb	r2, [r3, #0]
 8008512:	3201      	adds	r2, #1
 8008514:	701a      	strb	r2, [r3, #0]
 8008516:	e7a0      	b.n	800845a <_dtoa_r+0x622>
 8008518:	4b6f      	ldr	r3, [pc, #444]	@ (80086d8 <_dtoa_r+0x8a0>)
 800851a:	2200      	movs	r2, #0
 800851c:	f7f8 f844 	bl	80005a8 <__aeabi_dmul>
 8008520:	2200      	movs	r2, #0
 8008522:	2300      	movs	r3, #0
 8008524:	4604      	mov	r4, r0
 8008526:	460d      	mov	r5, r1
 8008528:	f7f8 faa6 	bl	8000a78 <__aeabi_dcmpeq>
 800852c:	2800      	cmp	r0, #0
 800852e:	d09f      	beq.n	8008470 <_dtoa_r+0x638>
 8008530:	e7d1      	b.n	80084d6 <_dtoa_r+0x69e>
 8008532:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008534:	2a00      	cmp	r2, #0
 8008536:	f000 80ea 	beq.w	800870e <_dtoa_r+0x8d6>
 800853a:	9a07      	ldr	r2, [sp, #28]
 800853c:	2a01      	cmp	r2, #1
 800853e:	f300 80cd 	bgt.w	80086dc <_dtoa_r+0x8a4>
 8008542:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008544:	2a00      	cmp	r2, #0
 8008546:	f000 80c1 	beq.w	80086cc <_dtoa_r+0x894>
 800854a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800854e:	9c08      	ldr	r4, [sp, #32]
 8008550:	9e00      	ldr	r6, [sp, #0]
 8008552:	9a00      	ldr	r2, [sp, #0]
 8008554:	441a      	add	r2, r3
 8008556:	9200      	str	r2, [sp, #0]
 8008558:	9a06      	ldr	r2, [sp, #24]
 800855a:	2101      	movs	r1, #1
 800855c:	441a      	add	r2, r3
 800855e:	4648      	mov	r0, r9
 8008560:	9206      	str	r2, [sp, #24]
 8008562:	f000 fc2d 	bl	8008dc0 <__i2b>
 8008566:	4605      	mov	r5, r0
 8008568:	b166      	cbz	r6, 8008584 <_dtoa_r+0x74c>
 800856a:	9b06      	ldr	r3, [sp, #24]
 800856c:	2b00      	cmp	r3, #0
 800856e:	dd09      	ble.n	8008584 <_dtoa_r+0x74c>
 8008570:	42b3      	cmp	r3, r6
 8008572:	9a00      	ldr	r2, [sp, #0]
 8008574:	bfa8      	it	ge
 8008576:	4633      	movge	r3, r6
 8008578:	1ad2      	subs	r2, r2, r3
 800857a:	9200      	str	r2, [sp, #0]
 800857c:	9a06      	ldr	r2, [sp, #24]
 800857e:	1af6      	subs	r6, r6, r3
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	9306      	str	r3, [sp, #24]
 8008584:	9b08      	ldr	r3, [sp, #32]
 8008586:	b30b      	cbz	r3, 80085cc <_dtoa_r+0x794>
 8008588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 80c6 	beq.w	800871c <_dtoa_r+0x8e4>
 8008590:	2c00      	cmp	r4, #0
 8008592:	f000 80c0 	beq.w	8008716 <_dtoa_r+0x8de>
 8008596:	4629      	mov	r1, r5
 8008598:	4622      	mov	r2, r4
 800859a:	4648      	mov	r0, r9
 800859c:	f000 fcc8 	bl	8008f30 <__pow5mult>
 80085a0:	9a02      	ldr	r2, [sp, #8]
 80085a2:	4601      	mov	r1, r0
 80085a4:	4605      	mov	r5, r0
 80085a6:	4648      	mov	r0, r9
 80085a8:	f000 fc20 	bl	8008dec <__multiply>
 80085ac:	9902      	ldr	r1, [sp, #8]
 80085ae:	4680      	mov	r8, r0
 80085b0:	4648      	mov	r0, r9
 80085b2:	f000 fb51 	bl	8008c58 <_Bfree>
 80085b6:	9b08      	ldr	r3, [sp, #32]
 80085b8:	1b1b      	subs	r3, r3, r4
 80085ba:	9308      	str	r3, [sp, #32]
 80085bc:	f000 80b1 	beq.w	8008722 <_dtoa_r+0x8ea>
 80085c0:	9a08      	ldr	r2, [sp, #32]
 80085c2:	4641      	mov	r1, r8
 80085c4:	4648      	mov	r0, r9
 80085c6:	f000 fcb3 	bl	8008f30 <__pow5mult>
 80085ca:	9002      	str	r0, [sp, #8]
 80085cc:	2101      	movs	r1, #1
 80085ce:	4648      	mov	r0, r9
 80085d0:	f000 fbf6 	bl	8008dc0 <__i2b>
 80085d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085d6:	4604      	mov	r4, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 81d8 	beq.w	800898e <_dtoa_r+0xb56>
 80085de:	461a      	mov	r2, r3
 80085e0:	4601      	mov	r1, r0
 80085e2:	4648      	mov	r0, r9
 80085e4:	f000 fca4 	bl	8008f30 <__pow5mult>
 80085e8:	9b07      	ldr	r3, [sp, #28]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	4604      	mov	r4, r0
 80085ee:	f300 809f 	bgt.w	8008730 <_dtoa_r+0x8f8>
 80085f2:	9b04      	ldr	r3, [sp, #16]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f040 8097 	bne.w	8008728 <_dtoa_r+0x8f0>
 80085fa:	9b05      	ldr	r3, [sp, #20]
 80085fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008600:	2b00      	cmp	r3, #0
 8008602:	f040 8093 	bne.w	800872c <_dtoa_r+0x8f4>
 8008606:	9b05      	ldr	r3, [sp, #20]
 8008608:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800860c:	0d1b      	lsrs	r3, r3, #20
 800860e:	051b      	lsls	r3, r3, #20
 8008610:	b133      	cbz	r3, 8008620 <_dtoa_r+0x7e8>
 8008612:	9b00      	ldr	r3, [sp, #0]
 8008614:	3301      	adds	r3, #1
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	9b06      	ldr	r3, [sp, #24]
 800861a:	3301      	adds	r3, #1
 800861c:	9306      	str	r3, [sp, #24]
 800861e:	2301      	movs	r3, #1
 8008620:	9308      	str	r3, [sp, #32]
 8008622:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 81b8 	beq.w	800899a <_dtoa_r+0xb62>
 800862a:	6923      	ldr	r3, [r4, #16]
 800862c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008630:	6918      	ldr	r0, [r3, #16]
 8008632:	f000 fb79 	bl	8008d28 <__hi0bits>
 8008636:	f1c0 0020 	rsb	r0, r0, #32
 800863a:	9b06      	ldr	r3, [sp, #24]
 800863c:	4418      	add	r0, r3
 800863e:	f010 001f 	ands.w	r0, r0, #31
 8008642:	f000 8082 	beq.w	800874a <_dtoa_r+0x912>
 8008646:	f1c0 0320 	rsb	r3, r0, #32
 800864a:	2b04      	cmp	r3, #4
 800864c:	dd73      	ble.n	8008736 <_dtoa_r+0x8fe>
 800864e:	9b00      	ldr	r3, [sp, #0]
 8008650:	f1c0 001c 	rsb	r0, r0, #28
 8008654:	4403      	add	r3, r0
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	9b06      	ldr	r3, [sp, #24]
 800865a:	4403      	add	r3, r0
 800865c:	4406      	add	r6, r0
 800865e:	9306      	str	r3, [sp, #24]
 8008660:	9b00      	ldr	r3, [sp, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	dd05      	ble.n	8008672 <_dtoa_r+0x83a>
 8008666:	9902      	ldr	r1, [sp, #8]
 8008668:	461a      	mov	r2, r3
 800866a:	4648      	mov	r0, r9
 800866c:	f000 fcba 	bl	8008fe4 <__lshift>
 8008670:	9002      	str	r0, [sp, #8]
 8008672:	9b06      	ldr	r3, [sp, #24]
 8008674:	2b00      	cmp	r3, #0
 8008676:	dd05      	ble.n	8008684 <_dtoa_r+0x84c>
 8008678:	4621      	mov	r1, r4
 800867a:	461a      	mov	r2, r3
 800867c:	4648      	mov	r0, r9
 800867e:	f000 fcb1 	bl	8008fe4 <__lshift>
 8008682:	4604      	mov	r4, r0
 8008684:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008686:	2b00      	cmp	r3, #0
 8008688:	d061      	beq.n	800874e <_dtoa_r+0x916>
 800868a:	9802      	ldr	r0, [sp, #8]
 800868c:	4621      	mov	r1, r4
 800868e:	f000 fd15 	bl	80090bc <__mcmp>
 8008692:	2800      	cmp	r0, #0
 8008694:	da5b      	bge.n	800874e <_dtoa_r+0x916>
 8008696:	2300      	movs	r3, #0
 8008698:	9902      	ldr	r1, [sp, #8]
 800869a:	220a      	movs	r2, #10
 800869c:	4648      	mov	r0, r9
 800869e:	f000 fafd 	bl	8008c9c <__multadd>
 80086a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a4:	9002      	str	r0, [sp, #8]
 80086a6:	f107 38ff 	add.w	r8, r7, #4294967295
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f000 8177 	beq.w	800899e <_dtoa_r+0xb66>
 80086b0:	4629      	mov	r1, r5
 80086b2:	2300      	movs	r3, #0
 80086b4:	220a      	movs	r2, #10
 80086b6:	4648      	mov	r0, r9
 80086b8:	f000 faf0 	bl	8008c9c <__multadd>
 80086bc:	f1bb 0f00 	cmp.w	fp, #0
 80086c0:	4605      	mov	r5, r0
 80086c2:	dc6f      	bgt.n	80087a4 <_dtoa_r+0x96c>
 80086c4:	9b07      	ldr	r3, [sp, #28]
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	dc49      	bgt.n	800875e <_dtoa_r+0x926>
 80086ca:	e06b      	b.n	80087a4 <_dtoa_r+0x96c>
 80086cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80086ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80086d2:	e73c      	b.n	800854e <_dtoa_r+0x716>
 80086d4:	3fe00000 	.word	0x3fe00000
 80086d8:	40240000 	.word	0x40240000
 80086dc:	9b03      	ldr	r3, [sp, #12]
 80086de:	1e5c      	subs	r4, r3, #1
 80086e0:	9b08      	ldr	r3, [sp, #32]
 80086e2:	42a3      	cmp	r3, r4
 80086e4:	db09      	blt.n	80086fa <_dtoa_r+0x8c2>
 80086e6:	1b1c      	subs	r4, r3, r4
 80086e8:	9b03      	ldr	r3, [sp, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f6bf af30 	bge.w	8008550 <_dtoa_r+0x718>
 80086f0:	9b00      	ldr	r3, [sp, #0]
 80086f2:	9a03      	ldr	r2, [sp, #12]
 80086f4:	1a9e      	subs	r6, r3, r2
 80086f6:	2300      	movs	r3, #0
 80086f8:	e72b      	b.n	8008552 <_dtoa_r+0x71a>
 80086fa:	9b08      	ldr	r3, [sp, #32]
 80086fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80086fe:	9408      	str	r4, [sp, #32]
 8008700:	1ae3      	subs	r3, r4, r3
 8008702:	441a      	add	r2, r3
 8008704:	9e00      	ldr	r6, [sp, #0]
 8008706:	9b03      	ldr	r3, [sp, #12]
 8008708:	920d      	str	r2, [sp, #52]	@ 0x34
 800870a:	2400      	movs	r4, #0
 800870c:	e721      	b.n	8008552 <_dtoa_r+0x71a>
 800870e:	9c08      	ldr	r4, [sp, #32]
 8008710:	9e00      	ldr	r6, [sp, #0]
 8008712:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008714:	e728      	b.n	8008568 <_dtoa_r+0x730>
 8008716:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800871a:	e751      	b.n	80085c0 <_dtoa_r+0x788>
 800871c:	9a08      	ldr	r2, [sp, #32]
 800871e:	9902      	ldr	r1, [sp, #8]
 8008720:	e750      	b.n	80085c4 <_dtoa_r+0x78c>
 8008722:	f8cd 8008 	str.w	r8, [sp, #8]
 8008726:	e751      	b.n	80085cc <_dtoa_r+0x794>
 8008728:	2300      	movs	r3, #0
 800872a:	e779      	b.n	8008620 <_dtoa_r+0x7e8>
 800872c:	9b04      	ldr	r3, [sp, #16]
 800872e:	e777      	b.n	8008620 <_dtoa_r+0x7e8>
 8008730:	2300      	movs	r3, #0
 8008732:	9308      	str	r3, [sp, #32]
 8008734:	e779      	b.n	800862a <_dtoa_r+0x7f2>
 8008736:	d093      	beq.n	8008660 <_dtoa_r+0x828>
 8008738:	9a00      	ldr	r2, [sp, #0]
 800873a:	331c      	adds	r3, #28
 800873c:	441a      	add	r2, r3
 800873e:	9200      	str	r2, [sp, #0]
 8008740:	9a06      	ldr	r2, [sp, #24]
 8008742:	441a      	add	r2, r3
 8008744:	441e      	add	r6, r3
 8008746:	9206      	str	r2, [sp, #24]
 8008748:	e78a      	b.n	8008660 <_dtoa_r+0x828>
 800874a:	4603      	mov	r3, r0
 800874c:	e7f4      	b.n	8008738 <_dtoa_r+0x900>
 800874e:	9b03      	ldr	r3, [sp, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	46b8      	mov	r8, r7
 8008754:	dc20      	bgt.n	8008798 <_dtoa_r+0x960>
 8008756:	469b      	mov	fp, r3
 8008758:	9b07      	ldr	r3, [sp, #28]
 800875a:	2b02      	cmp	r3, #2
 800875c:	dd1e      	ble.n	800879c <_dtoa_r+0x964>
 800875e:	f1bb 0f00 	cmp.w	fp, #0
 8008762:	f47f adb1 	bne.w	80082c8 <_dtoa_r+0x490>
 8008766:	4621      	mov	r1, r4
 8008768:	465b      	mov	r3, fp
 800876a:	2205      	movs	r2, #5
 800876c:	4648      	mov	r0, r9
 800876e:	f000 fa95 	bl	8008c9c <__multadd>
 8008772:	4601      	mov	r1, r0
 8008774:	4604      	mov	r4, r0
 8008776:	9802      	ldr	r0, [sp, #8]
 8008778:	f000 fca0 	bl	80090bc <__mcmp>
 800877c:	2800      	cmp	r0, #0
 800877e:	f77f ada3 	ble.w	80082c8 <_dtoa_r+0x490>
 8008782:	4656      	mov	r6, sl
 8008784:	2331      	movs	r3, #49	@ 0x31
 8008786:	f806 3b01 	strb.w	r3, [r6], #1
 800878a:	f108 0801 	add.w	r8, r8, #1
 800878e:	e59f      	b.n	80082d0 <_dtoa_r+0x498>
 8008790:	9c03      	ldr	r4, [sp, #12]
 8008792:	46b8      	mov	r8, r7
 8008794:	4625      	mov	r5, r4
 8008796:	e7f4      	b.n	8008782 <_dtoa_r+0x94a>
 8008798:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800879c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f000 8101 	beq.w	80089a6 <_dtoa_r+0xb6e>
 80087a4:	2e00      	cmp	r6, #0
 80087a6:	dd05      	ble.n	80087b4 <_dtoa_r+0x97c>
 80087a8:	4629      	mov	r1, r5
 80087aa:	4632      	mov	r2, r6
 80087ac:	4648      	mov	r0, r9
 80087ae:	f000 fc19 	bl	8008fe4 <__lshift>
 80087b2:	4605      	mov	r5, r0
 80087b4:	9b08      	ldr	r3, [sp, #32]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d05c      	beq.n	8008874 <_dtoa_r+0xa3c>
 80087ba:	6869      	ldr	r1, [r5, #4]
 80087bc:	4648      	mov	r0, r9
 80087be:	f000 fa0b 	bl	8008bd8 <_Balloc>
 80087c2:	4606      	mov	r6, r0
 80087c4:	b928      	cbnz	r0, 80087d2 <_dtoa_r+0x99a>
 80087c6:	4b82      	ldr	r3, [pc, #520]	@ (80089d0 <_dtoa_r+0xb98>)
 80087c8:	4602      	mov	r2, r0
 80087ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80087ce:	f7ff bb4a 	b.w	8007e66 <_dtoa_r+0x2e>
 80087d2:	692a      	ldr	r2, [r5, #16]
 80087d4:	3202      	adds	r2, #2
 80087d6:	0092      	lsls	r2, r2, #2
 80087d8:	f105 010c 	add.w	r1, r5, #12
 80087dc:	300c      	adds	r0, #12
 80087de:	f000 fff7 	bl	80097d0 <memcpy>
 80087e2:	2201      	movs	r2, #1
 80087e4:	4631      	mov	r1, r6
 80087e6:	4648      	mov	r0, r9
 80087e8:	f000 fbfc 	bl	8008fe4 <__lshift>
 80087ec:	f10a 0301 	add.w	r3, sl, #1
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	eb0a 030b 	add.w	r3, sl, fp
 80087f6:	9308      	str	r3, [sp, #32]
 80087f8:	9b04      	ldr	r3, [sp, #16]
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	462f      	mov	r7, r5
 8008800:	9306      	str	r3, [sp, #24]
 8008802:	4605      	mov	r5, r0
 8008804:	9b00      	ldr	r3, [sp, #0]
 8008806:	9802      	ldr	r0, [sp, #8]
 8008808:	4621      	mov	r1, r4
 800880a:	f103 3bff 	add.w	fp, r3, #4294967295
 800880e:	f7ff fa8a 	bl	8007d26 <quorem>
 8008812:	4603      	mov	r3, r0
 8008814:	3330      	adds	r3, #48	@ 0x30
 8008816:	9003      	str	r0, [sp, #12]
 8008818:	4639      	mov	r1, r7
 800881a:	9802      	ldr	r0, [sp, #8]
 800881c:	9309      	str	r3, [sp, #36]	@ 0x24
 800881e:	f000 fc4d 	bl	80090bc <__mcmp>
 8008822:	462a      	mov	r2, r5
 8008824:	9004      	str	r0, [sp, #16]
 8008826:	4621      	mov	r1, r4
 8008828:	4648      	mov	r0, r9
 800882a:	f000 fc63 	bl	80090f4 <__mdiff>
 800882e:	68c2      	ldr	r2, [r0, #12]
 8008830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008832:	4606      	mov	r6, r0
 8008834:	bb02      	cbnz	r2, 8008878 <_dtoa_r+0xa40>
 8008836:	4601      	mov	r1, r0
 8008838:	9802      	ldr	r0, [sp, #8]
 800883a:	f000 fc3f 	bl	80090bc <__mcmp>
 800883e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008840:	4602      	mov	r2, r0
 8008842:	4631      	mov	r1, r6
 8008844:	4648      	mov	r0, r9
 8008846:	920c      	str	r2, [sp, #48]	@ 0x30
 8008848:	9309      	str	r3, [sp, #36]	@ 0x24
 800884a:	f000 fa05 	bl	8008c58 <_Bfree>
 800884e:	9b07      	ldr	r3, [sp, #28]
 8008850:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008852:	9e00      	ldr	r6, [sp, #0]
 8008854:	ea42 0103 	orr.w	r1, r2, r3
 8008858:	9b06      	ldr	r3, [sp, #24]
 800885a:	4319      	orrs	r1, r3
 800885c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800885e:	d10d      	bne.n	800887c <_dtoa_r+0xa44>
 8008860:	2b39      	cmp	r3, #57	@ 0x39
 8008862:	d027      	beq.n	80088b4 <_dtoa_r+0xa7c>
 8008864:	9a04      	ldr	r2, [sp, #16]
 8008866:	2a00      	cmp	r2, #0
 8008868:	dd01      	ble.n	800886e <_dtoa_r+0xa36>
 800886a:	9b03      	ldr	r3, [sp, #12]
 800886c:	3331      	adds	r3, #49	@ 0x31
 800886e:	f88b 3000 	strb.w	r3, [fp]
 8008872:	e52e      	b.n	80082d2 <_dtoa_r+0x49a>
 8008874:	4628      	mov	r0, r5
 8008876:	e7b9      	b.n	80087ec <_dtoa_r+0x9b4>
 8008878:	2201      	movs	r2, #1
 800887a:	e7e2      	b.n	8008842 <_dtoa_r+0xa0a>
 800887c:	9904      	ldr	r1, [sp, #16]
 800887e:	2900      	cmp	r1, #0
 8008880:	db04      	blt.n	800888c <_dtoa_r+0xa54>
 8008882:	9807      	ldr	r0, [sp, #28]
 8008884:	4301      	orrs	r1, r0
 8008886:	9806      	ldr	r0, [sp, #24]
 8008888:	4301      	orrs	r1, r0
 800888a:	d120      	bne.n	80088ce <_dtoa_r+0xa96>
 800888c:	2a00      	cmp	r2, #0
 800888e:	ddee      	ble.n	800886e <_dtoa_r+0xa36>
 8008890:	9902      	ldr	r1, [sp, #8]
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	2201      	movs	r2, #1
 8008896:	4648      	mov	r0, r9
 8008898:	f000 fba4 	bl	8008fe4 <__lshift>
 800889c:	4621      	mov	r1, r4
 800889e:	9002      	str	r0, [sp, #8]
 80088a0:	f000 fc0c 	bl	80090bc <__mcmp>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	9b00      	ldr	r3, [sp, #0]
 80088a8:	dc02      	bgt.n	80088b0 <_dtoa_r+0xa78>
 80088aa:	d1e0      	bne.n	800886e <_dtoa_r+0xa36>
 80088ac:	07da      	lsls	r2, r3, #31
 80088ae:	d5de      	bpl.n	800886e <_dtoa_r+0xa36>
 80088b0:	2b39      	cmp	r3, #57	@ 0x39
 80088b2:	d1da      	bne.n	800886a <_dtoa_r+0xa32>
 80088b4:	2339      	movs	r3, #57	@ 0x39
 80088b6:	f88b 3000 	strb.w	r3, [fp]
 80088ba:	4633      	mov	r3, r6
 80088bc:	461e      	mov	r6, r3
 80088be:	3b01      	subs	r3, #1
 80088c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80088c4:	2a39      	cmp	r2, #57	@ 0x39
 80088c6:	d04e      	beq.n	8008966 <_dtoa_r+0xb2e>
 80088c8:	3201      	adds	r2, #1
 80088ca:	701a      	strb	r2, [r3, #0]
 80088cc:	e501      	b.n	80082d2 <_dtoa_r+0x49a>
 80088ce:	2a00      	cmp	r2, #0
 80088d0:	dd03      	ble.n	80088da <_dtoa_r+0xaa2>
 80088d2:	2b39      	cmp	r3, #57	@ 0x39
 80088d4:	d0ee      	beq.n	80088b4 <_dtoa_r+0xa7c>
 80088d6:	3301      	adds	r3, #1
 80088d8:	e7c9      	b.n	800886e <_dtoa_r+0xa36>
 80088da:	9a00      	ldr	r2, [sp, #0]
 80088dc:	9908      	ldr	r1, [sp, #32]
 80088de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80088e2:	428a      	cmp	r2, r1
 80088e4:	d028      	beq.n	8008938 <_dtoa_r+0xb00>
 80088e6:	9902      	ldr	r1, [sp, #8]
 80088e8:	2300      	movs	r3, #0
 80088ea:	220a      	movs	r2, #10
 80088ec:	4648      	mov	r0, r9
 80088ee:	f000 f9d5 	bl	8008c9c <__multadd>
 80088f2:	42af      	cmp	r7, r5
 80088f4:	9002      	str	r0, [sp, #8]
 80088f6:	f04f 0300 	mov.w	r3, #0
 80088fa:	f04f 020a 	mov.w	r2, #10
 80088fe:	4639      	mov	r1, r7
 8008900:	4648      	mov	r0, r9
 8008902:	d107      	bne.n	8008914 <_dtoa_r+0xadc>
 8008904:	f000 f9ca 	bl	8008c9c <__multadd>
 8008908:	4607      	mov	r7, r0
 800890a:	4605      	mov	r5, r0
 800890c:	9b00      	ldr	r3, [sp, #0]
 800890e:	3301      	adds	r3, #1
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	e777      	b.n	8008804 <_dtoa_r+0x9cc>
 8008914:	f000 f9c2 	bl	8008c9c <__multadd>
 8008918:	4629      	mov	r1, r5
 800891a:	4607      	mov	r7, r0
 800891c:	2300      	movs	r3, #0
 800891e:	220a      	movs	r2, #10
 8008920:	4648      	mov	r0, r9
 8008922:	f000 f9bb 	bl	8008c9c <__multadd>
 8008926:	4605      	mov	r5, r0
 8008928:	e7f0      	b.n	800890c <_dtoa_r+0xad4>
 800892a:	f1bb 0f00 	cmp.w	fp, #0
 800892e:	bfcc      	ite	gt
 8008930:	465e      	movgt	r6, fp
 8008932:	2601      	movle	r6, #1
 8008934:	4456      	add	r6, sl
 8008936:	2700      	movs	r7, #0
 8008938:	9902      	ldr	r1, [sp, #8]
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	2201      	movs	r2, #1
 800893e:	4648      	mov	r0, r9
 8008940:	f000 fb50 	bl	8008fe4 <__lshift>
 8008944:	4621      	mov	r1, r4
 8008946:	9002      	str	r0, [sp, #8]
 8008948:	f000 fbb8 	bl	80090bc <__mcmp>
 800894c:	2800      	cmp	r0, #0
 800894e:	dcb4      	bgt.n	80088ba <_dtoa_r+0xa82>
 8008950:	d102      	bne.n	8008958 <_dtoa_r+0xb20>
 8008952:	9b00      	ldr	r3, [sp, #0]
 8008954:	07db      	lsls	r3, r3, #31
 8008956:	d4b0      	bmi.n	80088ba <_dtoa_r+0xa82>
 8008958:	4633      	mov	r3, r6
 800895a:	461e      	mov	r6, r3
 800895c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008960:	2a30      	cmp	r2, #48	@ 0x30
 8008962:	d0fa      	beq.n	800895a <_dtoa_r+0xb22>
 8008964:	e4b5      	b.n	80082d2 <_dtoa_r+0x49a>
 8008966:	459a      	cmp	sl, r3
 8008968:	d1a8      	bne.n	80088bc <_dtoa_r+0xa84>
 800896a:	2331      	movs	r3, #49	@ 0x31
 800896c:	f108 0801 	add.w	r8, r8, #1
 8008970:	f88a 3000 	strb.w	r3, [sl]
 8008974:	e4ad      	b.n	80082d2 <_dtoa_r+0x49a>
 8008976:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008978:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80089d4 <_dtoa_r+0xb9c>
 800897c:	b11b      	cbz	r3, 8008986 <_dtoa_r+0xb4e>
 800897e:	f10a 0308 	add.w	r3, sl, #8
 8008982:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008984:	6013      	str	r3, [r2, #0]
 8008986:	4650      	mov	r0, sl
 8008988:	b017      	add	sp, #92	@ 0x5c
 800898a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898e:	9b07      	ldr	r3, [sp, #28]
 8008990:	2b01      	cmp	r3, #1
 8008992:	f77f ae2e 	ble.w	80085f2 <_dtoa_r+0x7ba>
 8008996:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008998:	9308      	str	r3, [sp, #32]
 800899a:	2001      	movs	r0, #1
 800899c:	e64d      	b.n	800863a <_dtoa_r+0x802>
 800899e:	f1bb 0f00 	cmp.w	fp, #0
 80089a2:	f77f aed9 	ble.w	8008758 <_dtoa_r+0x920>
 80089a6:	4656      	mov	r6, sl
 80089a8:	9802      	ldr	r0, [sp, #8]
 80089aa:	4621      	mov	r1, r4
 80089ac:	f7ff f9bb 	bl	8007d26 <quorem>
 80089b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80089b4:	f806 3b01 	strb.w	r3, [r6], #1
 80089b8:	eba6 020a 	sub.w	r2, r6, sl
 80089bc:	4593      	cmp	fp, r2
 80089be:	ddb4      	ble.n	800892a <_dtoa_r+0xaf2>
 80089c0:	9902      	ldr	r1, [sp, #8]
 80089c2:	2300      	movs	r3, #0
 80089c4:	220a      	movs	r2, #10
 80089c6:	4648      	mov	r0, r9
 80089c8:	f000 f968 	bl	8008c9c <__multadd>
 80089cc:	9002      	str	r0, [sp, #8]
 80089ce:	e7eb      	b.n	80089a8 <_dtoa_r+0xb70>
 80089d0:	08009bd8 	.word	0x08009bd8
 80089d4:	08009b5c 	.word	0x08009b5c

080089d8 <_free_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4605      	mov	r5, r0
 80089dc:	2900      	cmp	r1, #0
 80089de:	d041      	beq.n	8008a64 <_free_r+0x8c>
 80089e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089e4:	1f0c      	subs	r4, r1, #4
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	bfb8      	it	lt
 80089ea:	18e4      	addlt	r4, r4, r3
 80089ec:	f000 f8e8 	bl	8008bc0 <__malloc_lock>
 80089f0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a68 <_free_r+0x90>)
 80089f2:	6813      	ldr	r3, [r2, #0]
 80089f4:	b933      	cbnz	r3, 8008a04 <_free_r+0x2c>
 80089f6:	6063      	str	r3, [r4, #4]
 80089f8:	6014      	str	r4, [r2, #0]
 80089fa:	4628      	mov	r0, r5
 80089fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a00:	f000 b8e4 	b.w	8008bcc <__malloc_unlock>
 8008a04:	42a3      	cmp	r3, r4
 8008a06:	d908      	bls.n	8008a1a <_free_r+0x42>
 8008a08:	6820      	ldr	r0, [r4, #0]
 8008a0a:	1821      	adds	r1, r4, r0
 8008a0c:	428b      	cmp	r3, r1
 8008a0e:	bf01      	itttt	eq
 8008a10:	6819      	ldreq	r1, [r3, #0]
 8008a12:	685b      	ldreq	r3, [r3, #4]
 8008a14:	1809      	addeq	r1, r1, r0
 8008a16:	6021      	streq	r1, [r4, #0]
 8008a18:	e7ed      	b.n	80089f6 <_free_r+0x1e>
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	b10b      	cbz	r3, 8008a24 <_free_r+0x4c>
 8008a20:	42a3      	cmp	r3, r4
 8008a22:	d9fa      	bls.n	8008a1a <_free_r+0x42>
 8008a24:	6811      	ldr	r1, [r2, #0]
 8008a26:	1850      	adds	r0, r2, r1
 8008a28:	42a0      	cmp	r0, r4
 8008a2a:	d10b      	bne.n	8008a44 <_free_r+0x6c>
 8008a2c:	6820      	ldr	r0, [r4, #0]
 8008a2e:	4401      	add	r1, r0
 8008a30:	1850      	adds	r0, r2, r1
 8008a32:	4283      	cmp	r3, r0
 8008a34:	6011      	str	r1, [r2, #0]
 8008a36:	d1e0      	bne.n	80089fa <_free_r+0x22>
 8008a38:	6818      	ldr	r0, [r3, #0]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	6053      	str	r3, [r2, #4]
 8008a3e:	4408      	add	r0, r1
 8008a40:	6010      	str	r0, [r2, #0]
 8008a42:	e7da      	b.n	80089fa <_free_r+0x22>
 8008a44:	d902      	bls.n	8008a4c <_free_r+0x74>
 8008a46:	230c      	movs	r3, #12
 8008a48:	602b      	str	r3, [r5, #0]
 8008a4a:	e7d6      	b.n	80089fa <_free_r+0x22>
 8008a4c:	6820      	ldr	r0, [r4, #0]
 8008a4e:	1821      	adds	r1, r4, r0
 8008a50:	428b      	cmp	r3, r1
 8008a52:	bf04      	itt	eq
 8008a54:	6819      	ldreq	r1, [r3, #0]
 8008a56:	685b      	ldreq	r3, [r3, #4]
 8008a58:	6063      	str	r3, [r4, #4]
 8008a5a:	bf04      	itt	eq
 8008a5c:	1809      	addeq	r1, r1, r0
 8008a5e:	6021      	streq	r1, [r4, #0]
 8008a60:	6054      	str	r4, [r2, #4]
 8008a62:	e7ca      	b.n	80089fa <_free_r+0x22>
 8008a64:	bd38      	pop	{r3, r4, r5, pc}
 8008a66:	bf00      	nop
 8008a68:	200005ac 	.word	0x200005ac

08008a6c <malloc>:
 8008a6c:	4b02      	ldr	r3, [pc, #8]	@ (8008a78 <malloc+0xc>)
 8008a6e:	4601      	mov	r1, r0
 8008a70:	6818      	ldr	r0, [r3, #0]
 8008a72:	f000 b825 	b.w	8008ac0 <_malloc_r>
 8008a76:	bf00      	nop
 8008a78:	2000003c 	.word	0x2000003c

08008a7c <sbrk_aligned>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	4e0f      	ldr	r6, [pc, #60]	@ (8008abc <sbrk_aligned+0x40>)
 8008a80:	460c      	mov	r4, r1
 8008a82:	6831      	ldr	r1, [r6, #0]
 8008a84:	4605      	mov	r5, r0
 8008a86:	b911      	cbnz	r1, 8008a8e <sbrk_aligned+0x12>
 8008a88:	f000 fe92 	bl	80097b0 <_sbrk_r>
 8008a8c:	6030      	str	r0, [r6, #0]
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4628      	mov	r0, r5
 8008a92:	f000 fe8d 	bl	80097b0 <_sbrk_r>
 8008a96:	1c43      	adds	r3, r0, #1
 8008a98:	d103      	bne.n	8008aa2 <sbrk_aligned+0x26>
 8008a9a:	f04f 34ff 	mov.w	r4, #4294967295
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	bd70      	pop	{r4, r5, r6, pc}
 8008aa2:	1cc4      	adds	r4, r0, #3
 8008aa4:	f024 0403 	bic.w	r4, r4, #3
 8008aa8:	42a0      	cmp	r0, r4
 8008aaa:	d0f8      	beq.n	8008a9e <sbrk_aligned+0x22>
 8008aac:	1a21      	subs	r1, r4, r0
 8008aae:	4628      	mov	r0, r5
 8008ab0:	f000 fe7e 	bl	80097b0 <_sbrk_r>
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	d1f2      	bne.n	8008a9e <sbrk_aligned+0x22>
 8008ab8:	e7ef      	b.n	8008a9a <sbrk_aligned+0x1e>
 8008aba:	bf00      	nop
 8008abc:	200005a8 	.word	0x200005a8

08008ac0 <_malloc_r>:
 8008ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ac4:	1ccd      	adds	r5, r1, #3
 8008ac6:	f025 0503 	bic.w	r5, r5, #3
 8008aca:	3508      	adds	r5, #8
 8008acc:	2d0c      	cmp	r5, #12
 8008ace:	bf38      	it	cc
 8008ad0:	250c      	movcc	r5, #12
 8008ad2:	2d00      	cmp	r5, #0
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	db01      	blt.n	8008adc <_malloc_r+0x1c>
 8008ad8:	42a9      	cmp	r1, r5
 8008ada:	d904      	bls.n	8008ae6 <_malloc_r+0x26>
 8008adc:	230c      	movs	r3, #12
 8008ade:	6033      	str	r3, [r6, #0]
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ae6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008bbc <_malloc_r+0xfc>
 8008aea:	f000 f869 	bl	8008bc0 <__malloc_lock>
 8008aee:	f8d8 3000 	ldr.w	r3, [r8]
 8008af2:	461c      	mov	r4, r3
 8008af4:	bb44      	cbnz	r4, 8008b48 <_malloc_r+0x88>
 8008af6:	4629      	mov	r1, r5
 8008af8:	4630      	mov	r0, r6
 8008afa:	f7ff ffbf 	bl	8008a7c <sbrk_aligned>
 8008afe:	1c43      	adds	r3, r0, #1
 8008b00:	4604      	mov	r4, r0
 8008b02:	d158      	bne.n	8008bb6 <_malloc_r+0xf6>
 8008b04:	f8d8 4000 	ldr.w	r4, [r8]
 8008b08:	4627      	mov	r7, r4
 8008b0a:	2f00      	cmp	r7, #0
 8008b0c:	d143      	bne.n	8008b96 <_malloc_r+0xd6>
 8008b0e:	2c00      	cmp	r4, #0
 8008b10:	d04b      	beq.n	8008baa <_malloc_r+0xea>
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	4639      	mov	r1, r7
 8008b16:	4630      	mov	r0, r6
 8008b18:	eb04 0903 	add.w	r9, r4, r3
 8008b1c:	f000 fe48 	bl	80097b0 <_sbrk_r>
 8008b20:	4581      	cmp	r9, r0
 8008b22:	d142      	bne.n	8008baa <_malloc_r+0xea>
 8008b24:	6821      	ldr	r1, [r4, #0]
 8008b26:	1a6d      	subs	r5, r5, r1
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f7ff ffa6 	bl	8008a7c <sbrk_aligned>
 8008b30:	3001      	adds	r0, #1
 8008b32:	d03a      	beq.n	8008baa <_malloc_r+0xea>
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	442b      	add	r3, r5
 8008b38:	6023      	str	r3, [r4, #0]
 8008b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	bb62      	cbnz	r2, 8008b9c <_malloc_r+0xdc>
 8008b42:	f8c8 7000 	str.w	r7, [r8]
 8008b46:	e00f      	b.n	8008b68 <_malloc_r+0xa8>
 8008b48:	6822      	ldr	r2, [r4, #0]
 8008b4a:	1b52      	subs	r2, r2, r5
 8008b4c:	d420      	bmi.n	8008b90 <_malloc_r+0xd0>
 8008b4e:	2a0b      	cmp	r2, #11
 8008b50:	d917      	bls.n	8008b82 <_malloc_r+0xc2>
 8008b52:	1961      	adds	r1, r4, r5
 8008b54:	42a3      	cmp	r3, r4
 8008b56:	6025      	str	r5, [r4, #0]
 8008b58:	bf18      	it	ne
 8008b5a:	6059      	strne	r1, [r3, #4]
 8008b5c:	6863      	ldr	r3, [r4, #4]
 8008b5e:	bf08      	it	eq
 8008b60:	f8c8 1000 	streq.w	r1, [r8]
 8008b64:	5162      	str	r2, [r4, r5]
 8008b66:	604b      	str	r3, [r1, #4]
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f000 f82f 	bl	8008bcc <__malloc_unlock>
 8008b6e:	f104 000b 	add.w	r0, r4, #11
 8008b72:	1d23      	adds	r3, r4, #4
 8008b74:	f020 0007 	bic.w	r0, r0, #7
 8008b78:	1ac2      	subs	r2, r0, r3
 8008b7a:	bf1c      	itt	ne
 8008b7c:	1a1b      	subne	r3, r3, r0
 8008b7e:	50a3      	strne	r3, [r4, r2]
 8008b80:	e7af      	b.n	8008ae2 <_malloc_r+0x22>
 8008b82:	6862      	ldr	r2, [r4, #4]
 8008b84:	42a3      	cmp	r3, r4
 8008b86:	bf0c      	ite	eq
 8008b88:	f8c8 2000 	streq.w	r2, [r8]
 8008b8c:	605a      	strne	r2, [r3, #4]
 8008b8e:	e7eb      	b.n	8008b68 <_malloc_r+0xa8>
 8008b90:	4623      	mov	r3, r4
 8008b92:	6864      	ldr	r4, [r4, #4]
 8008b94:	e7ae      	b.n	8008af4 <_malloc_r+0x34>
 8008b96:	463c      	mov	r4, r7
 8008b98:	687f      	ldr	r7, [r7, #4]
 8008b9a:	e7b6      	b.n	8008b0a <_malloc_r+0x4a>
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	42a3      	cmp	r3, r4
 8008ba2:	d1fb      	bne.n	8008b9c <_malloc_r+0xdc>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	6053      	str	r3, [r2, #4]
 8008ba8:	e7de      	b.n	8008b68 <_malloc_r+0xa8>
 8008baa:	230c      	movs	r3, #12
 8008bac:	6033      	str	r3, [r6, #0]
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f000 f80c 	bl	8008bcc <__malloc_unlock>
 8008bb4:	e794      	b.n	8008ae0 <_malloc_r+0x20>
 8008bb6:	6005      	str	r5, [r0, #0]
 8008bb8:	e7d6      	b.n	8008b68 <_malloc_r+0xa8>
 8008bba:	bf00      	nop
 8008bbc:	200005ac 	.word	0x200005ac

08008bc0 <__malloc_lock>:
 8008bc0:	4801      	ldr	r0, [pc, #4]	@ (8008bc8 <__malloc_lock+0x8>)
 8008bc2:	f7ff b8ae 	b.w	8007d22 <__retarget_lock_acquire_recursive>
 8008bc6:	bf00      	nop
 8008bc8:	200005a4 	.word	0x200005a4

08008bcc <__malloc_unlock>:
 8008bcc:	4801      	ldr	r0, [pc, #4]	@ (8008bd4 <__malloc_unlock+0x8>)
 8008bce:	f7ff b8a9 	b.w	8007d24 <__retarget_lock_release_recursive>
 8008bd2:	bf00      	nop
 8008bd4:	200005a4 	.word	0x200005a4

08008bd8 <_Balloc>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	69c6      	ldr	r6, [r0, #28]
 8008bdc:	4604      	mov	r4, r0
 8008bde:	460d      	mov	r5, r1
 8008be0:	b976      	cbnz	r6, 8008c00 <_Balloc+0x28>
 8008be2:	2010      	movs	r0, #16
 8008be4:	f7ff ff42 	bl	8008a6c <malloc>
 8008be8:	4602      	mov	r2, r0
 8008bea:	61e0      	str	r0, [r4, #28]
 8008bec:	b920      	cbnz	r0, 8008bf8 <_Balloc+0x20>
 8008bee:	4b18      	ldr	r3, [pc, #96]	@ (8008c50 <_Balloc+0x78>)
 8008bf0:	4818      	ldr	r0, [pc, #96]	@ (8008c54 <_Balloc+0x7c>)
 8008bf2:	216b      	movs	r1, #107	@ 0x6b
 8008bf4:	f000 fdfa 	bl	80097ec <__assert_func>
 8008bf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bfc:	6006      	str	r6, [r0, #0]
 8008bfe:	60c6      	str	r6, [r0, #12]
 8008c00:	69e6      	ldr	r6, [r4, #28]
 8008c02:	68f3      	ldr	r3, [r6, #12]
 8008c04:	b183      	cbz	r3, 8008c28 <_Balloc+0x50>
 8008c06:	69e3      	ldr	r3, [r4, #28]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c0e:	b9b8      	cbnz	r0, 8008c40 <_Balloc+0x68>
 8008c10:	2101      	movs	r1, #1
 8008c12:	fa01 f605 	lsl.w	r6, r1, r5
 8008c16:	1d72      	adds	r2, r6, #5
 8008c18:	0092      	lsls	r2, r2, #2
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f000 fe04 	bl	8009828 <_calloc_r>
 8008c20:	b160      	cbz	r0, 8008c3c <_Balloc+0x64>
 8008c22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c26:	e00e      	b.n	8008c46 <_Balloc+0x6e>
 8008c28:	2221      	movs	r2, #33	@ 0x21
 8008c2a:	2104      	movs	r1, #4
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f000 fdfb 	bl	8009828 <_calloc_r>
 8008c32:	69e3      	ldr	r3, [r4, #28]
 8008c34:	60f0      	str	r0, [r6, #12]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e4      	bne.n	8008c06 <_Balloc+0x2e>
 8008c3c:	2000      	movs	r0, #0
 8008c3e:	bd70      	pop	{r4, r5, r6, pc}
 8008c40:	6802      	ldr	r2, [r0, #0]
 8008c42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c46:	2300      	movs	r3, #0
 8008c48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c4c:	e7f7      	b.n	8008c3e <_Balloc+0x66>
 8008c4e:	bf00      	nop
 8008c50:	08009b69 	.word	0x08009b69
 8008c54:	08009be9 	.word	0x08009be9

08008c58 <_Bfree>:
 8008c58:	b570      	push	{r4, r5, r6, lr}
 8008c5a:	69c6      	ldr	r6, [r0, #28]
 8008c5c:	4605      	mov	r5, r0
 8008c5e:	460c      	mov	r4, r1
 8008c60:	b976      	cbnz	r6, 8008c80 <_Bfree+0x28>
 8008c62:	2010      	movs	r0, #16
 8008c64:	f7ff ff02 	bl	8008a6c <malloc>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	61e8      	str	r0, [r5, #28]
 8008c6c:	b920      	cbnz	r0, 8008c78 <_Bfree+0x20>
 8008c6e:	4b09      	ldr	r3, [pc, #36]	@ (8008c94 <_Bfree+0x3c>)
 8008c70:	4809      	ldr	r0, [pc, #36]	@ (8008c98 <_Bfree+0x40>)
 8008c72:	218f      	movs	r1, #143	@ 0x8f
 8008c74:	f000 fdba 	bl	80097ec <__assert_func>
 8008c78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c7c:	6006      	str	r6, [r0, #0]
 8008c7e:	60c6      	str	r6, [r0, #12]
 8008c80:	b13c      	cbz	r4, 8008c92 <_Bfree+0x3a>
 8008c82:	69eb      	ldr	r3, [r5, #28]
 8008c84:	6862      	ldr	r2, [r4, #4]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c8c:	6021      	str	r1, [r4, #0]
 8008c8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c92:	bd70      	pop	{r4, r5, r6, pc}
 8008c94:	08009b69 	.word	0x08009b69
 8008c98:	08009be9 	.word	0x08009be9

08008c9c <__multadd>:
 8008c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca0:	690d      	ldr	r5, [r1, #16]
 8008ca2:	4607      	mov	r7, r0
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	461e      	mov	r6, r3
 8008ca8:	f101 0c14 	add.w	ip, r1, #20
 8008cac:	2000      	movs	r0, #0
 8008cae:	f8dc 3000 	ldr.w	r3, [ip]
 8008cb2:	b299      	uxth	r1, r3
 8008cb4:	fb02 6101 	mla	r1, r2, r1, r6
 8008cb8:	0c1e      	lsrs	r6, r3, #16
 8008cba:	0c0b      	lsrs	r3, r1, #16
 8008cbc:	fb02 3306 	mla	r3, r2, r6, r3
 8008cc0:	b289      	uxth	r1, r1
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008cc8:	4285      	cmp	r5, r0
 8008cca:	f84c 1b04 	str.w	r1, [ip], #4
 8008cce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008cd2:	dcec      	bgt.n	8008cae <__multadd+0x12>
 8008cd4:	b30e      	cbz	r6, 8008d1a <__multadd+0x7e>
 8008cd6:	68a3      	ldr	r3, [r4, #8]
 8008cd8:	42ab      	cmp	r3, r5
 8008cda:	dc19      	bgt.n	8008d10 <__multadd+0x74>
 8008cdc:	6861      	ldr	r1, [r4, #4]
 8008cde:	4638      	mov	r0, r7
 8008ce0:	3101      	adds	r1, #1
 8008ce2:	f7ff ff79 	bl	8008bd8 <_Balloc>
 8008ce6:	4680      	mov	r8, r0
 8008ce8:	b928      	cbnz	r0, 8008cf6 <__multadd+0x5a>
 8008cea:	4602      	mov	r2, r0
 8008cec:	4b0c      	ldr	r3, [pc, #48]	@ (8008d20 <__multadd+0x84>)
 8008cee:	480d      	ldr	r0, [pc, #52]	@ (8008d24 <__multadd+0x88>)
 8008cf0:	21ba      	movs	r1, #186	@ 0xba
 8008cf2:	f000 fd7b 	bl	80097ec <__assert_func>
 8008cf6:	6922      	ldr	r2, [r4, #16]
 8008cf8:	3202      	adds	r2, #2
 8008cfa:	f104 010c 	add.w	r1, r4, #12
 8008cfe:	0092      	lsls	r2, r2, #2
 8008d00:	300c      	adds	r0, #12
 8008d02:	f000 fd65 	bl	80097d0 <memcpy>
 8008d06:	4621      	mov	r1, r4
 8008d08:	4638      	mov	r0, r7
 8008d0a:	f7ff ffa5 	bl	8008c58 <_Bfree>
 8008d0e:	4644      	mov	r4, r8
 8008d10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d14:	3501      	adds	r5, #1
 8008d16:	615e      	str	r6, [r3, #20]
 8008d18:	6125      	str	r5, [r4, #16]
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d20:	08009bd8 	.word	0x08009bd8
 8008d24:	08009be9 	.word	0x08009be9

08008d28 <__hi0bits>:
 8008d28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	bf36      	itet	cc
 8008d30:	0403      	lslcc	r3, r0, #16
 8008d32:	2000      	movcs	r0, #0
 8008d34:	2010      	movcc	r0, #16
 8008d36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d3a:	bf3c      	itt	cc
 8008d3c:	021b      	lslcc	r3, r3, #8
 8008d3e:	3008      	addcc	r0, #8
 8008d40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d44:	bf3c      	itt	cc
 8008d46:	011b      	lslcc	r3, r3, #4
 8008d48:	3004      	addcc	r0, #4
 8008d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d4e:	bf3c      	itt	cc
 8008d50:	009b      	lslcc	r3, r3, #2
 8008d52:	3002      	addcc	r0, #2
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	db05      	blt.n	8008d64 <__hi0bits+0x3c>
 8008d58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008d5c:	f100 0001 	add.w	r0, r0, #1
 8008d60:	bf08      	it	eq
 8008d62:	2020      	moveq	r0, #32
 8008d64:	4770      	bx	lr

08008d66 <__lo0bits>:
 8008d66:	6803      	ldr	r3, [r0, #0]
 8008d68:	4602      	mov	r2, r0
 8008d6a:	f013 0007 	ands.w	r0, r3, #7
 8008d6e:	d00b      	beq.n	8008d88 <__lo0bits+0x22>
 8008d70:	07d9      	lsls	r1, r3, #31
 8008d72:	d421      	bmi.n	8008db8 <__lo0bits+0x52>
 8008d74:	0798      	lsls	r0, r3, #30
 8008d76:	bf49      	itett	mi
 8008d78:	085b      	lsrmi	r3, r3, #1
 8008d7a:	089b      	lsrpl	r3, r3, #2
 8008d7c:	2001      	movmi	r0, #1
 8008d7e:	6013      	strmi	r3, [r2, #0]
 8008d80:	bf5c      	itt	pl
 8008d82:	6013      	strpl	r3, [r2, #0]
 8008d84:	2002      	movpl	r0, #2
 8008d86:	4770      	bx	lr
 8008d88:	b299      	uxth	r1, r3
 8008d8a:	b909      	cbnz	r1, 8008d90 <__lo0bits+0x2a>
 8008d8c:	0c1b      	lsrs	r3, r3, #16
 8008d8e:	2010      	movs	r0, #16
 8008d90:	b2d9      	uxtb	r1, r3
 8008d92:	b909      	cbnz	r1, 8008d98 <__lo0bits+0x32>
 8008d94:	3008      	adds	r0, #8
 8008d96:	0a1b      	lsrs	r3, r3, #8
 8008d98:	0719      	lsls	r1, r3, #28
 8008d9a:	bf04      	itt	eq
 8008d9c:	091b      	lsreq	r3, r3, #4
 8008d9e:	3004      	addeq	r0, #4
 8008da0:	0799      	lsls	r1, r3, #30
 8008da2:	bf04      	itt	eq
 8008da4:	089b      	lsreq	r3, r3, #2
 8008da6:	3002      	addeq	r0, #2
 8008da8:	07d9      	lsls	r1, r3, #31
 8008daa:	d403      	bmi.n	8008db4 <__lo0bits+0x4e>
 8008dac:	085b      	lsrs	r3, r3, #1
 8008dae:	f100 0001 	add.w	r0, r0, #1
 8008db2:	d003      	beq.n	8008dbc <__lo0bits+0x56>
 8008db4:	6013      	str	r3, [r2, #0]
 8008db6:	4770      	bx	lr
 8008db8:	2000      	movs	r0, #0
 8008dba:	4770      	bx	lr
 8008dbc:	2020      	movs	r0, #32
 8008dbe:	4770      	bx	lr

08008dc0 <__i2b>:
 8008dc0:	b510      	push	{r4, lr}
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	f7ff ff07 	bl	8008bd8 <_Balloc>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	b928      	cbnz	r0, 8008dda <__i2b+0x1a>
 8008dce:	4b05      	ldr	r3, [pc, #20]	@ (8008de4 <__i2b+0x24>)
 8008dd0:	4805      	ldr	r0, [pc, #20]	@ (8008de8 <__i2b+0x28>)
 8008dd2:	f240 1145 	movw	r1, #325	@ 0x145
 8008dd6:	f000 fd09 	bl	80097ec <__assert_func>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	6144      	str	r4, [r0, #20]
 8008dde:	6103      	str	r3, [r0, #16]
 8008de0:	bd10      	pop	{r4, pc}
 8008de2:	bf00      	nop
 8008de4:	08009bd8 	.word	0x08009bd8
 8008de8:	08009be9 	.word	0x08009be9

08008dec <__multiply>:
 8008dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df0:	4617      	mov	r7, r2
 8008df2:	690a      	ldr	r2, [r1, #16]
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	bfa8      	it	ge
 8008dfa:	463b      	movge	r3, r7
 8008dfc:	4689      	mov	r9, r1
 8008dfe:	bfa4      	itt	ge
 8008e00:	460f      	movge	r7, r1
 8008e02:	4699      	movge	r9, r3
 8008e04:	693d      	ldr	r5, [r7, #16]
 8008e06:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	6879      	ldr	r1, [r7, #4]
 8008e0e:	eb05 060a 	add.w	r6, r5, sl
 8008e12:	42b3      	cmp	r3, r6
 8008e14:	b085      	sub	sp, #20
 8008e16:	bfb8      	it	lt
 8008e18:	3101      	addlt	r1, #1
 8008e1a:	f7ff fedd 	bl	8008bd8 <_Balloc>
 8008e1e:	b930      	cbnz	r0, 8008e2e <__multiply+0x42>
 8008e20:	4602      	mov	r2, r0
 8008e22:	4b41      	ldr	r3, [pc, #260]	@ (8008f28 <__multiply+0x13c>)
 8008e24:	4841      	ldr	r0, [pc, #260]	@ (8008f2c <__multiply+0x140>)
 8008e26:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e2a:	f000 fcdf 	bl	80097ec <__assert_func>
 8008e2e:	f100 0414 	add.w	r4, r0, #20
 8008e32:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008e36:	4623      	mov	r3, r4
 8008e38:	2200      	movs	r2, #0
 8008e3a:	4573      	cmp	r3, lr
 8008e3c:	d320      	bcc.n	8008e80 <__multiply+0x94>
 8008e3e:	f107 0814 	add.w	r8, r7, #20
 8008e42:	f109 0114 	add.w	r1, r9, #20
 8008e46:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008e4a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008e4e:	9302      	str	r3, [sp, #8]
 8008e50:	1beb      	subs	r3, r5, r7
 8008e52:	3b15      	subs	r3, #21
 8008e54:	f023 0303 	bic.w	r3, r3, #3
 8008e58:	3304      	adds	r3, #4
 8008e5a:	3715      	adds	r7, #21
 8008e5c:	42bd      	cmp	r5, r7
 8008e5e:	bf38      	it	cc
 8008e60:	2304      	movcc	r3, #4
 8008e62:	9301      	str	r3, [sp, #4]
 8008e64:	9b02      	ldr	r3, [sp, #8]
 8008e66:	9103      	str	r1, [sp, #12]
 8008e68:	428b      	cmp	r3, r1
 8008e6a:	d80c      	bhi.n	8008e86 <__multiply+0x9a>
 8008e6c:	2e00      	cmp	r6, #0
 8008e6e:	dd03      	ble.n	8008e78 <__multiply+0x8c>
 8008e70:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d055      	beq.n	8008f24 <__multiply+0x138>
 8008e78:	6106      	str	r6, [r0, #16]
 8008e7a:	b005      	add	sp, #20
 8008e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e80:	f843 2b04 	str.w	r2, [r3], #4
 8008e84:	e7d9      	b.n	8008e3a <__multiply+0x4e>
 8008e86:	f8b1 a000 	ldrh.w	sl, [r1]
 8008e8a:	f1ba 0f00 	cmp.w	sl, #0
 8008e8e:	d01f      	beq.n	8008ed0 <__multiply+0xe4>
 8008e90:	46c4      	mov	ip, r8
 8008e92:	46a1      	mov	r9, r4
 8008e94:	2700      	movs	r7, #0
 8008e96:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008e9a:	f8d9 3000 	ldr.w	r3, [r9]
 8008e9e:	fa1f fb82 	uxth.w	fp, r2
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ea8:	443b      	add	r3, r7
 8008eaa:	f8d9 7000 	ldr.w	r7, [r9]
 8008eae:	0c12      	lsrs	r2, r2, #16
 8008eb0:	0c3f      	lsrs	r7, r7, #16
 8008eb2:	fb0a 7202 	mla	r2, sl, r2, r7
 8008eb6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ec0:	4565      	cmp	r5, ip
 8008ec2:	f849 3b04 	str.w	r3, [r9], #4
 8008ec6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008eca:	d8e4      	bhi.n	8008e96 <__multiply+0xaa>
 8008ecc:	9b01      	ldr	r3, [sp, #4]
 8008ece:	50e7      	str	r7, [r4, r3]
 8008ed0:	9b03      	ldr	r3, [sp, #12]
 8008ed2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008ed6:	3104      	adds	r1, #4
 8008ed8:	f1b9 0f00 	cmp.w	r9, #0
 8008edc:	d020      	beq.n	8008f20 <__multiply+0x134>
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	4647      	mov	r7, r8
 8008ee2:	46a4      	mov	ip, r4
 8008ee4:	f04f 0a00 	mov.w	sl, #0
 8008ee8:	f8b7 b000 	ldrh.w	fp, [r7]
 8008eec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008ef0:	fb09 220b 	mla	r2, r9, fp, r2
 8008ef4:	4452      	add	r2, sl
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008efc:	f84c 3b04 	str.w	r3, [ip], #4
 8008f00:	f857 3b04 	ldr.w	r3, [r7], #4
 8008f04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f08:	f8bc 3000 	ldrh.w	r3, [ip]
 8008f0c:	fb09 330a 	mla	r3, r9, sl, r3
 8008f10:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008f14:	42bd      	cmp	r5, r7
 8008f16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f1a:	d8e5      	bhi.n	8008ee8 <__multiply+0xfc>
 8008f1c:	9a01      	ldr	r2, [sp, #4]
 8008f1e:	50a3      	str	r3, [r4, r2]
 8008f20:	3404      	adds	r4, #4
 8008f22:	e79f      	b.n	8008e64 <__multiply+0x78>
 8008f24:	3e01      	subs	r6, #1
 8008f26:	e7a1      	b.n	8008e6c <__multiply+0x80>
 8008f28:	08009bd8 	.word	0x08009bd8
 8008f2c:	08009be9 	.word	0x08009be9

08008f30 <__pow5mult>:
 8008f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f34:	4615      	mov	r5, r2
 8008f36:	f012 0203 	ands.w	r2, r2, #3
 8008f3a:	4607      	mov	r7, r0
 8008f3c:	460e      	mov	r6, r1
 8008f3e:	d007      	beq.n	8008f50 <__pow5mult+0x20>
 8008f40:	4c25      	ldr	r4, [pc, #148]	@ (8008fd8 <__pow5mult+0xa8>)
 8008f42:	3a01      	subs	r2, #1
 8008f44:	2300      	movs	r3, #0
 8008f46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f4a:	f7ff fea7 	bl	8008c9c <__multadd>
 8008f4e:	4606      	mov	r6, r0
 8008f50:	10ad      	asrs	r5, r5, #2
 8008f52:	d03d      	beq.n	8008fd0 <__pow5mult+0xa0>
 8008f54:	69fc      	ldr	r4, [r7, #28]
 8008f56:	b97c      	cbnz	r4, 8008f78 <__pow5mult+0x48>
 8008f58:	2010      	movs	r0, #16
 8008f5a:	f7ff fd87 	bl	8008a6c <malloc>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	61f8      	str	r0, [r7, #28]
 8008f62:	b928      	cbnz	r0, 8008f70 <__pow5mult+0x40>
 8008f64:	4b1d      	ldr	r3, [pc, #116]	@ (8008fdc <__pow5mult+0xac>)
 8008f66:	481e      	ldr	r0, [pc, #120]	@ (8008fe0 <__pow5mult+0xb0>)
 8008f68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008f6c:	f000 fc3e 	bl	80097ec <__assert_func>
 8008f70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f74:	6004      	str	r4, [r0, #0]
 8008f76:	60c4      	str	r4, [r0, #12]
 8008f78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008f7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f80:	b94c      	cbnz	r4, 8008f96 <__pow5mult+0x66>
 8008f82:	f240 2171 	movw	r1, #625	@ 0x271
 8008f86:	4638      	mov	r0, r7
 8008f88:	f7ff ff1a 	bl	8008dc0 <__i2b>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f92:	4604      	mov	r4, r0
 8008f94:	6003      	str	r3, [r0, #0]
 8008f96:	f04f 0900 	mov.w	r9, #0
 8008f9a:	07eb      	lsls	r3, r5, #31
 8008f9c:	d50a      	bpl.n	8008fb4 <__pow5mult+0x84>
 8008f9e:	4631      	mov	r1, r6
 8008fa0:	4622      	mov	r2, r4
 8008fa2:	4638      	mov	r0, r7
 8008fa4:	f7ff ff22 	bl	8008dec <__multiply>
 8008fa8:	4631      	mov	r1, r6
 8008faa:	4680      	mov	r8, r0
 8008fac:	4638      	mov	r0, r7
 8008fae:	f7ff fe53 	bl	8008c58 <_Bfree>
 8008fb2:	4646      	mov	r6, r8
 8008fb4:	106d      	asrs	r5, r5, #1
 8008fb6:	d00b      	beq.n	8008fd0 <__pow5mult+0xa0>
 8008fb8:	6820      	ldr	r0, [r4, #0]
 8008fba:	b938      	cbnz	r0, 8008fcc <__pow5mult+0x9c>
 8008fbc:	4622      	mov	r2, r4
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	f7ff ff13 	bl	8008dec <__multiply>
 8008fc6:	6020      	str	r0, [r4, #0]
 8008fc8:	f8c0 9000 	str.w	r9, [r0]
 8008fcc:	4604      	mov	r4, r0
 8008fce:	e7e4      	b.n	8008f9a <__pow5mult+0x6a>
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fd6:	bf00      	nop
 8008fd8:	08009c9c 	.word	0x08009c9c
 8008fdc:	08009b69 	.word	0x08009b69
 8008fe0:	08009be9 	.word	0x08009be9

08008fe4 <__lshift>:
 8008fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fe8:	460c      	mov	r4, r1
 8008fea:	6849      	ldr	r1, [r1, #4]
 8008fec:	6923      	ldr	r3, [r4, #16]
 8008fee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ff2:	68a3      	ldr	r3, [r4, #8]
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	4691      	mov	r9, r2
 8008ff8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ffc:	f108 0601 	add.w	r6, r8, #1
 8009000:	42b3      	cmp	r3, r6
 8009002:	db0b      	blt.n	800901c <__lshift+0x38>
 8009004:	4638      	mov	r0, r7
 8009006:	f7ff fde7 	bl	8008bd8 <_Balloc>
 800900a:	4605      	mov	r5, r0
 800900c:	b948      	cbnz	r0, 8009022 <__lshift+0x3e>
 800900e:	4602      	mov	r2, r0
 8009010:	4b28      	ldr	r3, [pc, #160]	@ (80090b4 <__lshift+0xd0>)
 8009012:	4829      	ldr	r0, [pc, #164]	@ (80090b8 <__lshift+0xd4>)
 8009014:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009018:	f000 fbe8 	bl	80097ec <__assert_func>
 800901c:	3101      	adds	r1, #1
 800901e:	005b      	lsls	r3, r3, #1
 8009020:	e7ee      	b.n	8009000 <__lshift+0x1c>
 8009022:	2300      	movs	r3, #0
 8009024:	f100 0114 	add.w	r1, r0, #20
 8009028:	f100 0210 	add.w	r2, r0, #16
 800902c:	4618      	mov	r0, r3
 800902e:	4553      	cmp	r3, sl
 8009030:	db33      	blt.n	800909a <__lshift+0xb6>
 8009032:	6920      	ldr	r0, [r4, #16]
 8009034:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009038:	f104 0314 	add.w	r3, r4, #20
 800903c:	f019 091f 	ands.w	r9, r9, #31
 8009040:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009044:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009048:	d02b      	beq.n	80090a2 <__lshift+0xbe>
 800904a:	f1c9 0e20 	rsb	lr, r9, #32
 800904e:	468a      	mov	sl, r1
 8009050:	2200      	movs	r2, #0
 8009052:	6818      	ldr	r0, [r3, #0]
 8009054:	fa00 f009 	lsl.w	r0, r0, r9
 8009058:	4310      	orrs	r0, r2
 800905a:	f84a 0b04 	str.w	r0, [sl], #4
 800905e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009062:	459c      	cmp	ip, r3
 8009064:	fa22 f20e 	lsr.w	r2, r2, lr
 8009068:	d8f3      	bhi.n	8009052 <__lshift+0x6e>
 800906a:	ebac 0304 	sub.w	r3, ip, r4
 800906e:	3b15      	subs	r3, #21
 8009070:	f023 0303 	bic.w	r3, r3, #3
 8009074:	3304      	adds	r3, #4
 8009076:	f104 0015 	add.w	r0, r4, #21
 800907a:	4560      	cmp	r0, ip
 800907c:	bf88      	it	hi
 800907e:	2304      	movhi	r3, #4
 8009080:	50ca      	str	r2, [r1, r3]
 8009082:	b10a      	cbz	r2, 8009088 <__lshift+0xa4>
 8009084:	f108 0602 	add.w	r6, r8, #2
 8009088:	3e01      	subs	r6, #1
 800908a:	4638      	mov	r0, r7
 800908c:	612e      	str	r6, [r5, #16]
 800908e:	4621      	mov	r1, r4
 8009090:	f7ff fde2 	bl	8008c58 <_Bfree>
 8009094:	4628      	mov	r0, r5
 8009096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800909a:	f842 0f04 	str.w	r0, [r2, #4]!
 800909e:	3301      	adds	r3, #1
 80090a0:	e7c5      	b.n	800902e <__lshift+0x4a>
 80090a2:	3904      	subs	r1, #4
 80090a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80090ac:	459c      	cmp	ip, r3
 80090ae:	d8f9      	bhi.n	80090a4 <__lshift+0xc0>
 80090b0:	e7ea      	b.n	8009088 <__lshift+0xa4>
 80090b2:	bf00      	nop
 80090b4:	08009bd8 	.word	0x08009bd8
 80090b8:	08009be9 	.word	0x08009be9

080090bc <__mcmp>:
 80090bc:	690a      	ldr	r2, [r1, #16]
 80090be:	4603      	mov	r3, r0
 80090c0:	6900      	ldr	r0, [r0, #16]
 80090c2:	1a80      	subs	r0, r0, r2
 80090c4:	b530      	push	{r4, r5, lr}
 80090c6:	d10e      	bne.n	80090e6 <__mcmp+0x2a>
 80090c8:	3314      	adds	r3, #20
 80090ca:	3114      	adds	r1, #20
 80090cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80090d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80090d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80090d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80090dc:	4295      	cmp	r5, r2
 80090de:	d003      	beq.n	80090e8 <__mcmp+0x2c>
 80090e0:	d205      	bcs.n	80090ee <__mcmp+0x32>
 80090e2:	f04f 30ff 	mov.w	r0, #4294967295
 80090e6:	bd30      	pop	{r4, r5, pc}
 80090e8:	42a3      	cmp	r3, r4
 80090ea:	d3f3      	bcc.n	80090d4 <__mcmp+0x18>
 80090ec:	e7fb      	b.n	80090e6 <__mcmp+0x2a>
 80090ee:	2001      	movs	r0, #1
 80090f0:	e7f9      	b.n	80090e6 <__mcmp+0x2a>
	...

080090f4 <__mdiff>:
 80090f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f8:	4689      	mov	r9, r1
 80090fa:	4606      	mov	r6, r0
 80090fc:	4611      	mov	r1, r2
 80090fe:	4648      	mov	r0, r9
 8009100:	4614      	mov	r4, r2
 8009102:	f7ff ffdb 	bl	80090bc <__mcmp>
 8009106:	1e05      	subs	r5, r0, #0
 8009108:	d112      	bne.n	8009130 <__mdiff+0x3c>
 800910a:	4629      	mov	r1, r5
 800910c:	4630      	mov	r0, r6
 800910e:	f7ff fd63 	bl	8008bd8 <_Balloc>
 8009112:	4602      	mov	r2, r0
 8009114:	b928      	cbnz	r0, 8009122 <__mdiff+0x2e>
 8009116:	4b3f      	ldr	r3, [pc, #252]	@ (8009214 <__mdiff+0x120>)
 8009118:	f240 2137 	movw	r1, #567	@ 0x237
 800911c:	483e      	ldr	r0, [pc, #248]	@ (8009218 <__mdiff+0x124>)
 800911e:	f000 fb65 	bl	80097ec <__assert_func>
 8009122:	2301      	movs	r3, #1
 8009124:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009128:	4610      	mov	r0, r2
 800912a:	b003      	add	sp, #12
 800912c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009130:	bfbc      	itt	lt
 8009132:	464b      	movlt	r3, r9
 8009134:	46a1      	movlt	r9, r4
 8009136:	4630      	mov	r0, r6
 8009138:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800913c:	bfba      	itte	lt
 800913e:	461c      	movlt	r4, r3
 8009140:	2501      	movlt	r5, #1
 8009142:	2500      	movge	r5, #0
 8009144:	f7ff fd48 	bl	8008bd8 <_Balloc>
 8009148:	4602      	mov	r2, r0
 800914a:	b918      	cbnz	r0, 8009154 <__mdiff+0x60>
 800914c:	4b31      	ldr	r3, [pc, #196]	@ (8009214 <__mdiff+0x120>)
 800914e:	f240 2145 	movw	r1, #581	@ 0x245
 8009152:	e7e3      	b.n	800911c <__mdiff+0x28>
 8009154:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009158:	6926      	ldr	r6, [r4, #16]
 800915a:	60c5      	str	r5, [r0, #12]
 800915c:	f109 0310 	add.w	r3, r9, #16
 8009160:	f109 0514 	add.w	r5, r9, #20
 8009164:	f104 0e14 	add.w	lr, r4, #20
 8009168:	f100 0b14 	add.w	fp, r0, #20
 800916c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009170:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009174:	9301      	str	r3, [sp, #4]
 8009176:	46d9      	mov	r9, fp
 8009178:	f04f 0c00 	mov.w	ip, #0
 800917c:	9b01      	ldr	r3, [sp, #4]
 800917e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009182:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009186:	9301      	str	r3, [sp, #4]
 8009188:	fa1f f38a 	uxth.w	r3, sl
 800918c:	4619      	mov	r1, r3
 800918e:	b283      	uxth	r3, r0
 8009190:	1acb      	subs	r3, r1, r3
 8009192:	0c00      	lsrs	r0, r0, #16
 8009194:	4463      	add	r3, ip
 8009196:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800919a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800919e:	b29b      	uxth	r3, r3
 80091a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80091a4:	4576      	cmp	r6, lr
 80091a6:	f849 3b04 	str.w	r3, [r9], #4
 80091aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091ae:	d8e5      	bhi.n	800917c <__mdiff+0x88>
 80091b0:	1b33      	subs	r3, r6, r4
 80091b2:	3b15      	subs	r3, #21
 80091b4:	f023 0303 	bic.w	r3, r3, #3
 80091b8:	3415      	adds	r4, #21
 80091ba:	3304      	adds	r3, #4
 80091bc:	42a6      	cmp	r6, r4
 80091be:	bf38      	it	cc
 80091c0:	2304      	movcc	r3, #4
 80091c2:	441d      	add	r5, r3
 80091c4:	445b      	add	r3, fp
 80091c6:	461e      	mov	r6, r3
 80091c8:	462c      	mov	r4, r5
 80091ca:	4544      	cmp	r4, r8
 80091cc:	d30e      	bcc.n	80091ec <__mdiff+0xf8>
 80091ce:	f108 0103 	add.w	r1, r8, #3
 80091d2:	1b49      	subs	r1, r1, r5
 80091d4:	f021 0103 	bic.w	r1, r1, #3
 80091d8:	3d03      	subs	r5, #3
 80091da:	45a8      	cmp	r8, r5
 80091dc:	bf38      	it	cc
 80091de:	2100      	movcc	r1, #0
 80091e0:	440b      	add	r3, r1
 80091e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091e6:	b191      	cbz	r1, 800920e <__mdiff+0x11a>
 80091e8:	6117      	str	r7, [r2, #16]
 80091ea:	e79d      	b.n	8009128 <__mdiff+0x34>
 80091ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80091f0:	46e6      	mov	lr, ip
 80091f2:	0c08      	lsrs	r0, r1, #16
 80091f4:	fa1c fc81 	uxtah	ip, ip, r1
 80091f8:	4471      	add	r1, lr
 80091fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80091fe:	b289      	uxth	r1, r1
 8009200:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009204:	f846 1b04 	str.w	r1, [r6], #4
 8009208:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800920c:	e7dd      	b.n	80091ca <__mdiff+0xd6>
 800920e:	3f01      	subs	r7, #1
 8009210:	e7e7      	b.n	80091e2 <__mdiff+0xee>
 8009212:	bf00      	nop
 8009214:	08009bd8 	.word	0x08009bd8
 8009218:	08009be9 	.word	0x08009be9

0800921c <__d2b>:
 800921c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009220:	460f      	mov	r7, r1
 8009222:	2101      	movs	r1, #1
 8009224:	ec59 8b10 	vmov	r8, r9, d0
 8009228:	4616      	mov	r6, r2
 800922a:	f7ff fcd5 	bl	8008bd8 <_Balloc>
 800922e:	4604      	mov	r4, r0
 8009230:	b930      	cbnz	r0, 8009240 <__d2b+0x24>
 8009232:	4602      	mov	r2, r0
 8009234:	4b23      	ldr	r3, [pc, #140]	@ (80092c4 <__d2b+0xa8>)
 8009236:	4824      	ldr	r0, [pc, #144]	@ (80092c8 <__d2b+0xac>)
 8009238:	f240 310f 	movw	r1, #783	@ 0x30f
 800923c:	f000 fad6 	bl	80097ec <__assert_func>
 8009240:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009244:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009248:	b10d      	cbz	r5, 800924e <__d2b+0x32>
 800924a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800924e:	9301      	str	r3, [sp, #4]
 8009250:	f1b8 0300 	subs.w	r3, r8, #0
 8009254:	d023      	beq.n	800929e <__d2b+0x82>
 8009256:	4668      	mov	r0, sp
 8009258:	9300      	str	r3, [sp, #0]
 800925a:	f7ff fd84 	bl	8008d66 <__lo0bits>
 800925e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009262:	b1d0      	cbz	r0, 800929a <__d2b+0x7e>
 8009264:	f1c0 0320 	rsb	r3, r0, #32
 8009268:	fa02 f303 	lsl.w	r3, r2, r3
 800926c:	430b      	orrs	r3, r1
 800926e:	40c2      	lsrs	r2, r0
 8009270:	6163      	str	r3, [r4, #20]
 8009272:	9201      	str	r2, [sp, #4]
 8009274:	9b01      	ldr	r3, [sp, #4]
 8009276:	61a3      	str	r3, [r4, #24]
 8009278:	2b00      	cmp	r3, #0
 800927a:	bf0c      	ite	eq
 800927c:	2201      	moveq	r2, #1
 800927e:	2202      	movne	r2, #2
 8009280:	6122      	str	r2, [r4, #16]
 8009282:	b1a5      	cbz	r5, 80092ae <__d2b+0x92>
 8009284:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009288:	4405      	add	r5, r0
 800928a:	603d      	str	r5, [r7, #0]
 800928c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009290:	6030      	str	r0, [r6, #0]
 8009292:	4620      	mov	r0, r4
 8009294:	b003      	add	sp, #12
 8009296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800929a:	6161      	str	r1, [r4, #20]
 800929c:	e7ea      	b.n	8009274 <__d2b+0x58>
 800929e:	a801      	add	r0, sp, #4
 80092a0:	f7ff fd61 	bl	8008d66 <__lo0bits>
 80092a4:	9b01      	ldr	r3, [sp, #4]
 80092a6:	6163      	str	r3, [r4, #20]
 80092a8:	3020      	adds	r0, #32
 80092aa:	2201      	movs	r2, #1
 80092ac:	e7e8      	b.n	8009280 <__d2b+0x64>
 80092ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80092b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80092b6:	6038      	str	r0, [r7, #0]
 80092b8:	6918      	ldr	r0, [r3, #16]
 80092ba:	f7ff fd35 	bl	8008d28 <__hi0bits>
 80092be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092c2:	e7e5      	b.n	8009290 <__d2b+0x74>
 80092c4:	08009bd8 	.word	0x08009bd8
 80092c8:	08009be9 	.word	0x08009be9

080092cc <__sfputc_r>:
 80092cc:	6893      	ldr	r3, [r2, #8]
 80092ce:	3b01      	subs	r3, #1
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	b410      	push	{r4}
 80092d4:	6093      	str	r3, [r2, #8]
 80092d6:	da08      	bge.n	80092ea <__sfputc_r+0x1e>
 80092d8:	6994      	ldr	r4, [r2, #24]
 80092da:	42a3      	cmp	r3, r4
 80092dc:	db01      	blt.n	80092e2 <__sfputc_r+0x16>
 80092de:	290a      	cmp	r1, #10
 80092e0:	d103      	bne.n	80092ea <__sfputc_r+0x1e>
 80092e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092e6:	f7fe bc0a 	b.w	8007afe <__swbuf_r>
 80092ea:	6813      	ldr	r3, [r2, #0]
 80092ec:	1c58      	adds	r0, r3, #1
 80092ee:	6010      	str	r0, [r2, #0]
 80092f0:	7019      	strb	r1, [r3, #0]
 80092f2:	4608      	mov	r0, r1
 80092f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092f8:	4770      	bx	lr

080092fa <__sfputs_r>:
 80092fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fc:	4606      	mov	r6, r0
 80092fe:	460f      	mov	r7, r1
 8009300:	4614      	mov	r4, r2
 8009302:	18d5      	adds	r5, r2, r3
 8009304:	42ac      	cmp	r4, r5
 8009306:	d101      	bne.n	800930c <__sfputs_r+0x12>
 8009308:	2000      	movs	r0, #0
 800930a:	e007      	b.n	800931c <__sfputs_r+0x22>
 800930c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009310:	463a      	mov	r2, r7
 8009312:	4630      	mov	r0, r6
 8009314:	f7ff ffda 	bl	80092cc <__sfputc_r>
 8009318:	1c43      	adds	r3, r0, #1
 800931a:	d1f3      	bne.n	8009304 <__sfputs_r+0xa>
 800931c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009320 <_vfiprintf_r>:
 8009320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009324:	460d      	mov	r5, r1
 8009326:	b09d      	sub	sp, #116	@ 0x74
 8009328:	4614      	mov	r4, r2
 800932a:	4698      	mov	r8, r3
 800932c:	4606      	mov	r6, r0
 800932e:	b118      	cbz	r0, 8009338 <_vfiprintf_r+0x18>
 8009330:	6a03      	ldr	r3, [r0, #32]
 8009332:	b90b      	cbnz	r3, 8009338 <_vfiprintf_r+0x18>
 8009334:	f7fe fafa 	bl	800792c <__sinit>
 8009338:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800933a:	07d9      	lsls	r1, r3, #31
 800933c:	d405      	bmi.n	800934a <_vfiprintf_r+0x2a>
 800933e:	89ab      	ldrh	r3, [r5, #12]
 8009340:	059a      	lsls	r2, r3, #22
 8009342:	d402      	bmi.n	800934a <_vfiprintf_r+0x2a>
 8009344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009346:	f7fe fcec 	bl	8007d22 <__retarget_lock_acquire_recursive>
 800934a:	89ab      	ldrh	r3, [r5, #12]
 800934c:	071b      	lsls	r3, r3, #28
 800934e:	d501      	bpl.n	8009354 <_vfiprintf_r+0x34>
 8009350:	692b      	ldr	r3, [r5, #16]
 8009352:	b99b      	cbnz	r3, 800937c <_vfiprintf_r+0x5c>
 8009354:	4629      	mov	r1, r5
 8009356:	4630      	mov	r0, r6
 8009358:	f7fe fc10 	bl	8007b7c <__swsetup_r>
 800935c:	b170      	cbz	r0, 800937c <_vfiprintf_r+0x5c>
 800935e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009360:	07dc      	lsls	r4, r3, #31
 8009362:	d504      	bpl.n	800936e <_vfiprintf_r+0x4e>
 8009364:	f04f 30ff 	mov.w	r0, #4294967295
 8009368:	b01d      	add	sp, #116	@ 0x74
 800936a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936e:	89ab      	ldrh	r3, [r5, #12]
 8009370:	0598      	lsls	r0, r3, #22
 8009372:	d4f7      	bmi.n	8009364 <_vfiprintf_r+0x44>
 8009374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009376:	f7fe fcd5 	bl	8007d24 <__retarget_lock_release_recursive>
 800937a:	e7f3      	b.n	8009364 <_vfiprintf_r+0x44>
 800937c:	2300      	movs	r3, #0
 800937e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009380:	2320      	movs	r3, #32
 8009382:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009386:	f8cd 800c 	str.w	r8, [sp, #12]
 800938a:	2330      	movs	r3, #48	@ 0x30
 800938c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800953c <_vfiprintf_r+0x21c>
 8009390:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009394:	f04f 0901 	mov.w	r9, #1
 8009398:	4623      	mov	r3, r4
 800939a:	469a      	mov	sl, r3
 800939c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093a0:	b10a      	cbz	r2, 80093a6 <_vfiprintf_r+0x86>
 80093a2:	2a25      	cmp	r2, #37	@ 0x25
 80093a4:	d1f9      	bne.n	800939a <_vfiprintf_r+0x7a>
 80093a6:	ebba 0b04 	subs.w	fp, sl, r4
 80093aa:	d00b      	beq.n	80093c4 <_vfiprintf_r+0xa4>
 80093ac:	465b      	mov	r3, fp
 80093ae:	4622      	mov	r2, r4
 80093b0:	4629      	mov	r1, r5
 80093b2:	4630      	mov	r0, r6
 80093b4:	f7ff ffa1 	bl	80092fa <__sfputs_r>
 80093b8:	3001      	adds	r0, #1
 80093ba:	f000 80a7 	beq.w	800950c <_vfiprintf_r+0x1ec>
 80093be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093c0:	445a      	add	r2, fp
 80093c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80093c4:	f89a 3000 	ldrb.w	r3, [sl]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 809f 	beq.w	800950c <_vfiprintf_r+0x1ec>
 80093ce:	2300      	movs	r3, #0
 80093d0:	f04f 32ff 	mov.w	r2, #4294967295
 80093d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093d8:	f10a 0a01 	add.w	sl, sl, #1
 80093dc:	9304      	str	r3, [sp, #16]
 80093de:	9307      	str	r3, [sp, #28]
 80093e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80093e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80093e6:	4654      	mov	r4, sl
 80093e8:	2205      	movs	r2, #5
 80093ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ee:	4853      	ldr	r0, [pc, #332]	@ (800953c <_vfiprintf_r+0x21c>)
 80093f0:	f7f6 fec6 	bl	8000180 <memchr>
 80093f4:	9a04      	ldr	r2, [sp, #16]
 80093f6:	b9d8      	cbnz	r0, 8009430 <_vfiprintf_r+0x110>
 80093f8:	06d1      	lsls	r1, r2, #27
 80093fa:	bf44      	itt	mi
 80093fc:	2320      	movmi	r3, #32
 80093fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009402:	0713      	lsls	r3, r2, #28
 8009404:	bf44      	itt	mi
 8009406:	232b      	movmi	r3, #43	@ 0x2b
 8009408:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800940c:	f89a 3000 	ldrb.w	r3, [sl]
 8009410:	2b2a      	cmp	r3, #42	@ 0x2a
 8009412:	d015      	beq.n	8009440 <_vfiprintf_r+0x120>
 8009414:	9a07      	ldr	r2, [sp, #28]
 8009416:	4654      	mov	r4, sl
 8009418:	2000      	movs	r0, #0
 800941a:	f04f 0c0a 	mov.w	ip, #10
 800941e:	4621      	mov	r1, r4
 8009420:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009424:	3b30      	subs	r3, #48	@ 0x30
 8009426:	2b09      	cmp	r3, #9
 8009428:	d94b      	bls.n	80094c2 <_vfiprintf_r+0x1a2>
 800942a:	b1b0      	cbz	r0, 800945a <_vfiprintf_r+0x13a>
 800942c:	9207      	str	r2, [sp, #28]
 800942e:	e014      	b.n	800945a <_vfiprintf_r+0x13a>
 8009430:	eba0 0308 	sub.w	r3, r0, r8
 8009434:	fa09 f303 	lsl.w	r3, r9, r3
 8009438:	4313      	orrs	r3, r2
 800943a:	9304      	str	r3, [sp, #16]
 800943c:	46a2      	mov	sl, r4
 800943e:	e7d2      	b.n	80093e6 <_vfiprintf_r+0xc6>
 8009440:	9b03      	ldr	r3, [sp, #12]
 8009442:	1d19      	adds	r1, r3, #4
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	9103      	str	r1, [sp, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	bfbb      	ittet	lt
 800944c:	425b      	neglt	r3, r3
 800944e:	f042 0202 	orrlt.w	r2, r2, #2
 8009452:	9307      	strge	r3, [sp, #28]
 8009454:	9307      	strlt	r3, [sp, #28]
 8009456:	bfb8      	it	lt
 8009458:	9204      	strlt	r2, [sp, #16]
 800945a:	7823      	ldrb	r3, [r4, #0]
 800945c:	2b2e      	cmp	r3, #46	@ 0x2e
 800945e:	d10a      	bne.n	8009476 <_vfiprintf_r+0x156>
 8009460:	7863      	ldrb	r3, [r4, #1]
 8009462:	2b2a      	cmp	r3, #42	@ 0x2a
 8009464:	d132      	bne.n	80094cc <_vfiprintf_r+0x1ac>
 8009466:	9b03      	ldr	r3, [sp, #12]
 8009468:	1d1a      	adds	r2, r3, #4
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	9203      	str	r2, [sp, #12]
 800946e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009472:	3402      	adds	r4, #2
 8009474:	9305      	str	r3, [sp, #20]
 8009476:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800954c <_vfiprintf_r+0x22c>
 800947a:	7821      	ldrb	r1, [r4, #0]
 800947c:	2203      	movs	r2, #3
 800947e:	4650      	mov	r0, sl
 8009480:	f7f6 fe7e 	bl	8000180 <memchr>
 8009484:	b138      	cbz	r0, 8009496 <_vfiprintf_r+0x176>
 8009486:	9b04      	ldr	r3, [sp, #16]
 8009488:	eba0 000a 	sub.w	r0, r0, sl
 800948c:	2240      	movs	r2, #64	@ 0x40
 800948e:	4082      	lsls	r2, r0
 8009490:	4313      	orrs	r3, r2
 8009492:	3401      	adds	r4, #1
 8009494:	9304      	str	r3, [sp, #16]
 8009496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800949a:	4829      	ldr	r0, [pc, #164]	@ (8009540 <_vfiprintf_r+0x220>)
 800949c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094a0:	2206      	movs	r2, #6
 80094a2:	f7f6 fe6d 	bl	8000180 <memchr>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	d03f      	beq.n	800952a <_vfiprintf_r+0x20a>
 80094aa:	4b26      	ldr	r3, [pc, #152]	@ (8009544 <_vfiprintf_r+0x224>)
 80094ac:	bb1b      	cbnz	r3, 80094f6 <_vfiprintf_r+0x1d6>
 80094ae:	9b03      	ldr	r3, [sp, #12]
 80094b0:	3307      	adds	r3, #7
 80094b2:	f023 0307 	bic.w	r3, r3, #7
 80094b6:	3308      	adds	r3, #8
 80094b8:	9303      	str	r3, [sp, #12]
 80094ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094bc:	443b      	add	r3, r7
 80094be:	9309      	str	r3, [sp, #36]	@ 0x24
 80094c0:	e76a      	b.n	8009398 <_vfiprintf_r+0x78>
 80094c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80094c6:	460c      	mov	r4, r1
 80094c8:	2001      	movs	r0, #1
 80094ca:	e7a8      	b.n	800941e <_vfiprintf_r+0xfe>
 80094cc:	2300      	movs	r3, #0
 80094ce:	3401      	adds	r4, #1
 80094d0:	9305      	str	r3, [sp, #20]
 80094d2:	4619      	mov	r1, r3
 80094d4:	f04f 0c0a 	mov.w	ip, #10
 80094d8:	4620      	mov	r0, r4
 80094da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094de:	3a30      	subs	r2, #48	@ 0x30
 80094e0:	2a09      	cmp	r2, #9
 80094e2:	d903      	bls.n	80094ec <_vfiprintf_r+0x1cc>
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d0c6      	beq.n	8009476 <_vfiprintf_r+0x156>
 80094e8:	9105      	str	r1, [sp, #20]
 80094ea:	e7c4      	b.n	8009476 <_vfiprintf_r+0x156>
 80094ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80094f0:	4604      	mov	r4, r0
 80094f2:	2301      	movs	r3, #1
 80094f4:	e7f0      	b.n	80094d8 <_vfiprintf_r+0x1b8>
 80094f6:	ab03      	add	r3, sp, #12
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	462a      	mov	r2, r5
 80094fc:	4b12      	ldr	r3, [pc, #72]	@ (8009548 <_vfiprintf_r+0x228>)
 80094fe:	a904      	add	r1, sp, #16
 8009500:	4630      	mov	r0, r6
 8009502:	f7fd fdd1 	bl	80070a8 <_printf_float>
 8009506:	4607      	mov	r7, r0
 8009508:	1c78      	adds	r0, r7, #1
 800950a:	d1d6      	bne.n	80094ba <_vfiprintf_r+0x19a>
 800950c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800950e:	07d9      	lsls	r1, r3, #31
 8009510:	d405      	bmi.n	800951e <_vfiprintf_r+0x1fe>
 8009512:	89ab      	ldrh	r3, [r5, #12]
 8009514:	059a      	lsls	r2, r3, #22
 8009516:	d402      	bmi.n	800951e <_vfiprintf_r+0x1fe>
 8009518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800951a:	f7fe fc03 	bl	8007d24 <__retarget_lock_release_recursive>
 800951e:	89ab      	ldrh	r3, [r5, #12]
 8009520:	065b      	lsls	r3, r3, #25
 8009522:	f53f af1f 	bmi.w	8009364 <_vfiprintf_r+0x44>
 8009526:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009528:	e71e      	b.n	8009368 <_vfiprintf_r+0x48>
 800952a:	ab03      	add	r3, sp, #12
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	462a      	mov	r2, r5
 8009530:	4b05      	ldr	r3, [pc, #20]	@ (8009548 <_vfiprintf_r+0x228>)
 8009532:	a904      	add	r1, sp, #16
 8009534:	4630      	mov	r0, r6
 8009536:	f7fe f84f 	bl	80075d8 <_printf_i>
 800953a:	e7e4      	b.n	8009506 <_vfiprintf_r+0x1e6>
 800953c:	08009c42 	.word	0x08009c42
 8009540:	08009c4c 	.word	0x08009c4c
 8009544:	080070a9 	.word	0x080070a9
 8009548:	080092fb 	.word	0x080092fb
 800954c:	08009c48 	.word	0x08009c48

08009550 <__sflush_r>:
 8009550:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009558:	0716      	lsls	r6, r2, #28
 800955a:	4605      	mov	r5, r0
 800955c:	460c      	mov	r4, r1
 800955e:	d454      	bmi.n	800960a <__sflush_r+0xba>
 8009560:	684b      	ldr	r3, [r1, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	dc02      	bgt.n	800956c <__sflush_r+0x1c>
 8009566:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009568:	2b00      	cmp	r3, #0
 800956a:	dd48      	ble.n	80095fe <__sflush_r+0xae>
 800956c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800956e:	2e00      	cmp	r6, #0
 8009570:	d045      	beq.n	80095fe <__sflush_r+0xae>
 8009572:	2300      	movs	r3, #0
 8009574:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009578:	682f      	ldr	r7, [r5, #0]
 800957a:	6a21      	ldr	r1, [r4, #32]
 800957c:	602b      	str	r3, [r5, #0]
 800957e:	d030      	beq.n	80095e2 <__sflush_r+0x92>
 8009580:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	0759      	lsls	r1, r3, #29
 8009586:	d505      	bpl.n	8009594 <__sflush_r+0x44>
 8009588:	6863      	ldr	r3, [r4, #4]
 800958a:	1ad2      	subs	r2, r2, r3
 800958c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800958e:	b10b      	cbz	r3, 8009594 <__sflush_r+0x44>
 8009590:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009592:	1ad2      	subs	r2, r2, r3
 8009594:	2300      	movs	r3, #0
 8009596:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009598:	6a21      	ldr	r1, [r4, #32]
 800959a:	4628      	mov	r0, r5
 800959c:	47b0      	blx	r6
 800959e:	1c43      	adds	r3, r0, #1
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	d106      	bne.n	80095b2 <__sflush_r+0x62>
 80095a4:	6829      	ldr	r1, [r5, #0]
 80095a6:	291d      	cmp	r1, #29
 80095a8:	d82b      	bhi.n	8009602 <__sflush_r+0xb2>
 80095aa:	4a2a      	ldr	r2, [pc, #168]	@ (8009654 <__sflush_r+0x104>)
 80095ac:	40ca      	lsrs	r2, r1
 80095ae:	07d6      	lsls	r6, r2, #31
 80095b0:	d527      	bpl.n	8009602 <__sflush_r+0xb2>
 80095b2:	2200      	movs	r2, #0
 80095b4:	6062      	str	r2, [r4, #4]
 80095b6:	04d9      	lsls	r1, r3, #19
 80095b8:	6922      	ldr	r2, [r4, #16]
 80095ba:	6022      	str	r2, [r4, #0]
 80095bc:	d504      	bpl.n	80095c8 <__sflush_r+0x78>
 80095be:	1c42      	adds	r2, r0, #1
 80095c0:	d101      	bne.n	80095c6 <__sflush_r+0x76>
 80095c2:	682b      	ldr	r3, [r5, #0]
 80095c4:	b903      	cbnz	r3, 80095c8 <__sflush_r+0x78>
 80095c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80095c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095ca:	602f      	str	r7, [r5, #0]
 80095cc:	b1b9      	cbz	r1, 80095fe <__sflush_r+0xae>
 80095ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095d2:	4299      	cmp	r1, r3
 80095d4:	d002      	beq.n	80095dc <__sflush_r+0x8c>
 80095d6:	4628      	mov	r0, r5
 80095d8:	f7ff f9fe 	bl	80089d8 <_free_r>
 80095dc:	2300      	movs	r3, #0
 80095de:	6363      	str	r3, [r4, #52]	@ 0x34
 80095e0:	e00d      	b.n	80095fe <__sflush_r+0xae>
 80095e2:	2301      	movs	r3, #1
 80095e4:	4628      	mov	r0, r5
 80095e6:	47b0      	blx	r6
 80095e8:	4602      	mov	r2, r0
 80095ea:	1c50      	adds	r0, r2, #1
 80095ec:	d1c9      	bne.n	8009582 <__sflush_r+0x32>
 80095ee:	682b      	ldr	r3, [r5, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d0c6      	beq.n	8009582 <__sflush_r+0x32>
 80095f4:	2b1d      	cmp	r3, #29
 80095f6:	d001      	beq.n	80095fc <__sflush_r+0xac>
 80095f8:	2b16      	cmp	r3, #22
 80095fa:	d11e      	bne.n	800963a <__sflush_r+0xea>
 80095fc:	602f      	str	r7, [r5, #0]
 80095fe:	2000      	movs	r0, #0
 8009600:	e022      	b.n	8009648 <__sflush_r+0xf8>
 8009602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009606:	b21b      	sxth	r3, r3
 8009608:	e01b      	b.n	8009642 <__sflush_r+0xf2>
 800960a:	690f      	ldr	r7, [r1, #16]
 800960c:	2f00      	cmp	r7, #0
 800960e:	d0f6      	beq.n	80095fe <__sflush_r+0xae>
 8009610:	0793      	lsls	r3, r2, #30
 8009612:	680e      	ldr	r6, [r1, #0]
 8009614:	bf08      	it	eq
 8009616:	694b      	ldreq	r3, [r1, #20]
 8009618:	600f      	str	r7, [r1, #0]
 800961a:	bf18      	it	ne
 800961c:	2300      	movne	r3, #0
 800961e:	eba6 0807 	sub.w	r8, r6, r7
 8009622:	608b      	str	r3, [r1, #8]
 8009624:	f1b8 0f00 	cmp.w	r8, #0
 8009628:	dde9      	ble.n	80095fe <__sflush_r+0xae>
 800962a:	6a21      	ldr	r1, [r4, #32]
 800962c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800962e:	4643      	mov	r3, r8
 8009630:	463a      	mov	r2, r7
 8009632:	4628      	mov	r0, r5
 8009634:	47b0      	blx	r6
 8009636:	2800      	cmp	r0, #0
 8009638:	dc08      	bgt.n	800964c <__sflush_r+0xfc>
 800963a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800963e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009642:	81a3      	strh	r3, [r4, #12]
 8009644:	f04f 30ff 	mov.w	r0, #4294967295
 8009648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800964c:	4407      	add	r7, r0
 800964e:	eba8 0800 	sub.w	r8, r8, r0
 8009652:	e7e7      	b.n	8009624 <__sflush_r+0xd4>
 8009654:	20400001 	.word	0x20400001

08009658 <_fflush_r>:
 8009658:	b538      	push	{r3, r4, r5, lr}
 800965a:	690b      	ldr	r3, [r1, #16]
 800965c:	4605      	mov	r5, r0
 800965e:	460c      	mov	r4, r1
 8009660:	b913      	cbnz	r3, 8009668 <_fflush_r+0x10>
 8009662:	2500      	movs	r5, #0
 8009664:	4628      	mov	r0, r5
 8009666:	bd38      	pop	{r3, r4, r5, pc}
 8009668:	b118      	cbz	r0, 8009672 <_fflush_r+0x1a>
 800966a:	6a03      	ldr	r3, [r0, #32]
 800966c:	b90b      	cbnz	r3, 8009672 <_fflush_r+0x1a>
 800966e:	f7fe f95d 	bl	800792c <__sinit>
 8009672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d0f3      	beq.n	8009662 <_fflush_r+0xa>
 800967a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800967c:	07d0      	lsls	r0, r2, #31
 800967e:	d404      	bmi.n	800968a <_fflush_r+0x32>
 8009680:	0599      	lsls	r1, r3, #22
 8009682:	d402      	bmi.n	800968a <_fflush_r+0x32>
 8009684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009686:	f7fe fb4c 	bl	8007d22 <__retarget_lock_acquire_recursive>
 800968a:	4628      	mov	r0, r5
 800968c:	4621      	mov	r1, r4
 800968e:	f7ff ff5f 	bl	8009550 <__sflush_r>
 8009692:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009694:	07da      	lsls	r2, r3, #31
 8009696:	4605      	mov	r5, r0
 8009698:	d4e4      	bmi.n	8009664 <_fflush_r+0xc>
 800969a:	89a3      	ldrh	r3, [r4, #12]
 800969c:	059b      	lsls	r3, r3, #22
 800969e:	d4e1      	bmi.n	8009664 <_fflush_r+0xc>
 80096a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096a2:	f7fe fb3f 	bl	8007d24 <__retarget_lock_release_recursive>
 80096a6:	e7dd      	b.n	8009664 <_fflush_r+0xc>

080096a8 <__swhatbuf_r>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	460c      	mov	r4, r1
 80096ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096b0:	2900      	cmp	r1, #0
 80096b2:	b096      	sub	sp, #88	@ 0x58
 80096b4:	4615      	mov	r5, r2
 80096b6:	461e      	mov	r6, r3
 80096b8:	da0d      	bge.n	80096d6 <__swhatbuf_r+0x2e>
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80096c0:	f04f 0100 	mov.w	r1, #0
 80096c4:	bf14      	ite	ne
 80096c6:	2340      	movne	r3, #64	@ 0x40
 80096c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80096cc:	2000      	movs	r0, #0
 80096ce:	6031      	str	r1, [r6, #0]
 80096d0:	602b      	str	r3, [r5, #0]
 80096d2:	b016      	add	sp, #88	@ 0x58
 80096d4:	bd70      	pop	{r4, r5, r6, pc}
 80096d6:	466a      	mov	r2, sp
 80096d8:	f000 f848 	bl	800976c <_fstat_r>
 80096dc:	2800      	cmp	r0, #0
 80096de:	dbec      	blt.n	80096ba <__swhatbuf_r+0x12>
 80096e0:	9901      	ldr	r1, [sp, #4]
 80096e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80096e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80096ea:	4259      	negs	r1, r3
 80096ec:	4159      	adcs	r1, r3
 80096ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096f2:	e7eb      	b.n	80096cc <__swhatbuf_r+0x24>

080096f4 <__smakebuf_r>:
 80096f4:	898b      	ldrh	r3, [r1, #12]
 80096f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096f8:	079d      	lsls	r5, r3, #30
 80096fa:	4606      	mov	r6, r0
 80096fc:	460c      	mov	r4, r1
 80096fe:	d507      	bpl.n	8009710 <__smakebuf_r+0x1c>
 8009700:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	6123      	str	r3, [r4, #16]
 8009708:	2301      	movs	r3, #1
 800970a:	6163      	str	r3, [r4, #20]
 800970c:	b003      	add	sp, #12
 800970e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009710:	ab01      	add	r3, sp, #4
 8009712:	466a      	mov	r2, sp
 8009714:	f7ff ffc8 	bl	80096a8 <__swhatbuf_r>
 8009718:	9f00      	ldr	r7, [sp, #0]
 800971a:	4605      	mov	r5, r0
 800971c:	4639      	mov	r1, r7
 800971e:	4630      	mov	r0, r6
 8009720:	f7ff f9ce 	bl	8008ac0 <_malloc_r>
 8009724:	b948      	cbnz	r0, 800973a <__smakebuf_r+0x46>
 8009726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800972a:	059a      	lsls	r2, r3, #22
 800972c:	d4ee      	bmi.n	800970c <__smakebuf_r+0x18>
 800972e:	f023 0303 	bic.w	r3, r3, #3
 8009732:	f043 0302 	orr.w	r3, r3, #2
 8009736:	81a3      	strh	r3, [r4, #12]
 8009738:	e7e2      	b.n	8009700 <__smakebuf_r+0xc>
 800973a:	89a3      	ldrh	r3, [r4, #12]
 800973c:	6020      	str	r0, [r4, #0]
 800973e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009742:	81a3      	strh	r3, [r4, #12]
 8009744:	9b01      	ldr	r3, [sp, #4]
 8009746:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800974a:	b15b      	cbz	r3, 8009764 <__smakebuf_r+0x70>
 800974c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009750:	4630      	mov	r0, r6
 8009752:	f000 f81d 	bl	8009790 <_isatty_r>
 8009756:	b128      	cbz	r0, 8009764 <__smakebuf_r+0x70>
 8009758:	89a3      	ldrh	r3, [r4, #12]
 800975a:	f023 0303 	bic.w	r3, r3, #3
 800975e:	f043 0301 	orr.w	r3, r3, #1
 8009762:	81a3      	strh	r3, [r4, #12]
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	431d      	orrs	r5, r3
 8009768:	81a5      	strh	r5, [r4, #12]
 800976a:	e7cf      	b.n	800970c <__smakebuf_r+0x18>

0800976c <_fstat_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	4d07      	ldr	r5, [pc, #28]	@ (800978c <_fstat_r+0x20>)
 8009770:	2300      	movs	r3, #0
 8009772:	4604      	mov	r4, r0
 8009774:	4608      	mov	r0, r1
 8009776:	4611      	mov	r1, r2
 8009778:	602b      	str	r3, [r5, #0]
 800977a:	f7f8 f92d 	bl	80019d8 <_fstat>
 800977e:	1c43      	adds	r3, r0, #1
 8009780:	d102      	bne.n	8009788 <_fstat_r+0x1c>
 8009782:	682b      	ldr	r3, [r5, #0]
 8009784:	b103      	cbz	r3, 8009788 <_fstat_r+0x1c>
 8009786:	6023      	str	r3, [r4, #0]
 8009788:	bd38      	pop	{r3, r4, r5, pc}
 800978a:	bf00      	nop
 800978c:	200005a0 	.word	0x200005a0

08009790 <_isatty_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	4d06      	ldr	r5, [pc, #24]	@ (80097ac <_isatty_r+0x1c>)
 8009794:	2300      	movs	r3, #0
 8009796:	4604      	mov	r4, r0
 8009798:	4608      	mov	r0, r1
 800979a:	602b      	str	r3, [r5, #0]
 800979c:	f7f8 f92c 	bl	80019f8 <_isatty>
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	d102      	bne.n	80097aa <_isatty_r+0x1a>
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	b103      	cbz	r3, 80097aa <_isatty_r+0x1a>
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	bd38      	pop	{r3, r4, r5, pc}
 80097ac:	200005a0 	.word	0x200005a0

080097b0 <_sbrk_r>:
 80097b0:	b538      	push	{r3, r4, r5, lr}
 80097b2:	4d06      	ldr	r5, [pc, #24]	@ (80097cc <_sbrk_r+0x1c>)
 80097b4:	2300      	movs	r3, #0
 80097b6:	4604      	mov	r4, r0
 80097b8:	4608      	mov	r0, r1
 80097ba:	602b      	str	r3, [r5, #0]
 80097bc:	f7f8 f934 	bl	8001a28 <_sbrk>
 80097c0:	1c43      	adds	r3, r0, #1
 80097c2:	d102      	bne.n	80097ca <_sbrk_r+0x1a>
 80097c4:	682b      	ldr	r3, [r5, #0]
 80097c6:	b103      	cbz	r3, 80097ca <_sbrk_r+0x1a>
 80097c8:	6023      	str	r3, [r4, #0]
 80097ca:	bd38      	pop	{r3, r4, r5, pc}
 80097cc:	200005a0 	.word	0x200005a0

080097d0 <memcpy>:
 80097d0:	440a      	add	r2, r1
 80097d2:	4291      	cmp	r1, r2
 80097d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80097d8:	d100      	bne.n	80097dc <memcpy+0xc>
 80097da:	4770      	bx	lr
 80097dc:	b510      	push	{r4, lr}
 80097de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097e6:	4291      	cmp	r1, r2
 80097e8:	d1f9      	bne.n	80097de <memcpy+0xe>
 80097ea:	bd10      	pop	{r4, pc}

080097ec <__assert_func>:
 80097ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097ee:	4614      	mov	r4, r2
 80097f0:	461a      	mov	r2, r3
 80097f2:	4b09      	ldr	r3, [pc, #36]	@ (8009818 <__assert_func+0x2c>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4605      	mov	r5, r0
 80097f8:	68d8      	ldr	r0, [r3, #12]
 80097fa:	b14c      	cbz	r4, 8009810 <__assert_func+0x24>
 80097fc:	4b07      	ldr	r3, [pc, #28]	@ (800981c <__assert_func+0x30>)
 80097fe:	9100      	str	r1, [sp, #0]
 8009800:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009804:	4906      	ldr	r1, [pc, #24]	@ (8009820 <__assert_func+0x34>)
 8009806:	462b      	mov	r3, r5
 8009808:	f000 f842 	bl	8009890 <fiprintf>
 800980c:	f000 f852 	bl	80098b4 <abort>
 8009810:	4b04      	ldr	r3, [pc, #16]	@ (8009824 <__assert_func+0x38>)
 8009812:	461c      	mov	r4, r3
 8009814:	e7f3      	b.n	80097fe <__assert_func+0x12>
 8009816:	bf00      	nop
 8009818:	2000003c 	.word	0x2000003c
 800981c:	08009c5d 	.word	0x08009c5d
 8009820:	08009c6a 	.word	0x08009c6a
 8009824:	08009c98 	.word	0x08009c98

08009828 <_calloc_r>:
 8009828:	b570      	push	{r4, r5, r6, lr}
 800982a:	fba1 5402 	umull	r5, r4, r1, r2
 800982e:	b934      	cbnz	r4, 800983e <_calloc_r+0x16>
 8009830:	4629      	mov	r1, r5
 8009832:	f7ff f945 	bl	8008ac0 <_malloc_r>
 8009836:	4606      	mov	r6, r0
 8009838:	b928      	cbnz	r0, 8009846 <_calloc_r+0x1e>
 800983a:	4630      	mov	r0, r6
 800983c:	bd70      	pop	{r4, r5, r6, pc}
 800983e:	220c      	movs	r2, #12
 8009840:	6002      	str	r2, [r0, #0]
 8009842:	2600      	movs	r6, #0
 8009844:	e7f9      	b.n	800983a <_calloc_r+0x12>
 8009846:	462a      	mov	r2, r5
 8009848:	4621      	mov	r1, r4
 800984a:	f7fe f9ed 	bl	8007c28 <memset>
 800984e:	e7f4      	b.n	800983a <_calloc_r+0x12>

08009850 <__ascii_mbtowc>:
 8009850:	b082      	sub	sp, #8
 8009852:	b901      	cbnz	r1, 8009856 <__ascii_mbtowc+0x6>
 8009854:	a901      	add	r1, sp, #4
 8009856:	b142      	cbz	r2, 800986a <__ascii_mbtowc+0x1a>
 8009858:	b14b      	cbz	r3, 800986e <__ascii_mbtowc+0x1e>
 800985a:	7813      	ldrb	r3, [r2, #0]
 800985c:	600b      	str	r3, [r1, #0]
 800985e:	7812      	ldrb	r2, [r2, #0]
 8009860:	1e10      	subs	r0, r2, #0
 8009862:	bf18      	it	ne
 8009864:	2001      	movne	r0, #1
 8009866:	b002      	add	sp, #8
 8009868:	4770      	bx	lr
 800986a:	4610      	mov	r0, r2
 800986c:	e7fb      	b.n	8009866 <__ascii_mbtowc+0x16>
 800986e:	f06f 0001 	mvn.w	r0, #1
 8009872:	e7f8      	b.n	8009866 <__ascii_mbtowc+0x16>

08009874 <__ascii_wctomb>:
 8009874:	4603      	mov	r3, r0
 8009876:	4608      	mov	r0, r1
 8009878:	b141      	cbz	r1, 800988c <__ascii_wctomb+0x18>
 800987a:	2aff      	cmp	r2, #255	@ 0xff
 800987c:	d904      	bls.n	8009888 <__ascii_wctomb+0x14>
 800987e:	228a      	movs	r2, #138	@ 0x8a
 8009880:	601a      	str	r2, [r3, #0]
 8009882:	f04f 30ff 	mov.w	r0, #4294967295
 8009886:	4770      	bx	lr
 8009888:	700a      	strb	r2, [r1, #0]
 800988a:	2001      	movs	r0, #1
 800988c:	4770      	bx	lr
	...

08009890 <fiprintf>:
 8009890:	b40e      	push	{r1, r2, r3}
 8009892:	b503      	push	{r0, r1, lr}
 8009894:	4601      	mov	r1, r0
 8009896:	ab03      	add	r3, sp, #12
 8009898:	4805      	ldr	r0, [pc, #20]	@ (80098b0 <fiprintf+0x20>)
 800989a:	f853 2b04 	ldr.w	r2, [r3], #4
 800989e:	6800      	ldr	r0, [r0, #0]
 80098a0:	9301      	str	r3, [sp, #4]
 80098a2:	f7ff fd3d 	bl	8009320 <_vfiprintf_r>
 80098a6:	b002      	add	sp, #8
 80098a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098ac:	b003      	add	sp, #12
 80098ae:	4770      	bx	lr
 80098b0:	2000003c 	.word	0x2000003c

080098b4 <abort>:
 80098b4:	b508      	push	{r3, lr}
 80098b6:	2006      	movs	r0, #6
 80098b8:	f000 f82c 	bl	8009914 <raise>
 80098bc:	2001      	movs	r0, #1
 80098be:	f7f8 f83b 	bl	8001938 <_exit>

080098c2 <_raise_r>:
 80098c2:	291f      	cmp	r1, #31
 80098c4:	b538      	push	{r3, r4, r5, lr}
 80098c6:	4605      	mov	r5, r0
 80098c8:	460c      	mov	r4, r1
 80098ca:	d904      	bls.n	80098d6 <_raise_r+0x14>
 80098cc:	2316      	movs	r3, #22
 80098ce:	6003      	str	r3, [r0, #0]
 80098d0:	f04f 30ff 	mov.w	r0, #4294967295
 80098d4:	bd38      	pop	{r3, r4, r5, pc}
 80098d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80098d8:	b112      	cbz	r2, 80098e0 <_raise_r+0x1e>
 80098da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098de:	b94b      	cbnz	r3, 80098f4 <_raise_r+0x32>
 80098e0:	4628      	mov	r0, r5
 80098e2:	f000 f831 	bl	8009948 <_getpid_r>
 80098e6:	4622      	mov	r2, r4
 80098e8:	4601      	mov	r1, r0
 80098ea:	4628      	mov	r0, r5
 80098ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098f0:	f000 b818 	b.w	8009924 <_kill_r>
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d00a      	beq.n	800990e <_raise_r+0x4c>
 80098f8:	1c59      	adds	r1, r3, #1
 80098fa:	d103      	bne.n	8009904 <_raise_r+0x42>
 80098fc:	2316      	movs	r3, #22
 80098fe:	6003      	str	r3, [r0, #0]
 8009900:	2001      	movs	r0, #1
 8009902:	e7e7      	b.n	80098d4 <_raise_r+0x12>
 8009904:	2100      	movs	r1, #0
 8009906:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800990a:	4620      	mov	r0, r4
 800990c:	4798      	blx	r3
 800990e:	2000      	movs	r0, #0
 8009910:	e7e0      	b.n	80098d4 <_raise_r+0x12>
	...

08009914 <raise>:
 8009914:	4b02      	ldr	r3, [pc, #8]	@ (8009920 <raise+0xc>)
 8009916:	4601      	mov	r1, r0
 8009918:	6818      	ldr	r0, [r3, #0]
 800991a:	f7ff bfd2 	b.w	80098c2 <_raise_r>
 800991e:	bf00      	nop
 8009920:	2000003c 	.word	0x2000003c

08009924 <_kill_r>:
 8009924:	b538      	push	{r3, r4, r5, lr}
 8009926:	4d07      	ldr	r5, [pc, #28]	@ (8009944 <_kill_r+0x20>)
 8009928:	2300      	movs	r3, #0
 800992a:	4604      	mov	r4, r0
 800992c:	4608      	mov	r0, r1
 800992e:	4611      	mov	r1, r2
 8009930:	602b      	str	r3, [r5, #0]
 8009932:	f7f7 fff1 	bl	8001918 <_kill>
 8009936:	1c43      	adds	r3, r0, #1
 8009938:	d102      	bne.n	8009940 <_kill_r+0x1c>
 800993a:	682b      	ldr	r3, [r5, #0]
 800993c:	b103      	cbz	r3, 8009940 <_kill_r+0x1c>
 800993e:	6023      	str	r3, [r4, #0]
 8009940:	bd38      	pop	{r3, r4, r5, pc}
 8009942:	bf00      	nop
 8009944:	200005a0 	.word	0x200005a0

08009948 <_getpid_r>:
 8009948:	f7f7 bfde 	b.w	8001908 <_getpid>

0800994c <_init>:
 800994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994e:	bf00      	nop
 8009950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009952:	bc08      	pop	{r3}
 8009954:	469e      	mov	lr, r3
 8009956:	4770      	bx	lr

08009958 <_fini>:
 8009958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995a:	bf00      	nop
 800995c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800995e:	bc08      	pop	{r3}
 8009960:	469e      	mov	lr, r3
 8009962:	4770      	bx	lr
